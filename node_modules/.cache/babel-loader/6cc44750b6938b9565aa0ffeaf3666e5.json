{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Container } from './container';\nimport { rotateSize } from '../../utility/base-util';\n/**\n * StackPanel module is used to arrange its children in a line\n */\n\nvar StackPanel =\n/** @class */\nfunction (_super) {\n  __extends(StackPanel, _super);\n\n  function StackPanel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Gets/Sets the orientation of the stack panel\n     */\n\n\n    _this.orientation = 'Vertical';\n    /**\n     * Not applicable for canvas\n     * to avoid the child size updation with respect to parent ser true\n     *\n     * @private\n     */\n\n    _this.measureChildren = undefined;\n    /**\n     * Sets or gets whether the padding of the element needs to be measured\n     *\n     * @private\n     */\n\n    _this.considerPadding = true;\n    return _this;\n  }\n  /**\n   * Measures the minimum space that the panel needs \\\n   *\n   * @returns { Size } Measures the minimum space that the panel needs.\\\n   * @param {Size} availableSize - provide the id value.\n   *\n   * @private\n   */\n\n\n  StackPanel.prototype.measure = function (availableSize) {\n    var updateSize = this.orientation === 'Horizontal' ? this.updateHorizontalStack : this.updateVerticalStack;\n    this.desiredSize = this.measureStackPanel(availableSize, updateSize);\n    return this.desiredSize;\n  };\n  /**\n   * Arranges the child elements of the stack panel \\\n   *\n   * @returns { Size } Arranges the child elements of the stack panel.\\\n   * @param {Size} desiredSize - provide the id value.\n   *\n   * @private\n   */\n\n\n  StackPanel.prototype.arrange = function (desiredSize) {\n    var updateSize = this.orientation === 'Horizontal' ? this.arrangeHorizontalStack : this.arrangeVerticalStack;\n    this.actualSize = this.arrangeStackPanel(desiredSize, updateSize);\n    this.updateBounds();\n    return this.actualSize;\n  };\n  /**\n   * Measures the minimum space that the panel needs \\\n   *\n   * @returns { Size } Measures the minimum space that the panel needs.\\\n   * @param {Size} availableSize - provide the id value.\n   * @param {Function} updateSize - provide the id value.\n   *\n   * @private\n   */\n\n\n  StackPanel.prototype.measureStackPanel = function (availableSize, updateSize) {\n    var desired = undefined;\n\n    if (this.children !== undefined && this.children.length > 0) {\n      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        child.parentTransform = this.rotateAngle + this.parentTransform; //Measure children\n\n        if (this.measureChildren) {\n          child.measure(child.desiredSize);\n        } else {\n          child.measure(availableSize);\n        }\n\n        var childSize = child.desiredSize.clone(); //Consider Child's margin\n\n        this.applyChildMargin(child, childSize); //Consider children's rotation\n\n        if (child.rotateAngle !== 0) {\n          childSize = rotateSize(childSize, child.rotateAngle);\n        } //Measure stack panel\n\n\n        if (desired === undefined) {\n          desired = childSize;\n        } else {\n          if (!child.preventContainer) {\n            updateSize(childSize, desired);\n          }\n        }\n      }\n    }\n\n    desired = _super.prototype.validateDesiredSize.call(this, desired, availableSize);\n    this.stretchChildren(desired); //Considering padding values\n\n    if (this.considerPadding) {\n      this.applyPadding(desired);\n    }\n\n    return desired;\n  };\n\n  StackPanel.prototype.arrangeStackPanel = function (desiredSize, updatePosition) {\n    if (this.children !== undefined && this.children.length > 0) {\n      var x = void 0;\n      var y = void 0;\n      x = this.offsetX - desiredSize.width * this.pivot.x + this.padding.left;\n      y = this.offsetY - desiredSize.height * this.pivot.y + this.padding.top;\n\n      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        var childSize = child.desiredSize.clone();\n        var rotatedSize = childSize;\n\n        if (this.orientation === 'Vertical') {\n          y += child.margin.top;\n        } else {\n          x += child.margin.left;\n        }\n\n        if (child.rotateAngle !== 0) {\n          rotatedSize = rotateSize(childSize, child.rotateAngle);\n        }\n\n        var center = updatePosition(x, y, child, this, desiredSize, rotatedSize);\n\n        _super.prototype.findChildOffsetFromCenter.call(this, child, center);\n\n        child.arrange(childSize, true);\n\n        if (this.orientation === 'Vertical') {\n          y += rotatedSize.height + child.margin.bottom;\n        } else {\n          x += rotatedSize.width + child.margin.right;\n        }\n      }\n    }\n\n    return desiredSize;\n  };\n\n  StackPanel.prototype.updateHorizontalStack = function (child, parent) {\n    parent.height = Math.max(child.height, parent.height);\n    parent.width += child.width;\n  };\n\n  StackPanel.prototype.updateVerticalStack = function (child, parent) {\n    parent.width = Math.max(child.width, parent.width);\n    parent.height += child.height;\n  };\n\n  StackPanel.prototype.arrangeHorizontalStack = function (x, y, child, parent, parenBounds, childBounds) {\n    var centerY = 0;\n\n    if (child.verticalAlignment === 'Top') {\n      centerY = y + child.margin.top + childBounds.height / 2;\n    } else if (child.verticalAlignment === 'Bottom') {\n      var parentBottom = parent.offsetY + parenBounds.height * (1 - parent.pivot.y);\n      centerY = parentBottom - parent.padding.bottom - child.margin.bottom - childBounds.height / 2;\n    } else {\n      centerY = parent.offsetY - parenBounds.height * parent.pivot.y + parenBounds.height / 2;\n\n      if (child.margin.top) {\n        centerY = y + child.margin.top + childBounds.height / 2;\n      }\n    }\n\n    return {\n      x: x + childBounds.width / 2,\n      y: centerY\n    };\n  };\n\n  StackPanel.prototype.arrangeVerticalStack = function (x, y, child, parent, parentSize, childSize) {\n    var centerX = 0;\n\n    if (child.horizontalAlignment === 'Left') {\n      centerX = x + child.margin.left + childSize.width / 2;\n    } else if (child.horizontalAlignment === 'Right') {\n      var parentRight = parent.offsetX + parentSize.width * (1 - parent.pivot.x);\n      centerX = parentRight - parent.padding.right - child.margin.right - childSize.width / 2;\n    } else {\n      centerX = parent.offsetX - parentSize.width * parent.pivot.x + parentSize.width / 2;\n\n      if (child.margin.left) {\n        centerX = x + child.margin.left + childSize.width / 2;\n      }\n    }\n\n    return {\n      x: centerX,\n      y: y + childSize.height / 2\n    };\n  };\n\n  StackPanel.prototype.stretchChildren = function (size) {\n    if (this.children !== undefined && this.children.length > 0) {\n      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        if (this.orientation === 'Vertical') {\n          if (child.horizontalAlignment === 'Stretch') {\n            child.desiredSize.width = size.width - (child.margin.left + child.margin.right);\n          }\n        } else {\n          if (child.verticalAlignment === 'Stretch') {\n            child.desiredSize.height = size.height - (child.margin.top + child.margin.bottom);\n          }\n        }\n      }\n    }\n  };\n\n  StackPanel.prototype.applyChildMargin = function (child, size) {\n    size.height += child.margin.top + child.margin.bottom;\n    size.width += child.margin.left + child.margin.right;\n  };\n\n  return StackPanel;\n}(Container);\n\nexport { StackPanel };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/stack-panel.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Container","rotateSize","StackPanel","_super","_this","apply","arguments","orientation","measureChildren","undefined","considerPadding","measure","availableSize","updateSize","updateHorizontalStack","updateVerticalStack","desiredSize","measureStackPanel","arrange","arrangeHorizontalStack","arrangeVerticalStack","actualSize","arrangeStackPanel","updateBounds","desired","children","length","_i","_a","child","parentTransform","rotateAngle","childSize","clone","applyChildMargin","preventContainer","validateDesiredSize","call","stretchChildren","applyPadding","updatePosition","x","y","offsetX","width","pivot","padding","left","offsetY","height","top","rotatedSize","margin","center","findChildOffsetFromCenter","bottom","right","parent","Math","max","parenBounds","childBounds","centerY","verticalAlignment","parentBottom","parentSize","centerX","horizontalAlignment","parentRight","size"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Container } from './container';\nimport { rotateSize } from '../../utility/base-util';\n/**\n * StackPanel module is used to arrange its children in a line\n */\nvar StackPanel = /** @class */ (function (_super) {\n    __extends(StackPanel, _super);\n    function StackPanel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Gets/Sets the orientation of the stack panel\n         */\n        _this.orientation = 'Vertical';\n        /**\n         * Not applicable for canvas\n         * to avoid the child size updation with respect to parent ser true\n         *\n         * @private\n         */\n        _this.measureChildren = undefined;\n        /**\n         * Sets or gets whether the padding of the element needs to be measured\n         *\n         * @private\n         */\n        _this.considerPadding = true;\n        return _this;\n    }\n    /**\n     * Measures the minimum space that the panel needs \\\n     *\n     * @returns { Size } Measures the minimum space that the panel needs.\\\n     * @param {Size} availableSize - provide the id value.\n     *\n     * @private\n     */\n    StackPanel.prototype.measure = function (availableSize) {\n        var updateSize = this.orientation === 'Horizontal' ? this.updateHorizontalStack : this.updateVerticalStack;\n        this.desiredSize = this.measureStackPanel(availableSize, updateSize);\n        return this.desiredSize;\n    };\n    /**\n     * Arranges the child elements of the stack panel \\\n     *\n     * @returns { Size } Arranges the child elements of the stack panel.\\\n     * @param {Size} desiredSize - provide the id value.\n     *\n     * @private\n     */\n    StackPanel.prototype.arrange = function (desiredSize) {\n        var updateSize = this.orientation === 'Horizontal' ? this.arrangeHorizontalStack : this.arrangeVerticalStack;\n        this.actualSize = this.arrangeStackPanel(desiredSize, updateSize);\n        this.updateBounds();\n        return this.actualSize;\n    };\n    /**\n     * Measures the minimum space that the panel needs \\\n     *\n     * @returns { Size } Measures the minimum space that the panel needs.\\\n     * @param {Size} availableSize - provide the id value.\n     * @param {Function} updateSize - provide the id value.\n     *\n     * @private\n     */\n    StackPanel.prototype.measureStackPanel = function (availableSize, updateSize) {\n        var desired = undefined;\n        if (this.children !== undefined && this.children.length > 0) {\n            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                child.parentTransform = this.rotateAngle + this.parentTransform;\n                //Measure children\n                if (this.measureChildren) {\n                    child.measure(child.desiredSize);\n                }\n                else {\n                    child.measure(availableSize);\n                }\n                var childSize = child.desiredSize.clone();\n                //Consider Child's margin\n                this.applyChildMargin(child, childSize);\n                //Consider children's rotation\n                if (child.rotateAngle !== 0) {\n                    childSize = rotateSize(childSize, child.rotateAngle);\n                }\n                //Measure stack panel\n                if (desired === undefined) {\n                    desired = childSize;\n                }\n                else {\n                    if (!child.preventContainer) {\n                        updateSize(childSize, desired);\n                    }\n                }\n            }\n        }\n        desired = _super.prototype.validateDesiredSize.call(this, desired, availableSize);\n        this.stretchChildren(desired);\n        //Considering padding values\n        if (this.considerPadding) {\n            this.applyPadding(desired);\n        }\n        return desired;\n    };\n    StackPanel.prototype.arrangeStackPanel = function (desiredSize, updatePosition) {\n        if (this.children !== undefined && this.children.length > 0) {\n            var x = void 0;\n            var y = void 0;\n            x = this.offsetX - desiredSize.width * this.pivot.x + this.padding.left;\n            y = this.offsetY - desiredSize.height * this.pivot.y + this.padding.top;\n            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                var childSize = child.desiredSize.clone();\n                var rotatedSize = childSize;\n                if (this.orientation === 'Vertical') {\n                    y += child.margin.top;\n                }\n                else {\n                    x += child.margin.left;\n                }\n                if (child.rotateAngle !== 0) {\n                    rotatedSize = rotateSize(childSize, child.rotateAngle);\n                }\n                var center = updatePosition(x, y, child, this, desiredSize, rotatedSize);\n                _super.prototype.findChildOffsetFromCenter.call(this, child, center);\n                child.arrange(childSize, true);\n                if (this.orientation === 'Vertical') {\n                    y += rotatedSize.height + child.margin.bottom;\n                }\n                else {\n                    x += rotatedSize.width + child.margin.right;\n                }\n            }\n        }\n        return desiredSize;\n    };\n    StackPanel.prototype.updateHorizontalStack = function (child, parent) {\n        parent.height = Math.max(child.height, parent.height);\n        parent.width += child.width;\n    };\n    StackPanel.prototype.updateVerticalStack = function (child, parent) {\n        parent.width = Math.max(child.width, parent.width);\n        parent.height += child.height;\n    };\n    StackPanel.prototype.arrangeHorizontalStack = function (x, y, child, parent, parenBounds, childBounds) {\n        var centerY = 0;\n        if (child.verticalAlignment === 'Top') {\n            centerY = y + child.margin.top + childBounds.height / 2;\n        }\n        else if (child.verticalAlignment === 'Bottom') {\n            var parentBottom = parent.offsetY + parenBounds.height * (1 - parent.pivot.y);\n            centerY = parentBottom - parent.padding.bottom - child.margin.bottom - childBounds.height / 2;\n        }\n        else {\n            centerY = parent.offsetY - parenBounds.height * parent.pivot.y + parenBounds.height / 2;\n            if (child.margin.top) {\n                centerY = y + child.margin.top + childBounds.height / 2;\n            }\n        }\n        return { x: x + childBounds.width / 2, y: centerY };\n    };\n    StackPanel.prototype.arrangeVerticalStack = function (x, y, child, parent, parentSize, childSize) {\n        var centerX = 0;\n        if (child.horizontalAlignment === 'Left') {\n            centerX = x + child.margin.left + childSize.width / 2;\n        }\n        else if (child.horizontalAlignment === 'Right') {\n            var parentRight = parent.offsetX + parentSize.width * (1 - parent.pivot.x);\n            centerX = parentRight - parent.padding.right - child.margin.right - childSize.width / 2;\n        }\n        else {\n            centerX = parent.offsetX - parentSize.width * parent.pivot.x + parentSize.width / 2;\n            if (child.margin.left) {\n                centerX = x + child.margin.left + childSize.width / 2;\n            }\n        }\n        return { x: centerX, y: y + childSize.height / 2 };\n    };\n    StackPanel.prototype.stretchChildren = function (size) {\n        if (this.children !== undefined && this.children.length > 0) {\n            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (this.orientation === 'Vertical') {\n                    if (child.horizontalAlignment === 'Stretch') {\n                        child.desiredSize.width = size.width - (child.margin.left + child.margin.right);\n                    }\n                }\n                else {\n                    if (child.verticalAlignment === 'Stretch') {\n                        child.desiredSize.height = size.height - (child.margin.top + child.margin.bottom);\n                    }\n                }\n            }\n        }\n    };\n    StackPanel.prototype.applyChildMargin = function (child, size) {\n        size.height += child.margin.top + child.margin.bottom;\n        size.width += child.margin.left + child.margin.right;\n    };\n    return StackPanel;\n}(Container));\nexport { StackPanel };\n"]},"metadata":{},"sourceType":"module"}