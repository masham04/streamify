{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable prefer-spread */\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable jsdoc/require-returns */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable jsdoc/require-param */\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable jsdoc/require-returns */\n\n\nimport { Component, Property, Complex, Collection, EventHandler, L10n, Droppable, remove, Ajax, isBlazor, blazorTemplates } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Browser, Event } from '@syncfusion/ej2-base';\nimport { updateBlazorTemplate, resetBlazorTemplate } from '@syncfusion/ej2-base';\nimport { CanvasRenderer } from './rendering/canvas-renderer';\nimport { SvgRenderer } from './rendering/svg-renderer';\nimport { DiagramRenderer } from './rendering/renderer';\nimport { PageSettings, ScrollSettings } from './diagram/page-settings';\nimport { ServiceLocator } from './objects/service';\nimport { Container } from './core/containers/container';\nimport { Node, BpmnShape } from './objects/node';\nimport { cloneBlazorObject, cloneSelectedObjects, findObjectIndex, selectionHasConnector } from './utility/diagram-util';\nimport { checkBrowserInfo } from './utility/diagram-util';\nimport { updateDefaultValues, getCollectionChangeEventArguements } from './utility/diagram-util';\nimport { flipConnector, updatePortEdges, alignElement, setConnectorDefaults, getPreviewSize } from './utility/diagram-util';\nimport { Connector } from './objects/connector';\nimport { SnapSettings } from './diagram/grid-lines';\nimport { RulerSettings } from './diagram/ruler-settings';\nimport { removeRulerElements, updateRuler, getRulerSize } from './ruler/ruler';\nimport { renderRuler, renderOverlapElement } from './ruler/ruler';\nimport { Size } from './primitives/size';\nimport { Keys, KeyModifiers, DiagramTools, AnnotationConstraints, NodeConstraints, ScrollActions } from './enum/enum';\nimport { RendererAction } from './enum/enum';\nimport { BlazorAction } from './enum/enum';\nimport { DiagramConstraints, SelectorConstraints, PortVisibility, DiagramEvent } from './enum/enum';\nimport { DiagramAction, ThumbsConstraints } from './enum/enum';\nimport { RealAction, ElementAction, PortConstraints } from './enum/enum';\nimport { PathElement } from './core/elements/path-element';\nimport { TextElement } from './core/elements/text-element';\nimport { updateStyle, removeItem, updateConnector, updateShape, setUMLActivityDefaults, findNodeByName } from './utility/diagram-util';\nimport { setSwimLaneDefaults } from './utility/diagram-util';\nimport { checkPortRestriction, serialize, deserialize, updateHyperlink, getObjectType, removeGradient, getChild } from './utility/diagram-util';\nimport { Rect } from './primitives/rect';\nimport { getPortShape } from './objects/dictionary/common';\nimport { ShapeAnnotation, PathAnnotation } from './objects/annotation';\nimport { Canvas } from './core/containers/canvas';\nimport { GridPanel, ColumnDefinition } from './core/containers/grid';\nimport { DataSource } from './diagram/data-source';\nimport { Layout } from './layout/layout-base';\nimport { Selector, Text } from './objects/node';\nimport { DiagramEventHandler } from './interaction/event-handlers';\nimport { CommandHandler } from './interaction/command-manager';\nimport { DiagramScroller } from './interaction/scroller';\nimport { isSelected } from './interaction/actions';\nimport { SpatialSearch } from './interaction/spatial-search/spatial-search';\nimport { setAttributeSvg, setAttributeHtml, measureHtmlText, removeElement, createMeasureElements, getDomIndex } from './utility/dom-util';\nimport { getDiagramElement, getScrollerWidth, getHTMLLayer, createUserHandleTemplates } from './utility/dom-util';\nimport { getBackgroundLayer, createHtmlElement, createSvgElement, getNativeLayerSvg, getUserHandleLayer } from './utility/dom-util';\nimport { getPortLayerSvg, getDiagramLayerSvg, applyStyleAgainstCsp } from './utility/dom-util';\nimport { getAdornerLayerSvg, getSelectorElement, getGridLayerSvg, getBackgroundLayerSvg } from './utility/dom-util';\nimport { CommandManager, ContextMenuSettings } from './diagram/keyboard-commands';\nimport { canDelete, canInConnect, canOutConnect, canRotate, canVitualize, canDrawThumbs } from './utility/constraints-util';\nimport { canPortInConnect, canPortOutConnect } from './utility/constraints-util';\nimport { canResize, canSingleSelect, canZoomPan, canZoomTextEdit, canMultiSelect } from './utility/constraints-util';\nimport { canDragSourceEnd, canDragTargetEnd, canDragSegmentThumb, enableReadOnly, canMove } from './utility/constraints-util';\nimport { findAnnotation, arrangeChild, getInOutConnectPorts, removeChildNodes, canMeasureDecoratorPath } from './utility/diagram-util';\nimport { randomId, cloneObject, extendObject, getFunction, getBounds } from './utility/base-util';\nimport { DiagramTooltip, initTooltip } from './objects/tooltip';\nimport { PointPort } from './objects/port';\nimport { canShadow } from './utility/constraints-util';\nimport { Layer } from './diagram/layer';\nimport { DiagramNativeElement } from './core/elements/native-element';\nimport { DiagramHtmlElement } from './core/elements/html-element';\nimport { canAllowDrop } from './utility/constraints-util';\nimport { checkParentAsContainer, addChildToContainer, updateLaneBoundsAfterAddChild } from './interaction/container-interaction';\nimport { getConnectors, updateConnectorsProperties, phaseDefine } from './utility/swim-lane-util';\nimport { swimLaneMeasureAndArrange } from './utility/swim-lane-util';\nimport { arrangeChildNodesInSwimLane, updateHeaderMaxWidth, updatePhaseMaxWidth } from './utility/swim-lane-util';\nimport { addLane, addPhase } from './utility/swim-lane-util';\nimport { SerializationSettings } from './diagram/serialization-settings';\nimport { removeSwimLane, removeLane, removePhase, removeLaneChildNode } from './utility/swim-lane-util';\nimport { RowDefinition } from './core/containers/grid';\nimport { CustomCursorAction } from './diagram/custom-cursor';\nimport { DiagramSettings } from '../diagram/diagram-settings';\nimport { StackPanel } from './core/containers/stack-panel';\nimport { ConnectorFixedUserHandle, NodeFixedUserHandle } from './objects/fixed-user-handle';\n/**\n * Represents the Diagram control\n * ```html\n * <div id='diagram'/>\n * ```\n * ```typescript\n * let diagram: Diagram = new Diagram({\n * width:'1000px', height:'500px' });\n * diagram.appendTo('#diagram');\n * ```\n */\n\nvar Diagram =\n/** @class */\nfunction (_super) {\n  __extends(Diagram, _super);\n  /**\n   * Constructor for creating the widget\n   */\n\n\n  function Diagram(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    /** @private */\n\n\n    _this.version = 17.1;\n    /** @private */\n\n    _this.checkMenu = false;\n    /** @private */\n\n    _this.isServerUpdate = false;\n    /** @private */\n\n    _this.oldNodeObjects = [];\n    /** @private */\n\n    _this.oldDiagramObject = {};\n    /** @private */\n\n    _this.oldConnectorObjects = [];\n    /** @private */\n\n    _this.canEnableBlazorObject = false;\n    /** @private */\n\n    _this.connectorTable = {};\n    /** @private */\n\n    _this.groupTable = {};\n    /** @private */\n\n    _this.scrollActions = ScrollActions.None;\n    /** @private */\n\n    _this.blazorActions = BlazorAction.Default;\n    /** @private */\n\n    _this.activeLabel = {\n      id: '',\n      parentId: '',\n      isGroup: false,\n      text: undefined\n    };\n    /** @private */\n\n    _this.textEditing = false;\n    /** @private */\n\n    _this.isTriggerEvent = false;\n    /** @private */\n\n    _this.preventNodesUpdate = false;\n    /** @private */\n\n    _this.preventConnectorsUpdate = false;\n    /** @private */\n\n    _this.callBlazorModel = true;\n    /** @private */\n\n    _this.selectionConnectorsList = [];\n    /** @private */\n\n    _this.deleteVirtualObject = false;\n    _this.canLayout = true;\n    /** @private */\n\n    _this.swimlaneChildTable = {};\n    /** @private */\n\n    _this.swimlaneZIndexTable = {};\n    _this.changedConnectorCollection = [];\n    _this.changedNodesCollection = [];\n    _this.previousNodeCollection = [];\n    _this.previousConnectorCollection = [];\n    _this.crudDeleteNodes = []; // Group update to server when BlazorAction is isGroupAction;\n\n    _this.blazorAddorRemoveCollection = [];\n    _this.blazorRemoveIndexCollection = [];\n    _this.diagramid = 88123;\n    /** @private */\n\n    _this.selectedObject = {\n      helperObject: undefined,\n      actualObject: undefined\n    };\n    _this.renderTimer = null;\n    var child;\n    var node;\n    var blazor = 'Blazor';\n    var canCloneObject = isBlazor() && window && window[blazor] && !_this.dataSourceSettings.dataSource;\n    _this.ignoreCollectionWatch = true;\n\n    for (var i = 0; options && options.nodes && i < options.nodes.length; i++) {\n      child = options.nodes[i];\n      node = _this.nodes[i];\n\n      if (child.children && child.children.length > 0) {\n        if (!child.style || !child.style.fill) {\n          node.style.fill = 'transparent';\n        }\n\n        if (!child.style || !child.style.strokeColor) {\n          node.style.strokeColor = 'transparent';\n        }\n      }\n\n      if (child.shape && child.shape.type === 'UmlActivity') {\n        setUMLActivityDefaults(child, node);\n      }\n\n      if (child.shape && child.shape.type === 'SwimLane') {\n        setSwimLaneDefaults(child, node);\n      }\n\n      if (canCloneObject) {\n        _this.previousNodeCollection.push(cloneObject(node, undefined, undefined, true));\n      }\n\n      if (_this.nodeDefaults) {\n        updateDefaultValues(node, child, _this.nodeDefaults);\n      }\n\n      _this.updateAnnotationText(node.annotations);\n    }\n\n    if (options && options.connectors) {\n      for (var i = 0; options && options.connectors && i < options.connectors.length; i++) {\n        child = options.connectors[i];\n        node = _this.connectors[i];\n\n        if (canCloneObject) {\n          _this.previousConnectorCollection.push(cloneObject(node, undefined, undefined, true));\n        }\n\n        if (_this.connectorDefaults) {\n          updateDefaultValues(node, child, _this.connectorDefaults);\n        }\n\n        _this.updateAnnotationText(node.annotations);\n      }\n    }\n\n    for (var i = 0; options && options.connectors && i < options.connectors.length; i++) {\n      var defaultConnector = options.connectors[i];\n      var connector = _this.connectors[i];\n\n      if (defaultConnector.shape && defaultConnector.shape.type !== 'None') {\n        setConnectorDefaults(defaultConnector, connector);\n      }\n\n      if (isBlazor()) {\n        var defaultPropChanges = cloneObject(_this.bulkChanges);\n\n        _this.enableServerDataBinding(true);\n\n        _this.protectPropertyChange(true);\n\n        var keys = Object.keys(defaultPropChanges);\n\n        for (var i_1 = 0; i_1 < keys.length; i_1++) {\n          var key = keys[i_1];\n          var split = key.split('-');\n\n          if (split && split[0]) {\n            if (split[0] === 'nodes') {\n              defaultPropChanges[key].sfIndex = Number(split[1]);\n\n              _this.changedNodesCollection.push(defaultPropChanges[key]);\n            }\n\n            if (split[0] === 'connectors') {\n              defaultPropChanges[key].sfIndex = Number(split[1]);\n\n              _this.changedConnectorCollection.push(defaultPropChanges[key]);\n            }\n          }\n        }\n      }\n    }\n\n    return _this;\n  }\n\n  Diagram.prototype.updateAnnotationText = function (annotations) {\n    if (isBlazor() && annotations.length > 0) {\n      for (var i = 0; annotations && i < annotations.length; i++) {\n        var label = annotations[i];\n        label.content = label.content.split('\\\\n').join('\\n');\n      }\n    }\n  };\n\n  Diagram.prototype.callFromServer = function (arg) {\n    var methodName = 'methodName';\n    var mId = 'id';\n\n    if (arg[methodName] === 'getParentID') {\n      var id = arg[mId];\n      return this.nameTable[id].parentId;\n    } else if (arg[methodName] === 'getEdges') {\n      var outEdge = 'outEdge';\n      var isOutEdge = arg[outEdge];\n      var id = arg[mId];\n\n      if (isOutEdge) {\n        return this.nameTable[id].outEdges;\n      } else {\n        return this.nameTable[id].inEdges;\n      }\n    } else if (arg[methodName] === 'updateDiagramObjects') {\n      var obj = 'obj';\n      var isAdding = 'IsAdding';\n      var args = arg[obj];\n      this.isServerUpdate = true;\n\n      if (arg[isAdding]) {\n        var add = 'add';\n        this[add].apply(this, args);\n      } else {\n        var remove_1 = 'remove';\n        this[remove_1].apply(this, args);\n      }\n\n      this.isServerUpdate = false;\n    } else if (arg[methodName] === 'invokeLoadDiagramMethod') {\n      var data = 'data';\n      this.loadDiagram(arg[data]);\n    }\n  };\n\n  Diagram.prototype.clearCollection = function (isConnector) {\n    var collection = [];\n    var obj;\n\n    for (var _i = 0, _a = Object.keys(this.nameTable); _i < _a.length; _i++) {\n      var key = _a[_i];\n      obj = this.nameTable[key];\n\n      if (obj && (isConnector && obj instanceof Connector || !isConnector && obj instanceof Node)) {\n        collection.push(obj);\n      }\n    }\n\n    this.clearObjects(collection);\n  };\n  /**\n   * Updates the diagram control when the objects are changed\n   *\n   * @param {DiagramModel} newProp - Lists the new values of the changed properties\n   * @param {DiagramModel} oldProp - Lists the old values of the changed properties\n   */\n\n  /* tslint:disable */\n\n\n  Diagram.prototype.onPropertyChanged = function (newProp, oldProp) {\n    // Model Changed\n    var newValue;\n    var oldValue;\n    var isPropertyChanged = true;\n    var refreshLayout = false;\n    var refereshColelction = false;\n\n    if (this.diagramActions & DiagramAction.Render) {\n      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n        var prop = _a[_i];\n\n        switch (prop) {\n          case 'width':\n          case 'height':\n            this.element.style.width = this.getSizeValue(this.width);\n            this.element.style.height = this.getSizeValue(this.height);\n            this.eventHandler.updateViewPortSize(this.element);\n\n            for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n              var view = _c[_b];\n              var temp = this.views[view];\n\n              if (!(temp instanceof Diagram)) {\n                temp.updateView(temp);\n              }\n            }\n\n            break;\n\n          case 'nodes':\n            if (newProp.nodes.length > 0 && oldProp.nodes.length === 0) {\n              this.clearCollection();\n              refereshColelction = true;\n            } else {\n              for (var _d = 0, _e = Object.keys(newProp.nodes); _d < _e.length; _d++) {\n                var key = _e[_d];\n                var index = Number(key);\n                var actualObject = this.nodes[index];\n                var changedProp = newProp.nodes[index];\n\n                if (newProp.nodes[index].style && newProp.nodes[index].style.gradient) {\n                  this.updateGradient(newProp.nodes[index], oldProp.nodes[index], this.nodes[index]);\n                  this.nodes[index].oldGradientValue = cloneObject(newProp.nodes[index].style.gradient);\n                }\n\n                refreshLayout = refreshLayout || changedProp.excludeFromLayout !== undefined;\n                this.nodePropertyChange(actualObject, oldProp.nodes[index], changedProp, undefined, true, true);\n                var args = {\n                  element: cloneBlazorObject(actualObject),\n                  cause: this.diagramActions,\n                  oldValue: cloneBlazorObject(oldProp.nodes[index]),\n                  newValue: cloneBlazorObject(newProp.nodes[index])\n                };\n\n                if (isBlazor()) {\n                  args.element = {\n                    node: cloneBlazorObject(actualObject)\n                  };\n                  args.oldValue = {\n                    node: cloneBlazorObject(oldValue)\n                  };\n                  args.newValue = {\n                    node: cloneBlazorObject(newValue)\n                  };\n                }\n\n                this.triggerEvent(DiagramEvent.propertyChange, args);\n\n                if (isPropertyChanged) {\n                  isPropertyChanged = false;\n                }\n              }\n\n              if (this.mode === 'Canvas') {\n                this.refreshDiagramLayer();\n              }\n            }\n\n            break;\n\n          case 'connectors':\n            // eslint-disable-next-line no-case-declarations\n            var oldObject = void 0;\n\n            if (newProp.connectors.length > 0 && oldProp.connectors.length === 0) {\n              this.clearCollection(true);\n              refereshColelction = true;\n            } else {\n              for (var _f = 0, _g = Object.keys(newProp.connectors); _f < _g.length; _f++) {\n                var key = _g[_f];\n                var index = Number(key);\n                var actualObject = this.connectors[index];\n                var changedProp = newProp.connectors[index];\n\n                if (changedProp && (changedProp.sourceDecorator || changedProp.targetDecorator)) {\n                  this.diagramActions |= DiagramAction.DecoratorPropertyChange;\n                }\n\n                this.connectorPropertyChange(actualObject, oldProp.connectors[index], changedProp, true, true);\n\n                if (changedProp && (changedProp.sourceDecorator || changedProp.targetDecorator)) {\n                  this.diagramActions = this.diagramActions & ~DiagramAction.DecoratorPropertyChange;\n                }\n\n                var args = {\n                  element: cloneBlazorObject(actualObject),\n                  cause: this.diagramActions,\n                  oldValue: cloneBlazorObject(oldProp.connectors[index]),\n                  newValue: cloneBlazorObject(newProp.connectors[index])\n                };\n\n                if (isBlazor()) {\n                  args.element = {\n                    connector: cloneBlazorObject(actualObject)\n                  };\n                  args.oldValue = {\n                    connector: cloneBlazorObject(oldValue)\n                  };\n                  args.newValue = {\n                    connector: cloneBlazorObject(newValue)\n                  };\n                }\n\n                this.triggerEvent(DiagramEvent.propertyChange, args);\n\n                if (actualObject && actualObject.parentId && this.nameTable[actualObject.parentId].shape.type === 'UmlClassifier') {\n                  this.updateConnectorEdges(this.nameTable[actualObject.parentId] || actualObject);\n                }\n\n                if (isPropertyChanged) {\n                  isPropertyChanged = false;\n                }\n              }\n\n              this.updateBridging();\n\n              if (this.mode === 'Canvas') {\n                this.refreshDiagramLayer();\n              }\n            }\n\n            break;\n\n          case 'bridgeDirection':\n            this.updateBridging();\n\n            if (this.mode === 'Canvas') {\n              this.refreshDiagramLayer();\n            }\n\n            break;\n\n          case 'backgroundColor':\n            this.intOffPageBackground();\n            break;\n\n          case 'pageSettings':\n            this.validatePageSize();\n            this.updatePage();\n            break;\n\n          case 'selectedItems':\n            if (newProp.selectedItems.userHandles && this.selectedItems.wrapper && this.selectedItems.userHandles) {\n              if (this.selectedItems.userHandles.length > 0) {\n                this.renderSelector(true);\n                break;\n              }\n            }\n\n            if (newProp.selectedItems.constraints) {\n              this.renderSelector(true);\n              break;\n            }\n\n            break;\n\n          case 'snapSettings':\n            this.updateSnapSettings(newProp);\n            break;\n\n          case 'commandManager':\n            this.initCommands();\n            break;\n\n          case 'layout':\n            refreshLayout = true;\n            break;\n\n          case 'dataSourceSettings':\n            this.clear();\n            this.initObjects();\n\n            if (this.layout.type === 'None') {\n              refereshColelction = true;\n            } else {\n              refreshLayout = true;\n            }\n\n            break;\n\n          case 'tooltip':\n            initTooltip(this);\n            break;\n\n          case 'rulerSettings':\n            this.updateRulerSettings(newProp);\n            break;\n\n          case 'layers':\n            this.updateLayer(newProp);\n            break;\n\n          case 'scrollSettings':\n            this.scrollActions |= ScrollActions.PropertyChange;\n            this.updateScrollSettings(newProp);\n            this.scrollActions &= ~ScrollActions.PropertyChange;\n            break;\n\n          case 'locale':\n            if (newProp.locale !== oldProp.locale) {\n              this.realActions |= RealAction.PreventDataInit;\n\n              _super.prototype.refresh.call(this);\n\n              this.realActions &= ~RealAction.PreventDataInit;\n            }\n\n            break;\n\n          case 'contextMenuSettings':\n            if (newProp.contextMenuSettings.showCustomMenuOnly !== undefined) {\n              this.contextMenuSettings.showCustomMenuOnly = newProp.contextMenuSettings.showCustomMenuOnly;\n            }\n\n            if (newProp.contextMenuSettings.show !== undefined) {\n              this.contextMenuSettings.show = newProp.contextMenuSettings.show;\n            }\n\n            if (newProp.contextMenuSettings.items) {\n              var items = newProp.contextMenuSettings.items;\n\n              for (var _h = 0, _j = Object.keys(items); _h < _j.length; _h++) {\n                var key = _j[_h];\n                var index = Number(key);\n                this.contextMenuSettings.items[index] = items[index];\n              }\n\n              if (this.contextMenuModule) {\n                this.contextMenuModule.refreshItems();\n              }\n            }\n\n            break;\n\n          case 'serializationSettings':\n            if (newProp.serializationSettings.preventDefaults !== undefined) {\n              this.serializationSettings.preventDefaults = newProp.serializationSettings.preventDefaults;\n            }\n\n            break;\n        }\n      }\n\n      if (refreshLayout && !refereshColelction) {\n        if (oldProp.layout && oldProp.layout.connectionPointOrigin === 'DifferentPoint' && newProp.layout.connectionPointOrigin === 'SamePoint' || oldProp.layout && newProp.layout && !newProp.layout.enableRouting && oldProp.layout.enableRouting) {\n          for (var i = 0; i < this.nodes.length; i++) {\n            var node = this.nodes[i];\n\n            if (node.ports && node.ports.length > 0) {\n              var ports = [];\n\n              for (var j = node.ports.length - 1; j >= 0; j--) {\n                if (node.ports[j].id.split('_')[1] === 'LineDistribution') {\n                  ports.push(node.ports[j]);\n                }\n              }\n\n              this.removePorts(node, ports);\n            }\n          }\n\n          for (var j = 0; j < this.connectors.length; j++) {\n            var connector = this.connectors[j];\n            var sourcePortid = connector.sourcePortID;\n            var targetPortId = connector.targetPortID; //const oldSegment: OrthogonalSegmentModel = (connector.segments as OrthogonalSegmentModel);\n\n            connector.sourcePortID = '';\n            connector.targetPortID = '';\n            connector.sourcePortWrapper = undefined;\n            connector.targetPortWrapper = undefined;\n            connector.segments = [];\n            this.connectorPropertyChange(connector, {\n              sourcePortID: sourcePortid,\n              targetPortID: targetPortId\n            }, {\n              sourcePortID: '',\n              targetPortID: ''\n            });\n          }\n        }\n\n        this.doLayout();\n        this.renderReactTemplates();\n      }\n\n      if (isPropertyChanged && this.propertyChange) {\n        var args = {\n          element: cloneBlazorObject(this),\n          cause: this.diagramActions,\n          oldValue: cloneBlazorObject(oldProp),\n          newValue: cloneBlazorObject(newProp)\n        };\n\n        if (isBlazor()) {\n          args.element = {\n            diagram: cloneBlazorObject(this)\n          };\n          args.oldValue = {\n            diagram: cloneBlazorObject(oldValue)\n          };\n          args.newValue = {\n            diagram: cloneBlazorObject(newValue)\n          };\n        }\n\n        this.triggerEvent(DiagramEvent.propertyChange, args);\n      }\n\n      if (!refereshColelction && this.canLogChange() && this.modelChanged(newProp, oldProp)) {\n        var entry = {\n          type: 'PropertyChanged',\n          undoObject: oldProp,\n          redoObject: newProp,\n          category: 'Internal'\n        };\n\n        if (this.historyManager) {\n          this.addHistoryEntry(entry);\n        }\n      }\n\n      this.resetDiagramActions();\n\n      if (refereshColelction) {\n        this.initObjects(true);\n        this.refreshDiagramLayer();\n\n        if (refreshLayout) {\n          this.doLayout();\n        }\n      }\n\n      var scrollAlone = Object.keys(newProp).length === 1 && newProp.scrollSettings !== undefined;\n\n      if (!refereshColelction) {\n        for (var _k = 0, _l = this.views; _k < _l.length; _k++) {\n          var temp = _l[_k];\n          var view = this.views[temp];\n\n          if (!(view instanceof Diagram)) {\n            if (newProp.scrollSettings && newProp.scrollSettings.currentZoom !== oldProp.scrollSettings.currentZoom) {\n              view.updateHtmlLayer(view);\n            }\n\n            if (!scrollAlone) {\n              this.refreshCanvasDiagramLayer(view);\n            }\n          }\n        }\n      }\n    }\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.updateSnapSettings = function (newProp) {\n    if (newProp.snapSettings.constraints !== undefined || newProp.snapSettings.horizontalGridlines || newProp.snapSettings.verticalGridlines || newProp.snapSettings.gridType) {\n      this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n    }\n  }; // This private method has been specially provided to update only the node old gradient value in oldProperty.\n  // This issue belong to core team but we fixed in our end.\n  // https://syncfusion.atlassian.net/browse/EJ2-49232\n\n\n  Diagram.prototype.updateGradient = function (newProp, oldProp, nodeObj) {\n    if (nodeObj.oldGradientValue) {\n      var linearNode = nodeObj;\n      var radialNode = nodeObj;\n      var linearProp = oldProp.style.gradient;\n      var radialProp = oldProp.style.gradient;\n\n      for (var _i = 0, _a = Object.keys(newProp.style.gradient); _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        switch (key) {\n          case 'type':\n            if (linearNode.type) {\n              linearProp.type = linearNode.type;\n            }\n\n            break;\n\n          case 'x1':\n            if (linearNode.x1) {\n              linearProp.x1 = linearNode.x1;\n            }\n\n            break;\n\n          case 'x2':\n            if (linearNode.x2) {\n              linearProp.x2 = linearNode.x2;\n            }\n\n            break;\n\n          case 'y1':\n            if (linearNode.y1) {\n              linearProp.y1 = linearNode.y1;\n            }\n\n            break;\n\n          case 'y2':\n            if (linearNode.y2) {\n              linearProp.y2 = linearNode.y2;\n            }\n\n            break;\n\n          case 'cx':\n            if (radialNode.cx) {\n              radialProp.cx = radialNode.cx;\n            }\n\n            break;\n\n          case 'cy':\n            if (radialNode.cy) {\n              radialProp.cy = radialNode.cy;\n            }\n\n            break;\n\n          case 'fx':\n            if (radialNode.fx) {\n              radialProp.fx = radialNode.fx;\n            }\n\n            break;\n\n          case 'fy':\n            if (radialNode.fy) {\n              radialProp.fy = radialNode.fy;\n            }\n\n            break;\n\n          case 'r':\n            if (radialNode.r) {\n              radialProp.r = radialNode.r;\n            }\n\n            break;\n\n          case 'stops':\n            if (nodeObj.oldGradientValue.stops) {\n              var stops = Object.values(cloneObject(nodeObj.oldGradientValue.stops));\n              stops.pop();\n              oldProp.style.gradient.stops = stops;\n            }\n\n            break;\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.updateRulerSettings = function (newProp) {\n    if (newProp.rulerSettings.dynamicGrid !== undefined) {\n      this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n    }\n\n    if (newProp.rulerSettings.showRulers !== undefined) {\n      this.intOffPageBackground();\n      this.scroller.setSize();\n      this.renderRulers();\n    } else if (newProp.rulerSettings.horizontalRuler !== undefined || newProp.rulerSettings.verticalRuler !== undefined) {\n      if (newProp.rulerSettings.horizontalRuler.thickness !== undefined || newProp.rulerSettings.verticalRuler.thickness !== undefined) {\n        removeRulerElements(this);\n        this.intOffPageBackground();\n        this.scroller.setSize();\n        this.renderRulers();\n      } else {\n        updateRuler(this);\n      }\n    }\n\n    this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string}\n   */\n\n\n  Diagram.prototype.getPersistData = function () {\n    var keyEntity = ['loaded'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * Initialize nodes, connectors and renderer\n   */\n\n\n  Diagram.prototype.preRender = function () {\n    this.initializePrivateVariables();\n    this.isProtectedOnChange = true;\n    this.serviceLocator = new ServiceLocator();\n    this.initializeServices();\n    this.setCulture();\n    var measureWindowElement = 'measureElement';\n\n    if (window[measureWindowElement]) {\n      window[measureWindowElement] = null;\n    }\n\n    this.initDiagram();\n    this.initViews();\n    this.unWireEvents();\n    this.wireEvents();\n    this.element.classList.add('e-diagram');\n  };\n\n  Diagram.prototype.initializePrivateVariables = function () {\n    if (this.element.id === '') {\n      var collection = document.getElementsByClassName('e-diagram').length;\n      this.element.id = 'diagram_' + this.diagramid + '_' + collection;\n    }\n\n    this.defaultLocale = {\n      Copy: 'Copy',\n      Cut: 'Cut',\n      Paste: 'Paste',\n      Undo: 'Undo',\n      Redo: 'Redo',\n      SelectAll: 'Select All',\n      Grouping: 'Grouping',\n      Group: 'Group',\n      UnGroup: 'Un Group',\n      Order: 'Order',\n      BringToFront: 'Bring To Front',\n      MoveForward: 'Move Forward',\n      SendToBack: 'Send To Back',\n      SendBackward: 'Send Backward'\n    };\n    this.layerZIndex = -1;\n    this.layerZIndexTable = {};\n    this.nameTable = {};\n    this.pathTable = {};\n    this.groupTable = {};\n    this.commands = {};\n\n    if (!this.isLoading) {\n      this.views = [];\n    }\n\n    this.commandHandler = new CommandHandler(this);\n    this.eventHandler = new DiagramEventHandler(this, this.commandHandler);\n    this.spatialSearch = new SpatialSearch(this.nameTable);\n    this.scroller = new DiagramScroller(this);\n  };\n\n  Diagram.prototype.initializeServices = function () {\n    this.serviceLocator.register('localization', this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale));\n  };\n  /**\n   * Method to set culture for chart\n   */\n\n\n  Diagram.prototype.setCulture = function () {\n    this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);\n  };\n  /* tslint:disable */\n\n  /**\n   * Renders the diagram control with nodes and connectors\n   */\n\n\n  Diagram.prototype.render = function () {\n    if (this.refreshing && this.dataSourceSettings.dataSource && !this.isLoading) {\n      this.nodes = [];\n      this.connectors = [];\n    }\n\n    this.ignoreCollectionWatch = true;\n    var domTable = 'domTable';\n    window[domTable] = {};\n    var collapsedNode = [];\n\n    if (isBlazor()) {\n      var changedNodes = [];\n      var changedConnectors = [];\n\n      for (var i = 0; i < this.changedNodesCollection.length; i++) {\n        changedNodes.push(this.commandHandler.deepDiffer.removeEmptyValues(this.changedNodesCollection[i]));\n      }\n\n      for (var i = 0; i < this.changedConnectorCollection.length; i++) {\n        changedConnectors.push(this.commandHandler.deepDiffer.removeEmptyValues(this.changedConnectorCollection[i]));\n      }\n\n      var blazorInterop = 'sfBlazor';\n      var blazor = 'Blazor';\n      var diagramObject = {\n        nodes: changedNodes,\n        connectors: changedConnectors\n      };\n\n      if (window && window[blazor] && !this.dataSourceSettings.dataSource && (changedNodes.length > 0 || changedConnectors.length > 0)) {\n        var obj = {\n          'methodName': 'UpdateBlazorProperties',\n          'diagramobj': diagramObject\n        };\n        window[blazorInterop].updateBlazorProperties(obj, this);\n      }\n    }\n\n    if (this.dataSourceSettings.crudAction.read) {\n      this.renderInitialCrud();\n    }\n\n    this.initHistory();\n    this.diagramRenderer = new DiagramRenderer(this.element.id, new SvgRenderer(), this.mode === 'SVG');\n    this.initLayers();\n    this.initializeDiagramLayers();\n    this.diagramRenderer.setLayers();\n    this.initObjects(true);\n    var isLayout = false;\n\n    if (isBlazor() && !this.dataSourceSettings.dataSource && this.layout.type !== 'None') {\n      for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n        var obj = _a[_i];\n        this.insertValue(cloneObject(obj), true);\n      }\n\n      for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n        var obj = _c[_b];\n        this.insertValue(cloneObject(obj), false);\n      }\n\n      isLayout = true;\n    }\n\n    var nodes = this.nodes;\n\n    for (var i = 0; i < nodes.length; i++) {\n      if (!nodes[i].isExpanded) {\n        collapsedNode.push(nodes[i]);\n      }\n    }\n\n    if (collapsedNode.length) {\n      for (var i = collapsedNode.length - 1; i >= 0; i--) {\n        if (i === 0) {\n          this.commandHandler.expandNode(collapsedNode[i], this, false);\n        } else {\n          this.commandHandler.expandNode(collapsedNode[i], this, true);\n        }\n      }\n    }\n\n    if (this.canLayout) {\n      this.doLayout();\n    }\n\n    if (isLayout) {\n      this.commandHandler.getBlazorOldValues();\n    }\n\n    if (this.lineRoutingModule) {\n      var previousConnectorObject = [];\n      var updateConnectorObject = [];\n      var changeConnectors = [];\n\n      if (isBlazor()) {\n        for (var _d = 0, _e = this.connectors; _d < _e.length; _d++) {\n          var obj = _e[_d];\n          previousConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n        }\n      }\n\n      this.lineRoutingModule.lineRouting(this);\n\n      if (isBlazor()) {\n        for (var _f = 0, _g = this.connectors; _f < _g.length; _f++) {\n          var obj = _g[_f];\n          updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n        }\n\n        this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n\n        if (!(this.blazorActions & BlazorAction.ClearObject)) {\n          var blazorInterop = 'sfBlazor';\n          var blazor = 'Blazor';\n          var diagramObject = {\n            nodes: [],\n            connectors: changeConnectors\n          };\n\n          if (window && window[blazor]) {\n            var obj = {\n              'methodName': 'UpdateBlazorProperties',\n              'diagramobj': diagramObject\n            };\n            window[blazorInterop].updateBlazorProperties(obj, this);\n          }\n        }\n      }\n    }\n\n    this.validatePageSize();\n    this.renderPageBreaks();\n    this.diagramRenderer.renderSvgGridlines(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n    this.commandHandler.initSelectorWrapper();\n    /**\n     * Used to render context menu\n     */\n\n    this.notify('initial-load', {});\n    /**\n     * Used to load context menu\n     */\n\n    this.trigger('load');\n    this.scroller.setSize();\n    this.scroller.updateScrollOffsets();\n    this.refreshDiagramLayer();\n\n    if (this.scrollSettings.verticalOffset > 0 || this.scrollSettings.horizontalOffset > 0) {\n      this.updateScrollOffset();\n    }\n    /**\n     * Used to end the context menu rendering\n     */\n\n\n    if (Browser.isDevice) {\n      this.tool = DiagramTools.ZoomPan | DiagramTools.SingleSelect;\n    }\n\n    this.notify('initial-end', {});\n    this.isProtectedOnChange = false;\n    this.tooltipObject = initTooltip(this);\n    this.diagramActions = DiagramAction.Render;\n    this.initCommands();\n    var hiddenUserHandleTemplate = document.getElementsByClassName(this.element.id + '_hiddenUserHandleTemplate');\n    createUserHandleTemplates(this.userHandleTemplate, hiddenUserHandleTemplate, this.selectedItems, this.element.id);\n\n    if (isBlazor() && this.layout && this.layout.type === 'None') {\n      this.updateTemplate();\n    }\n\n    this.isLoading = false;\n    this.renderComplete();\n    this.updateFitToPage();\n\n    if (this.refreshing) {\n      this.renderReactTemplates();\n    }\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.updateFitToPage = function () {\n    if (this.pageSettings && this.pageSettings.fitOptions && this.pageSettings.fitOptions.canFit) {\n      this.fitToPage(this.pageSettings.fitOptions);\n    }\n  };\n\n  Diagram.prototype.updateTemplate = function () {\n    var node;\n    var annotation;\n    var pathAnnotation;\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      node = this.nodes[i];\n\n      if (node.shape.type === 'HTML' || node.shape.type === 'Native') {\n        // CR-F170298 Template is not updated properly while render multiple diagram in same page\n        updateBlazorTemplate('diagramsf_node_template', 'NodeTemplate', this, true);\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      node = this.nodes[i];\n      annotation = node.annotations[0];\n\n      if (annotation && annotation.annotationType === 'Template') {\n        // CR-F170298 Template is not updated properly while render multiple diagram in same page\n        updateBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate', this, false);\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.connectors.length; i++) {\n      pathAnnotation = this.connectors[i].annotations[0];\n\n      if (pathAnnotation && pathAnnotation.annotationType === 'Template') {\n        // CR-F170298 Template is not updated properly while render multiple diagram in same page\n        updateBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate', this, false);\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n      if (this.selectedItems.userHandles[i].template) {\n        // CR-F170298 Template is not updated properly while render multiple diagram in same page\n        updateBlazorTemplate('diagramsf_userHandle_template', 'UserHandleTemplate', this, false);\n        break;\n      }\n    }\n  };\n\n  Diagram.prototype.resetTemplate = function () {\n    var htmlNode;\n    var templateAnnotation;\n    var path;\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      htmlNode = this.nodes[i];\n\n      if (htmlNode.shape.type === 'HTML' && htmlNode.shape.content === '') {\n        resetBlazorTemplate('diagramsf_node_template', 'NodeTemplate');\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      htmlNode = this.nodes[i];\n      templateAnnotation = htmlNode.annotations[0];\n\n      if (templateAnnotation && templateAnnotation.annotationType === 'Template' && templateAnnotation.content instanceof HTMLElement) {\n        resetBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate');\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.connectors.length; i++) {\n      path = this.connectors[i].annotations[0];\n\n      if (path && path.annotationType === 'Template' && path.content instanceof HTMLElement) {\n        resetBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate');\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n      if (this.selectedItems.userHandles[i].template) {\n        updateBlazorTemplate('diagramsf_userHandle_template', 'UserHandleTemplate', this, false);\n        break;\n      }\n    }\n  }; //Call back function to the node template\n  // private measureNode(node: NodeModel): void {\n  //     if (node.shape.type === 'Native' && isBlazor()) {\n  //         node.wrapper.measure(new Size(node.width, node.height));\n  //         node.wrapper.arrange(node.wrapper.desiredSize);\n  //     }\n  // }\n\n\n  Diagram.prototype.renderInitialCrud = function () {\n    /* eslint-disable */\n    var tempObj = this;\n    /* eslint-enable */\n\n    if (tempObj.dataSourceSettings.crudAction.read) {\n      var callback = new Ajax(tempObj.dataSourceSettings.crudAction.read, 'GET', false);\n\n      callback.onSuccess = function (data) {\n        if (tempObj.dataSourceSettings.dataManager) {\n          tempObj.dataSourceSettings.dataManager = JSON.parse(data);\n        } else {\n          tempObj.dataSourceSettings.dataSource = JSON.parse(data);\n        }\n\n        tempObj.dataBind();\n      };\n\n      callback.send().then();\n    }\n\n    if (tempObj.dataSourceSettings.connectionDataSource.crudAction.read) {\n      var callback = new Ajax(tempObj.dataSourceSettings.connectionDataSource.crudAction.read, 'GET', false);\n\n      callback.onSuccess = function (data) {\n        tempObj.dataSourceSettings.connectionDataSource.dataManager = JSON.parse(data);\n        tempObj.dataBind();\n      };\n\n      callback.send().then();\n    }\n  };\n  /**\n   * Returns the module name of the diagram\n   *\n   * @returns {string}  Returns the module name of the diagram\n   */\n\n\n  Diagram.prototype.getModuleName = function () {\n    return 'diagram';\n  };\n  /**\n   *\n   * Returns the name of class Diagram\n   * @returns {string}  Returns the module name of the diagram\n   * @private\n   */\n\n\n  Diagram.prototype.getClassName = function () {\n    return 'Diagram';\n  };\n  /* tslint:disable */\n\n  /**\n   * To provide the array of modules needed for control rendering\n   *\n   * @returns {ModuleDeclaration[]} To provide the array of modules needed for control rendering .\\\n   * @private\n   */\n\n\n  Diagram.prototype.requiredModules = function () {\n    var modules = [];\n    modules.push({\n      member: 'Bpmn',\n      args: []\n    });\n    modules.push({\n      member: 'Bridging',\n      args: []\n    });\n    modules.push({\n      member: 'ConnectorEditingTool',\n      args: []\n    });\n\n    if (isBlazor()) {\n      modules.push({\n        member: 'BlazorTooltip',\n        args: []\n      });\n    }\n\n    if (this.constraints & DiagramConstraints.UndoRedo) {\n      modules.push({\n        member: 'UndoRedo',\n        args: []\n      });\n    }\n\n    if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree' || this.layout.enableAnimation) {\n      modules.push({\n        member: 'LayoutAnimate',\n        args: []\n      });\n    }\n\n    if (this.snapSettings.constraints) {\n      modules.push({\n        member: 'Snapping',\n        args: [this]\n      });\n    }\n\n    modules.push({\n      member: 'PrintandExport',\n      args: [this]\n    });\n\n    if (this.contextMenuSettings.show) {\n      modules.push({\n        member: 'contextMenu',\n        args: [this, this.serviceLocator]\n      });\n    }\n\n    if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree') {\n      modules.push({\n        member: 'OrganizationalChart',\n        args: [this]\n      });\n    }\n\n    if (this.layout.type === 'ComplexHierarchicalTree') {\n      modules.push({\n        member: 'ComplexHierarchicalTree',\n        args: []\n      });\n    }\n\n    if (this.layout.type === 'MindMap') {\n      modules.push({\n        member: 'MindMapChart',\n        args: []\n      });\n    }\n\n    if (this.layout.type === 'RadialTree') {\n      modules.push({\n        member: 'RadialTree',\n        args: []\n      });\n    }\n\n    if (this.layout.type === 'SymmetricalLayout') {\n      modules.push({\n        member: 'SymmetricalLayout',\n        args: []\n      });\n    }\n\n    if (this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource || this.dataSourceSettings.crudAction.read || this.dataSourceSettings.connectionDataSource.crudAction.read) {\n      modules.push({\n        member: 'DataBinding',\n        args: []\n      });\n    }\n\n    if (this.constraints & DiagramConstraints.LineRouting) {\n      modules.push({\n        member: 'LineRouting',\n        args: []\n      });\n    }\n\n    if (this.layout && this.layout.connectionPointOrigin === 'DifferentPoint' || this.layout.arrangement === 'Linear' || this.layout.enableRouting) {\n      modules.push({\n        member: 'LineDistribution',\n        args: []\n      });\n    }\n\n    return modules;\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.removeUserHandlesTemplate = function () {\n    if (this.selectedItems.userHandles.length) {\n      for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n          var elementId = _a[_i];\n          removeElement(this.selectedItems.userHandles[i].name + '_template_hiddenUserHandle', elementId);\n        }\n      }\n    }\n  };\n  /**\n   *To destroy the diagram\n   *\n   * @returns {void} To destroy the diagram\n   */\n\n\n  Diagram.prototype.destroy = function () {\n    clearInterval(this.renderTimer);\n    this.renderTimer = null;\n\n    if (this.hRuler && this.vRuler) {\n      this.hRuler.destroy();\n      this.vRuler.destroy();\n    }\n\n    this.tooltipObject.destroy();\n    this.droppable.destroy();\n    this.unWireEvents();\n    this.notify('destroy', {});\n\n    _super.prototype.destroy.call(this);\n\n    this.removeUserHandlesTemplate();\n    this.clearTemplate();\n\n    if (document.getElementById(this.element.id)) {\n      this.element.classList.remove('e-diagram');\n      var tooltipelement = document.getElementsByClassName('e-diagram-tooltip');\n\n      while (tooltipelement.length > 0) {\n        tooltipelement[0].parentNode.removeChild(tooltipelement[0]);\n      }\n\n      var content = document.getElementById(this.element.id + 'content');\n\n      if (content) {\n        this.element.removeChild(content);\n      }\n\n      var measureWindowElement = 'measureElement';\n\n      if (window[measureWindowElement]) {\n        window[measureWindowElement].usageCount -= 1;\n        var measureElementCount = 'measureElementCount';\n        window[measureElementCount]--;\n\n        if (window[measureElementCount] === 0) {\n          window[measureWindowElement].parentNode.removeChild(window[measureWindowElement]);\n          window[measureWindowElement] = null;\n        }\n      }\n    }\n\n    var domTable = 'domTable';\n    window[domTable] = {};\n\n    for (var i = 0; i < this.layers.length; i++) {\n      var currentLayer = this.layers[i];\n      currentLayer.zIndexTable = {};\n    }\n\n    this.diagramActions = undefined;\n  }; //Wires the mouse events with diagram control\n\n\n  Diagram.prototype.wireEvents = function () {\n    var startEvent = Browser.touchStartEvent;\n    var stopEvent = Browser.touchEndEvent;\n    var moveEvent = Browser.touchMoveEvent;\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    var isIE11Pointer = Browser.isPointer;\n    var wheelEvent = Browser.info.name === 'mozilla' ? isIE11Pointer ? 'mousewheel' : 'DOMMouseScroll' : 'mousewheel';\n    EventHandler.add(this.diagramCanvas, startEvent, this.eventHandler.mouseDown, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, moveEvent, this.eventHandler.mouseMove, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, stopEvent, this.eventHandler.mouseUp, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, cancelEvent, this.eventHandler.mouseLeave, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, 'keydown', this.eventHandler.keyDown, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, 'keyup', this.eventHandler.keyUp, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, 'dblclick', this.eventHandler.doubleClick, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, 'scroll', this.eventHandler.scrolled, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, wheelEvent, this.eventHandler.mouseWheel, this.eventHandler);\n    EventHandler.add(window, 'resize', this.eventHandler.windowResize, this.eventHandler);\n    this.initDroppables();\n  }; //Unwires the mouse events from diagram control\n\n\n  Diagram.prototype.unWireEvents = function () {\n    var startEvent = Browser.touchStartEvent;\n    var moveEvent = Browser.touchMoveEvent;\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    var isIE11Pointer = Browser.isPointer;\n    var wheelEvent = Browser.info.name === 'mozilla' ? isIE11Pointer ? 'mousewheel' : 'DOMMouseScroll' : 'mousewheel';\n    var stopEvent = Browser.touchEndEvent;\n    EventHandler.remove(this.diagramCanvas, startEvent, this.eventHandler.mouseDown);\n    EventHandler.remove(this.diagramCanvas, moveEvent, this.eventHandler.mouseMove);\n    EventHandler.remove(this.diagramCanvas, stopEvent, this.eventHandler.mouseUp);\n    EventHandler.remove(this.diagramCanvas, cancelEvent, this.eventHandler.mouseLeave);\n    EventHandler.remove(this.diagramCanvas, 'keydown', this.eventHandler.keyDown);\n    EventHandler.remove(this.diagramCanvas, 'keyup', this.eventHandler.keyUp);\n    EventHandler.remove(this.diagramCanvas, 'dblclick', this.eventHandler.doubleClick);\n    EventHandler.remove(this.diagramCanvas, 'scroll', this.eventHandler.scrolled);\n    EventHandler.remove(this.diagramCanvas, wheelEvent, this.eventHandler.mouseWheel);\n    EventHandler.remove(window, 'resize', this.eventHandler.windowResize);\n  }; //public methods - start region\n\n  /**\n   * Selects the given collection of objects \\\n   *\n   * @returns { void } Selects the given collection of objects .\\\n   * @param {NodeModel | ConnectorModel} objects - Defines the collection of nodes and connectors to be selected\n   * @param {boolean} multipleSelection -Defines whether the existing selection has to be cleared or not\n   *\n   */\n\n\n  Diagram.prototype.select = function (objects, multipleSelection) {\n    if (isBlazor()) {\n      for (var i = 0; i < objects.length; i++) {\n        objects[i] = this.nameTable[objects[i].id];\n      }\n\n      objects = this.nameTable[objects.id] || objects;\n    }\n\n    if (objects != null) {\n      this.commandHandler.selectObjects(objects, multipleSelection);\n    }\n  };\n  /**\n   *  Selects the all the objects. \\\n   *\n   * @returns { void }  Selects the all the objects. .\\\n   *\n   */\n\n\n  Diagram.prototype.selectAll = function () {\n    var selectedItems = [];\n    selectedItems = this.getObjectsOfLayer(this.activeLayer.objects);\n    this.select(selectedItems);\n  };\n  /**\n   * Removes the given object from selection list \\\n   *\n   * @returns { void } Selects the given collection of objects .\\\n   * @param {NodeModel | ConnectorModel} obj -  Removes the given object from selection list\n   *\n   */\n\n\n  Diagram.prototype.unSelect = function (obj) {\n    if (isBlazor()) {\n      this.commandHandler.oldSelectedObjects = cloneObject(this.selectedItems);\n      obj = this.nameTable[obj.id] || obj;\n    }\n\n    if (obj && isSelected(this, obj)) {\n      this.commandHandler.unSelect(obj);\n      this.commandHandler.updateBlazorSelector();\n    }\n  };\n  /**\n   * Removes all elements from the selection list\\\n   *\n   * @returns { void } Removes all elements from the selection list .\\\n   *\n   */\n\n\n  Diagram.prototype.clearSelection = function () {\n    this.commandHandler.clearSelection(true);\n  };\n  /**\n   *  Update the diagram clipboard dimension \\\n   *\n   * @returns { void }  Update the diagram clipboard dimension .\\\n   *\n   */\n\n\n  Diagram.prototype.updateViewPort = function () {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.eventHandler.updateViewPortSize(this.element);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n\n  Diagram.prototype.cutCommand = function () {\n    this.cut();\n  };\n  /**\n   *  Removes the selected nodes and connectors from diagram and moves them to diagram clipboard \\\n   *\n   * @returns { void }  Removes the selected nodes and connectors from diagram and moves them to diagram clipboard .\\\n   *\n   */\n\n\n  Diagram.prototype.cut = function () {\n    this.commandHandler.cut();\n  };\n  /**\n   *   Add a process into the sub-process \\\n   *\n   * @returns { void }  Add a process into the sub-process.\\\n   * @param {NodeModel | ConnectorModel} process - provide the process value.\n   * @param {boolean} parentId - provide the parentId value.\n   *\n   */\n\n\n  Diagram.prototype.addProcess = function (process, parentId) {\n    if (this.bpmnModule) {\n      this.bpmnModule.addProcess(process, parentId, this);\n    }\n  };\n  /**\n   *  Remove a process from the sub-processs \\\n   *\n   * @returns { void }  Remove a process from the sub-process.\\\n   * @param {string} id - provide the id value.\n   *\n   */\n\n\n  Diagram.prototype.removeProcess = function (id) {\n    if (this.bpmnModule) {\n      this.bpmnModule.removeProcess(id, this);\n    }\n  };\n\n  Diagram.prototype.pasteCommand = function () {\n    this.paste();\n  };\n  /**\n   *  Adds the given objects/ the objects in the diagram clipboard to diagram control \\\n   *\n   * @returns { void }  Remove a process from the sub-process.\\\n   * @param {NodeModel[] | ConnectorModel[]} obj - Defines the objects to be added to diagram\n    *\n   */\n\n\n  Diagram.prototype.paste = function (obj) {\n    this.commandHandler.paste(obj);\n  };\n  /**\n   *  fit the diagram to the page with respect to mode and region \\\n   *\n   * @returns { void }  fit the diagram to the page with respect to mode and region.\\\n   * @param {IFitOptions} options - provide the options value.\n   *\n   */\n\n\n  Diagram.prototype.fitToPage = function (options) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.scroller.fitToPage(options);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n  /**\n   * bring the specified bounds into the viewport \\\n   *\n   * @returns { void }  bring the specified bounds into the viewport.\\\n   * @param {Rect} bound - provide the bound value.\n   *\n   */\n\n\n  Diagram.prototype.bringIntoView = function (bound) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.scroller.bringIntoView(bound);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n  /**\n   * bring the specified bounds to the center of the viewport \\\n   *\n   * @returns { void }  bring the specified bounds to the center of the viewport.\\\n   * @param {Rect} bound - provide the bound value.\n   *\n   */\n\n\n  Diagram.prototype.bringToCenter = function (bound) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.scroller.bringToCenter(bound);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n\n  Diagram.prototype.copyCommand = function () {\n    this.copy();\n  };\n  /**\n   * Copies the selected nodes and connectors to diagram clipboard \\\n   *\n   * @returns { Object } Copies the selected nodes and connectors to diagram clipboard.\\\n   *\n   */\n\n\n  Diagram.prototype.copy = function () {\n    var obj = this.commandHandler.copy();\n    return obj;\n  };\n  /**\n   *  Group the selected nodes and connectors in diagram \\\n   *\n   * @returns { void }   Group the selected nodes and connectors in diagram.\\\n   *\n   */\n\n\n  Diagram.prototype.group = function () {\n    var selectedItems = [];\n    selectedItems = this.selectedItems.nodes;\n    selectedItems = selectedItems.concat(this.selectedItems.connectors);\n\n    if (selectedItems.length > 1) {\n      this.callBlazorModel = false;\n      this.insertBlazorDiagramObjects(this.selectedItems);\n      this.commandHandler.group();\n      this.callBlazorModel = true;\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n  /**\n   *  UnGroup the selected nodes and connectors in diagram \\\n   *\n   * @returns { void }   UnGroup the selected nodes and connectors in diagram.\\\n   *\n   */\n\n\n  Diagram.prototype.unGroup = function () {\n    this.callBlazorModel = false;\n    this.insertBlazorDiagramObjects(this.selectedItems);\n    this.commandHandler.unGroup();\n    this.callBlazorModel = true;\n    this.commandHandler.getBlazorOldValues();\n  };\n  /**\n   *  send the selected nodes or connectors back \\\n   *\n   * @returns { void }   send the selected nodes or connectors back.\\\n   *\n   */\n\n\n  Diagram.prototype.sendToBack = function () {\n    this.commandHandler.sendToBack();\n  };\n  /**\n   * set the active layer\\\n   *\n   * @returns { void } set the active layer.\\\n   * @param {string} layerName - defines the name of the layer which is to be active layer.\n   *\n   */\n\n\n  Diagram.prototype.setActiveLayer = function (layerName) {\n    var layer = this.commandHandler.getLayer(layerName);\n    this.activeLayer = layer;\n  };\n  /**\n   * add the layer into diagram\\\n   *\n   * @returns { void } add the layer into diagram.\\\n   * @param {LayerModel} layer - defines the layer model which is to be added\n   * @param {Object[]} layerObject - defines the object of the layer\n   * @blazorArgsType layer|DiagramLayer\n    *\n   */\n\n\n  Diagram.prototype.addLayer = function (layer, layerObject) {\n    this.commandHandler.addLayer(layer, layerObject);\n  };\n  /* eslint-disable */\n\n  /**\n   *  @private\n   */\n\n\n  Diagram.prototype.addDiagramLayer = function (layer, layerObject) {\n    this.commandHandler.addLayer(layer, layerObject, false);\n  };\n  /**\n   * remove the layer from diagram \\\n   *\n   * @returns { void } remove the layer from diagram.\\\n   * @param {string} layerId - provide the bound value.\n    *\n   */\n\n\n  Diagram.prototype.removeLayer = function (layerId) {\n    this.commandHandler.removeLayer(layerId, isBlazor());\n  };\n  /**\n   *  @private\n   */\n\n\n  Diagram.prototype.removeDiagramLayer = function (layerId) {\n    this.commandHandler.removeLayer(layerId, false);\n  };\n  /* eslint-enable */\n\n  /**\n   * move objects from the layer to another layer from diagram\\\n   *\n   * @returns { void } move objects from the layer to another layer from diagram.\\\n   * @param {string[]} objects - define the objects id of string array\n   * @param {string} targetLayer - define the objects id of string array\n   *\n   */\n\n\n  Diagram.prototype.moveObjects = function (objects, targetLayer) {\n    var oldValues = cloneObject(this.layers);\n    this.enableServerDataBinding(false);\n    this.commandHandler.moveObjects(objects, targetLayer);\n    var result = this.commandHandler.deepDiffer.map(oldValues, cloneObject(this.layers));\n    var diffValue = this.commandHandler.deepDiffer.frameObject({}, result);\n    this.oldDiagramObject = {\n      layers: diffValue\n    };\n    this.commandHandler.updateBlazorProperties();\n  };\n  /* tslint:disable */\n\n\n  Diagram.prototype.layerObjectUpdate = function () {\n    if (isBlazor()) {\n      this.enableServerDataBinding(false);\n      this.oldDiagramObject['layers'] = [];\n\n      for (var i = 0; i < this.layers.length; i++) {\n        // tslint:disable-next-line:no-any\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var leyerObject = cloneObject(this.layers[i]);\n        leyerObject.sfIndex = this.layers[i].zIndex;\n        this.oldDiagramObject['layers'].push(leyerObject);\n      }\n    }\n  };\n  /* tslint:enable */\n\n  /**\n   * move the layer backward \\\n   *\n   * @returns { void } move the layer backward .\\\n   * @param {string} layerName - define the name of the layer\n   * @param {string} targetLayer - define the objects id of string array\n   *\n   */\n\n\n  Diagram.prototype.sendLayerBackward = function (layerName) {\n    this.layerObjectUpdate();\n    this.commandHandler.sendLayerBackward(layerName);\n    this.commandHandler.updateLayerObject(this.oldDiagramObject, true);\n  };\n  /**\n   * move the layer forward \\\n   *\n   * @returns { void } move the layer forward.\\\n   * @param {string} layerName - define the name of the layer\n   *\n   */\n\n\n  Diagram.prototype.bringLayerForward = function (layerName) {\n    this.layerObjectUpdate();\n    this.commandHandler.bringLayerForward(layerName);\n    this.commandHandler.updateLayerObject(this.oldDiagramObject);\n  };\n  /**\n   *clone a layer with its object \\\n   *\n   * @returns { void } move the layer forward.\\\n   * @param {string} layerName - define the name of the layer\n   *\n   */\n\n\n  Diagram.prototype.cloneLayer = function (layerName) {\n    this.commandHandler.cloneLayer(layerName);\n  };\n  /**\n   *bring the selected nodes or connectors to front \\\n   *\n   * @returns { void } move the layer forward.\\\n   *\n   */\n\n\n  Diagram.prototype.bringToFront = function () {\n    this.commandHandler.bringToFront();\n  };\n  /**\n   *send the selected nodes or connectors forward \\\n   *\n   * @returns { void } send the selected nodes or connectors forward.\\\n   *\n   */\n\n\n  Diagram.prototype.moveForward = function () {\n    this.commandHandler.sendForward();\n  };\n  /**\n   *send the selected nodes or connectors back\\\n   *\n   * @returns { void } send the selected nodes or connectors back.\\\n   *\n   */\n\n\n  Diagram.prototype.sendBackward = function () {\n    this.commandHandler.sendBackward();\n  };\n  /**\n   *gets the node or connector having the given name \\\n   *\n   * @returns { void } gets the node or connector having the given name.\\\n   * @param {string} name - define the name of the layer\n   *\n   */\n\n\n  Diagram.prototype.getObject = function (name) {\n    return this.nameTable[name];\n  };\n  /**\n   * gets the node object for the given node ID \\\n   *\n   * @returns { void } gets the node object for the given node ID.\\\n   * @param {string} id - define the name of the layer\n   *\n   */\n\n\n  Diagram.prototype.getNodeObject = function (id) {\n    return cloneObject(this.nameTable[id]);\n  };\n  /**\n   *gets the connector object for the given node ID \\\n   *\n   * @returns { void } gets the connector object for the given node ID.\\\n   * @param {string} id - define the name of the layer\n   *\n   */\n\n\n  Diagram.prototype.getConnectorObject = function (id) {\n    return cloneObject(this.nameTable[id]);\n  };\n  /**\n   * gets the active layer back \\\n   *\n   * @returns { void } gets the active layer back.\\\n   *\n   */\n\n\n  Diagram.prototype.getActiveLayer = function () {\n    return this.activeLayer;\n  };\n\n  Diagram.prototype.nudgeCommand = function (direction, x, y) {\n    if (typeof direction !== 'object' && (this.selectedItems.nodes.length || this.selectedItems.connectors.length) > 0) {\n      this.nudge(direction);\n    }\n  };\n  /**\n   * Moves the selected objects towards the given direction\n   *\n   * @returns { void }  Moves the selected objects towards the given direction .\\\n   * @param {NudgeDirection} direction -  Defines the direction by which the objects have to be moved\n   * @param {number} x - Defines the distance by which the selected objects have to be horizontally moved\n   * @param {number} y -  Defines the distance by which the selected objects have to be vertically moved\n   */\n\n\n  Diagram.prototype.nudge = function (direction, x, y) {\n    var tx = 0;\n    var ty = 0;\n    var negativeDirection;\n\n    if (direction === 'Left' || direction === 'Right') {\n      negativeDirection = direction === 'Left';\n      tx = (negativeDirection ? -1 : 1) * (x ? x : 1);\n    } else {\n      negativeDirection = direction === 'Up';\n      ty = (negativeDirection ? -1 : 1) * (y ? y : 1);\n    }\n\n    var obj = this.selectedItems;\n    var annotation = this.selectedItems.wrapper.children[0];\n\n    if (annotation instanceof TextElement) {\n      this.commandHandler.labelDrag(obj.nodes[0], annotation, tx, ty);\n    } else {\n      var undoObject = cloneObject(this.selectedItems);\n      this.protectPropertyChange(true);\n      this.drag(obj, tx, ty);\n      this.protectPropertyChange(false);\n      var entry = {\n        type: 'PositionChanged',\n        redoObject: cloneObject(this.selectedItems),\n        undoObject: undoObject,\n        category: 'Internal'\n      };\n      this.addHistoryEntry(entry);\n    }\n\n    this.refreshCanvasLayers();\n  };\n\n  Diagram.prototype.insertBlazorDiagramObjects = function (actualObject) {\n    if (isBlazor() && !(this.blazorActions & BlazorAction.interaction)) {\n      this.enableServerDataBinding(false);\n\n      if (actualObject instanceof Selector) {\n        for (var i = 0; i < actualObject.nodes.length; i++) {\n          this.insertBlazorDiagramObjects(actualObject.nodes[i]);\n        }\n\n        for (var i = 0; i < actualObject.connectors.length; i++) {\n          this.insertBlazorDiagramObjects(actualObject.connectors[i]);\n        }\n      }\n\n      if (!(actualObject instanceof Selector)) {\n        //let object: object;\n        if (actualObject && actualObject.children && actualObject.children.length > 0) {\n          for (var i = 0; i < actualObject.children.length; i++) {\n            this.insertBlazorDiagramObjects(this.nameTable[actualObject.children[i]]);\n          }\n        }\n\n        var object = cloneObject(this.nameTable[actualObject.id]);\n        this.insertValue(object, !(getObjectType(actualObject) === Connector));\n      }\n    }\n  };\n  /**\n   * Drags the given object by the specified pixels\n   *\n   * @returns { void }  Drags the given object by the specified pixels .\\\n   * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the nodes/connectors to be dragged\n   * @param {number} tx - Defines the distance by which the given objects have to be horizontally moved\n   * @param {number} ty - Defines the distance by which the given objects have to be vertically moved\n   */\n\n\n  Diagram.prototype.drag = function (obj, tx, ty) {\n    this.insertBlazorDiagramObjects(obj);\n\n    if (isBlazor() && obj.id) {\n      obj = this.nameTable[obj.id] || obj;\n    }\n\n    if (this.bpmnModule && obj instanceof Node) {\n      var updated = this.bpmnModule.updateAnnotationDrag(obj, this, tx, ty);\n\n      if (updated) {\n        return;\n      }\n    }\n\n    if (obj instanceof Selector) {\n      this.preventConnectorsUpdate = true;\n\n      if (obj.nodes && obj.nodes.length) {\n        for (var _i = 0, _a = obj.nodes; _i < _a.length; _i++) {\n          var node = _a[_i];\n          this.callBlazorModel = false;\n          this.drag(node, tx, ty);\n\n          if (node.parentId) {\n            var parent_1 = this.nameTable[node.parentId];\n\n            if (parent_1.isLane) {\n              var swimlane = this.nameTable[parent_1.parentId];\n              updateLaneBoundsAfterAddChild(parent_1, swimlane, node, this);\n            }\n          }\n        }\n\n        this.callBlazorModel = true;\n      }\n\n      if (obj.connectors && obj.connectors.length) {\n        this.callBlazorModel = false;\n\n        for (var _b = 0, _c = obj.connectors; _b < _c.length; _b++) {\n          var conn = _c[_b];\n          this.drag(conn, tx, ty);\n\n          if (this.selectionConnectorsList.indexOf(conn) === -1) {\n            this.selectionConnectorsList.push(conn);\n          }\n        }\n\n        this.callBlazorModel = true;\n      }\n\n      this.updateSelector();\n\n      if (this.diagramActions & DiagramAction.DragUsingMouse) {\n        this.updatePage();\n      }\n    } else {\n      if (obj instanceof Node) {\n        if (this.bpmnModule) {\n          this.bpmnModule.updateAnnotationDrag(obj, this, tx, ty);\n        }\n      }\n\n      this.commandHandler.drag(obj, tx, ty);\n    }\n\n    if (obj instanceof Selector) {\n      this.preventConnectorsUpdate = false;\n\n      for (var _d = 0, _e = this.selectionConnectorsList; _d < _e.length; _d++) {\n        var connectors = _e[_d];\n        this.updateConnectorProperties(this.nameTable[connectors.id]);\n\n        if (connectors.shape.type === 'Bpmn' && connectors.shape.sequence === 'Default') {\n          this.commandHandler.updatePathElementOffset(connectors);\n        }\n      }\n\n      this.selectionConnectorsList = [];\n    }\n\n    if (!(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.DragUsingMouse)) {\n      this.updateSelector();\n    }\n\n    if (this.callBlazorModel && !(this.blazorActions & BlazorAction.interaction) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n\n  Diagram.prototype.disableStackContainerPadding = function (wrapper, disable) {\n    if (wrapper instanceof StackPanel) {\n      wrapper.considerPadding = disable;\n    }\n\n    if (wrapper.children) {\n      for (var _i = 0, _a = wrapper.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        this.disableStackContainerPadding(child, false);\n      }\n    }\n  };\n  /**\n   * Scales the given objects by the given ratio\n   *\n   * @returns { void } Scales the given objects by the given ratio .\\\n   * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the objects to be resized\n   * @param {number} sx - Defines the ratio by which the objects have to be horizontally scaled\n   * @param {number} sy - Defines the ratio by which the objects have to be vertically scaled\n   * @param {PointModel} pivot - Defines the reference point with respect to which the objects will be resized\n   */\n\n\n  Diagram.prototype.scale = function (obj, sx, sy, pivot) {\n    this.disableStackContainerPadding(obj.wrapper, false);\n    this.insertBlazorDiagramObjects(obj);\n    var checkBoundaryConstraints = true;\n\n    if (obj.id) {\n      obj = this.nameTable[obj.id] || obj;\n    }\n\n    if (obj instanceof Selector) {\n      if (obj.nodes && obj.nodes.length) {\n        this.callBlazorModel = false;\n\n        for (var _i = 0, _a = obj.nodes; _i < _a.length; _i++) {\n          var node = _a[_i];\n          checkBoundaryConstraints = this.commandHandler.scale(node, sx, sy, pivot, obj);\n\n          if (!this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds)) {\n            this.commandHandler.scale(node, 1 / sx, 1 / sy, pivot, obj);\n          }\n        }\n\n        this.callBlazorModel = true;\n      }\n\n      if (obj.connectors && obj.connectors.length) {\n        this.callBlazorModel = false;\n\n        for (var _b = 0, _c = obj.connectors; _b < _c.length; _b++) {\n          var conn = _c[_b];\n          this.commandHandler.scale(conn, sx, sy, pivot, obj);\n\n          if (!this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds)) {\n            this.commandHandler.scale(conn, 1 / sx, 1 / sy, pivot, obj);\n          }\n        }\n\n        this.callBlazorModel = true;\n      }\n\n      var selector = this.selectedItems;\n\n      if (!selectionHasConnector(this, selector)) {\n        this.updateSelector();\n      }\n\n      this.refreshCanvasLayers();\n    } else {\n      this.commandHandler.scale(obj, sx, sy, pivot, obj.children ? obj : undefined);\n    }\n\n    if (this.callBlazorModel && !(this.blazorActions & BlazorAction.interaction) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n      this.commandHandler.getBlazorOldValues();\n    }\n\n    this.disableStackContainerPadding(obj.wrapper, true);\n    return checkBoundaryConstraints;\n  };\n  /**\n   * Rotates the given nodes/connectors by the given angle\n   *\n   * @returns { void } Rotates the given nodes/connectors by the given angle .\\\n   * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the objects to be rotated\n   * @param {number} angle - Defines the angle by which the objects have to be rotated\n   * @param {PointModel} pivot - Defines the reference point with reference to which the objects have to be rotated\n   */\n\n\n  Diagram.prototype.rotate = function (obj, angle, pivot) {\n    this.insertBlazorDiagramObjects(obj);\n    var checkBoundaryConstraints;\n\n    if (obj.id) {\n      obj = this.nameTable[obj.id] || obj;\n    }\n\n    if (obj) {\n      pivot = pivot || {\n        x: obj.wrapper.offsetX,\n        y: obj.wrapper.offsetY\n      };\n\n      if (obj instanceof Selector) {\n        this.callBlazorModel = false;\n        obj.rotateAngle += angle;\n        obj.wrapper.rotateAngle += angle;\n        var bounds = getBounds(obj.wrapper);\n        checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, bounds);\n\n        if (!checkBoundaryConstraints) {\n          obj.rotateAngle -= angle;\n          obj.wrapper.rotateAngle -= angle;\n          return checkBoundaryConstraints;\n        }\n\n        var objects = [];\n        objects = objects.concat(obj.nodes);\n        objects = objects.concat(obj.connectors);\n        this.commandHandler.rotateObjects(obj, objects, angle, pivot);\n        this.callBlazorModel = true;\n      } else {\n        this.commandHandler.rotateObjects(obj, [obj], angle, pivot);\n      }\n    }\n\n    if (this.callBlazorModel && !(this.blazorActions & BlazorAction.interaction)) {\n      this.commandHandler.getBlazorOldValues();\n    }\n\n    return checkBoundaryConstraints;\n  };\n  /**\n   * Moves the source point of the given connector\n   *\n   * @returns { void }  Moves the source point of the given connector .\\\n   * @param {ConnectorModel} obj - Defines the connector, the end points of which has to be moved\n   * @param {number} tx - Defines the distance by which the end point has to be horizontally moved\n   * @param {number} ty - Defines the distance by which the end point has to be vertically moved\n   */\n\n\n  Diagram.prototype.dragSourceEnd = function (obj, tx, ty) {\n    this.insertBlazorDiagramObjects(obj);\n    this.commandHandler.dragSourceEnd(obj, tx, ty);\n\n    if (this.callBlazorModel) {\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n  /**\n   * Moves the target point of the given connector\n   *\n   * @returns { void }   Moves the target point of the given connector.\\\n   * @param {ConnectorModel} obj - Defines the connector, the end points of which has to be moved\n   * @param {number} tx - Defines the distance by which the end point has to be horizontally moved\n   * @param {number} ty - Defines the distance by which the end point has to be vertically moved\n   */\n\n\n  Diagram.prototype.dragTargetEnd = function (obj, tx, ty) {\n    this.insertBlazorDiagramObjects(obj);\n    this.commandHandler.dragTargetEnd(obj, tx, ty);\n\n    if (this.callBlazorModel) {\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n  /**\n   * Finds all the objects that is under the given mouse position\n   *\n   * @returns { void }   Finds all the objects that is under the given mouse position.\\\n   * @param {PointModel} position - Defines the position, the objects under which has to be found\n   * @param {IElement} source - Defines the object, the objects under which has to be found\n   */\n\n\n  Diagram.prototype.findObjectsUnderMouse = function (position, source) {\n    return this.eventHandler.findObjectsUnderMouse(position, source);\n  };\n  /**\n   * Finds the object that is under the given mouse position\n   *\n   * @returns { void }   Finds the object that is under the given mouse position.\\\n   * @param {NodeModel[] | ConnectorModel[]}objects - Defines the collection of objects, from which the object has to be found.\n   * @param {Actions} action - Defines the action, using which the relevant object has to be found.\n   * @param {boolean} inAction - Defines the active state of the action.\n   */\n\n\n  Diagram.prototype.findObjectUnderMouse = function (objects, action, inAction) {\n    return this.eventHandler.findObjectUnderMouse(objects, action, inAction);\n  };\n  /**\n   * Finds the object that is under the given active object (Source)\n   *\n   * @returns { void } Finds the object that is under the given active object (Source) .\\\n   * @param {NodeModel[] | ConnectorModel[]} objects - Defines the collection of objects, from which the object has to be found.\n   * @param {Actions} action - Defines the action, using which the relevant object has to be found.\n   * @param {boolean} inAction - Defines the active state of the action.\n   * @param {PointModel} position - Defines the position.\n   * @param {IElement} source - Defines the source.\n   */\n\n\n  Diagram.prototype.findTargetObjectUnderMouse = function (objects, action, inAction, position, source) {\n    return this.eventHandler.findTargetUnderMouse(objects, action, inAction, position, source);\n  };\n  /**\n   * Finds the child element of the given object at the given position\n   *\n   * @returns { void } Finds the child element of the given object at the given position .\\\n   * @param {IElement} obj - Defines the object, the child element of which has to be found\n   * @param {PointModel} position - Defines the position, the child element under which has to be found\n   * @param {number} padding - Defines the padding, the child element under which has to be found\n   */\n\n\n  Diagram.prototype.findElementUnderMouse = function (obj, position, padding) {\n    return this.eventHandler.findElementUnderMouse(obj, position, padding);\n  };\n  /**\n   * Defines the action to be done, when the mouse hovers the given element of the given object\n   *\n   * @returns { void } Defines the action to be done, when the mouse hovers the given element of the given object .\\\n   * @param {NodeModel | ConnectorModel} obj - Defines the object under mouse\n   * @param {DiagramElement} wrapper - Defines the target element of the object under mouse\n   * @param {PointModel} position - Defines the current mouse position\n   * @param { NodeModel | PointPortModel | ShapeAnnotationModel | PathAnnotationModel} target - Defines the target\n   * @private\n   */\n\n\n  Diagram.prototype.findActionToBeDone = function (obj, wrapper, position, target) {\n    return this.eventHandler.findActionToBeDone(obj, wrapper, position, target);\n  };\n  /**\n   * Returns the tool that handles the given action\n   *\n   * @returns { ToolBase } Returns the tool that handles the given action \\\n   * @param {string} action - Defines the action that is going to be performed\n   */\n\n\n  Diagram.prototype.getTool = function (action) {\n    var tool;\n    var getCustomTool = getFunction(this.getCustomTool);\n\n    if (getCustomTool) {\n      tool = getCustomTool(action);\n\n      if (tool) {\n        return tool;\n      }\n    }\n\n    return this.eventHandler.getTool(action);\n  };\n  /**\n   * Defines the cursor that corresponds to the given action\n   *\n   * @returns { string } Defines the cursor that corresponds to the given action \\\n   * @param {string} action - Defines the action that is going to be performed\n   * @param {boolean} active - Defines the active\n   */\n\n\n  Diagram.prototype.getCursor = function (action, active) {\n    var cursor;\n    var getCustomCursor = getFunction(this.getCustomCursor);\n\n    if (getCustomCursor) {\n      cursor = getCustomCursor(action, active);\n\n      if (cursor) {\n        return cursor;\n      }\n    }\n\n    if (this.customCursor.length) {\n      for (var i = 0; i < this.customCursor.length; i++) {\n        if (this.customCursor[i].action === action) {\n          return this.customCursor[i].cursor;\n        }\n      }\n    }\n\n    return this.eventHandler.getCursor(action);\n  };\n  /**\n   * Initializes the undo redo actions\n   *\n   * @returns { void } Initializes the undo redo actions \\\n   * @private\n   */\n\n\n  Diagram.prototype.initHistory = function () {\n    if (this.undoRedoModule) {\n      this.undoRedoModule.initHistory(this);\n    }\n  };\n  /**\n   * Adds the given change in the diagram control to the track\n   *\n   * @returns { void } Adds the given change in the diagram control to the track \\\n   * @param {HistoryEntry} entry - Defines the entry/information about a change in diagram\n   */\n\n\n  Diagram.prototype.addHistoryEntry = function (entry) {\n    if (this.undoRedoModule && this.constraints & DiagramConstraints.UndoRedo && (!this.currentSymbol || this.checkCurrentSymbol(this.currentSymbol, entry))) {\n      if (entry.undoObject && entry.undoObject.id === 'helper') {\n        return;\n      }\n\n      this.undoRedoModule.addHistoryEntry(entry, this);\n\n      if (entry.type !== 'StartGroup' && entry.type !== 'EndGroup') {\n        this.historyChangeTrigger(entry, 'CustomAction');\n      }\n    }\n  };\n\n  Diagram.prototype.checkCurrentSymbol = function (currentSymbol, entry) {\n    var check = false;\n\n    if (entry.undoObject && entry.redoObject) {\n      var undoObjects = entry.undoObject;\n      var redoObject = entry.undoObject;\n\n      if (redoObject.id && undoObjects.id && redoObject.id !== currentSymbol.id && undoObjects.id !== currentSymbol.id) {\n        return check = true;\n      } else {\n        return check;\n      }\n    }\n\n    return check;\n  };\n  /**\n   * Adds the given custom change in the diagram control to the track\n   *\n   * @returns { void } Adds the given custom change in the diagram control to the track \\\n   * @param {HistoryEntry} entry - Defines the entry/information about a change in diagram\n   */\n\n\n  Diagram.prototype.addCustomHistoryEntry = function (entry) {\n    if (isBlazor() && this.undoRedoModule && this.constraints & DiagramConstraints.UndoRedo) {\n      entry.type = undefined;\n      entry.category = 'External';\n      this.undoRedoModule.addHistoryEntry(entry, this);\n    }\n  };\n  /* eslint-disable */\n\n  /** @private */\n\n\n  Diagram.prototype.historyChangeTrigger = function (entry, action) {\n    var change = {};\n    /* eslint-enable */\n\n    var oldValue = 'oldValue';\n    var newValue = 'newValue';\n    var type = 'type';\n    var entryType = 'entryType';\n    var source = [];\n\n    if (entry.category === 'Internal') {\n      if (entry && entry.redoObject && entry.redoObject.nodes instanceof Array && entry.redoObject.connectors instanceof Array) {\n        source = entry.redoObject.nodes.concat(entry.redoObject.connectors);\n      } else {\n        if (entry.redoObject) {\n          source.push(entry.redoObject);\n        }\n      }\n\n      change[type] = entry.type;\n\n      if (isBlazor()) {\n        change[entryType] = entry.type;\n      }\n\n      switch (entry.type) {\n        case 'PositionChanged':\n          change[oldValue] = {\n            offsetX: entry.undoObject.offsetX,\n            offsetY: entry.undoObject.offsetY\n          };\n          change[newValue] = {\n            offsetX: entry.redoObject.offsetX,\n            offsetY: entry.redoObject.offsetY\n          };\n          break;\n\n        case 'RotationChanged':\n          change[oldValue] = {\n            rotateAngle: entry.undoObject.rotateAngle\n          };\n          change[newValue] = {\n            rotateAngle: entry.redoObject.rotateAngle\n          };\n          break;\n\n        case 'SizeChanged':\n          change[oldValue] = {\n            offsetX: entry.undoObject.offsetX,\n            offsetY: entry.undoObject.offsetY,\n            width: entry.undoObject.width,\n            height: entry.undoObject.height\n          };\n          change[newValue] = {\n            offsetX: entry.redoObject.offsetX,\n            offsetY: entry.redoObject.offsetY,\n            width: entry.redoObject.width,\n            height: entry.redoObject.height\n          };\n          break;\n\n        case 'CollectionChanged':\n          change[entry.changeType] = source;\n          break;\n\n        case 'ConnectionChanged':\n          change[oldValue] = {\n            offsetX: entry.undoObject.offsetX,\n            offsetY: entry.undoObject.offsetY\n          };\n          change[newValue] = {\n            offsetX: entry.redoObject.offsetX,\n            offsetY: entry.redoObject.offsetY\n          };\n          break;\n      }\n\n      var arg = void 0;\n      arg = {\n        cause: entry.category,\n        source: cloneBlazorObject(source),\n        change: cloneBlazorObject(change),\n        action: action\n      };\n\n      if (isBlazor()) {\n        arg = {\n          cause: entry.category,\n          change: cloneBlazorObject(change),\n          source: {\n            connectors: undefined,\n            nodes: undefined\n          },\n          action: action\n        };\n        var sourceValue = arg.source;\n        sourceValue.connectors = [];\n        sourceValue.nodes = [];\n        var object = void 0;\n\n        for (var i = 0; i < source.length; i++) {\n          object = cloneBlazorObject(source[i]); // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n          getObjectType(source[i]) === Connector ? // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n          sourceValue.connectors.push(object) : sourceValue.nodes.push(object);\n        }\n\n        arg.source = sourceValue;\n      }\n\n      if (source.length) {\n        this.triggerEvent(DiagramEvent.historyChange, arg);\n      }\n    }\n  };\n  /**\n   * Starts grouping the actions that will be undone/restored as a whole\n   *\n   * @returns { void } Starts grouping the actions that will be undone/restored as a whole\\\n   */\n\n\n  Diagram.prototype.startGroupAction = function () {\n    var entry = {\n      type: 'StartGroup',\n      category: 'Internal'\n    };\n\n    if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n      this.addHistoryEntry(entry);\n    }\n  };\n  /**\n   * Closes grouping the actions that will be undone/restored as a whole\n   *\n   * @returns { void } Closes grouping the actions that will be undone/restored as a whole .\\\n   */\n\n\n  Diagram.prototype.endGroupAction = function () {\n    var entry = {\n      type: 'EndGroup',\n      category: 'Internal'\n    };\n\n    if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n      this.addHistoryEntry(entry);\n    }\n  };\n  /**\n   * Restores the last action that is performed\n   *\n   * @returns { void } Restores the last action that is performed .\\\n   */\n\n\n  Diagram.prototype.undo = function () {\n    this.canEnableBlazorObject = true;\n    this.callBlazorModel = false;\n\n    if (this.undoRedoModule && this.constraints & DiagramConstraints.UndoRedo) {\n      this.undoRedoModule.undo(this);\n    }\n\n    this.commandHandler.getBlazorOldValues();\n    this.callBlazorModel = true;\n    this.canEnableBlazorObject = false;\n  };\n  /**\n   * Restores the last undone action\n   *\n   * @returns { void } Restores the last undone action .\\\n   */\n\n\n  Diagram.prototype.redo = function () {\n    this.canEnableBlazorObject = true;\n    this.callBlazorModel = false;\n\n    if (this.undoRedoModule && this.constraints & DiagramConstraints.UndoRedo) {\n      this.undoRedoModule.redo(this);\n    }\n\n    this.commandHandler.getBlazorOldValues();\n    this.callBlazorModel = true;\n    this.canEnableBlazorObject = false;\n  };\n\n  Diagram.prototype.getBlazorDiagramObjects = function (objects) {\n    if (objects) {\n      for (var j = 0; j < objects.length; j++) {\n        this.insertBlazorDiagramObjects(objects[j]);\n      }\n    } else {\n      this.insertBlazorDiagramObjects(this.selectedItems);\n    }\n\n    this.callBlazorModel = false;\n    this.canEnableBlazorObject = true;\n  };\n  /**\n   * Aligns the group of objects to with reference to the first object in the group\n   *\n   * @returns { void } Aligns the group of objects to with reference to the first object in the group .\\\n   * @param {AlignmentOptions}option - Defines the factor, by which the objects have to be aligned\n   * @param {NodeModel[] | ConnectorModel[]} objects - Defines the objects that have to be aligned\n   * @param {AlignmentMode} type - Defines the type to be aligned\n   */\n\n\n  Diagram.prototype.align = function (option, objects, type) {\n    this.getBlazorDiagramObjects(objects);\n\n    if (!objects) {\n      objects = [];\n      objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n    }\n\n    this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n    this.commandHandler.align(objects, option, type ? type : 'Object');\n    this.commandHandler.getBlazorOldValues();\n    this.callBlazorModel = true;\n    this.canEnableBlazorObject = false;\n  };\n  /**\n   * Arranges the group of objects with equal intervals, but within the group of objects\n   *\n   * @returns { void } Arranges the group of objects with equal intervals, but within the group of objects .\\\n   * @param {NodeModel[] | ConnectorModel[]} option - Defines the factor to distribute the shapes\n   * @param {DistributeOptions} objects - Defines the objects that have to be equally spaced\n   */\n\n\n  Diagram.prototype.distribute = function (option, objects) {\n    this.getBlazorDiagramObjects(objects);\n\n    if (!objects) {\n      objects = [];\n      objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n    }\n\n    this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n    this.commandHandler.distribute(objects, option);\n    this.commandHandler.getBlazorOldValues();\n    this.canEnableBlazorObject = false;\n    this.callBlazorModel = true;\n  };\n  /**\n   * Scales the given objects to the size of the first object in the group\n   *\n   * @returns { void } Scales the given objects to the size of the first object in the group .\\\n   * @param {SizingOptions} option - Defines whether the node has to be horizontally scaled, vertically scaled or both\n   * @param {NodeModel[] | ConnectorModel[]}objects - Defines the collection of objects that have to be scaled\n   */\n\n\n  Diagram.prototype.sameSize = function (option, objects) {\n    this.getBlazorDiagramObjects(objects);\n\n    if (!objects) {\n      objects = [];\n      objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n    }\n\n    this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n    this.commandHandler.sameSize(objects, option);\n    this.commandHandler.getBlazorOldValues();\n    this.canEnableBlazorObject = false;\n    this.callBlazorModel = true;\n  };\n\n  Diagram.prototype.updateBlazorDiagramProperties = function (attribute, canCall) {\n    if (isBlazor() && !canCall) {\n      //Need to send the client changes into server side for public APIs changes.\n      var isServerDataBindEnabled = this.allowServerDataBinding;\n      this.enableServerDataBinding(true);\n\n      for (var i = 0; i < attribute.length; i++) {\n        this.oldDiagramObject[attribute[i]] = cloneObject(this[attribute[i]]);\n      }\n\n      this.enableServerDataBinding(isServerDataBindEnabled);\n    }\n\n    if (canCall) {\n      this.commandHandler.getDiagramOldValues(this.oldDiagramObject, attribute);\n    }\n  };\n\n  Diagram.prototype.getZoomingAttribute = function () {\n    var attribute = [];\n    attribute.push('scrollSettings');\n    attribute.push('snapSettings');\n    return attribute;\n  };\n  /**\n   * Scales the diagram control by the given factor\n   *\n   * @returns { void } Scales the diagram control by the given factor .\\\n   * @param {number} factor - Defines the factor by which the diagram is zoomed\n   * @param {PointModel} focusedPoint - Defines the point with respect to which the diagram has to be zoomed\n   */\n\n\n  Diagram.prototype.zoom = function (factor, focusedPoint) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.scroller.zoom(factor, 0, 0, focusedPoint);\n\n    if (!(this.blazorActions & BlazorAction.interaction)) {\n      this.updateBlazorDiagramProperties(attribute, true);\n    }\n  };\n  /**\n   * Scales the diagram control by the given factor\n   *\n   * @returns { void }  Scales the diagram control by the given factor .\\\n   * @param {ZoomOptions} options - used to define the zoom factor, focus point and zoom type.\n   *\n   */\n\n\n  Diagram.prototype.zoomTo = function (options) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    var factor = options.zoomFactor ? options.zoomFactor : 0.2;\n    factor = options.type === 'ZoomOut' ? 1 / (1 + factor) : 1 + factor;\n    this.scroller.zoom(factor, 0, 0, options.focusPoint);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n  /**\n   * Pans the diagram control to the given horizontal and vertical offsets\n   *\n   * @returns { void } Pans the diagram control to the given horizontal and vertical offsets .\\\n   * @param {number} horizontalOffset - Defines the horizontal distance to which the diagram has to be scrolled\n   * @param {number} verticalOffset - Defines the vertical distance to which the diagram has to be scrolled\n   * @param {PointModel} focusedPoint - Provide the focusedPoint value\n   */\n\n\n  Diagram.prototype.pan = function (horizontalOffset, verticalOffset, focusedPoint) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.setCursor('grabbing');\n    this.scroller.zoom(1, horizontalOffset, verticalOffset, focusedPoint);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n  /**\n   * Resets the zoom and scroller offsets to default values\n   *\n   * @returns { void } Resets the zoom and scroller offsets to default values .\\\n   */\n\n\n  Diagram.prototype.reset = function () {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.scroller.zoom(1 / this.scroller.currentZoom, -this.scroller.horizontalOffset, -this.scroller.verticalOffset, {\n      x: 0,\n      y: 0\n    });\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n  /**\n   * Resets the segments of the connectors\n   *\n   * @returns { void } Resets the segments of the connectors .\\\n   */\n\n\n  Diagram.prototype.resetSegments = function () {\n    var previousConnectorObject = [];\n    var updateConnectorObject = [];\n    var changeConnectors = [];\n\n    if (isBlazor()) {\n      for (var _i = 0, _a = this.connectors; _i < _a.length; _i++) {\n        var obj = _a[_i];\n        previousConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n      }\n    }\n\n    if (this.constraints & DiagramConstraints.LineRouting && this.lineRoutingModule) {\n      this.lineRoutingModule.lineRouting(this);\n    } else {\n      this.protectPropertyChange(true);\n      var connector = void 0;\n\n      for (var i = 0; i < this.connectors.length; i++) {\n        connector = this.connectors[i];\n        connector.segments = [];\n        this.connectorPropertyChange(connector, {}, {\n          segments: connector.segments\n        });\n      }\n\n      this.protectPropertyChange(false);\n    }\n\n    if (isBlazor()) {\n      for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n        var obj = _c[_b];\n        updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n      }\n\n      this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n      var blazorInterop = 'sfBlazor';\n      var blazor = 'Blazor';\n      var diagramObject = {\n        nodes: [],\n        connectors: changeConnectors\n      };\n\n      if (window && window[blazor]) {\n        var obj = {\n          'methodName': 'UpdateBlazorProperties',\n          'diagramobj': diagramObject\n        };\n        window[blazorInterop].updateBlazorProperties(obj, this);\n      }\n    }\n  };\n  /**\n   * setBlazorDiagramProps method\n   *\n   * @returns {void} setBlazorDiagramProps method .\\\n   * @param {boolean} arg - provide the eventName value.\n   * @private\n   */\n\n\n  Diagram.prototype.setBlazorDiagramProps = function (arg) {\n    var attribute = this.getZoomingAttribute();\n\n    if (arg) {\n      this.updateBlazorDiagramProperties(attribute);\n    } else {\n      this.updateBlazorDiagramProperties(attribute, true);\n    }\n  };\n  /**\n   * getDirection method\n   *\n   * @returns { Promise<void | object> } getDirection method .\\\n   * @param {DiagramEvent} eventName - provide the eventName value.\n   * @param {Object} args - provide the args value.\n   * @private\n   */\n\n\n  Diagram.prototype.triggerEvent = function (eventName, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventArgs;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (args) {\n              this.updateEventValue(args);\n            }\n\n            return [4\n            /*yield*/\n            , this.trigger(DiagramEvent[eventName], args)];\n\n          case 1:\n            eventArgs = _a.sent();\n\n            if (isBlazor() && typeof eventArgs === 'string') {\n              eventArgs = JSON.parse(eventArgs);\n            }\n\n            return [2\n            /*return*/\n            , eventArgs];\n        }\n      });\n    });\n  };\n\n  Diagram.prototype.updateEventValue = function (args) {\n    var element = args.element;\n\n    if (args.element && element instanceof Selector && element.nodes.length + element.connectors.length === 1) {\n      args.element = element.nodes.length === 1 ? element.nodes[0] : element.connectors[0];\n    }\n  };\n  /**\n   * Adds the given node to the lane\n   *\n   * @returns { void }     Adds the given node to the lane .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {string} swimLane - provide the swimLane value.\n   * @param {string} lane - provide the lane value.\n    */\n\n\n  Diagram.prototype.addNodeToLane = function (node, swimLane, lane) {\n    if (this.nameTable[swimLane]) {\n      var swimlaneNode = this.nameTable[swimLane];\n      this.protectPropertyChange(true);\n\n      if (this.undoRedoModule) {\n        this.historyManager.startGroupAction();\n      }\n\n      if (!this.nameTable[node.id]) {\n        node.offsetX = swimlaneNode.wrapper.bounds.width + swimlaneNode.wrapper.bounds.x;\n        node.offsetY = swimlaneNode.wrapper.bounds.height + swimlaneNode.wrapper.bounds.y;\n        node = this.add(node);\n      }\n\n      node.parentId = '';\n\n      if (!swimlaneNode.shape.phases.length) {\n        var laneId = swimLane + lane + '0';\n\n        if (this.nameTable[laneId]) {\n          addChildToContainer(this, this.nameTable[laneId], node, undefined, true);\n          updateLaneBoundsAfterAddChild(this.nameTable[laneId], swimlaneNode, node, this);\n        }\n      } else {\n        for (var i = 0; i < swimlaneNode.shape.phases.length; i++) {\n          var laneId = swimLane + lane + i;\n\n          if (this.nameTable[laneId] && this.nameTable[laneId].isLane) {\n            var laneNode = this.nameTable[laneId].wrapper.bounds;\n            var focusPoint = {\n              x: laneNode.x + (laneNode.x - swimlaneNode.wrapper.bounds.x + node.margin.left + node.wrapper.bounds.width / 2),\n              y: laneNode.y + swimlaneNode.wrapper.bounds.y - node.margin.top\n            };\n\n            if (swimlaneNode.shape.orientation === 'Horizontal') {\n              focusPoint.y = laneNode.y;\n            } else {\n              focusPoint.x = laneNode.x;\n              var laneHeaderId = this.nameTable[laneId].parentId + swimlaneNode.shape.lanes[0].id + '_0_header';\n              focusPoint.y = laneNode.y + (swimlaneNode.wrapper.bounds.y - this.nameTable[laneHeaderId].wrapper.bounds.height + node.margin.top + node.wrapper.bounds.height / 2);\n            }\n\n            if (laneNode.containsPoint(focusPoint) || laneId === swimLane + lane + (swimlaneNode.shape.phases.length - 1)) {\n              addChildToContainer(this, this.nameTable[laneId], node, undefined, true);\n              updateLaneBoundsAfterAddChild(this.nameTable[laneId], swimlaneNode, node, this);\n              break;\n            }\n          }\n        }\n      }\n\n      if (this.undoRedoModule) {\n        this.historyManager.endGroupAction();\n      }\n\n      this.protectPropertyChange(false);\n    }\n\n    this.updateDiagramElementQuad();\n  };\n  /**\n   * Shows tooltip for corresponding diagram object\n   *\n   * @param {NodeModel | ConnectorModel} obj - Defines the object for that tooltip has to be shown\n   */\n\n\n  Diagram.prototype.showTooltip = function (obj) {\n    if (obj && obj.id && !obj.wrapper) {\n      obj = this.nameTable[obj.id];\n    }\n\n    var bounds = getBounds(obj.wrapper);\n    var position = {\n      x: 0,\n      y: 0\n    };\n    var content = obj.tooltip.content ? obj.tooltip.content : 'X:' + Math.round(bounds.x) + ' ' + 'Y:' + Math.round(bounds.y);\n\n    if (obj && obj.tooltip.openOn === 'Custom') {\n      if (obj instanceof Node) {\n        position = {\n          x: obj.offsetX + obj.width / 2,\n          y: obj.offsetY + obj.height / 2\n        };\n      } else {\n        position = {\n          x: obj.targetPoint.x,\n          y: obj.targetPoint.x\n        };\n      }\n\n      this.commandHandler.showTooltip(obj, position, content, 'SelectTool', true);\n    }\n  };\n  /**\n   * hides tooltip for corresponding diagram object\n   *\n   * @param {NodeModel | ConnectorModel} obj - Defines the object for that tooltip has to be hide\n   */\n\n\n  Diagram.prototype.hideTooltip = function (obj) {\n    if (obj && obj.tooltip.openOn === 'Custom') {\n      this.tooltipObject.close();\n    }\n  };\n  /**\n   * Adds the given node to diagram control\n   *\n   * @returns { Node }     getDirection method .\\\n   * @param {NodeModel} obj - Defines the node that has to be added to diagram\n   * @param {boolean} group - Defines the node that has to be added to diagram\n   * @blazorArgsType obj|DiagramNode\n   */\n\n\n  Diagram.prototype.addNode = function (obj, group) {\n    return this.add(obj, group);\n  };\n  /**\n   * Adds the given diagram object to the group.\n   *\n   * @returns { void }     Adds the given diagram object to the group.\\\n   * @param {NodeModel} group - defines where the diagram object to be added.\n   * @param {string | NodeModel | ConnectorModel} child - defines the diagram object to be added to the group\n   * @blazorArgsType obj|DiagramNode\n   */\n\n\n  Diagram.prototype.addChildToGroup = function (group, child) {\n    var severDataBind = this.allowServerDataBinding;\n    this.enableServerDataBinding(false);\n    var propChange = this.isProtectedOnChange;\n    this.protectPropertyChange(true);\n    group = this.getObject(group.id);\n\n    if (isBlazor()) {\n      this.insertValue(group, true);\n    }\n\n    var isHistoryAdded = !(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group) && !(this.diagramActions & DiagramAction.PreventHistory);\n\n    if (isHistoryAdded) {\n      this.startGroupAction();\n    }\n\n    var id = this.addChild(group, child);\n\n    if (isHistoryAdded) {\n      var childTable = {};\n      childTable[id] = cloneObject(this.getObject(id));\n      var entry = {\n        type: 'AddChildToGroupNode',\n        changeType: 'Insert',\n        undoObject: cloneObject(group),\n        redoObject: cloneObject(group),\n        category: 'Internal',\n        objectId: id,\n        childTable: childTable\n      };\n      this.addHistoryEntry(entry);\n      this.endGroupAction();\n    }\n\n    this.protectPropertyChange(propChange);\n    this.enableServerDataBinding(severDataBind);\n    this.updateSelector();\n\n    if (isBlazor() && isHistoryAdded) {\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n  /**\n   * Will return the history stack values\n   *\n   * @returns { void } Will return the history stack values .\\\n   * @param {boolean} isUndoStack - returns the history stack values\n   */\n\n\n  Diagram.prototype.getHistoryStack = function (isUndoStack) {\n    //let temp: HistoryEntry[];\n    var historyEntry = [];\n    var temp = isUndoStack ? this.historyManager.undoStack : this.historyManager.redoStack;\n\n    if (this.historyManager.stackLimit !== undefined) {\n      for (var i = temp.length - 1; i >= 0; i--) {\n        historyEntry.push(temp[i]);\n\n        if (historyEntry.length > this.historyManager.stackLimit) {\n          return historyEntry;\n        }\n      }\n    } else {\n      historyEntry = temp;\n    }\n\n    return historyEntry;\n  };\n  /* tslint:disable */\n\n  /**\n   * Return the edges for the given node\n   *\n   * @returns { string[] } Return the edges for the given node .\\\n    * @param {Object} args - return the edge of the given node\n   */\n\n\n  Diagram.prototype.getEdges = function (args) {\n    return args['outEdge'] ? this.nameTable[args['id']].outEdges : this.nameTable[args['id']].inEdges;\n  };\n  /* tslint:enable */\n\n  /**\n   * Returns the parent id for the node\n   *\n   * @returns { string }Returns the parent id for the node .\\\n    * @param {string} id - returns the parent id\n   */\n\n\n  Diagram.prototype.getParentId = function (id) {\n    return this.nameTable[id].parentId;\n  };\n  /**\n   * Adds the given connector to diagram control\n   * @returns { Connector } Adds the given connector to diagram control .\\\n   *\n   * @param {ConnectorModel} obj - Defines the connector that has to be added to diagram\n   * @blazorArgsType obj|DiagramConnector\n   */\n\n\n  Diagram.prototype.addConnector = function (obj) {\n    return this.add(obj);\n  };\n  /* eslint-disable */\n\n  /** @private */\n\n\n  Diagram.prototype.UpdateBlazorDiagramModelCollection = function (obj, copiedObject, multiSelectDelete, isBlazorGroupUpdate) {\n    /* eslint-enable */\n    if (!(this.blazorActions & BlazorAction.ClearObject)) {\n      var blazorInterop = 'sfBlazor';\n      var blazor = 'Blazor';\n\n      if (window && window[blazor]) {\n        var updatedModel = void 0;\n        var connectorModelCollection = [];\n        var updatedModelCollection = [];\n        var objectTypeCollection = [];\n        var removalIndexCollection = [];\n\n        if (isBlazorGroupUpdate && !copiedObject) {\n          for (var i = 0; i < this.blazorAddorRemoveCollection.length; i++) {\n            objectTypeCollection.push(getObjectType(this.blazorAddorRemoveCollection[i]) === Connector ? 'Connector' : 'Node');\n            updatedModel = cloneBlazorObject(this.blazorAddorRemoveCollection[i]);\n            updatedModelCollection.push(updatedModel);\n            removalIndexCollection = this.blazorRemoveIndexCollection;\n          }\n        } else if (!this.isServerUpdate || multiSelectDelete) {\n          this.isServerUpdate = true;\n          var updatedModel_1 = cloneBlazorObject(obj);\n          var elements = [];\n          var removalIndex = void 0;\n          var tempNode = [];\n\n          if (!copiedObject) {\n            if (!multiSelectDelete) {\n              tempNode = this.commandHandler.getChildren(obj, elements);\n            } else {\n              tempNode = multiSelectDelete;\n            }\n\n            for (var i = 0; i < tempNode.length; i++) {\n              updatedModel_1 = cloneBlazorObject(tempNode[i]);\n              updatedModelCollection.push(updatedModel_1);\n\n              if (getObjectType(tempNode[i]) === Connector) {\n                removalIndex = this.connectors.indexOf(tempNode[i]);\n              } else {\n                removalIndex = this.nodes.indexOf(tempNode[i]);\n              }\n\n              removalIndexCollection.push(removalIndex);\n              objectTypeCollection.push(getObjectType(tempNode[i]) === Connector ? 'Connector' : 'Node');\n            }\n\n            if (!multiSelectDelete) {\n              updatedModelCollection.push(cloneBlazorObject(obj));\n              removalIndexCollection.push(this.nodes.indexOf(obj));\n              objectTypeCollection.push(getObjectType(obj) === Connector ? 'Connector' : 'Node');\n            }\n          }\n\n          if (copiedObject && copiedObject.length > 0) {\n            for (var i = 0; i < copiedObject.length; i++) {\n              updatedModel_1 = cloneBlazorObject(copiedObject[i]);\n              var isNode = copiedObject[i] instanceof Node ? true : false;\n              /* eslint-disable */\n\n              isNode ? updatedModelCollection.push(updatedModel_1) : connectorModelCollection.push(updatedModel_1);\n              /* eslint-enable */\n\n              objectTypeCollection.push(getObjectType(copiedObject[i]) === Connector ? 'Connector' : 'Node');\n            }\n          }\n\n          this.isServerUpdate = false;\n        }\n\n        var dgmObj = {\n          'methodName': 'UpdateBlazorDiagramObjects',\n          'diagramobj': {\n            'nodeObj': JSON.stringify(updatedModelCollection),\n            'ObjectType': objectTypeCollection,\n            'removalIndex': copiedObject ? undefined : removalIndexCollection,\n            'isMultipleObjects': true,\n            'annotationIndex': undefined,\n            'connectorObj': JSON.stringify(connectorModelCollection)\n          }\n        };\n        window[blazorInterop].updateBlazorProperties(dgmObj, this);\n\n        if (isBlazorGroupUpdate && !copiedObject) {\n          this.blazorAddorRemoveCollection = [];\n          this.blazorRemoveIndexCollection = [];\n        }\n      }\n    }\n  };\n  /**\n   *  UpdateBlazorDiagramModel method\n   *\n   * @returns { void }  UpdateBlazorDiagramModel method .\\\n   * @param {Node | Connector | ShapeAnnotation | PathAnnotation} obj - provide the obj value.\n   * @param {string} objectType - provide the objectType value.\n   * @param {number} removalIndex - provide the removalIndex value.\n   * @param {number} annotationNodeIndex - provide the annotationNodeIndex value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.UpdateBlazorDiagramModel = function (obj, objectType, removalIndex, annotationNodeIndex) {\n    if (!(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n      var blazorInterop = 'sfBlazor';\n      var blazor = 'Blazor';\n\n      if (window && window[blazor] && !this.isServerUpdate && !(this.diagramActions & DiagramAction.Clear)) {\n        var updatedModel = cloneBlazorObject(obj);\n        var dgmObj = {\n          'methodName': 'UpdateBlazorDiagramObjects',\n          'diagramobj': {\n            'nodeObj': JSON.stringify(updatedModel),\n            'ObjectType': objectType,\n            'removalIndex': removalIndex,\n            'isMultipleObjects': false,\n            'annotationIndex': annotationNodeIndex,\n            'connectorObj': undefined\n          }\n        };\n        window[blazorInterop].updateBlazorProperties(dgmObj, this);\n      }\n    }\n  }; // eslint-disable-next-line max-len\n\n\n  Diagram.prototype.UpdateBlazorLabelOrPortObjects = function (obj, objectType, removalIndex, nodeIndex) {\n    var blazorInterop = 'sfBlazor';\n    var blazor = 'Blazor';\n\n    if (window && window[blazor] && obj.length > 0 && !this.isServerUpdate && !(this.diagramActions & DiagramAction.Clear)) {\n      // eslint-disable-next-line max-len\n      var updatedModelCollection = [];\n      var objectTypeCollection = [];\n      var nodeIndexCollection = [];\n\n      for (var i = 0; i < obj.length; i++) {\n        updatedModelCollection.push(cloneBlazorObject(obj[i]));\n        objectTypeCollection.push(objectType);\n        nodeIndexCollection.push(nodeIndex);\n      }\n\n      var dgmObj = {\n        'methodName': 'UpdateBlazorDiagramObjects',\n        'diagramobj': {\n          'nodeObj': JSON.stringify(updatedModelCollection),\n          'ObjectType': objectTypeCollection,\n          'removalIndex': removalIndex,\n          'isMultipleObjects': true,\n          'annotationIndex': nodeIndexCollection,\n          'connectorObj': null,\n          'portIndex': objectType === 'Port' ? nodeIndexCollection : []\n        }\n      };\n      window[blazorInterop].updateBlazorProperties(dgmObj, this);\n    }\n  };\n  /**\n   *  addBlazorDiagramObjects method\n   *\n   * @returns { void }  addBlazorDiagramObjects method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.addBlazorDiagramObjects = function () {\n    var nodesCollection = [];\n    var connectorCollection = [];\n\n    if (this.dataBindingModule && !(this.realActions & RealAction.PreventDataInit)) {\n      for (var i = 0; i < this.nodes.length; i++) {\n        nodesCollection.push(cloneObject(this.nodes[i], undefined, undefined, true));\n      }\n\n      for (var i = 0; i < this.connectors.length; i++) {\n        connectorCollection.push(cloneObject(this.connectors[i], undefined, undefined, true));\n      }\n    }\n\n    var blazorInterop = 'sfBlazor';\n    var blazor = 'Blazor';\n\n    if (window && window[blazor]) {\n      var obj = {\n        'methodName': 'AddBlazorObjects',\n        'diagramobj': {\n          'nodeObj': JSON.stringify(nodesCollection),\n          'isConnector': false\n        }\n      };\n      window[blazorInterop].updateBlazorProperties(obj, this);\n      obj = {\n        'methodName': 'AddBlazorObjects',\n        'diagramobj': {\n          'nodeObj': JSON.stringify(connectorCollection),\n          'isConnector': true\n        }\n      };\n      window[blazorInterop].updateBlazorProperties(obj, this);\n    }\n  };\n\n  Diagram.prototype.removeNodeEdges = function (elementId, id, isOutEdges) {\n    var node = this.nameTable[elementId];\n    var edges = isOutEdges ? node.outEdges : node.inEdges;\n\n    if (edges.length > 0) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i] === id) {\n          edges.splice(i, 1);\n        }\n      }\n    }\n  };\n  /**\n   *  insertBlazorConnector method\n   *\n   * @returns { void }  insertBlazorConnector method .\\\n   * @param {Connector} obj - provide the nodeId value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.insertBlazorConnector = function (obj) {\n    if (isBlazor() && obj instanceof Connector) {\n      if (obj.sourceID && this.nameTable[obj.sourceID]) {\n        this.insertValue(cloneObject(this.nameTable[obj.sourceID]), true);\n      }\n\n      if (obj.targetID && this.nameTable[obj.targetID]) {\n        this.insertValue(cloneObject(this.nameTable[obj.targetID]), true);\n      }\n    }\n  };\n  /* tslint:disable */\n\n  /**\n   * Adds the given object to diagram control\n   *\n   * @returns { Node | Connector }     getDirection method .\\\n   * @param {NodeModel | ConnectorModel} obj - Defines the object that has to be added to diagram\n   * @param {boolean} group - provide the group value.\n   */\n\n\n  Diagram.prototype.add = function (obj, group) {\n    var newObj;\n    var propertyChangeValue = this.isProtectedOnChange;\n    this.protectPropertyChange(true);\n\n    if (obj) {\n      obj = cloneObject(obj);\n      var args = void 0;\n      args = {\n        element: obj,\n        cause: this.diagramActions,\n        state: 'Changing',\n        type: 'Addition',\n        cancel: false\n      };\n\n      if (this.parentObject) {\n        args.parentId = this.parentObject.id;\n      }\n\n      if (isBlazor()) {\n        args = getCollectionChangeEventArguements(args, obj, 'Changing', 'Addition');\n      }\n\n      if (obj.id !== 'helper' && !(this.diagramActions & DiagramAction.PreventCollectionChangeOnDragOver)) {\n        this.triggerEvent(DiagramEvent.collectionChange, args);\n      }\n\n      if (args.cancel && this.drawingObject) {\n        this.removeElements(args.element);\n        this.tooltipObject.close();\n        var sourceNodee = this.getObject(args.element.sourceID);\n        var isOutEdgee = void 0;\n\n        if (getObjectType(args.element) === Connector) {\n          if (args.element.sourceID) {\n            this.removeNodeEdges(args.element.sourceID, args.element.id, true);\n\n            if (sourceNodee.ports.length > 0) {\n              for (var i = 0; i < sourceNodee.ports.length; i++) {\n                var port = sourceNodee.ports[i];\n\n                if (port.id === args.element.sourcePortID) {\n                  if (port.outEdges.length > 0) {\n                    isOutEdgee = false;\n                  } else {\n                    isOutEdgee = true;\n                  }\n                }\n              }\n\n              this.removePortEdges(sourceNodee, args.element.sourcePortID, args.element.id, isOutEdgee);\n            }\n          }\n\n          if (args.element.targetID) {\n            this.removeNodeEdges(args.element.targetID, args.element.id, false);\n          }\n        }\n      }\n\n      this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n      obj.id = obj.id || randomId();\n      var layers = this.activeLayer;\n\n      if (!args.cancel && !layers.lock) {\n        if (layers.objects.indexOf(obj.id) < 0 && !layers.lock) {\n          if (!layers.visible) {\n            layers.visible = true;\n            this.dataBind();\n          }\n\n          layers.objects.push(obj.id);\n        }\n\n        if (getObjectType(obj) === Connector) {\n          newObj = new Connector(this, 'connectors', obj, true);\n          newObj.status = 'New';\n          updateDefaultValues(newObj, obj, this.connectorDefaults);\n          this.connectors.push(newObj);\n          this.initObject(newObj);\n\n          if (isBlazor()) {\n            if (this.blazorActions & BlazorAction.GroupingInProgress) {\n              this.blazorAddorRemoveCollection.push(newObj);\n            } else if (this.blazorAddorRemoveCollection.length > 0) {\n              this.isServerUpdate = false;\n              this.blazorAddorRemoveCollection.push(newObj);\n              this.UpdateBlazorDiagramModelCollection(undefined, this.blazorAddorRemoveCollection, undefined, true);\n              this.blazorAddorRemoveCollection = [];\n              this.commandHandler.getBlazorOldValues();\n            } else if (!this.isServerUpdate && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n              this.UpdateBlazorDiagramModel(newObj, 'Connector');\n              this.commandHandler.getBlazorOldValues();\n            }\n          }\n\n          if (obj.visible === false) {\n            this.updateElementVisibility(newObj.wrapper, newObj, obj.visible);\n          }\n\n          this.updateEdges(newObj);\n          this.insertBlazorConnector(newObj);\n        } else {\n          newObj = new Node(this, 'nodes', obj, true);\n          updateDefaultValues(newObj, obj, this.nodeDefaults);\n          newObj.parentId = obj.parentId ? obj.parentId : newObj.parentId;\n          newObj.umlIndex = obj.umlIndex;\n          newObj.status = 'New';\n          this.nodes.push(newObj);\n          this.initObject(newObj, layers, undefined, group);\n\n          if (isBlazor()) {\n            if (this.blazorActions & BlazorAction.GroupingInProgress) {\n              this.blazorAddorRemoveCollection.push(newObj);\n            } else if (this.blazorAddorRemoveCollection.length > 0) {\n              this.blazorAddorRemoveCollection.push(newObj);\n              this.isServerUpdate = false;\n              this.UpdateBlazorDiagramModelCollection(undefined, this.blazorAddorRemoveCollection, undefined, true);\n              this.commandHandler.getBlazorOldValues();\n              this.blazorAddorRemoveCollection = [];\n            } else if (!this.isServerUpdate && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n              this.UpdateBlazorDiagramModel(newObj, 'Node');\n              this.commandHandler.getBlazorOldValues();\n            }\n          }\n\n          this.updateTemplate();\n\n          if (this.bpmnModule) {\n            if (newObj.shape.annotations && newObj.shape.annotations.length !== 0) {\n              for (var _i = 0, _a = this.bpmnModule.getTextAnnotationConn(newObj); _i < _a.length; _i++) {\n                var obj_1 = _a[_i];\n                this.initConnectors(obj_1, layers, false);\n              }\n            }\n\n            if (newObj.shape.activity && newObj.shape.activity.subProcess.processes && newObj.shape.activity.subProcess.processes.length) {\n              this.bpmnModule.updateDocks(newObj, this);\n            }\n          }\n\n          if (this.lineRoutingModule && this.constraints & DiagramConstraints.LineRouting) {\n            var objects = this.spatialSearch.findObjects(newObj.wrapper.outerBounds);\n\n            for (var i = 0; i < objects.length; i++) {\n              var object = objects[i];\n\n              if (object instanceof Connector) {\n                this.connectorPropertyChange(object, {}, {\n                  sourceID: object.sourceID,\n                  targetID: object.targetID,\n                  sourcePortID: object.sourcePortID,\n                  targetPortID: object.targetPortID,\n                  sourcePoint: object.sourcePoint,\n                  targetPoint: object.targetPoint\n                });\n              }\n            }\n          }\n\n          if (newObj.umlIndex > -1 && obj.parentId && this.nameTable[obj.parentId] && this.nameTable[obj.parentId].shape.type === 'UmlClassifier') {\n            var parent_2 = this.nameTable[obj.parentId];\n            parent_2.children.splice(newObj.umlIndex, 0, newObj.id);\n            parent_2.wrapper.children.splice(newObj.umlIndex, 0, newObj.wrapper);\n            parent_2.wrapper.measure(new Size());\n            parent_2.wrapper.arrange(parent_2.wrapper.desiredSize);\n            this.updateDiagramObject(parent_2);\n          }\n        }\n\n        args = {\n          element: newObj,\n          cause: this.diagramActions,\n          state: 'Changed',\n          type: 'Addition',\n          cancel: false\n        };\n\n        if (this.parentObject) {\n          args.parentId = this.parentObject.id;\n        }\n\n        if (isBlazor()) {\n          args = getCollectionChangeEventArguements(args, obj, 'Changed', 'Addition');\n        }\n\n        if (obj.id !== 'helper' && !(this.diagramActions & DiagramAction.PreventCollectionChangeOnDragOver)) {\n          this.triggerEvent(DiagramEvent.collectionChange, args);\n        }\n\n        if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group) && !(this.diagramActions & DiagramAction.PreventHistory)) {\n          var entry = {\n            type: 'CollectionChanged',\n            changeType: 'Insert',\n            undoObject: cloneObject(obj),\n            redoObject: cloneObject(obj),\n            category: 'Internal'\n          };\n          this.addHistoryEntry(entry);\n        }\n\n        this.parentObject = undefined;\n\n        if (this.mode === 'SVG') {\n          this.updateSvgNodes(newObj);\n          this.updateTextElementValue(newObj);\n          this.updateDiagramObject(newObj);\n\n          if (newObj.shape.activity && newObj.shape.activity.subProcess.processes && newObj.shape.activity.subProcess.processes.length) {\n            this.updateProcesses(newObj);\n          }\n\n          this.updateBridging();\n        }\n      }\n    }\n\n    this.protectPropertyChange(propertyChangeValue);\n    this.resetDiagramActions(DiagramAction.PublicMethod);\n\n    if (newObj && this.layers.length > 1) {\n      this.moveNode(newObj);\n    }\n\n    for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n      var temp = _c[_b];\n      var view = this.views[temp];\n\n      if (!(view instanceof Diagram)) {\n        this.refreshCanvasDiagramLayer(view);\n      }\n    }\n\n    this.renderReactTemplates();\n    return newObj;\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.updateSvgNodes = function (node) {\n    if (node.children) {\n      for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var j = _a[_i];\n\n        if (this.nameTable[j] && this.nameTable[j].parentId) {\n          var child = getDiagramElement(j + '_groupElement', this.element.id);\n\n          if (child) {\n            child.parentNode.removeChild(child);\n          }\n        }\n      }\n    }\n  };\n  /**\n   *  updateProcesses method\n   *\n   * @returns { void }  updateProcesses method .\\\n   * @param {(Node | Connector)} node - provide the nodeId value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateProcesses = function (node) {\n    if (this.bpmnModule && node && node.shape && node.shape.activity && node.shape.activity.subProcess.processes && node.shape.activity.subProcess.processes.length) {\n      var processes = node.shape.activity.subProcess.processes;\n      this.moveSvgNode(node.id);\n\n      for (var _i = 0, processes_1 = processes; _i < processes_1.length; _i++) {\n        var j = processes_1[_i];\n        this.moveSvgNode(j);\n        var edges = [];\n        edges = edges.concat(this.nameTable[j].outEdges, this.nameTable[j].inEdges);\n\n        for (var i = edges.length - 1; i >= 0; i--) {\n          this.moveSvgNode(edges[i]);\n        }\n      }\n\n      for (var _a = 0, processes_2 = processes; _a < processes_2.length; _a++) {\n        var j = processes_2[_a];\n\n        if (this.nameTable[j].shape.activity.subProcess.processes && this.nameTable[j].shape.activity.subProcess.processes.length) {\n          this.updateProcesses(this.nameTable[j]);\n        }\n      }\n    } else {\n      this.moveSvgNode(node.id);\n    }\n  };\n  /**\n   *  moveSvgNode method\n   *\n   * @returns { void }  moveSvgNode method .\\\n   * @param {string} nodeId - provide the nodeId value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.moveSvgNode = function (nodeId) {\n    var child = getDiagramElement(nodeId + '_groupElement', this.element.id);\n    var parent = child.parentElement;\n    child.parentNode.removeChild(child);\n    parent.appendChild(child);\n  };\n  /**\n   * Adds the given annotation to the given node\n   *\n   * @returns { void } Adds the given annotation to the given node .\\\n   * @param {BpmnAnnotationModel} annotation - Defines the annotation to be added\n   * @param {NodeModel} node - Defines the node to which the annotation has to be added\n   */\n\n\n  Diagram.prototype.addTextAnnotation = function (annotation, node) {\n    if (this.bpmnModule) {\n      var connector = this.bpmnModule.addAnnotation(node, annotation, this);\n      this.initConnectors(connector, this.commandHandler.getObjectLayer(node.id), false);\n      this.updateDiagramObject(node);\n\n      if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n        var entry = {\n          type: 'CollectionChanged',\n          changeType: 'Insert',\n          undoObject: cloneObject(annotation),\n          redoObject: cloneObject(annotation),\n          category: 'Internal'\n        };\n        this.addHistoryEntry(entry);\n      }\n    }\n  }; //Splice the InEdge and OutEdge of the for the node with respect to corresponding connectors that is deleting\n\n\n  Diagram.prototype.spliceConnectorEdges = function (connector, isSource) {\n    //let node: Node;\n    var edges = []; //let isInEdge: boolean;\n\n    var node = isSource ? this.nameTable[connector.sourceID] : this.nameTable[connector.targetID];\n\n    if (node) {\n      edges = isSource ? node.outEdges : node.inEdges;\n\n      for (var i = edges.length - 1; i >= 0; i--) {\n        if (edges[i] === connector.id) {\n          edges.splice(i, 1);\n        }\n      }\n\n      for (var j = 0; node.ports && j < node.ports.length; j++) {\n        var isInEdge = isSource ? false : true;\n        this.removePortEdges(node, node.ports[j].id, connector.id, isInEdge);\n      }\n    }\n  };\n  /**\n   * Remove the dependent connectors if the node is deleted\n   * @returns { void } Remove the dependent connectors if the node is deleted .\\\n   * @param {Node} node - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeDependentConnector = function (node) {\n    var connector;\n    var edges = [];\n    edges = edges.concat(node.outEdges, node.inEdges);\n\n    for (var i = edges.length - 1; i >= 0; i--) {\n      connector = this.nameTable[edges[i]];\n\n      if (connector) {\n        this.connectorTable[connector.id] = cloneObject(connector);\n        this.remove(connector);\n      }\n    }\n  };\n  /**\n   * Remove the dependent connectors if the node is deleted\n   * @returns { void } Remove the dependent connectors if the node is deleted .\\\n   * @param {(NodeModel | ConnectorModel)} obj - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeObjectsFromLayer = function (obj) {\n    if (obj.children) {\n      for (var i = 0; i < obj.children.length; i++) {\n        var object = this.nameTable[obj.children[i]];\n\n        if (object) {\n          this.removeObjectsFromLayer(object);\n        }\n      }\n    }\n\n    var layer = this.layers.indexOf(this.commandHandler.getObjectLayer(obj.id));\n    var objects = this.layers[layer].objects;\n    var objIndex = objects.indexOf(obj.id);\n\n    if (objIndex > -1) {\n      if (isSelected(this, obj)) {\n        this.unSelect(obj);\n      }\n\n      this.layers[layer].objects.splice(objIndex, 1);\n      delete this.layers[layer].zIndexTable[this.nameTable[obj.id].zIndex];\n    }\n  };\n  /**\n   * removeElements method \\\n   *\n   * @returns { string }     removeElements method .\\\n   * @param {NodeModel | ConnectorModel} currentObj - provide the currentObj value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeElements = function (currentObj) {\n    if (this.mode === 'SVG' || this.mode === 'Canvas' && currentObj.shape.type === 'Native') {\n      var removeElement_1 = getDiagramElement(currentObj.id + '_groupElement', this.element.id);\n      var object = currentObj;\n\n      if (object.ports && object.ports.length > 0) {\n        for (var i = 0; i < object.ports.length; i++) {\n          var port = object.ports[i];\n          var removePort = getDiagramElement(object.id + '_' + port.id + '_groupElement', this.element.id);\n\n          if (removePort) {\n            removePort.parentNode.removeChild(removePort);\n          }\n        }\n      }\n\n      if (removeElement_1) {\n        removeElement_1.parentNode.removeChild(removeElement_1);\n      }\n    }\n\n    this.refreshCanvasLayers();\n\n    if (currentObj.wrapper) {\n      var children = currentObj.wrapper.children;\n      var element = void 0;\n      var view = void 0;\n\n      if (children) {\n        for (var i = 0; i < children.length; i++) {\n          if (children[i] instanceof DiagramNativeElement || children[i].id && children[i].id.indexOf('icon_content') > 0) {\n            if (children[i].id.indexOf('icon_content') > 0 && this.mode === 'SVG') {\n              element = getDiagramElement(children[i].id + '_shape_groupElement', this.element.id);\n\n              if (element) {\n                element.parentNode.removeChild(element);\n              }\n\n              element = getDiagramElement(children[i].id + '_rect_groupElement', this.element.id);\n\n              if (element) {\n                element.parentNode.removeChild(element);\n              }\n            }\n\n            for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n              var elementId = _a[_i];\n              removeElement(children[i].id + '_groupElement', elementId);\n              var nodeIndex = this.scroller.removeCollection.indexOf(currentObj.id);\n              this.scroller.removeCollection.splice(nodeIndex, 1);\n            }\n          } else if (children[i] instanceof DiagramHtmlElement) {\n            for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n              var elementId = _c[_b];\n              removeElement(currentObj.id + '_html_element', elementId);\n              removeElement(children[i].id + '_html_element', elementId);\n              this.clearTemplate(['nodeTemplate' + '_' + currentObj.id]);\n\n              if (children[i].annotationId) {\n                this.clearTemplate(['annotationTemplate' + '_' + currentObj.id + children[i].annotationId]);\n              }\n            }\n          }\n\n          removeGradient(children[i].id);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.removeCommand = function () {\n    this.remove();\n  };\n  /**\n   * Removes the given object from diagram\n   *\n   * @param {NodeModel | ConnectorModel} obj - Defines the object that has to be removed from diagram\n   */\n\n  /* tslint:disable */\n\n\n  Diagram.prototype.remove = function (obj) {\n    var selectedItems = [];\n    selectedItems = selectedItems.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n    var args;\n    var groupAction = false;\n\n    if (obj) {\n      obj = this.nameTable[obj.id];\n      this.insertBlazorConnector(obj);\n\n      if (obj && (canDelete(obj) || this.diagramActions & DiagramAction.Clear)) {\n        args = {\n          element: obj,\n          cause: this.diagramActions,\n          state: 'Changing',\n          type: 'Removal',\n          cancel: false\n        };\n\n        if (isBlazor()) {\n          args = getCollectionChangeEventArguements(args, obj, 'Changing', 'Removal');\n        }\n\n        if (!(this.diagramActions & DiagramAction.Clear) && obj.id !== 'helper') {\n          this.triggerEvent(DiagramEvent.collectionChange, args);\n        }\n\n        if (!args.cancel) {\n          if (canDelete(obj)) {\n            if (obj && obj.shape && obj.shape.type === 'SwimLane') {\n              removeSwimLane(this, obj);\n            }\n          }\n\n          if (this.bpmnModule) {\n            if (this.bpmnModule.checkAndRemoveAnnotations(obj, this)) {\n              this.refreshCanvasLayers();\n              return;\n            }\n          }\n\n          if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.PreventHistory) && (obj instanceof Node || obj instanceof Connector)) {\n            var entry = {\n              type: 'CollectionChanged',\n              changeType: 'Remove',\n              undoObject: cloneObject(obj),\n              redoObject: cloneObject(obj),\n              category: 'Internal'\n            };\n\n            if (!(this.diagramActions & DiagramAction.Clear)) {\n              if (obj.children && !obj.isLane && !obj.isPhase && obj.children.length > 0 && this.undoRedoModule && this.layout.type === 'None') {\n                this.historyManager.startGroupAction();\n                groupAction = true;\n              }\n            }\n\n            if (obj instanceof Node) {\n              this.removeDependentConnector(obj);\n            }\n\n            if (!obj.isLane && !obj.isPhase) {\n              if (!(this.diagramActions & DiagramAction.Clear) && !this.isStackChild(obj)) {\n                this.addHistoryEntry(entry);\n              }\n            }\n          }\n\n          if (obj.children && !obj.isLane && !obj.isPhase && (!isBlazor() || !(this.diagramActions & DiagramAction.UndoRedo))) {\n            this.deleteGroup(obj);\n          }\n\n          if (obj.parentId) {\n            this.deleteChild(obj);\n\n            if (this.nameTable[obj.parentId] && this.nameTable[obj.parentId].shape.type === 'UmlClassifier') {\n              this.updateDiagramObject(this.nameTable[obj.parentId]);\n              this.updateConnectorEdges(this.nameTable[obj.parentId]);\n            }\n          }\n\n          var index = void 0;\n          this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n          var currentObj = this.nameTable[obj.id];\n\n          if (currentObj instanceof Node) {\n            if (currentObj.shape.type === 'Bpmn' && this.bpmnModule) {\n              this.bpmnModule.removeBpmnProcesses(currentObj, this);\n            }\n\n            if (currentObj.isLane || currentObj.isPhase || currentObj.shape.type === 'SwimLane') {\n              var swimLaneNode = currentObj.isLane || currentObj.isPhase ? this.nameTable[currentObj.parentId] : this.nameTable[currentObj.id];\n              var grid = swimLaneNode.wrapper.children[0];\n\n              if (currentObj.isLane) {\n                removeLane(this, currentObj, swimLaneNode);\n              } else if (currentObj.isPhase) {\n                removePhase(this, currentObj, swimLaneNode);\n              }\n            }\n\n            index = this.nodes.indexOf(currentObj);\n\n            if (isBlazor() && obj.id !== 'helper') {\n              if (this.blazorActions & BlazorAction.GroupingInProgress) {\n                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n              } else if (this.blazorAddorRemoveCollection.length > 0) {\n                this.commandHandler.getBlazorOldValues();\n                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n              } else if (!this.isServerUpdate && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                this.UpdateBlazorDiagramModel(obj, 'Node', index);\n              }\n            }\n\n            if (index !== -1) {\n              this.crudDeleteNodes.push(this.nameTable[currentObj.id]);\n              this.nodes.splice(index, 1);\n              this.updateNodeEdges(currentObj);\n            }\n          } else {\n            index = this.connectors.indexOf(currentObj);\n\n            if (isBlazor()) {\n              if (this.blazorActions & BlazorAction.GroupingInProgress) {\n                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                this.blazorRemoveIndexCollection.splice(0, 0, index);\n              } else if (this.blazorAddorRemoveCollection.length > 0) {\n                this.commandHandler.getBlazorOldValues();\n                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n              } else if (!this.isServerUpdate && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                this.UpdateBlazorDiagramModel(obj, 'Connector', index);\n              }\n            }\n\n            if (index !== -1) {\n              this.crudDeleteNodes.push(this.nameTable[currentObj.id]);\n              this.connectors.splice(index, 1);\n            }\n\n            this.updateEdges(currentObj);\n            this.spliceConnectorEdges(obj, true);\n            this.spliceConnectorEdges(obj, false);\n          }\n\n          if (!this.isServerUpdate && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n            this.commandHandler.getBlazorOldValues();\n          }\n\n          if (groupAction) {\n            this.historyManager.endGroupAction();\n          }\n\n          if (isSelected(this, currentObj)) {\n            this.unSelect(currentObj);\n          }\n\n          if (!currentObj.isPhase) {\n            this.removeObjectsFromLayer(obj);\n\n            if (this.currentDrawingObject) {\n              this.currentDrawingObject.wrapper = undefined;\n            }\n\n            delete this.nameTable[obj.id];\n\n            if (selectedItems.length > 0 && selectedItems[0].id === currentObj.id && currentObj.parentId) {\n              var parentnode = this.nameTable[currentObj.parentId];\n\n              if (parentnode && parentnode.isLane && this.nameTable[parentnode.parentId].shape.type === 'SwimLane') {\n                var swimLaneNode = this.nameTable[parentnode.parentId];\n                removeLaneChildNode(this, swimLaneNode, parentnode, currentObj);\n              }\n            }\n\n            this.removeElements(currentObj);\n            this.updateBridging();\n\n            if (this.mode !== 'SVG') {\n              this.refreshDiagramLayer();\n            }\n\n            if (!(this.diagramActions & DiagramAction.Clear)) {\n              this.removeFromAQuad(currentObj);\n              args = {\n                element: obj,\n                cause: this.diagramActions,\n                state: 'Changed',\n                type: 'Removal',\n                cancel: false\n              };\n\n              if (isBlazor()) {\n                args = getCollectionChangeEventArguements(args, obj, 'Changed', 'Removal');\n              }\n\n              if (obj.id !== 'helper') {\n                this.triggerEvent(DiagramEvent.collectionChange, args);\n              }\n\n              this.resetTool();\n            }\n          }\n        }\n      }\n    } else if (selectedItems.length > 0) {\n      if (this.undoRedoModule) {\n        this.historyManager.startGroupAction();\n        this.blazorActions |= BlazorAction.GroupingInProgress;\n        groupAction = true;\n      }\n\n      if (isBlazor() && selectedItems.length > 1) {\n        this.clearSelection();\n      }\n\n      for (var i = 0; i < selectedItems.length; i++) {\n        var node = selectedItems[i];\n\n        if (this.nameTable[selectedItems[i].id]) {\n          if (selectedItems[i] instanceof Connector && this.bpmnModule && this.bpmnModule.textAnnotationConnectors.indexOf(selectedItems[i]) > -1) {\n            this.remove(this.nameTable[selectedItems[i].targetID]);\n            return;\n          }\n\n          if (isBlazor()) {\n            if (!this.isServerUpdate && selectedItems && selectedItems.length > 1) {\n              this.isServerUpdate = true;\n            }\n\n            if (selectedItems[i].parentId) {\n              this.insertBlazorDiagramObjects(this.nameTable[selectedItems[i].parentId]);\n            }\n          }\n\n          this.remove(selectedItems[i]);\n\n          if (isBlazor() && selectedItems[i].parentId) {\n            this.commandHandler.getBlazorOldValues();\n            this.isServerUpdate = false;\n          }\n        }\n      }\n\n      if (groupAction) {\n        this.blazorActions &= ~BlazorAction.GroupingInProgress;\n        this.isServerUpdate = true;\n        this.commandHandler.getBlazorOldValues();\n        this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n        this.historyManager.endGroupAction();\n        this.isServerUpdate = false;\n      }\n\n      this.clearSelection();\n    }\n\n    this.tooltipObject.close();\n\n    if (isBlazor() && selectedItems && selectedItems.length > 0) {\n      var check = true;\n\n      for (var k = 0; k < selectedItems.length; k++) {\n        if (this.nameTable[selectedItems[k].id]) {\n          check = false;\n        }\n      }\n\n      if (check) {\n        this.isServerUpdate = false;\n      }\n    }\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.isStackChild = function (obj) {\n    var isstack;\n    var parent = this.nameTable[obj.parentId];\n\n    if (obj && obj.parentId && parent.container && parent.container.type === 'Stack' && this.nameTable[obj.parentId].shape.type !== 'UmlClassifier') {\n      isstack = true;\n      var redoElement = {\n        sourceIndex: parent.wrapper.children.indexOf(obj.wrapper),\n        source: obj,\n        target: undefined,\n        targetIndex: undefined\n      };\n      var entry = {\n        type: 'StackChildPositionChanged',\n        redoObject: {\n          sourceIndex: undefined,\n          source: obj,\n          target: undefined,\n          targetIndex: undefined\n        },\n        undoObject: redoElement,\n        category: 'Internal'\n      };\n\n      if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n        this.addHistoryEntry(entry);\n      }\n    }\n\n    return isstack;\n  };\n  /** @private */\n\n\n  Diagram.prototype.deleteChild = function (node, parentNode) {\n    var id;\n    parentNode = parentNode ? this.nameTable[parentNode.id] : this.nameTable[node.parentId];\n\n    if (typeof node === 'string') {\n      id = node;\n    } else {\n      id = node.id;\n    }\n\n    if (parentNode && parentNode.children) {\n      for (var i = 0; i < parentNode.children.length; i++) {\n        if (parentNode.children[i] === id) {\n          parentNode.children.splice(i, 1);\n\n          for (var j = 0; j < parentNode.wrapper.children.length; j++) {\n            if (parentNode.wrapper.children[j].id === id) {\n              parentNode.wrapper.children.splice(j, 1);\n            }\n          }\n        }\n      }\n\n      parentNode.wrapper.measure(new Size());\n      parentNode.wrapper.arrange(parentNode.wrapper.desiredSize);\n    }\n  };\n  /**\n   * addChild method \\\n   *\n   * @returns { string }     addChild method .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {string | NodeModel | ConnectorModel} child - provide the child value.\n   * @param {number} index - provide the layoutOrientation value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.addChild = function (node, child, index) {\n    var id;\n    var parentNode = this.nameTable[node.id];\n\n    if (!parentNode.children) {\n      parentNode.children = [];\n    }\n\n    if (parentNode.children) {\n      if (typeof child === 'string') {\n        if (this.nameTable[child]) {\n          id = child;\n        }\n      } else {\n        id = child.id = child.id || randomId();\n        this.add(child);\n      }\n\n      if (id && (!child.umlIndex || child.umlIndex === -1)) {\n        var childNode = this.nameTable[id];\n        childNode.parentId = parentNode.id;\n\n        if (parentNode.container && parentNode.container.type === 'Stack') {\n          this.updateStackProperty(parentNode, childNode);\n        }\n\n        if (index) {\n          parentNode.children.splice(index, 0, id);\n          parentNode.wrapper.children.splice(index, 0, childNode.wrapper);\n        } else {\n          parentNode.children.push(id);\n          parentNode.wrapper.children.push(childNode.wrapper);\n        }\n\n        parentNode.wrapper.measure(new Size());\n        parentNode.wrapper.arrange(parentNode.wrapper.desiredSize);\n\n        if (!parentNode.isLane) {\n          this.nameTable[node.id].width = parentNode.wrapper.actualSize.width;\n          this.nameTable[node.id].height = parentNode.wrapper.actualSize.height;\n          this.nameTable[node.id].offsetX = parentNode.wrapper.offsetX;\n          this.nameTable[node.id].offsetY = parentNode.wrapper.offsetY;\n        }\n\n        if (parentNode.container !== undefined) {\n          childNode.offsetX = childNode.wrapper.offsetX;\n          childNode.offsetY = childNode.wrapper.offsetY;\n        }\n\n        if (!parentNode.parentId || this.nameTable[parentNode.parentId] && this.nameTable[parentNode.parentId].shape.type !== 'SwimLane') {\n          this.updateDiagramObject(parentNode);\n        }\n      }\n    }\n\n    return id;\n  };\n  /**\n   * Clears all nodes and objects in the diagram\n   *\n   * @returns { void }     getDirection method .\\\n    */\n\n\n  Diagram.prototype.clear = function () {\n    this.clearObjects();\n  };\n\n  Diagram.prototype.clearObjects = function (collection) {\n    var objects = [];\n\n    if (!collection) {\n      objects = objects.concat(this.nodes);\n      objects = objects.concat(this.connectors);\n    } else {\n      objects = collection;\n    }\n\n    this.diagramActions = this.diagramActions | DiagramAction.Clear;\n\n    if (isBlazor() && blazorTemplates[\"diagramsf_node_template\"]) {\n      this.resetTemplate();\n      var length_1 = blazorTemplates[\"diagramsf_node_template\"].length;\n\n      if (length_1 > 0) {\n        blazorTemplates[\"diagramsf_node_template\"].splice(0, length_1 - 1);\n      }\n    }\n\n    for (var _i = 0, objects_1 = objects; _i < objects_1.length; _i++) {\n      var obj = objects_1[_i];\n\n      if (this.nameTable[obj.id]) {\n        this.remove(obj);\n      }\n    }\n\n    this.diagramActions = this.diagramActions & ~DiagramAction.Clear;\n    this.spatialSearch = new SpatialSearch(this.nameTable);\n    this.initHistory();\n  };\n\n  Diagram.prototype.startEditCommad = function () {\n    var laneHeader;\n    var node = this.selectedItems.nodes[0] ? this.selectedItems.nodes[0] : undefined;\n\n    if (node && node instanceof Node) {\n      if (node.isLane && node.parentId) {\n        var swimlane = this.nameTable[node.parentId];\n        var lanes = swimlane.shape.lanes;\n        var canvasId = node.id.slice(swimlane.id.length);\n        var currentParentId = canvasId.substring(0, canvasId.length - 1);\n\n        for (var i = 0; i < lanes.length; i++) {\n          if (node.isLane && currentParentId === lanes[i].id) {\n            laneHeader = this.nameTable[lanes[i].header.id];\n          }\n        }\n      } else if (node.shape.type === 'SwimLane' && node.shape.header && node.shape.hasHeader) {\n        var id = node.wrapper.children[0].rows[0].cells[0].children[0].id;\n        laneHeader = this.nameTable[id];\n      }\n    }\n\n    this.startTextEdit(laneHeader);\n  };\n  /* tslint:disable */\n\n  /**\n   * Specified annotation to edit mode\n   *\n   * @returns { void }  Specified annotation to edit mode .\\\n   * @param {NodeModel | ConnectorModel} node - Defines node/connector that contains the annotation to be edited\n   * @param {string} id - Defines annotation id to be edited in the node\n   */\n\n\n  Diagram.prototype.startTextEdit = function (node, id) {\n    if (!canZoomPan(this) && !canMultiSelect(this) || canSingleSelect(this)) {\n      this.textEditing = true;\n      var transform = this.scroller.transform;\n      var scale = canZoomTextEdit(this) ? transform.scale : 1;\n      var minWidth = 90;\n      var text = void 0;\n      var bounds = void 0;\n      var attributes = void 0;\n      var x = void 0;\n      var y = void 0;\n      var textWrapper = void 0;\n\n      if (!node) {\n        node = this.selectedItems.nodes[0] ? this.selectedItems.nodes[0] : this.selectedItems.connectors[0];\n      }\n\n      if (node) {\n        if (isBlazor()) {\n          var selectedNode = cloneObject(node);\n\n          if (selectedNode.annotations.length > 0) {\n            this.insertValue(selectedNode, node instanceof Node ? true : false);\n          }\n\n          node = this.nameTable[node.id] || node;\n        }\n\n        if (node.shape && node.shape.type === 'UmlClassifier') {\n          node = this.nameTable[node.children[0]];\n        }\n\n        var bpmnAnnotation = false;\n\n        if (this.bpmnModule) {\n          textWrapper = this.bpmnModule.getTextAnnotationWrapper(node, id);\n\n          if (textWrapper) {\n            node = this.nameTable[node.id.split('_textannotation_')[0]];\n          }\n        }\n\n        if (!textWrapper) {\n          if (node.shape.type !== 'Text' && node.annotations.length === 0) {\n            if (!(node.constraints & NodeConstraints.ReadOnly)) {\n              this.activeLabel.isGroup = true;\n              this.startGroupAction();\n              this.addLabels(node, [{\n                id: randomId(),\n                content: ''\n              }]);\n            }\n          }\n\n          if (!id && (node.shape.type !== 'Text' && node.annotations.length > 0 || node.shape.type === 'Text')) {\n            id = node.shape.type === 'Text' ? node.wrapper.children[0].id.split('_')[1] : node.annotations[0].id;\n          }\n\n          if (id) {\n            textWrapper = this.getWrapper(node.wrapper, id);\n          }\n        } else {\n          bpmnAnnotation = true;\n        }\n\n        if (node && textWrapper && !(textWrapper instanceof DiagramHtmlElement) && (!enableReadOnly(textWrapper, node) || bpmnAnnotation)) {\n          var style = textWrapper.style;\n          var maxWidth = void 0;\n          maxWidth = textWrapper.bounds.width < node.wrapper.bounds.width ? textWrapper.bounds.width : node.wrapper.bounds.width;\n          maxWidth = minWidth > maxWidth ? minWidth : maxWidth;\n          var textEditing = document.getElementById(this.element.id + '_editTextBoxDiv');\n          var textArea = document.getElementById(this.element.id + '_editBox');\n          text = textArea ? textArea.value : textWrapper.content;\n          this.activeLabel.text = text;\n\n          if (!textEditing && !textArea) {\n            textEditing = createHtmlElement('div', {});\n            textArea = createHtmlElement('textarea', {});\n            this.diagramCanvas.appendChild(textEditing);\n            textEditing.appendChild(textArea);\n            textArea.appendChild(document.createTextNode(text));\n          }\n\n          bounds = measureHtmlText(textWrapper.style, text, undefined, undefined, maxWidth);\n\n          if (bounds.isEmpty()) {\n            if (node.shape.type !== 'Text') {\n              bounds = new Size(findAnnotation(node, textWrapper.id.split(node.id + '_')[1]).width || 50, textWrapper.style.fontSize);\n            } else {\n              bounds = new Size(node.width > 50 ? 50 : node.width, textWrapper.style.fontSize);\n            }\n          }\n\n          if (node.parentId && this.nameTable[node.parentId].shape.type === 'UmlClassifier') {\n            bounds.width = node.wrapper.bounds.width - 20;\n            x = (node.wrapper.bounds.center.x + transform.tx) * transform.scale - bounds.width / 2 * scale - 2.5;\n            y = (node.wrapper.bounds.center.y + transform.ty) * transform.scale - bounds.height / 2 * scale - 3;\n            textWrapper.style.textAlign = 'Left';\n          } else {\n            bounds.width = Math.max(bounds.width, 50);\n            x = (textWrapper.bounds.center.x + transform.tx) * transform.scale - bounds.width / 2 * scale - 2.5;\n            y = (textWrapper.bounds.center.y + transform.ty) * transform.scale - bounds.height / 2 * scale - 3;\n          }\n\n          if (node instanceof Connector && node.type === 'Bezier') {\n            var getCenterPoint = this.getMidPoint(node);\n            x = getCenterPoint.cx;\n            y = getCenterPoint.cy;\n          }\n\n          attributes = {\n            'id': this.element.id + '_editTextBoxDiv',\n            'style': 'position: absolute' + ';left:' + x + 'px;top:' + y + 'px;width:' + (bounds.width + 1) * scale + 'px;height:' + bounds.height * scale + 'px; containerName:' + node.id + ';'\n          };\n          setAttributeHtml(textEditing, attributes);\n          attributes = {\n            'id': this.element.id + '_editBox',\n            'style': 'width:' + (bounds.width + 1) * scale + 'px;height:' + bounds.height * scale + 'px;resize: none;outline: none;overflow: hidden;' + ';font-family:' + style.fontFamily + ';font-size:' + style.fontSize * scale + 'px;text-align:' + textWrapper.style.textAlign.toLocaleLowerCase() + ';',\n            'class': 'e-diagram-text-edit'\n          };\n          setAttributeHtml(textArea, attributes);\n          textArea.style.fontWeight = style.bold ? 'bold' : '';\n          textArea.style.fontStyle = style.italic ? 'italic' : '';\n          textArea.style.lineHeight = (style.fontSize * 1.2 + 'px;').toString();\n          textArea.style.textDecoration = style.textDecoration ? style.textDecoration : '';\n          this.activeLabel.parentId = node.id;\n          this.activeLabel.id = id;\n          textWrapper.visible = false;\n          this.updateDiagramObject(node);\n          this.diagramActions = this.diagramActions | DiagramAction.TextEdit;\n\n          if (!this.isTriggerEvent) {\n            EventHandler.add(textArea, 'input', this.eventHandler.inputChange, this.eventHandler);\n            EventHandler.add(textArea, 'focusout', this.focusOutEdit, this);\n            textArea.select();\n          }\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.updateConnectorfixedUserHandles = function (connector) {\n    if (connector.fixedUserHandles.length) {\n      var fixedUserHandleWrapper = void 0;\n\n      for (var _i = 0, _a = connector.fixedUserHandles; _i < _a.length; _i++) {\n        var fixedUserHandle = _a[_i];\n        fixedUserHandleWrapper = this.getWrapper(connector.wrapper, fixedUserHandle.id);\n        connector.updateAnnotation(fixedUserHandle, connector.intermediatePoints, connector.wrapper.bounds, fixedUserHandleWrapper);\n      }\n    }\n\n    connector.wrapper.measure(new Size(connector.wrapper.width, connector.wrapper.height));\n    connector.wrapper.arrange(connector.wrapper.desiredSize);\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.updateNodeExpand = function (node, visibility) {\n    for (var i = 0; i < node.outEdges.length; i++) {\n      var connector = this.nameTable[node.outEdges[i]];\n      var target = this.nameTable[connector.targetID];\n      connector.visible = visibility;\n\n      if (target) {\n        if (!visibility) {\n          this.updateElementVisibility(connector.wrapper, connector, false);\n          target.isExpanded = visibility;\n        }\n\n        this.updateNodeExpand(target, target.isExpanded);\n        target.visible = visibility;\n\n        if (!visibility) {\n          this.updateElementVisibility(target.wrapper, target, false);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.updateConnectorAnnotation = function (connector) {\n    if (connector.annotations.length) {\n      var annotationWrapper = void 0;\n\n      for (var _i = 0, _a = connector.annotations; _i < _a.length; _i++) {\n        var annotation = _a[_i];\n        annotationWrapper = this.getWrapper(connector.wrapper, annotation.id);\n        connector.updateAnnotation(annotation, connector.intermediatePoints, connector.wrapper.bounds, annotationWrapper, this.diagramActions & DiagramAction.Interactions);\n      }\n    }\n\n    connector.wrapper.measure(new Size(connector.wrapper.width, connector.wrapper.height));\n    connector.wrapper.arrange(connector.wrapper.desiredSize);\n  };\n\n  Diagram.prototype.removeChildrenFromLayout = function (nodes) {\n    var nodesCollection = [];\n    var node;\n    var parentId = 'parentId';\n    var processId = 'processId';\n\n    for (var i = 0; i < nodes.length; i++) {\n      node = nodes[i];\n\n      if (!node[parentId] && !node[processId]) {\n        nodesCollection.push(node);\n      }\n    }\n\n    return nodesCollection;\n  };\n  /* tslint:disable */\n\n  /**\n   * Automatically updates the diagram objects based on the type of the layout\n   * @returns { ILayout | boolean }  Automatically updates the diagram objects based on the type of the layout .\\\n   */\n\n\n  Diagram.prototype.doLayout = function () {\n    var update = false;\n    var layout;\n    var canDoOverlap = this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree';\n    var propChange = this.isProtectedOnChange;\n    this.protectPropertyChange(true);\n    var nodes = this.removeChildrenFromLayout(this.nodes);\n    var canEnableRouting = this.layout.enableRouting && this.layout.type === 'ComplexHierarchicalTree';\n    var viewPort = {\n      x: this.scroller.viewPortWidth,\n      y: this.scroller.viewPortHeight\n    };\n\n    if (this.layout.type !== 'None') {\n      if (canEnableRouting || this.layout.connectionPointOrigin === 'DifferentPoint' && this.lineDistributionModule && canDoOverlap || this.layout.arrangement === 'Linear') {\n        this.lineDistributionModule.initLineDistribution(this.layout, this);\n      }\n\n      if (this.organizationalChartModule) {\n        layout = this.organizationalChartModule.updateLayout(nodes, this.nameTable, this.layout, viewPort, this.dataSourceSettings.id, this.diagramActions);\n        update = true;\n\n        if (this.layoutAnimateModule && layout.rootNode && !this.diagramActions) {\n          this.updateNodeExpand(layout.rootNode, layout.rootNode.isExpanded);\n        }\n      } else if (this.mindMapChartModule) {\n        if (nodes && nodes.length > 0) {\n          this.mindMapChartModule.updateLayout(nodes, this.nameTable, this.layout, viewPort, this.dataSourceSettings.id, this.dataSourceSettings.root);\n        }\n\n        update = true;\n      } else if (this.radialTreeModule) {\n        this.radialTreeModule.updateLayout(nodes, this.nameTable, this.layout, viewPort);\n        update = true;\n      } else if (this.symmetricalLayoutModule) {\n        this.symmetricalLayoutModule.maxIteration = this.layout.maxIteration;\n        this.symmetricalLayoutModule.springLength = this.layout.springLength;\n        this.symmetricalLayoutModule.springFactor = this.layout.springFactor;\n        this.symmetricalLayoutModule.updateLayout(nodes, this.connectors, this.symmetricalLayoutModule, this.nameTable, this.layout, viewPort);\n        update = true;\n      } else if (this.complexHierarchicalTreeModule) {\n        var nodes_1 = this.complexHierarchicalTreeModule.getLayoutNodesCollection(this.nodes);\n\n        if (nodes_1.length > 0) {\n          // eslint-disable-next-line max-len\n          this.complexHierarchicalTreeModule.doLayout(nodes_1, this.nameTable, this.layout, viewPort, this.lineDistributionModule);\n        }\n\n        update = true;\n      }\n\n      if (update) {\n        this.preventDiagramUpdate = true;\n        var connectors = {};\n        var updatedNodes = nodes;\n\n        if (isBlazor()) {\n          this.updateTemplate();\n        }\n\n        for (var _i = 0, updatedNodes_1 = updatedNodes; _i < updatedNodes_1.length; _i++) {\n          var obj = updatedNodes_1[_i];\n          var node = obj;\n\n          if (!this.preventNodesUpdate && (!this.diagramActions || !(this.diagramActions & DiagramAction.PreventIconsUpdate))) {\n            this.updateIcon(node);\n            this.updateDefaultLayoutIcons(node);\n          }\n\n          this.preventNodesUpdate = true;\n          this.nodePropertyChange(node, {}, {\n            offsetX: node.offsetX,\n            offsetY: node.offsetY\n          }, true);\n          this.preventNodesUpdate = false;\n          node.wrapper.measure(new Size(node.wrapper.width, node.wrapper.height));\n          node.wrapper.arrange(node.wrapper.desiredSize);\n          this.updateDiagramObject(node, true);\n\n          if (node.inEdges.length > 0) {\n            for (var j = 0; j < node.inEdges.length; j++) {\n              var connector = this.nameTable[node.inEdges[j]];\n              connectors[connector.id] = connector;\n            }\n          }\n\n          if (node.outEdges.length > 0) {\n            for (var k = 0; k < node.outEdges.length; k++) {\n              var connection = this.nameTable[node.outEdges[k]];\n              connectors[connection.id] = connection;\n            }\n          }\n        }\n\n        for (var _a = 0, _b = Object.keys(connectors); _a < _b.length; _a++) {\n          var conn = _b[_a];\n\n          if (canEnableRouting) {\n            this.lineDistributionModule.resetConnectorSegments(this.nameTable[conn]);\n          }\n\n          var connector = connectors[conn];\n          var points = this.getPoints(connector);\n\n          if (canEnableRouting) {\n            this.lineDistributionModule.resetRoutingSegments(connector, this, points);\n          }\n\n          updateConnector(connector, points);\n\n          if (connector.shape.type === 'Bpmn' && connector.shape.sequence === 'Default') {\n            this.commandHandler.updatePathElementOffset(connector);\n          }\n\n          connector.wrapper.measure(new Size(undefined, undefined));\n          connector.wrapper.arrange(connector.wrapper.desiredSize);\n          this.updateConnectorAnnotation(connector);\n          this.updateConnectorfixedUserHandles(connector);\n          this.updateQuad(connector);\n          this.updateDiagramObject(connector, true);\n        }\n\n        if (canEnableRouting || this.layout.connectionPointOrigin === 'DifferentPoint' && this.lineDistributionModule && canDoOverlap) {\n          this.lineDistributionModule.distributeLines(this.layout, this);\n        }\n\n        this.preventDiagramUpdate = false;\n        this.updatePage();\n\n        if (!(this.diagramActions & DiagramAction.Render) || this.mode === 'Canvas') {\n          this.refreshDiagramLayer();\n        }\n      }\n\n      if (!propChange) {\n        this.protectPropertyChange(propChange);\n      }\n    }\n\n    if (update) {\n      this.updateDiagramElementQuad();\n    }\n\n    return this.blazorActions & BlazorAction.expandNode ? layout : isBlazor() ? null : true;\n  };\n  /* tslint:enable */\n\n  /**\n   * Serializes the diagram control as a string\n   * @returns { string }     Serializes the diagram control as a string .\\\n   */\n\n\n  Diagram.prototype.saveDiagram = function () {\n    var children = [];\n    var node;\n    var grid;\n    var childTable;\n    var child;\n    var gridChild = 'childTable';\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      node = this.nodes[i];\n\n      if (node.shape.type === 'SwimLane') {\n        grid = node.wrapper.children[0];\n        childTable = grid[gridChild];\n\n        for (var _i = 0, _a = Object.keys(childTable); _i < _a.length; _i++) {\n          var key = _a[_i];\n          child = childTable[key];\n          children = getChild(child, children);\n        }\n\n        for (var i_2 = 0; i_2 < children.length; i_2++) {\n          if (this.nameTable[children[i_2]]) {\n            this.swimlaneChildTable[children[i_2]] = this.nameTable[children[i_2]].zIndex;\n          }\n        }\n\n        this.swimlaneZIndexTable[node.id] = node.zIndex;\n      }\n    }\n\n    return serialize(this);\n  };\n  /**\n   * Converts the given string as a Diagram Control\n   *\n   * @returns { Object }      Converts the given string as a Diagram Control .\\\n   * @param {string} data - Defines the behavior of the diagram to be loaded\n    */\n\n\n  Diagram.prototype.loadDiagram = function (data) {\n    return deserialize(data, this);\n  };\n  /**\n   * To  get the html diagram content\n   *\n   * @returns { string }     getDirection method .\\\n   * @param {StyleSheetList} styleSheets - defines the collection of style files to be considered while exporting.\n   */\n\n\n  Diagram.prototype.getDiagramContent = function (styleSheets) {\n    if (this.printandExportModule) {\n      var data = this.printandExportModule.getDiagramContent(styleSheets);\n      return data;\n    }\n\n    return '';\n  };\n  /**\n   * To export diagram native/html image\n   *\n   * @returns { void } To export diagram native/html image .\\\n   * @param {string} image - defines image content to be exported.\n   * @param {IExportOptions} options - defines the image properties.\n   */\n\n\n  Diagram.prototype.exportImage = function (image, options) {\n    if (this.printandExportModule) {\n      this.printandExportModule.exportImages(image, options);\n    }\n  };\n  /**\n   * To print native/html nodes of diagram\n   *\n   * @returns { void } To print native/html nodes of diagram .\\\n   * @param {string} image - defines image content.\n   * @param {IExportOptions} options - defines the properties of the image\n   */\n\n\n  Diagram.prototype.printImage = function (image, options) {\n    if (this.printandExportModule) {\n      options.printOptions = true;\n      this.printandExportModule.exportImages(image, options);\n    }\n  };\n  /**\n   * To limit the history entry of the diagram\n   *\n   * @returns { void }  To limit the history entry of the diagram.\\\n   * @param {number} stackLimit - defines stackLimit of the history manager.\n   */\n\n\n  Diagram.prototype.setStackLimit = function (stackLimit) {\n    if (this.undoRedoModule && stackLimit) {\n      this.historyManager.stackLimit = stackLimit;\n      this.undoRedoModule.applyLimit(this.historyManager.currentEntry, stackLimit, this, true);\n    }\n  };\n  /**\n   * To clear history of the diagram\n   * @returns { void } To clear history of the diagram .\\\n   */\n\n\n  Diagram.prototype.clearHistory = function () {\n    if (this.undoRedoModule) {\n      this.undoRedoModule.clearHistory(this);\n    }\n  };\n  /**\n   * To get the bound of the diagram\n   * @returns { void } To get the bound of the diagram .\\\n   */\n\n\n  Diagram.prototype.getDiagramBounds = function () {\n    if (this.printandExportModule) {\n      var bounds = this.printandExportModule.getDiagramBounds('', {});\n      bounds.width = bounds.width > this.scrollSettings.viewPortWidth ? bounds.width + (bounds.x > 0 ? bounds.x : 0) : this.scrollSettings.viewPortWidth;\n      bounds.height = bounds.height > this.scrollSettings.viewPortHeight ? bounds.height + (bounds.y > 0 ? bounds.y : 0) : this.scrollSettings.viewPortHeight;\n      bounds.x = bounds.x > 0 ? 0 : bounds.x;\n      bounds.y = bounds.y > 0 ? 0 : bounds.y;\n      return bounds;\n    }\n\n    return new Rect();\n  };\n  /**\n   * To export Diagram\n   *\n   * @returns { void } To export Diagram .\\\n   * @param {IExportOptions} options - defines the how the image to be exported.\n   */\n\n\n  Diagram.prototype.exportDiagram = function (options) {\n    if (this.printandExportModule) {\n      var data = this.printandExportModule.exportDiagram(options);\n      return data;\n    }\n\n    return '';\n  };\n  /**\n   * To print Diagram\n   *\n   * @returns { void }     To print Diagram .\\\n   * @param {IPrintOptions} optons - defines how the image to be printed.\n   */\n\n\n  Diagram.prototype.print = function (options) {\n    if (this.printandExportModule) {\n      this.printandExportModule.print(options);\n    }\n  };\n  /**\n   * Add ports at the run time \\\n   *\n   * @returns { void }    Remove Labels at the run time .\\\n   * @param { Node | ConnectorModel} obj - provide the obj value.\n   * @param {ShapeAnnotationModel[] | PathAnnotationModel[]} ports - provide the ports value.\n   * @blazorArgsType obj|DiagramNode\n   */\n\n\n  Diagram.prototype.addPorts = function (obj, ports) {\n    this.protectPropertyChange(true);\n    var portCollection = [];\n    var isAddPortInServer = true;\n\n    if (isBlazor() && obj !== null && obj.ports.length > 0 && !(this.diagramActions & DiagramAction.UndoRedo)) {\n      var index = Number(findObjectIndex(obj, ports[0].id, false));\n\n      if (index !== -1) {\n        isAddPortInServer = false;\n      }\n    }\n\n    obj = this.nameTable[obj.id] || obj;\n    var newObj;\n\n    if (ports.length > 1) {\n      this.startGroupAction();\n    }\n\n    for (var i = 0; i < ports.length; i++) {\n      newObj = new PointPort(obj, 'ports', ports[i], true);\n      obj.ports.push(newObj);\n\n      if (isBlazor() && isAddPortInServer) {\n        portCollection.push(newObj);\n      }\n\n      if (obj.children) {\n        var container = obj.wrapper;\n        obj.initPort(this.getDescription, obj.wrapper.children[container.children.length - 1], newObj);\n      } else {\n        var canvas = obj.wrapper;\n        canvas.children.push(obj.initPortWrapper(obj.ports[obj.ports.length - 1]));\n      }\n\n      if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n        var entry = {\n          type: 'PortCollectionChanged',\n          changeType: 'Insert',\n          undoObject: cloneObject(newObj),\n          redoObject: cloneObject(obj),\n          category: 'Internal'\n        };\n        this.addHistoryEntry(entry);\n      }\n    }\n\n    if (ports.length > 1) {\n      this.endGroupAction();\n    }\n\n    if (isBlazor() && isAddPortInServer) {\n      this.UpdateBlazorLabelOrPortObjects(portCollection, 'Port', undefined, this.nodes.indexOf(obj));\n    }\n\n    obj.wrapper.measure(new Size(obj.width, obj.height));\n    obj.wrapper.arrange(obj.wrapper.desiredSize);\n    this.updateDiagramObject(obj);\n    this.protectPropertyChange(false);\n  };\n  /**\n   * Add constraints at run time \\\n   *\n   * @returns { void }Add constraints at run time .\\\n   * @param {number} constraintsType - provide the source value.\n   * @param {number} constraintsValue - provide the target value.\n   *\n   */\n\n\n  Diagram.prototype.addConstraints = function (constraintsType, constraintsValue) {\n    return constraintsType | constraintsValue;\n  };\n  /**\n   * Remove constraints at run time \\\n   *\n   * @returns { void }Remove constraints at run time .\\\n   * @param {number} constraintsType - provide the source value.\n   * @param {number} constraintsValue - provide the target value.\n   *\n   */\n\n\n  Diagram.prototype.removeConstraints = function (constraintsType, constraintsValue) {\n    return constraintsType & ~constraintsValue;\n  };\n  /**\n   * Add labels in node at the run time in the blazor platform \\\n   *\n   * @returns { void } Add labels in node at the run time in the blazor platform .\\\n   * @param {NodeModel} obj - provide the obj value.\n   * @param {ShapeAnnotationModel[]} labels - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.addNodeLabels = function (obj, labels) {\n    this.addLabels(obj, labels);\n  };\n  /**\n   * Add labels in connector at the run time in the blazor platform\\\n   *\n   * @returns { void } Add labels in connector at the run time in the blazor platform .\\\n   * @param {ConnectorModel} obj - provide the obj value.\n   * @param {PathAnnotationModel[]} labels - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.addConnectorLabels = function (obj, labels) {\n    this.addLabels(obj, labels);\n  };\n  /**\n   * Add Labels at the run time \\\n   *\n   * @returns { void } Add Labels at the run time .\\\n   * @param {NodeModel | ConnectorModel} obj - provide the obj value.\n   * @param {ShapeAnnotationModel[] | PathAnnotation[] | PathAnnotationModel[]} labels - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.addLabels = function (obj, labels) {\n    this.protectPropertyChange(true);\n    var isAddLabelInServer = true;\n    var annotationCollection = [];\n\n    if (isBlazor() && obj != null && obj.annotations.length > 0 && !(this.diagramActions & DiagramAction.UndoRedo)) {\n      var index = Number(findObjectIndex(obj, labels[0].id, true));\n\n      if (index !== -1) {\n        isAddLabelInServer = false;\n      }\n    }\n\n    obj = this.nameTable[obj.id] || obj;\n    var canvas = obj.wrapper;\n    var newObj;\n\n    if (labels.length > 1) {\n      this.startGroupAction();\n    }\n\n    for (var i = 0; i < labels.length; i++) {\n      if (obj instanceof Node) {\n        newObj = new ShapeAnnotation(obj, 'annotations', labels[i], true);\n        obj.annotations.push(newObj);\n\n        if (isBlazor() && isAddLabelInServer) {\n          annotationCollection.push(newObj);\n        }\n\n        if (obj.children) {\n          var node = obj;\n\n          for (var i_3 = 0; i_3 < node.wrapper.children.length; i_3++) {\n            if (node.wrapper.children[i_3].id === node.id + 'group_container') {\n              var container = node.wrapper.children[i_3];\n              container.children.push(obj.initAnnotationWrapper(obj.annotations[obj.annotations.length - 1], this.element.id));\n            }\n          }\n        } else {\n          canvas.children.push(obj.initAnnotationWrapper(obj.annotations[obj.annotations.length - 1], this.element.id));\n        }\n      } else if (obj instanceof Connector) {\n        newObj = new PathAnnotation(obj, 'annotations', labels[i], true);\n        obj.annotations.push(newObj);\n\n        if (isBlazor() && isAddLabelInServer) {\n          annotationCollection.push(newObj);\n        }\n\n        var segment = canvas.children[0];\n        var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n        canvas.children.push(obj.getAnnotationElement(obj.annotations[obj.annotations.length - 1], obj.intermediatePoints, bounds, this.getDescription, this.element.id));\n      }\n\n      if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n        var entry = {\n          type: 'LabelCollectionChanged',\n          changeType: 'Insert',\n          undoObject: cloneObject(newObj),\n          redoObject: cloneObject(obj),\n          category: 'Internal'\n        };\n        this.addHistoryEntry(entry);\n      }\n    }\n\n    if (labels.length > 1) {\n      this.endGroupAction();\n    }\n\n    if (isBlazor() && isAddLabelInServer) {\n      this.UpdateBlazorLabelOrPortObjects(annotationCollection, obj instanceof Node ? 'NodeAnnotation' : 'ConnectorAnnotation', undefined, obj instanceof Node ? this.nodes.indexOf(obj) : this.connectors.indexOf(obj));\n    }\n\n    obj.wrapper.measure(new Size(canvas.width, canvas.height));\n    obj.wrapper.arrange(canvas.desiredSize);\n    this.updateDiagramObject(obj);\n    this.protectPropertyChange(false);\n  };\n  /**\n   * Add dynamic Lanes to swimLane at runtime \\\n   *\n   * @returns { void } Add dynamic Lanes to swimLane at runtime .\\\n   * @param {NodeModel} node - provide the obj value.\n   * @param {LaneModel[]} lane - provide the labels value.\n   * @param {number} index - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.addLanes = function (node, lane, index) {\n    node = this.nameTable[node.id] || node;\n\n    for (var i = 0; i < lane.length; i++) {\n      addLane(this, node, lane[i], index);\n\n      if (index !== undefined) {\n        index += 1;\n      }\n    }\n\n    this.updateDiagramElementQuad();\n  };\n  /**\n   * Add a phase to a swimLane at runtime \\\n   *\n   * @returns { void } Add a phase to a swimLane at runtime .\\\n   * @param {NodeModel} node - provide the obj value.\n   * @param {PhaseModel[]} phases - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.addPhases = function (node, phases) {\n    node = this.nameTable[node.id] || node;\n\n    for (var i = 0; i < phases.length; i++) {\n      addPhase(this, node, phases[i]);\n    }\n\n    this.updateDiagramElementQuad();\n  };\n  /**\n   *Remove dynamic Lanes to swimLane at runtime \\\n   *\n   * @returns { void } Remove dynamic Lanes to swimLane at runtime .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {LaneModel} lane - provide the lane value.\n   *\n   */\n\n\n  Diagram.prototype.removeLane = function (node, lane) {\n    removeLane(this, undefined, node, lane);\n    this.updateDiagramElementQuad();\n  };\n  /**\n   *Remove a phase to a swimLane at runtime \\\n   *\n   * @returns { void } Remove a phase to a swimLane at runtime .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {PhaseModel} phase - provide the phase value.\n   *\n   */\n\n\n  Diagram.prototype.removePhase = function (node, phase) {\n    removePhase(this, undefined, node, phase);\n    this.updateDiagramElementQuad();\n  };\n\n  Diagram.prototype.removelabelExtension = function (obj, labels, j, wrapper) {\n    for (var i = 0; i < wrapper.children.length; i++) {\n      var canvas = wrapper.children[i];\n\n      if (canvas instanceof TextElement || canvas instanceof DiagramHtmlElement) {\n        if (canvas.id.match('_' + labels[j].id + '$')) {\n          for (var k = 0; k < obj.annotations.length; k++) {\n            if (canvas.id.match('_' + obj.annotations[k].id + '$')) {\n              if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n                var entry = {\n                  type: 'LabelCollectionChanged',\n                  changeType: 'Remove',\n                  undoObject: cloneObject(obj.annotations[k]),\n                  redoObject: cloneObject(obj),\n                  category: 'Internal'\n                };\n                this.addHistoryEntry(entry);\n              }\n\n              obj.annotations.splice(k, 1);\n            }\n          }\n\n          wrapper.children.splice(i, 1);\n\n          if (this.mode === 'SVG') {\n            var element = getDiagramElement(canvas.id, this.element.id);\n\n            if (element) {\n              var element_1 = getDiagramElement(canvas.id, this.element.id);\n              element_1.parentNode.removeChild(element_1);\n            }\n\n            var textElement = getDiagramElement(canvas.id + '_text', this.element.id);\n\n            if (textElement) {\n              element = getDiagramElement(canvas.id + '_text', this.element.id);\n              element.parentNode.removeChild(element);\n            }\n\n            var htmlElement = getDiagramElement(canvas.id + '_html_element', this.element.id);\n\n            if (htmlElement) {\n              htmlElement.parentNode.removeChild(htmlElement);\n            }\n          } else {\n            this.refreshCanvasLayers();\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Remove Labels at the run time \\\n   *\n   * @returns { string }    Remove Labels at the run time .\\\n   * @param { Node | ConnectorModel} obj - provide the obj value.\n   * @param {ShapeAnnotationModel[] | PathAnnotationModel[]} labels - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.removeLabels = function (obj, labels) {\n    var isAddLabelInServer = true;\n\n    if (isBlazor() && obj !== null && !(this.diagramActions & DiagramAction.UndoRedo)) {\n      var index = obj.annotations.length > 0 ? Number(findObjectIndex(obj, labels[0].id, true)) : -1;\n\n      if (index === -1) {\n        isAddLabelInServer = false;\n      }\n    }\n\n    obj = this.nameTable[obj.id] || obj;\n\n    if (isBlazor() && isAddLabelInServer) {\n      var annotationCollection = [];\n      var removalIndexCollection = [];\n\n      for (var j = 0; j < labels.length; j++) {\n        var index = Number(findObjectIndex(obj, labels[j].id, true));\n        removalIndexCollection.push(index);\n        annotationCollection.push(labels[j]);\n      }\n\n      this.UpdateBlazorLabelOrPortObjects(annotationCollection, obj instanceof Node ? 'NodeAnnotation' : 'ConnectorAnnotation', removalIndexCollection, obj instanceof Node ? this.nodes.indexOf(obj) : this.connectors.indexOf(obj));\n    }\n\n    if (labels.length > 1) {\n      this.startGroupAction();\n    }\n\n    for (var j = labels.length - 1; j >= 0; j--) {\n      if (obj.children && obj.children.length > 0) {\n        for (var k = 0; k < obj.wrapper.children.length; k++) {\n          this.removelabelExtension(obj, labels, j, obj.wrapper.children[k]);\n        }\n      } else {\n        this.removelabelExtension(obj, labels, j, obj.wrapper);\n      }\n    }\n\n    if (labels.length > 1) {\n      this.endGroupAction();\n    }\n  };\n\n  Diagram.prototype.removePortsExtenion = function (obj, ports, j, wrapper) {\n    for (var i = 0; i < wrapper.children.length; i++) {\n      var canvas = wrapper.children[i];\n\n      if (canvas instanceof PathElement) {\n        if (canvas.id.match('_' + ports[j].id + '$')) {\n          for (var k = 0; k < obj.ports.length; k++) {\n            if (canvas.id.match('_' + obj.ports[k].id + '$')) {\n              if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n                var entry = {\n                  type: 'PortCollectionChanged',\n                  changeType: 'Remove',\n                  undoObject: cloneObject(obj.ports[k]),\n                  redoObject: cloneObject(obj),\n                  category: 'Internal'\n                };\n                this.addHistoryEntry(entry);\n              }\n\n              obj.ports.splice(k, 1);\n            }\n          }\n\n          wrapper.children.splice(i, 1);\n\n          if (this.mode === 'SVG') {\n            var element = getDiagramElement(canvas.id, this.element.id);\n            element.parentNode.removeChild(element);\n          } else {\n            this.refreshCanvasLayers();\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Remove Ports at the run time \\\n   *\n   * @returns { void } checkSourcePointInTarget method .\\\n   * @param {Node} obj - provide the Connector value.\n   * @param {PointPortModel[]} ports - provide the Connector value.\n   *\n   */\n\n\n  Diagram.prototype.removePorts = function (obj, ports) {\n    var isAddPortInServer = true;\n\n    if (isBlazor() && obj !== null && !(this.diagramActions & DiagramAction.UndoRedo)) {\n      var index = obj.ports.length > 0 ? Number(findObjectIndex(obj, ports[0].id, false)) : -1;\n\n      if (index === -1) {\n        isAddPortInServer = false;\n      }\n    }\n\n    obj = this.nameTable[obj.id] || obj;\n\n    if (isBlazor() && isAddPortInServer) {\n      var removalIndexCollection = [];\n      var portCollection = [];\n\n      for (var j = ports.length - 1; j >= 0; j--) {\n        var index = Number(findObjectIndex(obj, ports[j].id, false));\n        removalIndexCollection.push(index);\n        portCollection.push(ports[j]);\n      }\n\n      this.UpdateBlazorLabelOrPortObjects(portCollection, 'Port', removalIndexCollection, this.nodes.indexOf(obj));\n    }\n\n    if (ports.length > 1) {\n      this.startGroupAction();\n    }\n\n    for (var j = ports.length - 1; j >= 0; j--) {\n      if (obj.children && obj.children.length > 0) {\n        for (var k = 0; k < obj.wrapper.children.length; k++) {\n          this.removePortsExtenion(obj, ports, j, obj.wrapper.children[k]);\n        }\n      } else {\n        this.removePortsExtenion(obj, ports, j, obj.wrapper);\n      }\n    }\n\n    if (ports.length > 1) {\n      this.endGroupAction();\n    }\n  }; //public methods - end region\n\n  /**\n   * getSizeValue method \\\n   *\n   * @returns { string }     getSizeValue method .\\\n   * @param {string | Number} real - provide the real value.\n   * @param {string | Number} rulerSize - provide the rulerSize value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getSizeValue = function (real, rulerSize) {\n    var value;\n\n    if (real.toString().indexOf('px') > 0) {\n      value = real.toString();\n    } else if (real.toString().indexOf('%') > 0) {\n      value = rulerSize !== undefined ? '100%' : real.toString();\n    } else {\n      value = real.toString() + 'px';\n    }\n\n    if (rulerSize) {\n      var position = getRulerSize(this);\n      value = 'calc(' + value + ' - ' + rulerSize + 'px)';\n    }\n\n    return value;\n  };\n\n  Diagram.prototype.renderRulers = function () {\n    if (this.rulerSettings.showRulers) {\n      renderOverlapElement(this);\n      renderRuler(this, true);\n      renderRuler(this, false);\n    } else {\n      removeRulerElements(this);\n    }\n  };\n\n  Diagram.prototype.intOffPageBackground = function () {\n    var position = new Size();\n    position = getRulerSize(this);\n    var element = document.getElementById(this.element.id + 'content');\n    var width = this.getSizeValue(this.width, position.width);\n    var height = this.getSizeValue(this.height, position.height);\n    var style = this.rulerSettings.showRulers ? 'width:' + width + '; height:' + height + ';' + 'top:' + position.height + 'px;left:' + position.width + 'px;' + 'overflow: scroll;position:absolute;overflow:auto;' : 'width:' + width + '; height:' + height + ';position:absolute;' + ' left:0px;  top:0px;overflow: auto;';\n    var attr = {\n      'id': this.element.id + 'content',\n      'tabindex': '0',\n      'style': style\n    };\n\n    if (!element) {\n      this.diagramCanvas = createHtmlElement('div', attr);\n      this.element.appendChild(this.diagramCanvas);\n    } else {\n      this.diagramCanvas = element;\n      applyStyleAgainstCsp(this.diagramCanvas, style);\n    }\n\n    this.diagramCanvas.style.background = this.backgroundColor;\n  };\n\n  Diagram.prototype.initDiagram = function () {\n    this.intOffPageBackground();\n    setAttributeHtml(this.element, {\n      style: 'width:' + this.getSizeValue(this.width) + '; height:' + this.getSizeValue(this.height) + ';position:relative;overflow:hidden;'\n    });\n  };\n\n  Diagram.prototype.renderHiddenUserHandleTemplateLayer = function (bounds) {\n    //let element: HTMLElement;\n    var attributes = {\n      'class': this.element.id + '_hiddenUserHandleTemplate',\n      'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;' + 'visibility:hidden ;  overflow: hidden;'\n    };\n    var element = createHtmlElement('div', attributes);\n    this.element.appendChild(element);\n  };\n\n  Diagram.prototype.renderBackgroundLayer = function (bounds, commonStyle) {\n    var bgLayer = this.createSvg(this.element.id + '_backgroundLayer_svg', bounds.width, bounds.height);\n    applyStyleAgainstCsp(bgLayer, commonStyle);\n    var backgroundImage = createSvgElement('g', {\n      'id': this.element.id + '_backgroundImageLayer',\n      'class': 'e-background-image-layer'\n    });\n    bgLayer.appendChild(backgroundImage);\n    var attr = {\n      'id': this.element.id + '_backgroundLayer',\n      'class': 'e-background-layer'\n    };\n    var background = createSvgElement('g', attr);\n    bgLayer.appendChild(background);\n    this.diagramCanvas.appendChild(bgLayer);\n  };\n\n  Diagram.prototype.renderGridLayer = function (bounds, commonStyle) {\n    var svgGridSvg = this.createSvg(this.element.id + '_gridline_svg', bounds.width, bounds.height);\n    svgGridSvg.setAttribute('class', 'e-grid-layer');\n    var svgGrid = createSvgElement('g', {\n      'id': this.element.id + '_gridline'\n    });\n    var rect = createSvgElement('rect', {\n      'id': this.element.id + '_grid_rect',\n      'x': '0',\n      'y': '0',\n      'width': '100%',\n      'height': '100%'\n    });\n\n    if (checkBrowserInfo()) {\n      rect.setAttribute('fill', 'url(' + location.protocol + '//' + location.host + location.pathname + '#' + this.element.id + '_pattern)');\n    } else {\n      rect.setAttribute('fill', 'url(#' + this.element.id + '_pattern)');\n    }\n\n    svgGrid.appendChild(rect);\n    svgGridSvg.appendChild(svgGrid);\n    this.diagramCanvas.appendChild(svgGridSvg);\n    setAttributeSvg(svgGridSvg, {\n      'style': commonStyle\n    });\n  };\n\n  Diagram.prototype.renderDiagramLayer = function (bounds, commonStyle) {\n    var attributes = {\n      'id': this.element.id + '_diagramLayer_div',\n      'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;' + commonStyle\n    };\n    this.diagramLayerDiv = createHtmlElement('div', attributes);\n\n    if (this.mode === 'SVG') {\n      var diagramSvg = this.createSvg(this.element.id + '_diagramLayer_svg', bounds.width, bounds.height);\n      diagramSvg.style['pointer-events'] = 'none';\n      diagramSvg.setAttribute('class', 'e-diagram-layer');\n      var diagramLayer = createSvgElement('g', {\n        'id': this.element.id + '_diagramLayer'\n      });\n      var transformationLayer = createSvgElement('g', {});\n      this.diagramLayer = diagramLayer;\n      diagramSvg.style['pointer-events'] = 'all';\n      transformationLayer.appendChild(diagramLayer);\n      diagramSvg.appendChild(transformationLayer);\n      this.diagramLayerDiv.appendChild(diagramSvg);\n    } else {\n      this.diagramLayer = CanvasRenderer.createCanvas(this.element.id + '_diagram', bounds.width, bounds.height);\n      applyStyleAgainstCsp(this.diagramLayer, 'position:absolute;left:0px;top:0px;');\n      this.diagramLayerDiv.appendChild(this.diagramLayer);\n    }\n\n    this.diagramCanvas.appendChild(this.diagramLayerDiv);\n  };\n\n  Diagram.prototype.initLayers = function () {\n    var commonStyle = 'position:absolute;top:0px;left:0px;overflow:hidden;pointer-events:none;';\n    var container = document.getElementById(this.element.id);\n    var bounds = container.getBoundingClientRect();\n    var scrollerSize = getScrollerWidth();\n    this.scroller.scrollerWidth = scrollerSize;\n    this.scroller.setViewPortSize(bounds.width, bounds.height);\n    this.renderRulers();\n    var measureWindowElement = 'measureElement';\n\n    if (window[measureWindowElement]) {\n      window[measureWindowElement] = null;\n      var measureElements = document.getElementById('measureElement');\n      measureElements.remove();\n    }\n\n    createMeasureElements(); // this.renderBackgroundImageLayer(bounds, commonStyle);\n\n    this.renderBackgroundLayer(bounds, commonStyle);\n    this.renderGridLayer(bounds, commonStyle);\n    this.renderDiagramLayer(bounds, commonStyle);\n    this.renderHTMLLayer(bounds, commonStyle);\n    this.renderPortsExpandLayer(bounds, commonStyle);\n    this.renderNativeLayer(bounds, commonStyle);\n    this.renderAdornerLayer(bounds, commonStyle);\n    this.renderHiddenUserHandleTemplateLayer(bounds);\n  };\n\n  Diagram.prototype.renderAdornerLayer = function (bounds, commonStyle) {\n    var divElement = createHtmlElement('div', {\n      'id': this.element.id + '_diagramAdornerLayer',\n      'style': 'width:' + bounds.width + 'px;height:' + bounds.height + 'px;' + commonStyle\n    });\n    var element = createHtmlElement('div', {\n      'id': this.element.id + '_diagramUserHandleLayer',\n      'style': 'width:' + bounds.width + 'px;height:' + bounds.height + 'px;' + commonStyle\n    });\n    element.setAttribute('class', 'e-userHandle-layer');\n    divElement.appendChild(element);\n    var svgAdornerSvg = this.createSvg(this.element.id + '_diagramAdorner_svg', bounds.width, bounds.height);\n    svgAdornerSvg.setAttribute('class', 'e-adorner-layer');\n    svgAdornerSvg.style['pointer-events'] = 'none';\n    this.adornerLayer = createSvgElement('g', {\n      'id': this.element.id + '_diagramAdorner'\n    });\n    this.adornerLayer.style[' pointer-events'] = 'all';\n    svgAdornerSvg.appendChild(this.adornerLayer);\n    divElement.appendChild(svgAdornerSvg);\n    this.diagramCanvas.appendChild(divElement);\n    var svgSelector = createSvgElement('g', {\n      'id': this.element.id + '_SelectorElement'\n    });\n    this.adornerLayer.appendChild(svgSelector);\n    setAttributeSvg(svgAdornerSvg, {\n      style: 'pointer-events:none;'\n    });\n  };\n\n  Diagram.prototype.renderPortsExpandLayer = function (bounds, commonStyle) {\n    var svgPortsSvg = this.createSvg(this.element.id + '_diagramPorts_svg', bounds.width, bounds.height);\n    svgPortsSvg.setAttribute('class', 'e-ports-expand-layer');\n    var svgPortsLayer = createSvgElement('g', {\n      'id': this.element.id + '_diagramPorts',\n      'class': 'e-ports-layer',\n      'style': 'pointer-events: all;'\n    });\n    svgPortsSvg.appendChild(svgPortsLayer);\n    var svgExpandLayer = createSvgElement('g', {\n      'id': this.element.id + '_diagramExpander',\n      'class': 'e-expand-layer',\n      'style': 'pointer-events: all;'\n    });\n    svgPortsSvg.appendChild(svgExpandLayer);\n    this.diagramCanvas.appendChild(svgPortsSvg);\n    setAttributeSvg(svgPortsSvg, {\n      'style': commonStyle\n    });\n  };\n\n  Diagram.prototype.renderHTMLLayer = function (bounds, commonStyle) {\n    this.htmlLayer = createHtmlElement('div', {\n      'id': this.element.id + '_htmlLayer',\n      'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;position:absolute;top:0px;' + 'left:0px;overflow:hidden;pointer-events:none;',\n      'class': 'e-html-layer'\n    });\n    var htmlLayerDiv = createHtmlElement('div', {\n      'id': this.element.id + '_htmlLayer_div',\n      'style': 'position:absolute;top:0px;left:0px;pointer-events:all;'\n    });\n    this.htmlLayer.appendChild(htmlLayerDiv);\n    this.diagramCanvas.appendChild(this.htmlLayer);\n  };\n\n  Diagram.prototype.renderNativeLayer = function (bounds, commonStyle) {\n    var nativeLayerSvg = this.createSvg(this.element.id + '_nativeLayer_svg', bounds.width, bounds.height);\n    var nativeLayer = createSvgElement('g', {\n      'id': this.element.id + '_nativeLayer',\n      'style': 'pointer-events:all;'\n    });\n    nativeLayerSvg.appendChild(nativeLayer);\n    this.diagramLayerDiv.appendChild(nativeLayerSvg);\n    setAttributeSvg(nativeLayerSvg, {\n      'class': 'e-native-layer',\n      'style': commonStyle\n    });\n  };\n  /**\n   * createSvg method \\\n   *\n   * @returns { void }     createSvg method .\\\n   * @param {string} id - provide the source value.\n   * @param {string | Number} width - provide the source value.\n   * @param {string | Number} height - provide the source value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.createSvg = function (id, width, height) {\n    var svgObj = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    setAttributeSvg(svgObj, {\n      'id': id,\n      'width': width,\n      'height': height\n    });\n    return svgObj;\n  };\n\n  Diagram.prototype.updateBazorShape = function () {\n    for (var i = 0; i < this.nodes.length; i++) {\n      var node = this.nodes[i];\n\n      switch (node.shape.type) {\n        case 'Bpmn':\n          node.shape.bpmnShape = node.shape.shape ? node.shape.shape : node.shape.bpmnShape;\n          break;\n\n        case 'UmlActivity':\n          node.shape.umlActivityShape = node.shape.shape ? node.shape.shape : node.shape.umlActivityShape;\n          break;\n\n        case 'Flow':\n          node.shape.flowShape = node.shape.shape ? node.shape.shape : node.shape.flowShape;\n          break;\n\n        case 'Basic':\n          node.shape.basicShape = node.shape.shape ? node.shape.shape : node.shape.basicShape;\n          break;\n\n        case 'Text':\n          node.shape.textContent = node.shape.content ? node.shape.content : node.shape.textContent;\n          break;\n      }\n    }\n  };\n\n  Diagram.prototype.initObjects = function (isLoad) {\n    this.updateBazorShape();\n\n    if (!this.isLoading) {\n      this.initData();\n    }\n\n    this.initLayerObjects();\n    this.updateBridging(isLoad);\n  };\n  /**\n   * initLayerObjects method \\\n   *\n   * @returns { void }     initLayerObjects method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.initLayerObjects = function () {\n    var hasLayers = this.layers.length > 1; //const set: boolean = false;\n\n    var connectors = [];\n    var blazor = 'Blazor';\n    var canCloneObject = window && window[blazor] && !this.dataSourceSettings.dataSource;\n    var tempTabel = {};\n    var bpmnTable = {};\n    var tempNode = [];\n    var groups = [];\n    var i = 0;\n    var previousNodeObject = [];\n    var previousConnectorObject = [];\n    var updateNodeObject = [];\n    var updateConnectorObject = [];\n    var changeNodes = [];\n    var changeConnectors = [];\n\n    if (isBlazor() && canCloneObject) {\n      previousNodeObject = this.previousNodeCollection;\n      previousConnectorObject = this.previousConnectorCollection;\n    }\n\n    for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n      var obj = _a[_i];\n      obj.id = obj.id || randomId();\n      this.addToLayer(obj, hasLayers);\n      tempTabel[obj.id] = obj;\n    }\n\n    for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n      var obj = _c[_b];\n      obj.id = obj.id || randomId();\n      this.addToLayer(obj, hasLayers);\n      tempTabel[obj.id] = obj;\n    }\n\n    for (var _d = 0, _e = this.layers; _d < _e.length; _d++) {\n      var layer = _e[_d];\n\n      for (var _f = 0, _g = layer.objects; _f < _g.length; _f++) {\n        var obj = _g[_f];\n\n        if (tempTabel[obj]) {\n          if (!(tempTabel[obj] instanceof Connector)) {\n            if (tempTabel[obj].children) {\n              groups.push(obj);\n            } else if (tempTabel[obj].shape instanceof BpmnShape && tempTabel[obj].shape.activity.subProcess.processes && tempTabel[obj].shape.activity.subProcess.processes.length > 0) {\n              bpmnTable[tempTabel[obj].id] = obj;\n            } else {\n              this.initNodes(tempTabel[obj], layer);\n            }\n          } else {\n            var connector = tempTabel[obj];\n\n            if (connector.sourceID && connector.targetID) {\n              var sourceNode = tempTabel[connector.sourceID];\n              var targetNode = tempTabel[connector.targetID];\n              var flag = true;\n\n              if (this.isLoading && (sourceNode && sourceNode.children && sourceNode.children.length > 0 || targetNode && targetNode.children && targetNode.children.length > 0)) {\n                flag = false;\n              }\n\n              if (sourceNode && sourceNode.wrapper && targetNode && targetNode.wrapper && flag) {\n                this.initConnectors(tempTabel[obj], layer);\n              } else {\n                connectors.push(tempTabel[obj]);\n              }\n            } else {\n              this.initConnectors(tempTabel[obj], layer);\n            }\n          }\n        }\n      }\n\n      if (this.bpmnModule) {\n        for (var _h = 0, _j = this.bpmnModule.textAnnotationConnectors; _h < _j.length; _h++) {\n          var obj = _j[_h];\n          this.initConnectors(obj, layer, false);\n        }\n      }\n    }\n\n    for (var _k = 0, _l = Object.keys(bpmnTable); _k < _l.length; _k++) {\n      var obj = _l[_k];\n      this.initObject(tempTabel[obj]);\n      this.bpmnModule.updateDocks(tempTabel[obj], this);\n    }\n\n    var alignedGroups = this.alignGroup(groups, tempTabel);\n\n    for (var _m = 0, alignedGroups_1 = alignedGroups; _m < alignedGroups_1.length; _m++) {\n      var obj = alignedGroups_1[_m];\n      var layer = this.commandHandler.getObjectLayer(obj);\n      this.initNodes(tempTabel[obj], layer);\n    }\n\n    for (var _o = 0, connectors_1 = connectors; _o < connectors_1.length; _o++) {\n      var connector = connectors_1[_o];\n      var layer = this.commandHandler.getObjectLayer(connector.id);\n      this.initConnectors(connector, layer);\n    }\n\n    if (isBlazor() && canCloneObject) {\n      for (var _p = 0, _q = this.nodes; _p < _q.length; _p++) {\n        var obj = _q[_p];\n        updateNodeObject.push(cloneObject(obj, undefined, undefined, true));\n      }\n\n      for (var _r = 0, _s = this.connectors; _r < _s.length; _r++) {\n        var obj = _s[_r];\n        updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n      }\n\n      this.commandHandler.getObjectChanges(previousNodeObject, updateNodeObject, changeNodes);\n      this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n\n      if (!(this.blazorActions & BlazorAction.ClearObject)) {\n        var blazorInterop = 'sfBlazor';\n        var diagramObject = {\n          nodes: changeNodes,\n          connectors: changeConnectors\n        };\n        var obj = {\n          'methodName': 'UpdateBlazorProperties',\n          'diagramobj': diagramObject\n        };\n        window[blazorInterop].updateBlazorProperties(obj, this);\n      }\n    }\n  };\n\n  Diagram.prototype.alignGroup = function (parents, tempTabel) {\n    var newList = [];\n    var parentist = [];\n    var child;\n    var childNode;\n    var i;\n    var j;\n\n    for (i = 0; i < parents.length; i++) {\n      child = parents[i];\n      childNode = tempTabel[child];\n      var node = void 0;\n\n      if (childNode && childNode.children.length) {\n        for (j = 0; j < childNode.children.length; j++) {\n          node = childNode.children[j];\n\n          if (parents.indexOf(node) > -1 && newList.indexOf(node) === -1 && parentist.indexOf(node) === -1) {\n            newList.splice(0, 0, node);\n          }\n        }\n      }\n\n      if (newList.indexOf(child) === -1) {\n        parentist.push(child);\n      }\n    }\n\n    newList = newList.concat(parentist);\n    return newList;\n  };\n\n  Diagram.prototype.addToLayer = function (obj, hasLayers) {\n    var layer;\n    var isSourceId = false;\n    var isTargetId = false;\n\n    if (hasLayers) {\n      layer = this.commandHandler.getObjectLayer(obj.id);\n    }\n\n    if (!hasLayers || !layer) {\n      if (this.activeLayer.objects.indexOf(obj.id) === -1) {\n        this.activeLayer.objects.push(obj.id);\n      }\n    }\n\n    if ((obj instanceof Node || obj instanceof Connector) && (obj.shape.type !== 'SwimLane' || obj.children && obj.children.length > 0)) {\n      if (obj.parentId) {\n        var zIndex = this.swimlaneZIndexTable[obj.parentId];\n\n        if (zIndex && zIndex !== -1) {\n          obj.zIndex = this.swimlaneChildTable[obj.id];\n        }\n      }\n\n      if (obj instanceof Connector && obj.sourceID && obj.targetID) {\n        if (this.findNodeInLane(obj.sourceID) && this.findNodeInLane(obj.targetID)) {\n          if (this.activeLayer.objects.indexOf(obj.sourceID) !== -1 && this.activeLayer.objects.indexOf(obj.targetID) !== -1) {\n            this.setZIndex(layer || this.activeLayer, obj);\n          }\n        } else {\n          this.setZIndex(layer || this.activeLayer, obj);\n        }\n      } else {\n        this.setZIndex(layer || this.activeLayer, obj);\n      }\n    }\n  };\n  /** Check whether node is in lane or not */\n\n\n  Diagram.prototype.findNodeInLane = function (nodeId) {\n    var temp = false;\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      if (this.nodes[i].shape.type !== 'SwimLane') {\n        if (this.nodes[i].id === nodeId) {\n          temp = true;\n          break;\n        }\n      } else {\n        var node = this.nodes[i].shape;\n\n        if (node.lanes && node.lanes.length > 0) {\n          for (var j = 0; j < node.lanes.length; j++) {\n            if (node.lanes[j].children && node.lanes[j].children.length > 0) {\n              for (var k = 0; k < node.lanes[j].children.length; k++) {\n                if (node.lanes[j].children[k].id === nodeId) {\n                  temp = true;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (temp) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  Diagram.prototype.updateLayer = function (newProp) {\n    for (var _i = 0, _a = Object.keys(newProp.layers); _i < _a.length; _i++) {\n      var key = _a[_i];\n      var layerObject = this.layers[key].objects;\n\n      for (var _b = 0, layerObject_1 = layerObject; _b < layerObject_1.length; _b++) {\n        var obj = layerObject_1[_b];\n        var node = this.nameTable[obj];\n\n        if (newProp.layers[key].visible !== undefined) {\n          this.updateElementVisibility(node.wrapper, node, newProp.layers[key].visible);\n        } else if (newProp.layers[key].lock === true) {\n          this.unSelect(node);\n        }\n      }\n\n      if (newProp.layers[key].lock !== undefined) {\n        this.layers[key].lock = newProp.layers[key].lock;\n      }\n    }\n\n    if (this.mode !== 'SVG') {\n      this.refreshDiagramLayer();\n    }\n  };\n\n  Diagram.prototype.updateScrollSettings = function (newProp) {\n    var hPan = -this.scroller.horizontalOffset + newProp.scrollSettings.horizontalOffset || 0;\n    var vPan = this.scroller.verticalOffset - newProp.scrollSettings.verticalOffset || 0;\n    var oldValue = {\n      VerticalOffset: this.scrollSettings.verticalOffset,\n      HorizontalOffset: this.scrollSettings.horizontalOffset,\n      ViewportHeight: this.scrollSettings.viewPortHeight,\n      ViewportWidth: this.scrollSettings.viewPortWidth,\n      CurrentZoom: this.scroller.currentZoom\n    };\n\n    if (hPan !== 0 || vPan !== 0) {\n      this.pan(hPan, vPan);\n    }\n\n    var newValue = {\n      VerticalOffset: this.scrollSettings.verticalOffset,\n      HorizontalOffset: this.scrollSettings.horizontalOffset,\n      ViewportHeight: this.scrollSettings.viewPortHeight,\n      ViewportWidth: this.scrollSettings.viewPortWidth,\n      CurrentZoom: this.scroller.currentZoom\n    };\n    var panStatus = 'Start';\n\n    if (this.realActions & RealAction.PanInProgress) {\n      panStatus = 'Progress';\n    }\n\n    var arg = {\n      oldValue: oldValue,\n      newValue: newValue,\n      source: this,\n      panState: panStatus\n    };\n\n    if (isBlazor() && this.scrollChange) {\n      arg = {\n        oldValue: oldValue,\n        newValue: newValue,\n        sourceId: this.element.id,\n        panState: panStatus\n      };\n    }\n\n    this.triggerEvent(DiagramEvent.scrollChange, arg);\n    this.commandHandler.updatePanState(true);\n\n    if (this.mode === 'Canvas' && this.constraints & DiagramConstraints.Virtualization) {\n      this.refreshDiagramLayer();\n    }\n  };\n\n  Diagram.prototype.initData = function () {\n    var dataSourceSettings = this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource;\n    var adapter = 'adaptorName';\n\n    if (this.dataBindingModule && !(this.realActions & RealAction.PreventDataInit)) {\n      if (dataSourceSettings && this.dataSourceSettings.connectionDataSource.dataManager) {\n        var dataManager = this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource;\n        this.nodes = this.generateData(dataManager, true);\n        this.connectors = this.generateData(this.dataSourceSettings.connectionDataSource.dataManager, false);\n      } else if (dataSourceSettings && dataSourceSettings.dataSource && (dataSourceSettings.dataSource.url || dataSourceSettings[adapter] === 'BlazorAdaptor' && !dataSourceSettings.dataSource.url)) {\n        this.dataBindingModule.initSource(this.dataSourceSettings, this);\n      } else {\n        this.dataBindingModule.initData(this.dataSourceSettings, this);\n      }\n    }\n  };\n\n  Diagram.prototype.generateData = function (dataSource, isNode) {\n    var nodes = [];\n    var i;\n\n    for (i = 0; i < dataSource.length; i++) {\n      var row = dataSource[i];\n      var node = isNode ? this.makeData(row, true) : this.makeData(row, false);\n\n      if (node && node.id && (!findNodeByName(nodes, node.id) || !findNodeByName(nodes, node.id))) {\n        nodes.push(node);\n      }\n    }\n\n    return nodes;\n  };\n\n  Diagram.prototype.makeData = function (row, isNode) {\n    var i;\n    var fields = isNode ? this.dataSourceSettings : this.dataSourceSettings.connectionDataSource;\n    var data = {};\n    data.id = row[fields.id] ? row[fields.id] : randomId();\n\n    if (fields.sourceID) {\n      data.sourceID = row[fields.sourceID];\n    }\n\n    if (fields.targetID) {\n      data.targetID = row[fields.targetID];\n    }\n\n    if (row[fields.sourcePointX] && row[fields.sourcePointY]) {\n      data.sourcePoint = {\n        'x': Number(row[fields.sourcePointX]),\n        'y': Number(row[fields.sourcePointY])\n      };\n    }\n\n    if (row[fields.targetPointX] && row[fields.targetPointY]) {\n      data.targetPoint = {\n        'x': Number(row[fields.targetPointX]),\n        'y': Number(row[fields.targetPointY])\n      };\n    }\n\n    if (fields.crudAction.customFields && fields.crudAction.customFields.length > 0) {\n      for (i = 0; i < fields.crudAction.customFields.length; i++) {\n        data[fields.crudAction.customFields[i]] = row[fields.crudAction.customFields[i]];\n      }\n    }\n\n    return data;\n  };\n\n  Diagram.prototype.initNodes = function (obj, layer) {\n    this.preventDiagramUpdate = true;\n    this.initObject(obj, layer);\n    this.preventDiagramUpdate = false;\n  };\n\n  Diagram.prototype.initConnectors = function (obj, layer, independentObj) {\n    this.preventDiagramUpdate = true;\n    this.initObject(obj, layer, independentObj);\n    this.updateEdges(obj);\n    this.preventDiagramUpdate = false;\n  };\n\n  Diagram.prototype.setZIndex = function (layer, obj) {\n    //should be changed\n    var currentLayer = layer;\n\n    if (obj.zIndex === -1) {\n      while (currentLayer.zIndexTable[currentLayer.objectZIndex + 1]) {\n        layer.objectZIndex++;\n      }\n\n      obj.zIndex = ++currentLayer.objectZIndex;\n    } else {\n      var index = obj.zIndex;\n\n      if (currentLayer.zIndexTable[index]) {\n        var tabelLength = Object.keys(currentLayer.zIndexTable).length;\n        var j = 0;\n\n        for (var i = 0; i < tabelLength; i++) {\n          if (i === index) {\n            for (var j_1 = tabelLength; j_1 > index; j_1--) {\n              currentLayer.zIndexTable[j_1] = currentLayer.zIndexTable[j_1 - 1];\n\n              if (this.nameTable[currentLayer.zIndexTable[j_1]]) {\n                this.nameTable[currentLayer.zIndexTable[j_1]].zIndex = j_1;\n              }\n            }\n\n            currentLayer.zIndexTable[i] = obj.id;\n          }\n\n          j++;\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.initializeDiagramLayers = function () {\n    //const tempLayers: LayerModel[] = this.layers;\n    for (var i = 0; i < this.layers.length; i++) {\n      if (this.layers[i].zIndex !== -1) {\n        var temp = this.layers[i];\n        this.layers[i] = this.layers[this.layers[i].zIndex];\n        this.layers[temp.zIndex] = temp;\n      }\n    }\n\n    for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n      var layer = _a[_i];\n      layer.zIndex = layer.zIndex !== -1 ? layer.zIndex : this.layers.indexOf(layer);\n      this.layerZIndexTable[layer.zIndex] = layer.id;\n    }\n\n    for (var i = 0; i < this.layers.length; i++) {\n      for (var j = i + 1; j < this.layers.length; j++) {\n        if (this.layers[i].zIndex > this.layers[j].zIndex) {\n          var temp = this.layers[i];\n          this.layers[i] = this.layers[j];\n          this.layers[j] = temp;\n        }\n      }\n    }\n\n    if (this.layers.length === 0) {\n      var defaultLayer = {\n        id: 'default_layer',\n        visible: true,\n        lock: false,\n        objects: [],\n        zIndex: 0,\n        objectZIndex: -1,\n        zIndexTable: {}\n      };\n      this.commandHandler.addLayer(defaultLayer, null, true);\n    }\n\n    this.setActiveLayer(this.layers[this.layers.length - 1].id);\n  };\n  /**\n   * resetTool method \\\n   *\n   * @returns { void }     resetTool method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.resetTool = function () {\n    this.eventHandler.resetTool();\n  };\n\n  Diagram.prototype.initObjectExtend = function (obj, layer, independentObj) {\n    if (independentObj) {\n      var checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds);\n\n      for (var i = 0, a = Object.keys(layer.zIndexTable); i < a.length; i++) {\n        if (layer.zIndexTable[a[i]] && layer.zIndexTable[a[i]] === obj.id) {\n          delete layer.zIndexTable[a[i]];\n        }\n      }\n\n      layer.zIndexTable[obj.zIndex] = obj.id;\n\n      if (!checkBoundaryConstraints) {\n        var node = obj instanceof Node ? this.nodes : this.connectors;\n\n        for (var i = 0; i <= node.length; i++) {\n          if (node[i] && obj.id === node[i].id) {\n            node.splice(i, 1);\n          }\n        }\n\n        delete layer.zIndexTable[obj.zIndex];\n      }\n    }\n  };\n  /* tslint:disable */\n\n  /**\n   * initObject method \\\n   *\n   * @returns { void }     initObject method .\\\n   * @param {End} obj - provide the obj value.\n   * @param {End} layer - provide the layer value.\n   * @param {LayoutOrientation} independentObj - provide the independentObj value.\n   * @param {boolean} group - provide the independentObj value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.initObject = function (obj, layer, independentObj, group) {\n    if (independentObj === void 0) {\n      independentObj = true;\n    }\n\n    if (obj !== undefined) {\n      if (independentObj) {\n        if (!layer) {\n          this.addToLayer(obj, false);\n          layer = this.activeLayer;\n        } //Move the common properties like zindex and id to an abstract class\n\n\n        if ((obj instanceof Node || obj instanceof Connector) && (obj.shape.type !== 'SwimLane' || obj.children && obj.children.length > 0)) {\n          this.setZIndex(layer, obj);\n        }\n      }\n\n      if (obj instanceof Node) {\n        if (independentObj) {\n          if (obj.id !== 'helper') {\n            var getDefaults = getFunction(this.getNodeDefaults);\n\n            if (getDefaults) {\n              var defaults = getDefaults(obj, this);\n\n              if (defaults && defaults.ports) {\n                for (var i = 0; i < defaults.ports.length; i++) {\n                  defaults.ports[i].inEdges = [];\n                  defaults.ports[i].outEdges = [];\n                }\n              }\n\n              if (defaults && defaults !== obj) {\n                extendObject(defaults, obj);\n              }\n            }\n          }\n\n          this.initNode(obj, this.element.id);\n        }\n      } else if (obj instanceof Connector) {\n        var getDefaults = getFunction(this.getConnectorDefaults);\n\n        if (getDefaults) {\n          var defaults = getDefaults(obj, this);\n\n          if (defaults && defaults !== obj) {\n            extendObject(defaults, obj);\n          }\n\n          if (obj.segments.length) {\n            if (obj.type !== obj.segments[0].type) {\n              obj.segments = [];\n            }\n          }\n        }\n\n        var sourceNode = this.nameTable[obj.sourceID];\n        var targetNode = this.nameTable[obj.targetID];\n        var port = this.getConnectedPort(sourceNode, obj, true);\n        var targetPort = this.getConnectedPort(targetNode, obj);\n        var outPort = this.findInOutConnectPorts(sourceNode, false);\n        var inPort = this.findInOutConnectPorts(targetNode, true);\n\n        if (sourceNode !== undefined && canOutConnect(sourceNode) || obj.sourcePortID !== '' && canPortOutConnect(outPort)) {\n          obj.sourceWrapper = this.getEndNodeWrapper(sourceNode, obj, true);\n\n          if (obj.sourcePortID) {\n            // eslint-disable-next-line max-len\n            if (port && port.constraints && !(port.constraints & PortConstraints.None) && port.constraints & PortConstraints.OutConnect) {\n              obj.sourcePortWrapper = this.getWrapper(sourceNode.wrapper, obj.sourcePortID);\n            }\n          }\n        }\n\n        if (targetNode !== undefined && canInConnect(targetNode) || obj.targetPortID !== '' && canPortInConnect(inPort)) {\n          obj.targetWrapper = this.getEndNodeWrapper(targetNode, obj, false);\n\n          if (obj.targetPortID) {\n            // eslint-disable-next-line max-len\n            if (targetPort && targetPort.constraints && !(targetPort.constraints & PortConstraints.None) && targetPort.constraints & PortConstraints.InConnect) {\n              obj.targetPortWrapper = this.getWrapper(targetNode.wrapper, obj.targetPortID);\n            }\n          }\n        }\n\n        if (!independentObj) {\n          var points = obj.getConnectorPoints(obj.type);\n          updateConnector(obj, points);\n        }\n\n        if (independentObj) {\n          obj.init(this);\n        }\n\n        for (var k = 0; k < obj.wrapper.children.length; k++) {\n          if (this.pathTable[obj.wrapper.children[k].data]) {\n            obj.wrapper.children[k].absoluteBounds = this.pathTable[obj.wrapper.children[k].data].absoluteBounds;\n          }\n        }\n\n        obj.wrapper.measure(new Size(undefined, undefined));\n        obj.wrapper.arrange(obj.wrapper.desiredSize);\n\n        if (obj instanceof Connector && obj.type === 'Bezier') {\n          this.updateConnectorAnnotation(obj);\n          this.updateConnectorfixedUserHandles(obj);\n        }\n\n        for (var j = 0; j < obj.wrapper.children.length; j++) {\n          this.pathTable[obj.wrapper.children[j].data] = {};\n          this.pathTable[obj.wrapper.children[j].data].absoluteBounds = obj.wrapper.children[j].absoluteBounds;\n        }\n      }\n\n      if (obj instanceof Node && obj.children && obj.container) {\n        for (var i = 0; i < obj.children.length; i++) {\n          this.nameTable[obj.children[i]].offsetX = this.nameTable[obj.children[i]].wrapper.offsetX;\n          this.nameTable[obj.children[i]].offsetY = this.nameTable[obj.children[i]].wrapper.offsetY;\n        }\n      }\n\n      if (this.bpmnModule && obj instanceof Node && obj.shape.type === 'Bpmn' && obj.shape.annotations.length > 0) {\n        this.bpmnModule.updateQuad(obj, this);\n      }\n\n      this.initObjectExtend(obj, layer, independentObj);\n      this.nameTable[obj.id] = obj;\n\n      if (obj instanceof Node && obj.children) {\n        this.preventNodesUpdate = true;\n        this.preventConnectorsUpdate = true;\n\n        if (!group && !obj.container) {\n          this.updateGroupOffset(obj, true);\n        }\n\n        this.groupTable[obj.id] = obj.children;\n\n        for (var i = 0; i < obj.children.length; i++) {\n          var node = this.nameTable[obj.children[i]];\n\n          if (node) {\n            node.parentId = obj.id;\n          }\n        }\n\n        if (!this.isLoading && obj.rotateAngle && !obj.container) {\n          this.commandHandler.rotateObjects(obj, [obj], obj.rotateAngle, {\n            x: obj.offsetX,\n            y: obj.offsetY\n          }, false);\n        }\n\n        this.preventNodesUpdate = false;\n        this.preventConnectorsUpdate = false;\n      }\n\n      if (this['enterObject'] === undefined) {\n        this.updateQuad(obj);\n      }\n    }\n\n    if (obj.visible === false) {\n      this.updateElementVisibility(obj.wrapper, obj, false);\n    }\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.getConnectedPort = function (node, connector, isSource) {\n    if (node && node.ports) {\n      for (var _i = 0, _a = node.ports; _i < _a.length; _i++) {\n        var port = _a[_i];\n\n        if (port.id === connector.sourcePortID && isSource) {\n          return port;\n        } else if (port.id === connector.targetPortID && !isSource) {\n          return port;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  Diagram.prototype.scaleObject = function (obj, size, isWidth) {\n    var actualSize = isWidth ? obj.wrapper.actualSize.width : obj.wrapper.actualSize.height;\n    var sw = isWidth ? 1 + (size - actualSize) / actualSize : 1;\n    var sh = isWidth ? 1 : 1 + (size - actualSize) / actualSize; //const groupOffsetX: number = obj.offsetX; const groupOffsetY: number = obj.offsetY;\n\n    this.realActions |= RealAction.PreventDrag;\n    this.scale(obj, sw, sh, {\n      x: 0.5,\n      y: 0.5\n    });\n    this.realActions &= ~RealAction.PreventDrag;\n  };\n\n  Diagram.prototype.updateDefaultLayoutIcons = function (node) {\n    if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree' || this.layout.type === 'ComplexHierarchicalTree') {\n      {\n        this.updateDefaultLayoutIcon(node, node.expandIcon);\n        this.updateDefaultLayoutIcon(node, node.collapseIcon);\n      }\n    }\n  };\n\n  Diagram.prototype.updateDefaultLayoutIcon = function (node, icon) {\n    if (icon.shape !== 'None') {\n      if (icon.horizontalAlignment === 'Auto' && icon.verticalAlignment === 'Auto' && icon.offset.x === .5 && icon.offset.y === 1) {\n        var iconWrapper = this.getWrapper(node.wrapper, 'icon_content');\n        var offsetX = void 0;\n        var offsetY = void 0;\n\n        if (this.layout.orientation === 'TopToBottom' || this.layout.orientation === 'BottomToTop') {\n          offsetX = .5;\n          offsetY = this.layout.orientation === 'TopToBottom' ? 1 : 0;\n        } else if (this.layout.orientation === 'RightToLeft' || this.layout.orientation === 'LeftToRight') {\n          offsetX = this.layout.orientation === 'LeftToRight' ? 1 : 0;\n          offsetY = .5;\n        }\n\n        iconWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n        iconWrapper.horizontalAlignment = 'Center';\n        iconWrapper.verticalAlignment = 'Center';\n        node.wrapper.measure(new Size(node.wrapper.width, node.wrapper.height));\n        node.wrapper.arrange(node.wrapper.desiredSize);\n      }\n    }\n  };\n  /**\n   * updateGroupOffset method \\\n   *\n   * @returns { void }     updateGroupOffset method .\\\n   * @param {NodeModel | ConnectorModel} node - provide the source value.\n   * @param {boolean} isUpdateSize - provide the target value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateGroupOffset = function (node, isUpdateSize) {\n    var isUpdateGroupToBlazor = false;\n\n    if (node.children && node.children.length > 0 && !node.container || node.processId) {\n      var node1 = this.nameTable[node.id];\n\n      if (!(this.realActions & RealAction.PreventScale) && !(this.realActions & RealAction.PreventDrag)) {\n        if (node1.offsetX && (this.realActions & RealAction.EnableGroupAction || !(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.PublicMethod))) {\n          this.realActions |= RealAction.PreventScale;\n          var diffX = node1.offsetX - node.wrapper.offsetX;\n          node1.offsetX = node.wrapper.offsetX;\n          var diffY = node1.offsetY - node.wrapper.offsetY;\n          node1.offsetY = node.wrapper.offsetY;\n\n          if (node.flip === 'None' && diffX + diffY !== 0) {\n            this.drag(node1, diffX, diffY);\n          }\n\n          this.realActions &= ~RealAction.PreventScale;\n        } else {\n          if (isBlazor()) {\n            this.insertValue(cloneObject(node1), true);\n            isUpdateGroupToBlazor = true;\n          }\n\n          node1.offsetX = node.wrapper.offsetX;\n        }\n\n        if (node1.offsetY && (this.realActions & RealAction.EnableGroupAction || !(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.PublicMethod))) {\n          this.realActions |= RealAction.PreventScale;\n          var diffY = node1.offsetY - node.wrapper.offsetY;\n          node1.offsetY = node.wrapper.offsetY;\n\n          if (node.flip === 'None') {\n            this.drag(node1, 0, diffY);\n          }\n\n          this.realActions &= ~RealAction.PreventScale;\n        } else {\n          if (isBlazor()) {\n            this.insertValue(cloneObject(node1), true);\n            isUpdateGroupToBlazor = true;\n          }\n\n          node1.offsetY = node.wrapper.offsetY;\n        }\n\n        if (this.diagramActions) {\n          if (isBlazor()) {\n            this.insertValue(cloneObject(node1), true);\n            isUpdateGroupToBlazor = true;\n          }\n\n          node1.width = node.wrapper.actualSize.width;\n          node1.height = node.wrapper.actualSize.height;\n        }\n      }\n    }\n\n    if (isUpdateSize) {\n      if (node.children && node.children.length > 0) {\n        if (this.nameTable[node.id].width !== undefined) {\n          this.scaleObject(node, this.nameTable[node.id].width, true);\n        } else {\n          if (isBlazor()) {\n            this.insertValue(cloneObject(this.nameTable[node.id]), true);\n            isUpdateGroupToBlazor = true;\n          }\n\n          this.nameTable[node.id].width = node.wrapper.actualSize.width;\n        }\n\n        if (this.nameTable[node.id].height !== undefined) {\n          this.scaleObject(node, this.nameTable[node.id].height, false);\n        } else {\n          if (isBlazor()) {\n            this.insertValue(cloneObject(this.nameTable[node.id]), true);\n            isUpdateGroupToBlazor = true;\n          }\n\n          this.nameTable[node.id].height = node.wrapper.actualSize.height;\n        }\n      }\n    }\n\n    if (isUpdateGroupToBlazor && !(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.PublicMethod)) {\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n  /* eslint-disable */\n\n\n  Diagram.prototype.initNode = function (obj, diagramId, group) {\n    var canvas = obj.initContainer();\n    var portContainer = new Canvas();\n    var content;\n\n    if (!this.diagramSettings.inversedAlignment) {\n      canvas.inversedAlignment = false;\n    }\n\n    if (!canvas.children) {\n      canvas.children = [];\n    }\n\n    if (obj.children) {\n      canvas.measureChildren = false;\n      portContainer.id = obj.id + 'group_container';\n      portContainer.style.fill = 'none';\n      portContainer.style.strokeColor = 'none';\n      portContainer.horizontalAlignment = 'Stretch';\n      portContainer.verticalAlignment = 'Stretch';\n      canvas.style = obj.style;\n      portContainer.children = [];\n      portContainer.preventContainer = true;\n\n      if (obj.container) {\n        portContainer.relativeMode = 'Object';\n      }\n\n      var checkPorts = obj.ports && obj.ports.length > 0 ? true : false;\n\n      if (isNullOrUndefined(obj.container) && !checkPorts) {\n        canvas.children.push(portContainer);\n      }\n\n      if (obj.container && obj.container.type === 'Grid') {\n        for (var i = 0; i < obj.children.length; i++) {\n          var childCollection = new Canvas();\n          var child = this.nameTable[obj.children[i]];\n          childCollection.children = [];\n          childCollection.children.push(child.wrapper);\n\n          if (child) {\n            canvas.addObject(child.wrapper, child.rowIndex, child.columnIndex, child.rowSpan, child.columnSpan);\n          }\n        }\n      } else {\n        for (var i = 0; i < obj.children.length; i++) {\n          if (this.nameTable[obj.children[i]]) {\n            var child = this.nameTable[obj.children[i]];\n            this.updateStackProperty(obj, child, i);\n            canvas.children.push(child.wrapper);\n            canvas.elementActions = canvas.elementActions | ElementAction.ElementIsGroup;\n            child.wrapper.flip = child.wrapper.flip === 'None' ? obj.wrapper.flip : child.wrapper.flip;\n          }\n        }\n      }\n\n      if (checkPorts || obj.container && obj.container.type !== 'Grid') {\n        canvas.children.push(portContainer);\n      }\n    } else {\n      var setNodeTemplate = getFunction(this.setNodeTemplate);\n\n      if (setNodeTemplate && obj.id !== 'helper') {\n        content = setNodeTemplate(obj, this);\n      }\n\n      if (!content) {\n        content = obj.init(this);\n      }\n\n      canvas.children.push(content);\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var wrapperContent;\n    wrapperContent = getFunction(this.getDescription);\n\n    if (wrapperContent) {\n      (obj.children ? canvas : content).description = wrapperContent;\n    } else {\n      (obj.children ? canvas : content).description = obj.annotations.length ? obj.annotations[0].content : obj.id;\n    }\n\n    var container = obj.children ? portContainer : canvas;\n    obj.initAnnotations(this.getDescription, container, this.element.id, canVitualize(this) ? true : false, this.annotationTemplate);\n    obj.initPorts(this.getDescription, container);\n    obj.initIcons(this.getDescription, this.layout, container, diagramId);\n\n    for (var i = 0; obj.fixedUserHandles !== undefined, i < obj.fixedUserHandles.length; i++) {\n      var fixedUserHandles = obj.initfixedUserHandles(obj.fixedUserHandles[i]);\n      container.children.push(fixedUserHandles);\n    }\n\n    if (obj.shape.type === 'SwimLane' && obj.wrapper && obj.wrapper.children.length > 0 && obj.wrapper.children[0] instanceof GridPanel) {\n      this.setZIndex(this.activeLayer, obj);\n\n      if (this.connectors.length > 0) {\n        for (var i = 0; i < this.connectors.length; i++) {\n          var obj_2 = this.connectors[i];\n\n          if (obj_2.sourceID && obj_2.targetID && this.activeLayer.objects.indexOf(obj_2.sourceID) === -1 && this.activeLayer.objects.indexOf(obj_2.targetID) === -1) {\n            this.setZIndex(this.activeLayer, obj_2);\n          }\n        }\n      }\n\n      swimLaneMeasureAndArrange(obj);\n      arrangeChildNodesInSwimLane(this, obj);\n      this.updateDiagramElementQuad();\n    } else {\n      canvas.measure(new Size(obj.width, obj.height), obj.id, this.onLoadImageSize.bind(this));\n\n      if (canvas instanceof GridPanel) {\n        canvas.arrange(canvas.desiredSize, true);\n      } else {\n        canvas.arrange(canvas.desiredSize);\n      }\n    }\n\n    if (obj.wrapper.flip !== 'None' && obj.wrapper.elementActions & ElementAction.ElementIsGroup) {\n      alignElement(obj.wrapper, obj.wrapper.offsetX, obj.wrapper.offsetY, this, obj.wrapper.flip);\n    }\n\n    if (obj instanceof Node && obj.container && (obj.width < canvas.outerBounds.width || obj.height < canvas.outerBounds.height) && canvas.bounds.x <= canvas.outerBounds.x && canvas.bounds.y <= canvas.outerBounds.y) {\n      obj.width = canvas.width = canvas.outerBounds.width;\n      obj.height = canvas.height = canvas.outerBounds.height;\n      canvas.measure(new Size(obj.width, obj.height));\n      canvas.arrange(canvas.desiredSize);\n    }\n\n    if (obj.container && obj.container.type === 'Grid' && obj.children && obj.children.length > 0) {\n      this.updateChildPosition(obj);\n    }\n  };\n  /* eslint-enable */\n\n  /**\n   * updateDiagramElementQuad method \\\n   *\n   * @returns { void }     updateDiagramElementQuad method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateDiagramElementQuad = function () {\n    for (var i = 0; i < this.nodes.length; i++) {\n      if (this.nodes[i].wrapper && this.nodes[i].wrapper instanceof Container) {\n        this.updateQuad(this.nodes[i]);\n      }\n    }\n  };\n\n  Diagram.prototype.onLoadImageSize = function (id, size) {\n    var obj = this.getObject(id);\n    var image = document.getElementById(id + 'sf-imageNode');\n\n    if (image) {\n      image.parentNode.removeChild(image);\n    }\n\n    this.nodePropertyChange(obj, {}, {\n      width: size.width,\n      height: size.height\n    });\n    var args = {\n      element: cloneObject(obj),\n      size: size\n    };\n    this.triggerEvent(DiagramEvent.onImageLoad, args);\n  };\n\n  Diagram.prototype.updateChildPosition = function (obj) {\n    for (var i = 0; i < obj.children.length; i++) {\n      var child = this.getObject(obj.children[i]);\n      child.offsetX = child.wrapper.offsetX;\n      child.offsetY = child.wrapper.offsetY;\n\n      if (child.children && child.children.length > 0) {\n        this.updateChildPosition(child);\n      }\n    }\n  };\n\n  Diagram.prototype.canExecute = function () {\n    return true;\n  };\n\n  Diagram.prototype.updateStackProperty = function (obj, child, index) {\n    if (obj.container && obj.container.type === 'Stack') {\n      if (!child.width) {\n        child.wrapper.horizontalAlignment = 'Stretch';\n        child.horizontalAlignment = 'Stretch';\n      }\n\n      if (!child.height) {\n        child.verticalAlignment = 'Stretch';\n        child.wrapper.verticalAlignment = 'Stretch';\n      }\n\n      if (index && obj.shape.type === 'UmlClassifier') {\n        child.umlIndex = index;\n      }\n    }\n  };\n\n  Diagram.prototype.initViews = function () {\n    if (!this.isLoading) {\n      this.views.push(this.element.id);\n      this.views[this.element.id] = this;\n    }\n  };\n\n  Diagram.prototype.initCommands = function () {\n    var i;\n    var newCommands = this.commandManager.commands;\n    var commands = {\n      'copy': {\n        execute: this.copyCommand.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.C,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'paste': {\n        execute: this.pasteCommand.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.V,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'cut': {\n        execute: this.cutCommand.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.X,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'delete': {\n        execute: this.removeCommand.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Delete\n        }\n      },\n      'selectAll': {\n        execute: this.selectAll.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.A,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'undo': {\n        execute: this.undo.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Z,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'redo': {\n        execute: this.redo.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Y,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'nudgeUp': {\n        execute: this.nudgeCommand.bind(this, 'Up'),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Up\n        },\n        parameter: 'up'\n      },\n      'nudgeRight': {\n        execute: this.nudgeCommand.bind(this, 'Right'),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Right\n        },\n        parameter: 'right'\n      },\n      'nudgeDown': {\n        execute: this.nudgeCommand.bind(this, 'Down'),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Down\n        },\n        parameter: 'down'\n      },\n      'nudgeLeft': {\n        execute: this.nudgeCommand.bind(this, 'Left'),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Left\n        },\n        parameter: 'left'\n      },\n      'startEdit': {\n        execute: this.startEditCommad.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.F2\n        }\n      },\n      'endEdit': {\n        execute: this.endEditCommand.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Escape\n        }\n      },\n      'focusToNextItem': {\n        // execute: this.focusToItem.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Tab\n        }\n      },\n      'focusToPreviousItem': {\n        // execute: this.focusToItem.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Tab,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'selectFocusedItem': {\n        execute: this.startEditCommad.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Enter\n        }\n      }\n    };\n    this.initCommandManager(newCommands, commands);\n  };\n\n  Diagram.prototype.overrideCommands = function (newCommand, commands) {\n    var command;\n\n    for (var _i = 0, _a = Object.keys(commands); _i < _a.length; _i++) {\n      var key = _a[_i];\n      command = commands[key];\n\n      if (newCommand.gesture.key === command.gesture.key && newCommand.gesture.keyModifiers === command.gesture.keyModifiers) {\n        delete commands[key];\n        break;\n      }\n    }\n  };\n\n  Diagram.prototype.initCommandManager = function (newCommands, commands) {\n    var i = 0;\n\n    if (newCommands) {\n      for (i = 0; i < newCommands.length; i++) {\n        if (commands[newCommands[i].name] && newCommands[i]) {\n          if (newCommands[i].canExecute) {\n            commands[newCommands[i].name].canExecute = newCommands[i].canExecute;\n          }\n\n          if (newCommands[i].execute) {\n            commands[newCommands[i].name].execute = newCommands[i].execute;\n          }\n\n          if (newCommands[i].gesture.key || newCommands[i].gesture.keyModifiers) {\n            commands[newCommands[i].name].gesture = newCommands[i].gesture;\n          }\n\n          if (newCommands[i].parameter !== '') {\n            commands[newCommands[i].name].parameter = newCommands[i].parameter;\n          }\n        } else {\n          this.overrideCommands(newCommands[i], commands);\n          commands[newCommands[i].name] = {\n            execute: newCommands[i].execute,\n            canExecute: newCommands[i].canExecute,\n            gesture: newCommands[i].gesture,\n            parameter: newCommands[i].parameter\n          };\n        }\n      }\n    }\n\n    this.commands = commands;\n  };\n  /**\n   * updateNodeEdges method \\\n   *\n   * @returns { void }     updateNodeEdges method .\\\n   * @param {Node} node - provide the source value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateNodeEdges = function (node) {\n    for (var _i = 0, _a = node.inEdges; _i < _a.length; _i++) {\n      var edge = _a[_i];\n\n      if (this.nameTable[edge]) {\n        this.nameTable[edge].targetID = '';\n      }\n    }\n\n    for (var _b = 0, _c = node.outEdges; _b < _c.length; _b++) {\n      var edge = _c[_b];\n\n      if (this.nameTable[edge]) {\n        this.nameTable[edge].sourceID = '';\n      }\n    }\n\n    node.inEdges = [];\n    node.outEdges = [];\n  };\n  /**\n   * updateIconVisibility method \\\n   *\n   * @returns { void }     updateIconVisibility method .\\\n   * @param {Node} node - provide the source value.\n   * @param {boolean} visibility - provide the source value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateIconVisibility = function (node, visibility) {\n    for (var i = 0; i < node.wrapper.children.length; i++) {\n      var child = node.wrapper.children[i];\n\n      if (child.id) {\n        var id = child.id.split(node.id)[1];\n\n        if (id && id.match('^_icon')) {\n          child.visible = visibility;\n          this.updateDiagramContainerVisibility(child, visibility);\n        }\n      }\n    }\n  };\n  /**\n   * updateEdges method \\\n   *\n   * @returns { void }     updateEdges method .\\\n   * @param {Connector} obj - provide the source value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateEdges = function (obj) {\n    if (obj.sourceID !== undefined && obj.sourceID !== '') {\n      var node = this.nameTable[obj.sourceID];\n\n      if (node && node.outEdges && node.outEdges.length === 0) {\n        node.outEdges = [];\n      }\n\n      if (node && node.outEdges && node.outEdges.indexOf(obj.id) === -1) {\n        node.outEdges.push(obj.id);\n      }\n\n      this.updatePortEdges(node, obj, false);\n    }\n\n    if (obj.targetID !== undefined && obj.targetID !== '') {\n      var node = this.nameTable[obj.targetID];\n\n      if (node && node.inEdges && node.inEdges.length === 0) {\n        node.inEdges = [];\n      }\n\n      if (node && node.inEdges && node.inEdges.indexOf(obj.id) === -1) {\n        node.inEdges.push(obj.id);\n      }\n\n      this.updatePortEdges(node, obj, true);\n\n      if (node && node.visible && node.outEdges) {\n        var value = node.outEdges.length === 0 ? false : true;\n        this.updateIconVisibility(node, value);\n      }\n    }\n  };\n  /**\n   * updatePortEdges method \\\n   *\n   * @returns { void }     updatePortEdges method .\\\n   * @param {NodeModel} node - provide the source value.\n   * @param {ConnectorModel} obj - provide the target value.\n   * @param {boolean} isInEdges - provide the layoutOrientation value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updatePortEdges = function (node, obj, isInEdges) {\n    if (node) {\n      for (var i = 0; i < node.ports.length; i++) {\n        var port = node.ports[i];\n        var portId = isInEdges ? obj.targetPortID : obj.sourcePortID;\n\n        if (port.id === portId) {\n          var portEdges = isInEdges ? port.inEdges : port.outEdges;\n\n          if (portEdges.indexOf(obj.id) === -1) {\n            portEdges.push(obj.id);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * refreshDiagram method \\\n   *\n   * @returns { void }     refreshDiagram method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.refreshDiagram = function () {\n    this.initLayerObjects();\n    this.doLayout();\n    this.updateBridging();\n    this.scroller.setSize();\n    this.addBlazorDiagramObjects();\n\n    if (isBlazor() && this.layout && this.layout.layoutInfo && this.layout.layoutInfo.isRootInverse && this.nodes.length > 2) {\n      var rootNode = this.nodes[0];\n\n      if (rootNode.outEdges.length > 1) {\n        var isProtectedChange = this.isProtectedOnChange;\n\n        for (var i = 1; i < rootNode.outEdges.length; i++) {\n          var connector = this.nameTable[rootNode.outEdges[i]];\n          var isAllowServerUpdate = this.allowServerDataBinding;\n          this.protectPropertyChange(false);\n          this.enableServerDataBinding(false);\n          this.preventDiagramUpdate = true;\n          var target = this.getObject(connector.targetID); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          if (target.data.Branch === 'Left') {\n            connector.sourcePortID = rootNode.ports[1].id;\n          }\n\n          this.dataBind();\n          this.preventDiagramUpdate = false;\n          this.enableServerDataBinding(isAllowServerUpdate);\n          this.protectPropertyChange(isProtectedChange);\n        }\n      }\n    }\n\n    if (isBlazor()) {\n      var view = void 0;\n\n      for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n        var temp = _a[_i];\n        view = this.views[temp];\n\n        if (view.renderDocument) {\n          view.renderDocument(view);\n          view.diagramRenderer.setLayers();\n          view.updateView(view);\n          this.renderNodes(view);\n        }\n      }\n    }\n\n    this.updateFitToPage();\n  };\n\n  Diagram.prototype.updateCanupdateStyle = function (element, value) {\n    for (var j = 0; j < element.length; j++) {\n      if (element[j].children) {\n        this.updateCanupdateStyle(element[j].children, value);\n      }\n\n      element[j].canApplyStyle = value;\n    }\n  };\n\n  Diagram.prototype.getZindexPosition = function (obj, viewId) {\n    var objects = [];\n    var index = undefined;\n    objects = objects.concat(this.nodes);\n    objects = objects.concat(this.connectors);\n    var type;\n\n    if (obj.zIndex !== -1) {\n      for (var i = 0; i < objects.length; i++) {\n        if (objects[i].zIndex > obj.zIndex) {\n          if (obj.shape.type === 'HTML' || obj.shape.type === 'Native') {\n            type = obj.shape.type === 'HTML' ? 'html' : 'native';\n          }\n\n          index = getDomIndex(viewId, objects[i].id, type);\n          break;\n        }\n      }\n    }\n\n    return index;\n  };\n  /**\n   *updateDiagramObject method \\\n   *\n   * @returns { void } updateDiagramObject method .\\\n   * @param { (NodeModel | ConnectorModel) } obj - provide the obj value.\n   * @param { boolean } canIgnoreIndex - provide the canIgnoreIndex value.\n   * @param { boolean } isUpdateObject - provide the isUpdateObject value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateDiagramObject = function (obj, canIgnoreIndex, isUpdateObject) {\n    var view;\n    var domTable = 'domTable';\n\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var temp = _a[_i];\n      view = this.views[temp];\n\n      if (this.diagramActions) {\n        if (view.mode === 'SVG') {\n          var hasLayers = this.layers.length > 1;\n          var layer = void 0;\n\n          if (hasLayers) {\n            layer = this.commandHandler.getObjectLayer(obj.id);\n          }\n\n          if (layer === undefined || layer && layer.visible || isUpdateObject) {\n            var htmlLayer = getHTMLLayer(this.element.id);\n\n            if (!window[domTable][view.element.id + '_diagramLayer']) {\n              window[domTable][view.element.id + '_diagramLayer'] = document.getElementById(view.element.id + '_diagramLayer');\n            }\n\n            var diagramElementsLayer = window[domTable][view.element.id + '_diagramLayer'];\n\n            if (this.diagramActions & DiagramAction.Interactions) {\n              this.updateCanupdateStyle(obj.wrapper.children, true);\n            }\n\n            var centerPoint = this.getMidPoint(obj);\n            this.diagramRenderer.updateNode(obj.wrapper, diagramElementsLayer, htmlLayer, undefined, canIgnoreIndex ? undefined : this.getZindexPosition(obj, view.element.id), centerPoint);\n            this.updateCanupdateStyle(obj.wrapper.children, true);\n          }\n        }\n      }\n    }\n  }; //Method used to get mid point of Bezier Curve\n\n\n  Diagram.prototype.getMidPoint = function (obj) {\n    var centerPoint;\n    centerPoint = obj.annotations[0] ? obj.annotations[0].offset : 0.5;\n    var finalPoint;\n\n    if (obj instanceof Connector && obj.type === 'Bezier') {\n      var points = [[obj.sourcePoint.x, obj.sourcePoint.y], [obj.segments[0].bezierPoint2.x, obj.segments[0].bezierPoint2.y], [obj.segments[0].bezierPoint1.x, obj.segments[0].bezierPoint1.y], [obj.targetPoint.x, obj.targetPoint.y]];\n      var helperPoints = [];\n\n      for (var i = 1; i < 4; i++) {\n        var p = this.findPointOnCurve(points[i - 1], points[i], centerPoint);\n        helperPoints.push(p);\n      }\n\n      helperPoints.push(this.findPointOnCurve(helperPoints[0], helperPoints[1], centerPoint));\n      helperPoints.push(this.findPointOnCurve(helperPoints[1], helperPoints[2], centerPoint));\n      helperPoints.push(this.findPointOnCurve(helperPoints[3], helperPoints[4], centerPoint));\n      finalPoint = {\n        cx: helperPoints[5][0] - 2,\n        cy: helperPoints[5][1] - 2\n      };\n    }\n\n    return finalPoint;\n  };\n\n  Diagram.prototype.findPointOnCurve = function (pointOne, pointTwo, t) {\n    var pointOnCurve = [(pointTwo[0] - pointOne[0]) * t + pointOne[0], (pointTwo[1] - pointOne[1]) * t + pointOne[1]];\n    return pointOnCurve;\n  };\n  /**\n   *updateGridContainer method \\\n   *\n   * @returns { void } updateGridContainer method .\\\n   * @param { GridPanel } grid - provide the objectArray value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateGridContainer = function (grid) {\n    var view;\n    var htmlLayer = getHTMLLayer(this.element.id);\n\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var temp = _a[_i];\n      view = this.views[temp];\n\n      if (view.mode === 'SVG' && this.diagramActions) {\n        var diagramElementsLayer = document.getElementById(view.element.id + '_diagramLayer');\n        this.diagramRenderer.updateNode(grid, diagramElementsLayer, htmlLayer, undefined);\n      } else {\n        this.refreshCanvasDiagramLayer(view);\n      }\n    }\n  };\n  /**\n   *getObjectsOfLayer method \\\n   *\n   * @returns { (NodeModel | ConnectorModel)[] } getObjectsOfLayer method .\\\n   * @param { string[] } objectArray - provide the objectArray value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getObjectsOfLayer = function (objectArray) {\n    var nodeArray = [];\n\n    for (var _i = 0, objectArray_1 = objectArray; _i < objectArray_1.length; _i++) {\n      var obj = objectArray_1[_i];\n\n      if (this.nameTable[obj]) {\n        nodeArray.push(this.nameTable[obj]);\n      }\n    }\n\n    return nodeArray;\n  };\n  /**\n   *refreshDiagramLayer method \\\n   *\n   * @returns { void } refreshDiagramLayer method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.refreshDiagramLayer = function () {\n    var view;\n\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var temp = _a[_i];\n      view = this.views[temp];\n\n      switch (view.mode) {\n        case 'SVG':\n          this.refreshSvgDiagramLayer(view);\n          break;\n\n        case 'Canvas':\n          this.refreshCanvasLayers(view);\n          break;\n      }\n    }\n  };\n  /**\n   *refreshCanvasLayers method \\\n   *\n   * @returns { void } refreshCanvasLayers method .\\\n   * @param { View } view - provide the view value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.refreshCanvasLayers = function (view) {\n    if (!view) {\n      for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n        var temp = _a[_i];\n        var view_1 = this.views[temp];\n        this.refreshCanvasDiagramLayer(view_1);\n      }\n    } else {\n      this.refreshCanvasDiagramLayer(view);\n    }\n  };\n\n  Diagram.prototype.renderBasicElement = function (view) {\n    var htmlLayer = getHTMLLayer(view.element.id);\n\n    for (var i = 0; i < this.basicElements.length; i++) {\n      var element = this.basicElements[i];\n\n      if (element instanceof Container) {\n        element.prevRotateAngle = 0;\n      }\n\n      element.measure(new Size(element.width, element.height));\n      element.arrange(element.desiredSize);\n      view.diagramRenderer.renderElement(element, view.diagramLayer, htmlLayer);\n    }\n  };\n\n  Diagram.prototype.refreshElements = function (view) {\n    if (!this.isDestroyed) {\n      this.clearCanvas(view);\n\n      if (view instanceof Diagram) {\n        view.diagramLayer.getContext('2d').setTransform(view.scroller.currentZoom, 0, 0, view.scroller.currentZoom, 0, 0);\n        view.diagramLayer.getContext('2d').scale(1.5, 1.5);\n      } else {\n        var element = document.getElementById(view.element.id + '_nativeLayer');\n\n        if (element.children.length > 0) {\n          view.updateView(view);\n        }\n      }\n\n      var htmlLayer = getHTMLLayer(view.element.id); //const bounds: Rect = this.spatialSearch.getPageBounds();\n\n      this.renderDiagramElements(view.diagramLayer, view.diagramRenderer, htmlLayer);\n\n      for (var i = 0; i < this.basicElements.length; i++) {\n        var element = this.basicElements[i];\n        element.measure(new Size(element.width, element.height));\n        element.arrange(element.desiredSize);\n        view.diagramRenderer.renderElement(element, view.diagramLayer, htmlLayer);\n      }\n\n      if (view instanceof Diagram) {\n        view.diagramLayer.style.transform = 'scale(' + 2 / 3 + ')';\n        view.diagramLayer.style.transformOrigin = '0 0';\n      }\n\n      this.renderTimer = null;\n    }\n  };\n  /**\n   *refreshCanvasDiagramLayer method \\\n   *\n   * @returns { void } refreshCanvasDiagramLayer method .\\\n   * @param { View } view - provide the view value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.refreshCanvasDiagramLayer = function (view) {\n    var _this = this;\n\n    if (view.mode !== 'SVG' && !this.isDestroyed) {\n      if (this.basicElements.length > 0) {\n        this.renderBasicElement(view);\n      }\n\n      if (!this.diagramActions || (this.diagramActions & DiagramAction.Render) === 0 || DiagramAction.ToolAction & this.diagramActions || canVitualize(this) || this.scroller.currentZoom !== 1) {\n        this.refreshElements(view);\n      } else if (!this.renderTimer) {\n        this.renderTimer = setTimeout(function () {\n          _this.refreshElements(view);\n        }, 40);\n      }\n    }\n  };\n  /**\n   *updatePortVisibility method \\\n   *\n   * @returns { void } updatePortVisibility method .\\\n   * @param { Node } node - provide the node value.\n   * @param { PortVisibility } portVisibility - provide the portVisibility value.\n   * @param { Boolean } inverse - provide the inverse value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updatePortVisibility = function (node, portVisibility, inverse) {\n    var portElement;\n    var drawingObject = !(this.drawingObject && this.drawingObject.shape) ? true : false;\n\n    if (node instanceof Node && drawingObject && canMove(node)) {\n      var ports = node.ports;\n      var changed = false;\n\n      for (var i = 0; i < ports.length; i++) {\n        portElement = this.getWrapper(node.wrapper, ports[i].id);\n\n        if (portVisibility & PortVisibility.Hover || portVisibility & PortVisibility.Connect) {\n          if (checkPortRestriction(ports[i], portVisibility)) {\n            portElement.visible = !inverse;\n            changed = true;\n          }\n        }\n      }\n\n      if (changed) {\n        this.updateDiagramObject(node);\n      }\n    }\n  };\n  /**\n   *refreshSvgDiagramLayer method \\\n   *\n   * @returns { void } refreshSvgDiagramLayer method .\\\n   * @param { View } view - provide the object value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.refreshSvgDiagramLayer = function (view) {\n    var element;\n    var diagramElementsLayer = document.getElementById(view.element.id + '_diagramLayer');\n    var htmlLayer = getHTMLLayer(view.element.id);\n\n    if (!canVitualize(this)) {\n      for (var i = 0; i < this.basicElements.length; i++) {\n        element = this.basicElements[i];\n        element.measure(new Size(element.width, element.height));\n        element.arrange(element.desiredSize, !(this.diagramActions & DiagramAction.Render) ? true : false);\n        this.diagramRenderer.renderElement(element, diagramElementsLayer, htmlLayer);\n      }\n\n      this.renderDiagramElements(diagramElementsLayer, this.diagramRenderer, htmlLayer);\n    } else {\n      this.scroller.virtualizeElements();\n    }\n  };\n  /**\n   *removeVirtualObjects method \\\n   *\n   * @returns { void } removeVirtualObjects method .\\\n   * @param { Object } clearIntervalVal - provide the object value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeVirtualObjects = function (clearIntervalVal) {\n    if (this.deleteVirtualObject) {\n      for (var i = 0; i < this.scroller.removeCollection.length; i++) {\n        var obj = this.nameTable[this.scroller.removeCollection[i]];\n        this.removeElements(obj);\n      }\n\n      this.deleteVirtualObject = false;\n    }\n\n    clearInterval(clearIntervalVal);\n  };\n  /**\n   *updateTextElementValue method \\\n   *\n   * @returns { void } updateTextElementValue method .\\\n   * @param {  NodeModel | ConnectorModel } object - provide the object value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateTextElementValue = function (object) {\n    for (var j = 0; j < object.wrapper.children.length; j++) {\n      var element = object.wrapper.children[j];\n\n      if (element instanceof TextElement) {\n        element.canMeasure = true;\n        element.measure(new Size(object.width, object.height));\n        element.arrange(element.desiredSize);\n      }\n    }\n  };\n  /**\n   *updateVirtualObjects method \\\n   *\n   * @returns { void } updateVirtualObjects method .\\\n   * @param { string[] } collection - provide the collection value.\n   * @param { boolean } remove - provide the remove value.\n   * @param { string[] } tCollection - provide the htmlLayer value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateVirtualObjects = function (collection, remove, tCollection) {\n    var diagramElementsLayer = document.getElementById(this.element.id + '_diagramLayer');\n    var htmlLayer = getHTMLLayer(this.element.id);\n\n    if (this.mode === 'SVG') {\n      for (var i = 0; i < collection.length; i++) {\n        var index = this.scroller.removeCollection.indexOf(collection[i]);\n\n        if (index >= 0) {\n          this.scroller.removeCollection.splice(index, 1);\n        }\n\n        var object = this.nameTable[collection[i]];\n        this.updateTextElementValue(object);\n        this.diagramRenderer.renderElement(object.wrapper, diagramElementsLayer, htmlLayer, undefined, undefined, undefined, undefined, object.zIndex);\n      }\n\n      for (var k = 0; k < tCollection.length; k++) {\n        this.scroller.removeCollection.push(tCollection[k]);\n      }\n\n      if (this.scroller.currentZoom !== 1) {\n        this.eventHandler.updateVirtualization();\n      }\n    } else if (this.diagramActions) {\n      this.refreshDiagramLayer();\n    }\n  };\n  /**\n   *renderDiagramElements method \\\n   *\n   * @returns { void } renderDiagramElements method .\\\n   * @param { HTMLCanvasElement | SVGElement} canvas - provide the canvas value.\n   * @param { DiagramRenderer } renderer - provide the renderer value.\n   * @param { HTMLElement } htmlLayer - provide the htmlLayer value.\n   * @param {boolean } transform - provide the transform value.\n   * @param {boolean } fromExport - provide the fromExport value.\n   * @param { boolean } isOverView - provide the isOverView value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.renderDiagramElements = function (canvas, renderer, htmlLayer, transform, fromExport, isOverView) {\n    if (transform === void 0) {\n      transform = true;\n    }\n\n    var pageBounds = this.scroller.getPageBounds();\n    pageBounds.x *= this.scroller.currentZoom;\n    pageBounds.y *= this.scroller.currentZoom;\n    pageBounds.width *= this.scroller.currentZoom;\n    pageBounds.height *= this.scroller.currentZoom;\n    var difX = -this.scroller.horizontalOffset - pageBounds.x;\n    var difY = -this.scroller.verticalOffset - pageBounds.y;\n    var getCenterPoint;\n\n    for (var _i = 0, _a = Object.keys(this.layerZIndexTable); _i < _a.length; _i++) {\n      var layerId = _a[_i];\n      var layer = this.commandHandler.getLayer(this.layerZIndexTable[layerId]);\n      var left = void 0;\n      var top_1 = void 0;\n\n      if (this.mode === 'Canvas' && canVitualize(this) && !this.diagramActions) {\n        this.scroller.virtualizeElements();\n      }\n\n      var id = this.mode === 'Canvas' && canVitualize(this) && this.scroller.oldCollectionObjects.length > 0 ? this.scroller.oldCollectionObjects : undefined;\n\n      for (var _b = 0, _c = Object.keys(id || layer.zIndexTable); _b < _c.length; _b++) {\n        var node = _c[_b];\n        var renderNode = id ? this.nameTable[id[node]] : this.nameTable[layer.zIndexTable[node]];\n\n        if (renderNode && !renderNode.parentId && layer.visible && (!renderNode.processId || this.refreshing)) {\n          var transformValue = {\n            tx: this.scroller.transform.tx,\n            ty: this.scroller.transform.ty,\n            scale: this.scroller.transform.scale\n          };\n\n          if (canVitualize(this)) {\n            if (this.scroller.currentZoom < 1) {\n              if (pageBounds.x < 0 || this.scroller.horizontalOffset < 0) {\n                var verticalValue = this.scroller.verticalOffset < 0 ? this.scroller.verticalOffset : 0;\n                left = (difX > 0 ? difX : 0) + 'px';\n                top_1 = (this.realActions & RealAction.vScrollbarMoved ? 0 : -verticalValue) + 'px';\n              } else {\n                left = 0 + 'px';\n                top_1 = 0 + 'px';\n              }\n\n              if (this.realActions & RealAction.hScrollbarMoved) {\n                this.realActions = this.realActions & ~RealAction.hScrollbarMoved;\n              }\n\n              if (this.realActions & RealAction.vScrollbarMoved) {\n                this.realActions = this.realActions & ~RealAction.vScrollbarMoved;\n              }\n            } else {\n              left = (pageBounds.x < 0 ? difX : -this.scroller.horizontalOffset) + 'px';\n              top_1 = (pageBounds.y < 0 ? difY : -this.scroller.verticalOffset) + 'px';\n            }\n\n            this.diagramLayer.style.left = left;\n            this.diagramLayer.style.top = top_1;\n            transformValue.tx = this.scroller.horizontalOffset / transformValue.scale;\n            transformValue.ty = this.scroller.verticalOffset / transformValue.scale;\n          }\n\n          var status_1 = true;\n\n          if (fromExport) {\n            status_1 = false;\n          }\n\n          this.updateTextElementValue(renderNode);\n\n          if (this.refreshing) {\n            if (renderNode.shape.activity && renderNode.shape.activity.subProcess && renderNode.shape.activity.subProcess.processes) {\n              for (var i = 0; i < renderNode.shape.activity.subProcess.processes.length; i++) {\n                var process = renderNode.shape.activity.subProcess.processes[i];\n                renderNode.wrapper.children.push(this.nameTable[process].wrapper);\n              }\n\n              renderNode.wrapper.measure(new Size(renderNode.wrapper.bounds.width, renderNode.wrapper.bounds.height));\n              renderNode.wrapper.arrange(renderNode.wrapper.desiredSize);\n            }\n          }\n\n          if (renderNode instanceof Connector && renderNode.type === 'Bezier') {\n            getCenterPoint = this.getMidPoint(renderNode);\n          } else {\n            getCenterPoint = null;\n          }\n\n          renderer.renderElement(renderNode.wrapper, canvas, htmlLayer, !renderer.isSvgMode && transform ? transformValue : undefined, undefined, undefined, status_1 && (!this.diagramActions || isOverView), undefined, undefined, getCenterPoint);\n        }\n      }\n    }\n  };\n  /**\n   *updateBridging method \\\n   *\n   * @returns { void } updateBridging method .\\\n   * @param {string} isLoad - provide the isLoad value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateBridging = function (isLoad) {\n    if (this.bridgingModule) {\n      for (var i = 0; i < this.connectors.length; i++) {\n        var connector = this.connectors[i];\n        this.bridgingModule.updateBridging(connector, this);\n        var canvas = this.connectors[i].wrapper;\n\n        if (canvas && canvas.children && canvas.children.length > 0) {\n          var pathSegment = canvas.children[0];\n          var data = pathSegment.data;\n          connector.getSegmentElement(connector, pathSegment, this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree' ? this.layout.orientation : undefined, undefined, false);\n\n          if (pathSegment.data !== data) {\n            canvas.measure(new Size());\n            canvas.arrange(canvas.desiredSize);\n\n            if (this.mode === 'SVG' && !isLoad) {\n              this.updateDiagramObject(connector);\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\n   *setCursor method \\\n   *\n   * @returns { void } setCursor method .\\\n   * @param {string} cursor - provide the width value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.setCursor = function (cursor) {\n    this.diagramRenderer.setCursor(this.diagramCanvas, cursor);\n  };\n  /**\n   *clearCanvas method \\\n   *\n   * @returns { void } clearCanvas method .\\\n   * @param {View} view - provide the width value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.clearCanvas = function (view) {\n    //let width: number;\n    //let height: number;\n    var width = view.contentWidth || view.diagramLayer.width / this.scroller.currentZoom;\n    var height = view.contentHeight || view.diagramLayer.height / this.scroller.currentZoom;\n\n    if (view.mode !== 'SVG') {\n      var ctx = CanvasRenderer.getContext(view.diagramLayer);\n      ctx.clearRect(0, 0, width, height);\n    }\n  };\n  /**\n   *updateScrollOffset method \\\n   *\n   * @returns { void } updateScrollOffset method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateScrollOffset = function () {\n    this.scroller.setScrollOffset(this.diagramCanvas.scrollLeft, this.diagramCanvas.scrollTop);\n    updateRuler(this);\n\n    if (canVitualize(this)) {\n      this.scroller.virtualizeElements();\n    }\n  };\n  /**\n   *setOffset method \\\n   *\n   * @returns { void } setOffset method .\\\n   * @param {number} offsetX - provide the width value.\n   * @param {number} offsetY - provide the height value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.setOffset = function (offsetX, offsetY) {\n    var domTable = 'domTable';\n\n    if (!window[domTable][this.element.id + 'content']) {\n      window[domTable][this.element.id + 'content'] = document.getElementById(this.element.id + 'content');\n    }\n\n    var container = window[domTable][this.element.id + 'content'];\n\n    if (container) {\n      container.scrollLeft = offsetX;\n      container.scrollTop = offsetY;\n    }\n  };\n  /**\n   *setSize method \\\n   *\n   * @returns { void } setSize method .\\\n   * @param {number} width - provide the width value.\n   * @param {number} height - provide the height value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.setSize = function (width, height) {\n    if (this.diagramLayer && !this.preventDiagramUpdate) {\n      var position = getRulerSize(this);\n      width -= position.width;\n      height -= position.height;\n      var bounds = this.spatialSearch.getPageBounds();\n      bounds.x *= this.scroller.currentZoom;\n      bounds.y *= this.scroller.currentZoom;\n      bounds.width *= this.scroller.currentZoom;\n      bounds.height *= this.scroller.currentZoom;\n      var factor = this.mode === 'SVG' ? 1 : 1.5;\n      var diagramLayer = this.mode === 'SVG' ? getDiagramLayerSvg(this.element.id) : this.diagramLayer;\n      var w = this.mode === 'Canvas' && this.constraints & DiagramConstraints.Virtualization ? this.scroller.viewPortWidth : width;\n      var h = this.mode === 'Canvas' && this.constraints & DiagramConstraints.Virtualization ? this.scroller.viewPortHeight : height;\n      diagramLayer.setAttribute('width', (factor * w).toString());\n      diagramLayer.setAttribute('height', (factor * h).toString());\n      var hiddenUserHandleTemplate = document.getElementById(this.element.id + '_diagramUserHandleLayer');\n\n      if (hiddenUserHandleTemplate) {\n        hiddenUserHandleTemplate.style.width = width + 'px';\n        hiddenUserHandleTemplate.style.height = height + 'px';\n      }\n\n      var attr = {\n        'width': width.toString(),\n        'height': height.toString()\n      };\n      this.diagramLayerDiv.style.width = width + 'px';\n      this.diagramLayerDiv.style.height = height + 'px';\n      setAttributeSvg(getNativeLayerSvg(this.element.id), attr);\n      setAttributeSvg(getPortLayerSvg(this.element.id), attr);\n      var adornerSVG = getAdornerLayerSvg(this.element.id);\n      setAttributeSvg(adornerSVG, attr);\n      adornerSVG.parentNode.style.width = width + 'px';\n      adornerSVG.parentNode.style.height = height + 'px';\n      var gridLayer = getGridLayerSvg(this.element.id);\n      setAttributeSvg(gridLayer, attr);\n      this.diagramRenderer.updateGrid(this.snapSettings, gridLayer, this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n      setAttributeSvg(getBackgroundLayerSvg(this.element.id), attr);\n      this.htmlLayer.style.width = width + 'px';\n      this.htmlLayer.style.height = height + 'px';\n\n      if (this.mode !== 'SVG' && !canVitualize(this)) {\n        this.refreshDiagramLayer();\n      }\n\n      if (this.mode === 'SVG' && canVitualize(this)) {\n        this.scroller.virtualizeElements();\n      }\n    }\n  };\n  /**\n   *transformLayers method \\\n   *\n   * @returns { void } Defines how to remove the Page breaks .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.transformLayers = function () {\n    var bounds = this.spatialSearch.getPageBounds();\n    bounds.x *= this.scroller.currentZoom;\n    bounds.y *= this.scroller.currentZoom;\n    bounds.width *= this.scroller.currentZoom;\n    bounds.height *= this.scroller.currentZoom;\n    this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n    this.diagramRenderer.transformLayers(this.scroller.transform, this.mode === 'SVG');\n\n    if (!(this.diagramActions & DiagramAction.DragUsingMouse)) {\n      this.updateSelector();\n    }\n\n    this.renderPageBreaks(bounds);\n  };\n  /**\n   *Defines how to remove the Page breaks \\\n   *\n   * @returns { void } Defines how to remove the Page breaks .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removePageBreaks = function () {\n    if (this.diagramLayer) {\n      var line = getBackgroundLayer(this.element.id);\n\n      if (line && line.childNodes) {\n        var length_2 = line.childNodes.length;\n\n        for (var i = 0; i < length_2; i++) {\n          line.removeChild(line.childNodes[0]);\n        }\n      }\n    }\n  };\n  /**\n   * Defines how the page breaks has been rendered \\\n   *\n   * @returns { void } Defines how the page breaks has been rendered .\\\n   * @param {Rect} bounds - provide the overview value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.renderPageBreaks = function (bounds) {\n    this.removePageBreaks();\n    var backgroundLayer = getBackgroundLayer(this.element.id);\n\n    if (backgroundLayer) {\n      var i = 0;\n      bounds = this.scroller.getPageBounds(true);\n      var x = (this.scroller.transform.tx + bounds.x) * this.scroller.currentZoom;\n      var y = (this.scroller.transform.ty + bounds.y) * this.scroller.currentZoom;\n      var height = bounds.height * this.scroller.currentZoom;\n      var width = bounds.width * this.scroller.currentZoom;\n      DiagramRenderer.renderSvgBackGroundImage(this.pageSettings.background, this.element, x, y, width, height);\n      var options = {\n        id: backgroundLayer.id + 'rect',\n        x: x,\n        y: y,\n        height: height,\n        width: width,\n        angle: 0,\n        stroke: '',\n        strokeWidth: 1,\n        fill: this.pageSettings.background.color,\n        opacity: 1,\n        pivotX: 0,\n        pivotY: 0,\n        visible: true,\n        dashArray: '0'\n      };\n      this.diagramRenderer.drawRect(backgroundLayer, options);\n\n      if (this.pageSettings.showPageBreaks) {\n        var collection = this.scroller.getPageBreak(bounds);\n\n        for (i = 0; i < collection.length; i++) {\n          this.diagramRenderer.drawLine(backgroundLayer, {\n            class: 'e-diagram-page-break',\n            fill: 'none',\n            stroke: '#aaaaaa',\n            strokeWidth: 1,\n            dashArray: '10 10',\n            opacity: 2,\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            angle: 0,\n            pivotX: 0,\n            pivotY: 0,\n            visible: true,\n            startPoint: {\n              x: (collection[i].x1 + this.scroller.transform.tx) * this.scroller.currentZoom,\n              y: (collection[i].y1 + this.scroller.transform.ty) * this.scroller.currentZoom\n            },\n            endPoint: {\n              x: (collection[i].x2 + this.scroller.transform.tx) * this.scroller.currentZoom,\n              y: (collection[i].y2 + this.scroller.transform.ty) * this.scroller.currentZoom\n            },\n            id: collection[i].y1 === collection[i].y2 ? 'HorizontalLines' : 'VerticalLines'\n          });\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.validatePageSize = function () {\n    var temp = 0;\n\n    if (this.pageSettings.orientation === 'Portrait') {\n      if (this.pageSettings.width > this.pageSettings.height) {\n        temp = this.pageSettings.height;\n        this.pageSettings.height = this.pageSettings.width;\n        this.pageSettings.width = temp;\n      }\n    } else {\n      if (this.pageSettings.height > this.pageSettings.width) {\n        temp = this.pageSettings.width;\n        this.pageSettings.width = this.pageSettings.height;\n        this.pageSettings.height = temp;\n      }\n    }\n  };\n  /**\n   * setOverview method \\\n   *\n   * @returns { void }     setOverview method .\\\n   * @param {View} overview - provide the overview value.\n   * @param {string} id - provide the boolean value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.setOverview = function (overview, id) {\n    if (overview) {\n      if (overview) {\n        this.views.push(overview.id);\n        this.views[overview.id] = overview;\n        overview.renderDocument(overview);\n        overview.diagramRenderer.setLayers();\n        overview.updateView(overview);\n        this.renderNodes(overview);\n      }\n    } else {\n      for (var i = 0; i < this.views.length; i++) {\n        if (this.views[i] === id) {\n          overview = this.views[id];\n        }\n      }\n\n      this.views[id] = undefined;\n      var index = this.views.indexOf(id);\n      this.views.splice(index, 1);\n    }\n  };\n\n  Diagram.prototype.renderNodes = function (overview) {\n    if (overview) {\n      var renderer = new DiagramRenderer(overview.id, new SvgRenderer(), false);\n      var g = document.getElementById(overview.element.id + '_diagramLayer');\n      var htmlLayer = getHTMLLayer(overview.element.id);\n      this.renderDiagramElements(g, overview.diagramRenderer || renderer, htmlLayer, undefined, undefined, true);\n    }\n  };\n\n  Diagram.prototype.updateThumbConstraints = function (node, selectorModel, canInitialize) {\n    var state = 0;\n    var length = node.length;\n\n    for (var i = 0; i < length; i++) {\n      var obj = node[i];\n      var hideRotate = false;\n      var hideResize = false;\n      var thumbConstraints = selectorModel.thumbsConstraints;\n\n      if (obj instanceof Node) {\n        hideRotate = obj.shape.type === 'Bpmn' && obj.shape.shape === 'Activity' && obj.shape.activity.subProcess.collapsed === false || obj.shape.shape === 'TextAnnotation';\n        hideResize = obj.shape.type === 'Bpmn' && obj.shape.shape === 'TextAnnotation';\n\n        if (!canRotate(obj) || !(thumbConstraints & ThumbsConstraints.Rotate) || hideRotate) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.Rotate;\n        }\n\n        if (!canResize(obj, 'SouthEast') || !(thumbConstraints & ThumbsConstraints.ResizeSouthEast) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouthEast;\n        }\n\n        if (!canResize(obj, 'NorthWest') || !(thumbConstraints & ThumbsConstraints.ResizeNorthWest) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorthWest;\n        }\n\n        if (!canResize(obj, 'East') || !(thumbConstraints & ThumbsConstraints.ResizeEast) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeEast;\n        }\n\n        if (!canResize(obj, 'West') || !(thumbConstraints & ThumbsConstraints.ResizeWest) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeWest;\n        }\n\n        if (!canResize(obj, 'North') || !(thumbConstraints & ThumbsConstraints.ResizeNorth) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorth;\n        }\n\n        if (!canResize(obj, 'South') || !(thumbConstraints & ThumbsConstraints.ResizeSouth) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouth;\n        }\n\n        if (!canResize(obj, 'NorthEast') || !(thumbConstraints & ThumbsConstraints.ResizeNorthEast) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorthEast;\n        }\n\n        if (!canResize(obj, 'SouthWest') || !(thumbConstraints & ThumbsConstraints.ResizeSouthWest) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouthWest;\n        }\n      } else if (obj instanceof Connector) {\n        if (!canInitialize) {\n          thumbConstraints = thumbConstraints | ThumbsConstraints.Default;\n        }\n\n        if (canDragSourceEnd(obj)) {\n          thumbConstraints = thumbConstraints | ThumbsConstraints.ConnectorSource;\n        } else {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ConnectorSource;\n        }\n\n        if (canDragTargetEnd(obj)) {\n          thumbConstraints = thumbConstraints | ThumbsConstraints.ConnectorTarget;\n        } else {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ConnectorTarget;\n        }\n      } else {\n        if (!canInitialize) {\n          thumbConstraints = thumbConstraints | ThumbsConstraints.Default;\n        }\n\n        if (!canResize(obj)) {\n          thumbConstraints = thumbConstraints & ~(ThumbsConstraints.ResizeSouthEast | ThumbsConstraints.ResizeSouthWest | ThumbsConstraints.ResizeSouth | ThumbsConstraints.ResizeEast | ThumbsConstraints.ResizeWest | ThumbsConstraints.ResizeNorth | ThumbsConstraints.ResizeNorthEast | ThumbsConstraints.ResizeNorthWest);\n        }\n\n        if (!canRotate(obj)) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.Rotate;\n        }\n      }\n\n      selectorModel.thumbsConstraints = thumbConstraints;\n    }\n  };\n  /**\n   * renderSelector method \\\n   *\n   * @returns { void }     renderSelector method .\\\n   * @param {boolean} multipleSelection - provide the multipleSelection value.\n   * @param {boolean} isSwimLane - provide the boolean value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.renderSelector = function (multipleSelection, isSwimLane) {\n    var isProtectedOnChangeValue = this.isProtectedOnChange;\n\n    if (isBlazor()) {\n      this.isProtectedOnChange = true;\n    }\n\n    var size = new Size();\n    var selectorModel = this.selectedItems;\n    var selectorConstraints = selectorModel.constraints;\n    var rendererActions = this.diagramRenderer.rendererActions;\n    var innertemplate = document.getElementsByClassName('blazor-inner-template');\n    var i;\n    var div;\n    this.diagramRenderer.rendererActions = this.currentSymbol ? this.addConstraints(rendererActions, RendererAction.DrawSelectorBorder) : this.removeConstraints(rendererActions, RendererAction.DrawSelectorBorder);\n    this.clearSelectorLayer();\n\n    if (this.commandHandler.hasSelection()) {\n      if (selectorModel.nodes.length === 1 && selectorModel.connectors.length === 0) {\n        selectorModel.rotateAngle = selectorModel.nodes[0].rotateAngle;\n        selectorModel.pivot = selectorModel.nodes[0].pivot;\n      }\n\n      selectorModel.wrapper.measure(size);\n      selectorModel.wrapper.arrange(selectorModel.wrapper.desiredSize);\n      selectorModel.width = selectorModel.wrapper.actualSize.width;\n      selectorModel.height = selectorModel.wrapper.actualSize.height;\n      selectorModel.offsetX = selectorModel.wrapper.offsetX;\n      selectorModel.offsetY = selectorModel.wrapper.offsetY;\n\n      if (selectorModel.rotateAngle !== 0) {\n        for (var _i = 0, _a = selectorModel.nodes; _i < _a.length; _i++) {\n          var obj = _a[_i];\n          obj.offsetX = obj.wrapper.offsetX;\n          obj.offsetY = obj.wrapper.offsetY;\n        }\n\n        for (var _b = 0, _c = selectorModel.connectors; _b < _c.length; _b++) {\n          var conn = _c[_b]; //update connections\n        }\n      }\n\n      var bounds = this.spatialSearch.getPageBounds(); //let selectorElement: (SVGElement | HTMLCanvasElement);\n\n      var selectorElement = getSelectorElement(this.element.id); //let diagramUserHandlelayer: (SVGElement | HTMLElement);\n\n      var diagramUserHandlelayer = getUserHandleLayer(this.element.id);\n      selectorModel.thumbsConstraints = ThumbsConstraints.Default;\n\n      if (selectorModel.annotation) {\n        this.updateThumbConstraints([selectorModel.annotation], selectorModel);\n      } else {\n        this.updateThumbConstraints(selectorModel.nodes, selectorModel);\n        this.updateThumbConstraints(selectorModel.connectors, selectorModel, true);\n      }\n\n      if (selectorModel.annotation) {\n        this.renderSelectorForAnnotation(selectorModel, selectorElement);\n      } else if (selectorModel.nodes.length + selectorModel.connectors.length === 1 || this.nameTable[\"helper\"]) {\n        if (selectorModel.nodes[0] instanceof Node) {\n          var node = selectorModel.nodes[0];\n\n          if (checkParentAsContainer(this, node)) {\n            if (!isSwimLane && node.shape.type !== 'UmlClassifier' && !(node.parentId && this.nameTable[node.parentId] && this.nameTable[node.parentId].shape.type === 'UmlClassifier')) {\n              if (!(node.container && (node.container.type === 'Canvas' || node.container.type === 'Grid'))) {\n                selectorModel.nodes[0].constraints &= ~(NodeConstraints.Rotate | NodeConstraints.HideThumbs);\n              }\n\n              selectorModel.thumbsConstraints &= ~ThumbsConstraints.Rotate;\n            }\n          }\n\n          var constraints = isSwimLane ? true : node.constraints & NodeConstraints.HideThumbs ? true : false;\n          var swimlane = node.shape.type === 'SwimLane' || node.isLane || node.isPhase || isSwimLane ? true : false;\n          this.diagramRenderer.renderResizeHandle(selectorModel.wrapper.children[0], selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(node), constraints, swimlane);\n        } else if (selectorModel.connectors[0] instanceof Connector && canDrawThumbs(this.diagramRenderer.rendererActions)) {\n          var connector = selectorModel.connectors[0];\n          this.diagramRenderer.renderEndPointHandle(connector, selectorElement, selectorModel.thumbsConstraints, selectorModel.constraints, this.scroller.transform, connector.sourceWrapper !== undefined, connector.targetWrapper !== undefined, this.connectorEditingToolModule && canDragSegmentThumb(connector) ? true : false);\n        }\n      } else {\n        this.diagramRenderer.renderResizeHandle(selectorModel.wrapper, selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(selectorModel));\n      }\n\n      if (!selectorModel.annotation && !this.currentSymbol) {\n        this.diagramRenderer.renderUserHandler(selectorModel, selectorElement, this.scroller.transform, diagramUserHandlelayer);\n\n        if (isBlazor() && innertemplate.length > 0) {\n          for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n            var userHandle = this.selectedItems.userHandles[i];\n            div = document.getElementById(userHandle.name + '_html_element');\n            div.style.display = 'block';\n          }\n        }\n      }\n    }\n\n    this.isProtectedOnChange = isProtectedOnChangeValue;\n  };\n  /**\n   * updateSelector method \\\n   *\n   * @returns { void }     updateSelector method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateSelector = function () {\n    var severDataBind = this.allowServerDataBinding;\n    this.enableServerDataBinding(false);\n    var size = new Size();\n    var selector = this.selectedItems;\n    var selectorConstraints = selector.constraints;\n    var innertemplate = document.getElementsByClassName('blazor-inner-template');\n    var i;\n    var div;\n\n    if (!(this.diagramActions & DiagramAction.ToolAction) && this.selectedItems.nodes.length === 1) {\n      this.selectedItems.rotateAngle = this.selectedItems.nodes[0].rotateAngle;\n      this.selectedItems.wrapper.rotateAngle = this.selectedItems.nodes[0].rotateAngle;\n    }\n\n    if (this.selectedItems !== undefined) {\n      this.clearSelectorLayer();\n\n      if (selector.wrapper !== null && selector.wrapper.children && selector.wrapper.children.length) {\n        var canUpdate = true;\n        var canRender = true;\n\n        if (selectionHasConnector(this, selector)) {\n          var eventHandler = 'eventHandler';\n          var rotate = this[eventHandler].action;\n          var isRotate = rotate.includes('Rotate');\n          var isSelect = rotate.includes('None') || rotate.includes('Select') || rotate.includes('Drag');\n\n          if (isRotate || isSelect) {\n            canRender = false;\n          }\n\n          if (!isSelect) {\n            canUpdate = false;\n          }\n        }\n\n        if (canUpdate) {\n          selector.wrapper.measure(size);\n          selector.wrapper.arrange(selector.wrapper.desiredSize);\n        }\n\n        if (selector.rotateAngle !== 0 || selector.rotateAngle !== selector.wrapper.prevRotateAngle) {\n          for (var _i = 0, _a = selector.nodes; _i < _a.length; _i++) {\n            var obj = _a[_i];\n            obj.offsetX = obj.wrapper.offsetX;\n            obj.offsetY = obj.wrapper.offsetY;\n          }\n        }\n\n        selector.width = selector.wrapper.actualSize.width;\n        selector.height = selector.wrapper.actualSize.height;\n        selector.offsetX = selector.wrapper.offsetX;\n        selector.offsetY = selector.wrapper.offsetY; //let selectorEle: (SVGElement | HTMLCanvasElement);\n\n        var selectorEle = getSelectorElement(this.element.id); //let diagramUserHandlelayer: (SVGElement | HTMLElement);\n\n        var diagramUserHandlelayer = getUserHandleLayer(this.element.id);\n        var canHideResizers = this.eventHandler.canHideResizers();\n        selector.thumbsConstraints = ThumbsConstraints.Default;\n\n        if (selector.annotation) {\n          this.updateThumbConstraints([selector.annotation], selector);\n        } else {\n          this.updateThumbConstraints(selector.nodes, selector);\n          this.updateThumbConstraints(selector.connectors, selector, true);\n        }\n\n        if (this.selectedItems.constraints & SelectorConstraints.UserHandle && !selector.annotation && !this.currentSymbol) {\n          this.diagramRenderer.renderUserHandler(selector, selectorEle, this.scroller.transform, diagramUserHandlelayer);\n\n          if (isBlazor() && innertemplate.length > 0) {\n            for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n              var userHandletemplate = this.selectedItems.userHandles[i];\n              div = document.getElementById(userHandletemplate.name + '_html_element');\n              div.style.display = 'block';\n            }\n          }\n        }\n\n        if (selector.annotation) {\n          this.renderSelectorForAnnotation(selector, selectorEle);\n        } else if (selector.nodes.length + selector.connectors.length === 1) {\n          if (selector.connectors[0] instanceof Connector && canDrawThumbs(this.diagramRenderer.rendererActions)) {\n            var connector = selector.connectors[0];\n            this.diagramRenderer.renderEndPointHandle(connector, selectorEle, selector.thumbsConstraints, selectorConstraints, this.scroller.transform, connector.sourceWrapper !== undefined, connector.targetWrapper !== undefined, this.connectorEditingToolModule && canDragSegmentThumb(connector) ? true : false);\n          } else if (selector.nodes[0] instanceof Node) {\n            var stackPanel = selector.nodes[0];\n\n            if (checkParentAsContainer(this, selector.nodes[0])) {\n              if (stackPanel.shape.type !== 'UmlClassifier' && !(stackPanel.parentId && this.nameTable[stackPanel.parentId] && this.nameTable[stackPanel.parentId].shape.type === 'UmlClassifier')) {\n                if (!(stackPanel.container && (stackPanel.container.type === 'Canvas' || stackPanel.container.type === 'Grid'))) {\n                  selector.nodes[0].constraints &= ~(NodeConstraints.HideThumbs | NodeConstraints.Rotate);\n                }\n\n                selector.thumbsConstraints &= ~ThumbsConstraints.Rotate;\n              }\n            }\n\n            var swimlane = stackPanel.shape.type === 'SwimLane' || stackPanel.isLane || stackPanel.isPhase ? true : false;\n            this.diagramRenderer.renderResizeHandle(selector.wrapper.children[0], selectorEle, selector.thumbsConstraints, this.scroller.currentZoom, selector.constraints, this.scroller.transform, canHideResizers, canMove(selector.nodes[0]), selector.nodes[0].constraints & NodeConstraints.HideThumbs ? true : false, swimlane);\n          }\n        } else {\n          if (this.diagramActions & DiagramAction.Interactions) {\n            this.diagramRenderer.rendererActions = this.diagramRenderer.rendererActions | RendererAction.PreventRenderSelector;\n          }\n\n          if (!(selectionHasConnector(this, selector) && canRender)) {\n            this.diagramRenderer.renderResizeHandle(selector.wrapper, selectorEle, selector.thumbsConstraints, this.scroller.currentZoom, selector.constraints, this.scroller.transform, canHideResizers, canMove(selector));\n          }\n\n          this.diagramRenderer.rendererActions = this.diagramRenderer.rendererActions & ~RendererAction.PreventRenderSelector;\n        }\n      }\n    }\n\n    this.enableServerDataBinding(severDataBind);\n  };\n  /**\n   * renderSelectorForAnnotation method \\\n   *\n   * @returns { void }     renderSelectorForAnnotation method .\\\n   * @param {Selector} selectorModel - provide the x value.\n   * @param {(SVGElement | HTMLCanvasElement)} selectorElement - provide the y value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.renderSelectorForAnnotation = function (selectorModel, selectorElement) {\n    this.diagramRenderer.renderResizeHandle(selectorModel.wrapper.children[0], selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(selectorModel.annotation));\n  };\n  /**\n   * drawSelectionRectangle method \\\n   *\n   * @returns { void }     drawSelectionRectangle method .\\\n   * @param {number} x - provide the x value.\n   * @param {number} y - provide the y value.\n   * @param {number} width - provide the width value.\n   * @param {number} height - provide the height value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.drawSelectionRectangle = function (x, y, width, height) {\n    this.clearSelectorLayer();\n    this.diagramRenderer.drawSelectionRectangle(x, y, width, height, this.adornerLayer, this.scroller.transform);\n  };\n  /**\n   * renderHighlighter method \\\n   *\n   * @returns { void }     renderHighlighter method .\\\n   * @param {DiagramElement} element - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.renderHighlighter = function (element) {\n    var adornerSvg = getAdornerLayerSvg(this.element.id);\n    this.diagramRenderer.renderHighlighter(element, adornerSvg, this.scroller.transform);\n  };\n  /**\n   * clearHighlighter method \\\n   *\n   * @returns { void }     clearHighlighter method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.clearHighlighter = function () {\n    var adornerSvg = getAdornerLayerSvg(this.element.id);\n    var highlighter = adornerSvg.getElementById(adornerSvg.id + '_highlighter');\n\n    if (highlighter) {\n      highlighter.parentNode.removeChild(highlighter);\n    }\n  };\n  /**\n   * getNodesConnectors method \\\n   *\n   * @returns { (NodeModel | ConnectorModel)[] }     getNodesConnectors method .\\\n   * @param {(NodeModel | ConnectorModel)[]} selectedItems - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getNodesConnectors = function (selectedItems) {\n    for (var i = 0; i < this.nodes.length; i++) {\n      var node = this.nodes[i];\n      selectedItems.push(node);\n    }\n\n    for (var i = 0; i < this.connectors.length; i++) {\n      var conn = this.connectors[i];\n      selectedItems.push(conn);\n    }\n\n    return selectedItems;\n  };\n  /**\n   * clearSelectorLayer method \\\n   *\n   * @returns { void }     clearSelectorLayer method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.clearSelectorLayer = function () {\n    var adornerSvg = getAdornerLayerSvg(this.element.id);\n    var innertemplate = document.getElementsByClassName('blazor-inner-template');\n    var i;\n    var div;\n    var j;\n\n    if (!this.currentSymbol) {\n      var selectionRect = adornerSvg.getElementById(this.adornerLayer.id + '_selected_region');\n\n      if (selectionRect) {\n        selectionRect.parentNode.removeChild(selectionRect);\n      }\n\n      this.clearHighlighter();\n      var childNodes = getSelectorElement(this.element.id).childNodes;\n      var child = void 0;\n\n      for (var i_4 = childNodes.length; i_4 > 0; i_4--) {\n        child = childNodes[i_4 - 1];\n        child.parentNode.removeChild(child);\n      }\n\n      if (isBlazor() && !(this.diagramActions & DiagramAction.DragUsingMouse) && innertemplate.length > 0) {\n        for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n          var template = this.selectedItems.userHandles[i];\n          div = document.getElementById(template.name + '_html_element');\n          div.style.display = 'none';\n        }\n      } else {\n        if (!isBlazor()) {\n          var templates = getUserHandleLayer(this.element.id).childNodes;\n\n          for (i = templates.length; i > 0; i--) {\n            templates[i - 1].parentNode.removeChild(templates[i - 1]);\n          }\n        }\n      }\n    } else {\n      var symbolBorder = adornerSvg.getElementById('borderRect_symbol');\n\n      if (symbolBorder) {\n        symbolBorder.parentNode.removeChild(symbolBorder);\n      }\n    }\n  };\n  /**\n   * getWrapper method \\\n   *\n   * @returns { void }     getWrapper method .\\\n   * @param {Container} nodes - provide the node value.\n   * @param {string} id - provide the childernCollection value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getWrapper = function (nodes, id) {\n    var wrapper;\n    id = nodes.id + '_' + id;\n    var container = nodes instanceof Canvas ? nodes : this.getPortContainer(this.nameTable[nodes.id]);\n\n    for (var i = 0; i < container.children.length; i++) {\n      if (id === container.children[i].id) {\n        wrapper = container.children[i];\n      }\n    }\n\n    return wrapper;\n  };\n  /**\n   * DiagramElement method \\\n   *\n   * @returns { void }     getEndNodeWrapper method .\\\n   * @param {NodeModel | ConnectorModel} node - provide the node value.\n   * @param {ConnectorModel} connector - provide the childernCollection value.\n   * @param {boolean} source - provide the childernCollection value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getEndNodeWrapper = function (node, connector, source) {\n    if (node.shape.type === 'Bpmn' && node.wrapper.children[0] instanceof Canvas) {\n      if (!isBlazor() && node.shape.shape === 'Activity' || isBlazor() && node.shadow.bpmnShape === 'Activity') {\n        if (source && node.shape.activity.subProcess.type === 'Transaction' && connector.sourcePortID) {\n          var portId = connector.sourcePortID;\n          var parent_3 = node.wrapper.children[0].children[0].children[2];\n\n          if (parent_3.children) {\n            for (var _i = 0, _a = parent_3.children; _i < _a.length; _i++) {\n              var child = _a[_i];\n\n              if (child.visible && child.id === node.id + '_' + portId) {\n                return child.children[0];\n              }\n            }\n          }\n        }\n\n        return node.wrapper.children[0].children[0].children[0];\n      }\n\n      return node.wrapper.children[0].children[0];\n    }\n\n    if (!this.containsMargin(node.wrapper.children[0])) {\n      if (!node.children) {\n        return node.wrapper.children[0];\n      }\n    }\n\n    return node.wrapper;\n  };\n\n  Diagram.prototype.containsMargin = function (node) {\n    return node.margin && (node.margin.left !== 0 || node.margin.top !== 0 || node.margin.right !== 0 || node.margin.bottom !== 0);\n  };\n\n  Diagram.prototype.focusOutEdit = function () {\n    this.endEdit();\n  };\n\n  Diagram.prototype.endEditCommand = function () {\n    this.endEdit();\n    this.textEditing = false;\n  };\n  /**\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  Diagram.prototype.endEdit = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var blazor, blazorInterop, oldValues, changedvalues, annotations, textArea, text, element, node, annotation, args, bpmnAnnotation, textWrapper, eventObj, annotation_1, index, deleteNode, eventObj, index, changesAnnotation, nodeIndex, oldnodes, newnodes, clonedObject, selectedNode, swimLaneNode, laneHeader, phaseHeader, collection, j;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.diagramActions & DiagramAction.TextEdit)) return [3\n            /*break*/\n            , 11];\n            blazor = 'Blazor';\n            blazorInterop = 'sfBlazor';\n            oldValues = void 0;\n            changedvalues = void 0;\n            annotations = {};\n            this.enableServerDataBinding(false);\n\n            if (isBlazor()) {\n              this.canEnableBlazorObject = true;\n            }\n\n            textArea = document.getElementById(this.element.id + '_editBox');\n            if (!(isBlazor() && textArea || !isBlazor())) return [3\n            /*break*/\n            , 11];\n            text = textArea.value;\n            EventHandler.remove(textArea, 'input', this.eventHandler.inputChange);\n            EventHandler.remove(textArea, 'focusout', this.focusOutEdit);\n            element = document.getElementById(this.element.id + '_editTextBoxDiv');\n            node = void 0;\n            node = this.nameTable[this.activeLabel.parentId];\n            annotation = findAnnotation(node, this.activeLabel.id);\n            args = {\n              oldValue: this.activeLabel.text,\n              newValue: text,\n              cancel: false,\n              element: node,\n              annotation: annotation\n            };\n\n            if (isBlazor() && this.textEdit) {\n              args = this.getBlazorTextEditArgs(args);\n            }\n\n            bpmnAnnotation = false;\n            element.parentNode.removeChild(element);\n            textWrapper = void 0;\n            if (!this.bpmnModule) return [3\n            /*break*/\n            , 5];\n            node = this.bpmnModule.isBpmnTextAnnotation(this.activeLabel, this);\n            textWrapper = this.bpmnModule.getTextAnnotationWrapper(node, this.activeLabel.id);\n            bpmnAnnotation = node ? true : false;\n            if (!bpmnAnnotation) return [3\n            /*break*/\n            , 5];\n            if (!(element.textContent !== text || text !== this.activeLabel.text)) return [3\n            /*break*/\n            , 5];\n            if (!isBlazor()) return [3\n            /*break*/\n            , 3];\n            if (!(this.textEdit && window && window[blazor])) return [3\n            /*break*/\n            , 2];\n            eventObj = {\n              'EventName': 'textEdit',\n              args: JSON.stringify(args)\n            };\n            return [4\n            /*yield*/\n            , window[blazorInterop].updateBlazorDiagramEvents(eventObj, this)];\n\n          case 1:\n            args = _a.sent() || args;\n            _a.label = 2;\n\n          case 2:\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            this.triggerEvent(DiagramEvent.textEdit, args);\n            _a.label = 4;\n\n          case 4:\n            if (!args.cancel) {\n              this.bpmnModule.updateTextAnnotationContent(node, this.activeLabel, text, this);\n            }\n\n            _a.label = 5;\n\n          case 5:\n            if (!!bpmnAnnotation) return [3\n            /*break*/\n            , 10];\n            node = this.nameTable[this.activeLabel.parentId];\n            annotation_1 = findAnnotation(node, this.activeLabel.id);\n\n            if (annotation_1 && !(annotation_1 instanceof Text)) {\n              index = findObjectIndex(node, annotation_1.id, true);\n              annotations[index] = {\n                content: annotation_1.content\n              };\n              oldValues = {\n                annotations: annotations\n              };\n            } else {\n              if (isBlazor() && node.shape.type === 'Text') {\n                oldValues = {\n                  shape: {\n                    textContent: node.shape.content\n                  }\n                };\n              } else {\n                oldValues = {\n                  shape: {\n                    content: node.shape.content\n                  }\n                };\n              }\n            }\n\n            deleteNode = this.eventHandler.isAddTextNode(node, true);\n            if (!(!deleteNode && (element.textContent !== text || text !== this.activeLabel.text))) return [3\n            /*break*/\n            , 9];\n            if (!isBlazor()) return [3\n            /*break*/\n            , 8];\n            if (!(window && window[blazor] && this.textEdit)) return [3\n            /*break*/\n            , 7];\n            eventObj = {\n              'EventName': 'textEdit',\n              args: JSON.stringify(args)\n            };\n            return [4\n            /*yield*/\n            , window[blazorInterop].updateBlazorDiagramEvents(eventObj, this)];\n\n          case 6:\n            args = _a.sent() || args;\n            _a.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            this.triggerEvent(DiagramEvent.textEdit, args);\n            _a.label = 9;\n\n          case 9:\n            if (!textWrapper) {\n              textWrapper = this.getWrapper(node.wrapper, this.activeLabel.id);\n            }\n\n            if (annotation_1.content !== text && !args.cancel) {\n              if (node.parentId && this.nameTable[node.parentId].shape.type === 'UmlClassifier' && text.indexOf('+') === -1 && text.indexOf('-') === -1 && text.indexOf('#') === -1 && text.indexOf('~') === -1 && node.id.indexOf('_umlClass_header') === -1) {\n                text = ' + ' + text;\n              }\n\n              if (node.isLane || node.isPhase) {\n                this.protectPropertyChange(true);\n              }\n\n              if (!(annotation_1 instanceof Text)) {\n                index = findObjectIndex(node, annotation_1.id, true);\n                changesAnnotation = {};\n                changesAnnotation[index] = {\n                  content: text\n                };\n                changedvalues = {\n                  annotations: changesAnnotation\n                };\n              } else {\n                if (isBlazor() && node.shape.type === 'Text') {\n                  changedvalues = {\n                    shape: {\n                      textContent: text\n                    }\n                  };\n                } else {\n                  changedvalues = {\n                    shape: {\n                      content: text\n                    }\n                  };\n                }\n              }\n\n              nodeIndex = this.getIndex(node, node.id);\n\n              if (nodeIndex) {\n                oldnodes = {};\n                oldnodes[nodeIndex] = oldValues;\n                newnodes = {};\n                newnodes[nodeIndex] = changedvalues;\n\n                if (getObjectType(node) === Node) {\n                  this.onPropertyChanged({\n                    nodes: newnodes\n                  }, {\n                    nodes: oldnodes\n                  });\n                } else {\n                  this.onPropertyChanged({\n                    connectors: newnodes\n                  }, {\n                    connectors: oldnodes\n                  });\n                }\n              }\n\n              this.protectPropertyChange(true);\n\n              if (isBlazor() && node.shape.type === 'Text') {\n                node.shape.textContent = text;\n              } else {\n                annotation_1.content = text;\n              }\n\n              this.protectPropertyChange(false);\n              this.updateSelector();\n\n              if (node.isLane || node.isPhase) {\n                this.protectPropertyChange(false);\n              }\n            }\n\n            if (deleteNode) {\n              this.removeObjectsFromLayer(node);\n              this.removeFromAQuad(node);\n              delete this.nameTable[this.activeLabel.parentId];\n\n              if (text !== '') {\n                this.clearSelection();\n                clonedObject = cloneObject(node);\n                node = this.add(clonedObject);\n                this.updateDiagramObject(node);\n                this.commandHandler.oldSelectedObjects = cloneSelectedObjects(this);\n                this.commandHandler.select(this.nameTable[node.id]);\n                this.commandHandler.updateBlazorSelector();\n              }\n            }\n\n            _a.label = 10;\n\n          case 10:\n            if (this.selectedItems.nodes.length) {\n              selectedNode = this.nameTable[this.activeLabel.parentId];\n              swimLaneNode = this.nameTable[selectedNode.parentId];\n\n              if (swimLaneNode && swimLaneNode.shape.type === 'SwimLane' || selectedNode.shape.type === 'SwimLane') {\n                laneHeader = 'LaneHeaderParent';\n                phaseHeader = 'PhaseHeaderParent';\n\n                if (selectedNode.shape.type === 'SwimLane') {\n                  swimLaneNode = this.nameTable[this.activeLabel.parentId];\n                  selectedNode = node;\n                }\n\n                if (selectedNode.isLane || selectedNode.isPhase) {\n                  collection = selectedNode.isLane ? swimLaneNode.shape.lanes : swimLaneNode.shape.phases;\n\n                  for (j = 0; j < collection.length; j++) {\n                    if (collection[j].id === (selectedNode[laneHeader] || selectedNode[phaseHeader])) {\n                      collection[j].header.annotation.content = selectedNode.annotations[0].content;\n                    }\n                  }\n                } else if (selectedNode.isHeader && swimLaneNode.shape.hasHeader) {\n                  swimLaneNode.shape.header.annotation.content = selectedNode.annotations[0].content;\n                }\n              }\n\n              this.dataBind();\n            }\n\n            textWrapper.visible = true;\n            this.updateDiagramObject(node);\n            this.diagramActions = this.diagramActions & ~DiagramAction.TextEdit;\n\n            if (this.activeLabel.isGroup) {\n              this.endGroupAction();\n            }\n\n            this.activeLabel = {\n              id: '',\n              parentId: '',\n              isGroup: false,\n              text: undefined\n            };\n            this.commandHandler.getBlazorOldValues();\n\n            if (isBlazor()) {\n              this.canEnableBlazorObject = false;\n            }\n\n            this.enableServerDataBinding(true);\n            _a.label = 11;\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * getIndex method \\\n   *\n   * @returns { void }     getIndex method .\\\n   * @param {NodeModel | ConnectorModel} node - provide the node value.\n   * @param {string} id - provide the childernCollection value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getIndex = function (node, id) {\n    //let index: number;\n    var collection = getObjectType(node) === Node ? this.nodes : this.connectors;\n\n    for (var i = 0; i < collection.length; i++) {\n      if (collection[i].id.toString() === id.toString()) {\n        return i.toString();\n      }\n    }\n\n    return null;\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.getBlazorTextEditArgs = function (args) {\n    var element = getObjectType(args.element) === Connector ? {\n      connectorId: args.element.id\n    } : {\n      nodeId: args.element.id\n    };\n    var annotation = {};\n\n    if (getObjectType(args.element) === Node) {\n      if (args.element.shape.type === 'Text') {\n        annotation.textNode = args.element.shape;\n      } else {\n        annotation.annotationId = args.element.annotations[0].id;\n      }\n    } else {\n      annotation.annotationId = args.element.annotations[0].id;\n    }\n\n    args = {\n      oldValue: args.oldValue,\n      newValue: args.newValue,\n      cancel: args.cancel,\n      element: element,\n      annotation: annotation\n    };\n    return args;\n  };\n  /**\n   * canLogChange method \\\n   *\n   * @returns { void }     canLogChange method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.canLogChange = function () {\n    if (this.diagramActions & DiagramAction.Render && !(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.PublicMethod)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  Diagram.prototype.modelChanged = function (newProp, oldProp) {\n    if (newProp.connectors || oldProp.connectors || newProp.nodes || oldProp.connectors || newProp.pageSettings || oldProp.pageSettings || newProp.bridgeDirection || oldProp.bridgeDirection) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Diagram.prototype.resetDiagramActions = function (action) {\n    var isAction = action ? true : false;\n\n    if (this.diagramActions & DiagramAction.UndoRedo && (!isAction || action === DiagramAction.UndoRedo)) {\n      this.diagramActions = this.diagramActions & ~DiagramAction.UndoRedo;\n    }\n\n    if (this.diagramActions & DiagramAction.PublicMethod && (!isAction || action === DiagramAction.PublicMethod)) {\n      this.diagramActions = this.diagramActions & ~DiagramAction.PublicMethod;\n    }\n  };\n  /**\n   * removeNode method \\\n   *\n   * @returns { void }     removeNode method .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {NodeModel} childernCollection - provide the childernCollection value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeNode = function (node, childernCollection) {\n    this.removeObjectsFromLayer(node);\n    this.removeFromAQuad(this.nameTable[node.id]);\n    var groupElement = document.getElementById(node.id + '_groupElement');\n    delete this.nameTable[node.id];\n\n    if (node.children) {\n      delete this.groupTable[node.id];\n    }\n\n    if (isBlazor()) {\n      for (var i = 0; i < this.nodes.length; i++) {\n        if (node.id === this.nodes[i].id) {\n          this.UpdateBlazorDiagramModel(node, 'Node', i);\n        }\n      }\n    }\n\n    this.nodes.splice(this.nodes.indexOf(node), 1);\n\n    if (groupElement.children && groupElement.children.length > 0) {\n      var beforeElement = undefined;\n\n      for (var j = groupElement.children.length - 1; j >= 0; j--) {\n        var childElement = groupElement.children[j];\n\n        if (childernCollection.length > 0 && childernCollection.indexOf(childElement.id.split('_')[0]) !== -1) {\n          if (!beforeElement) {\n            groupElement.parentNode.insertBefore(childElement, groupElement);\n          } else {\n            groupElement.parentNode.insertBefore(childElement, beforeElement);\n          }\n\n          beforeElement = childElement;\n        }\n      }\n    }\n\n    if (groupElement) {\n      groupElement.parentNode.removeChild(groupElement);\n    }\n  };\n  /**\n   * deleteGroup method \\\n   *\n   * @returns { void }     deleteGroup method .\\\n   * @param {NodeModel} node - provide the source value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.deleteGroup = function (node) {\n    var elements = [];\n    var tempNode = [];\n\n    if (node.children) {\n      tempNode = this.commandHandler.getChildren(node, elements);\n    }\n\n    this.UpdateBlazorDiagramModelCollection(node);\n\n    for (var _i = 0, tempNode_1 = tempNode; _i < tempNode_1.length; _i++) {\n      var nodes = tempNode_1[_i];\n\n      if (this.nameTable[nodes.id]) {\n        this.remove(nodes);\n      }\n    }\n  }; //helper methods - end region\n  //property changes - start region\n\n  /** @private */\n\n  /**\n   * updateObject method \\\n   *\n   * @returns { void }     updateObject method .\\\n   * @param {Node | Connector} actualObject - provide the source value.\n   * @param {Node | Connector} oldObject - provide the target value.\n   * @param {Node | Connector} changedProp - provide the layoutOrientation value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateObject = function (actualObject, oldObject, changedProp) {\n    if (!(this.diagramActions & DiagramAction.ToolAction)) {\n      var bound = actualObject.wrapper.children[0].bounds;\n      var checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, bound);\n\n      if (!checkBoundaryConstraints) {\n        if (actualObject instanceof Node) {\n          var oldNode = oldObject;\n\n          for (var _i = 0, _a = Object.keys(changedProp); _i < _a.length; _i++) {\n            var key = _a[_i];\n\n            switch (key) {\n              case 'width':\n                actualObject.width = oldNode.width;\n                break;\n\n              case 'height':\n                actualObject.height = oldNode.height;\n                break;\n\n              case 'offsetX':\n                actualObject.offsetX = oldNode.offsetX;\n                break;\n\n              case 'offsetY':\n                actualObject.offsetY = oldNode.offsetY;\n                break;\n\n              case 'rotateAngle':\n                actualObject.rotateAngle = oldNode.rotateAngle;\n                break;\n            }\n          }\n\n          this.nodePropertyChange(actualObject, changedProp, oldObject);\n        } else {\n          for (var _b = 0, _c = Object.keys(changedProp); _b < _c.length; _b++) {\n            var key = _c[_b];\n            var oldConnector = oldObject;\n            var actualSourcePoint = actualObject.sourcePoint;\n            var actualTargetPoint = actualObject.targetPoint;\n\n            switch (key) {\n              case 'sourcePoint':\n                actualSourcePoint.x = oldConnector.sourcePoint.x || actualSourcePoint.x;\n                actualSourcePoint.y = oldConnector.sourcePoint.y || actualSourcePoint.y;\n                break;\n\n              case 'targetPoint':\n                actualTargetPoint.x = oldConnector.targetPoint.x || actualTargetPoint.x;\n                actualTargetPoint.y = oldConnector.targetPoint.y || actualTargetPoint.y;\n            }\n          }\n\n          this.connectorPropertyChange(actualObject, changedProp, oldObject);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.nodePropertyChangeExtend = function (actualObject, oldObject, node, update) {\n    if (node.style !== undefined && actualObject.shape.type !== 'Bpmn') {\n      updateStyle(node.style, actualObject.wrapper.children[0]);\n      update = true;\n    }\n\n    if (node.shadow !== undefined) {\n      this.updateShadow(actualObject.shadow, node.shadow);\n      update = true;\n    }\n\n    if (node.constraints !== undefined) {\n      if (oldObject.constraints & NodeConstraints.Select && !(node.constraints & NodeConstraints.Select) && isSelected(this, actualObject)) {\n        this.clearSelection();\n      } else {\n        this.updateThumbConstraints(this.selectedItems.nodes, this.selectedItems);\n        this.updateSelector();\n        update = true;\n      }\n    }\n\n    this.swimLaneNodePropertyChange(actualObject, oldObject, node, update);\n    return update;\n  };\n  /* tslint:disable */\n\n\n  Diagram.prototype.swimLaneNodePropertyChange = function (actualObject, oldObject, node, update) {\n    if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol) {\n      if (oldObject.shape) {\n        var shape = node.shape;\n        var actualShape = actualObject.shape;\n        var orientation_1 = actualShape.orientation === 'Horizontal' ? true : false;\n        var padding = actualShape.padding;\n        var oldShape = oldObject.shape;\n        var grid = actualObject.wrapper.children[0];\n        var oldObjects = void 0;\n        var newObjects = void 0;\n        var id = void 0;\n\n        if (oldShape.lanes || oldShape.phases) {\n          if (oldShape.lanes) {\n            for (var _i = 0, _a = Object.keys(shape.lanes); _i < _a.length; _i++) {\n              var count = _a[_i];\n              var indexValue = Number(count);\n              var lane = oldShape.lanes[indexValue];\n              var laneIndex = void 0;\n              var newLane = shape.lanes[indexValue];\n\n              if (newLane && newLane.header) {\n                id = actualShape.lanes[indexValue].header.id;\n                oldObjects = lane.header;\n                newObjects = newLane.header;\n                this.nodePropertyChange(this.nameTable[id], oldObjects, newObjects);\n              }\n\n              if (lane.children) {\n                for (var _b = 0, _c = Object.keys(lane.children); _b < _c.length; _b++) {\n                  var childNodeIndex = _c[_b];\n                  id = actualShape.lanes[indexValue].children[Number(childNodeIndex)].id;\n                  var node_1 = this.nameTable[id];\n                  oldObjects = lane.children[Number(childNodeIndex)];\n                  newObjects = newLane.children[Number(childNodeIndex)];\n                  this.nodePropertyChange(node_1, oldObjects, newObjects);\n                }\n              }\n\n              if (lane.width && !orientation_1) {\n                laneIndex = actualShape.phases && actualShape.phaseSize ? indexValue + 1 : indexValue;\n                grid.updateColumnWidth(laneIndex, newLane.width, true, padding);\n                this.updateDiagramElementQuad();\n              }\n\n              if (lane.height && orientation_1) {\n                laneIndex = actualShape.header && actualShape.hasHeader ? indexValue + 1 : indexValue;\n                laneIndex += actualShape.phases && actualShape.phaseSize ? 1 : 0;\n                grid.updateRowHeight(laneIndex, newLane.height, true, padding);\n                this.updateDiagramElementQuad();\n              }\n            }\n          }\n\n          if (shape.phases) {\n            for (var _d = 0, _e = Object.keys(shape.phases); _d < _e.length; _d++) {\n              var key = _e[_d];\n              var indexValue = Number(key);\n              var phase = shape.phases[indexValue];\n              var size = void 0;\n              var rowIndex = actualShape.header && actualShape.hasHeader ? 1 : 0;\n\n              if (phase && phase.header) {\n                id = actualShape.phases[indexValue].header.id;\n                oldObjects = oldShape.phases[indexValue].header;\n                newObjects = phase.header;\n                this.nodePropertyChange(this.nameTable[id], oldObjects, newObjects);\n              }\n\n              if (phase.offset) {\n                if (indexValue === 0) {\n                  size = phase.offset;\n                } else {\n                  var previousPhase = actualShape.phases[indexValue - 1];\n                  size = phase.offset - previousPhase.offset;\n\n                  if (size <= 0) {\n                    size = phase.offset;\n                  }\n                }\n\n                if (orientation_1) {\n                  grid.updateColumnWidth(indexValue, size, true, padding);\n                  updatePhaseMaxWidth(actualObject, this, grid.rows[rowIndex].cells[indexValue], indexValue);\n                } else {\n                  grid.updateRowHeight(rowIndex + indexValue, size, true, padding);\n                }\n              }\n            }\n          }\n        }\n\n        if (shape.phaseSize !== undefined && actualShape.phases.length) {\n          if (shape.phaseSize === 0 || oldShape.phaseSize === 0) {\n            if (oldShape.phaseSize) {\n              if (orientation_1) {\n                grid.removeRow(actualShape.header && actualShape.hasHeader ? 1 : 0);\n                actualObject.height = actualObject.wrapper.height = grid.height;\n              } else {\n                if (actualShape.header && actualShape.hasHeader) {\n                  grid.rows[0].cells[1].children = grid.rows[0].cells[0].children;\n                  grid.rows[0].cells[1].columnSpan = grid.rows[0].cells[0].columnSpan - 1;\n                  grid.rows[0].cells[0].children = [];\n                }\n\n                grid.removeColumn(0);\n              }\n            } else {\n              if (orientation_1) {\n                var rowDef = new RowDefinition();\n                rowDef.height = shape.phaseSize;\n                grid.addRow(actualShape.header && actualShape.hasHeader ? 1 : 0, rowDef, true);\n                actualObject.height = actualObject.wrapper.height += shape.phaseSize;\n              } else {\n                var colDef = new ColumnDefinition();\n                colDef.width = shape.phaseSize;\n                grid.addColumn(0, colDef, true);\n\n                if (actualShape.header && actualShape.hasHeader) {\n                  grid.rows[0].cells[0].children = grid.rows[0].cells[1].children;\n                  grid.rows[0].cells[1].children = [];\n                  grid.rows[0].cells[1].columnSpan = 1;\n                  grid.rows[0].cells[1].minWidth = undefined;\n                  grid.rows[0].cells[0].columnSpan = actualShape.lanes.length + 1;\n                }\n              }\n\n              for (var k = 0; k < actualShape.phases.length; k++) {\n                if (actualShape.phases[k].id === '') {\n                  actualShape.phases[k].id = randomId();\n                }\n\n                phaseDefine(grid, this, actualObject, actualShape.header && actualShape.hasHeader ? 1 : 0, orientation_1, k);\n              }\n            }\n          } else {\n            if (orientation_1) {\n              grid.updateRowHeight(actualShape.header && actualShape.hasHeader ? 1 : 0, shape.phaseSize, false);\n            } else {\n              grid.updateColumnWidth(0, shape.phaseSize, false);\n            }\n          }\n        }\n\n        if (actualShape.header && actualShape.hasHeader && oldShape.header) {\n          var id_1 = grid.rows[0].cells[0].children[0].id;\n          var headerNode = this.nameTable[id_1];\n          this.nodePropertyChange(headerNode, oldShape.header, shape.header);\n        }\n\n        actualObject.height = actualObject.wrapper.height = grid.height;\n        actualObject.width = actualObject.wrapper.width = grid.width;\n      } else if (oldObject.constraints) {\n        var oldSelectConstraints = oldObject.constraints & NodeConstraints.Select;\n        var newSelectConstraints = node.constraints & NodeConstraints.Select;\n\n        if (oldSelectConstraints !== newSelectConstraints) {\n          var shape = actualObject.shape; // Header - constraints\n\n          var headerNode = this.nameTable[actualObject.id + shape.header.id];\n          headerNode.constraints = !newSelectConstraints ? headerNode.constraints & ~NodeConstraints.Select : headerNode.constraints | NodeConstraints.Select; // Phase - Constraints\n\n          var phaseNode = void 0;\n\n          if (shape.phaseSize > 0) {\n            for (var i = 0; i < shape.phases.length; i++) {\n              phaseNode = this.nameTable[actualObject.id + shape.phases[i].id + '_header'];\n              phaseNode.constraints = !newSelectConstraints ? phaseNode.constraints & ~NodeConstraints.Select : phaseNode.constraints | NodeConstraints.Select;\n            }\n          } // Header - Constraints\n\n\n          var laneNode = void 0;\n          var laneHeader = void 0;\n          var value = shape.phases.length || 1;\n\n          for (var i = 0; i < shape.lanes.length; i++) {\n            for (var l = 0; l < value; l++) {\n              laneNode = this.nameTable[actualObject.id + shape.lanes[i].id + l];\n              laneNode.constraints = !newSelectConstraints ? laneNode.constraints & ~NodeConstraints.Select : laneNode.constraints | NodeConstraints.Select;\n\n              if (l === 0) {\n                laneHeader = this.nameTable[actualObject.id + shape.lanes[i].id + '_' + l + '_header'];\n                laneHeader.constraints = !newSelectConstraints ? laneHeader.constraints & ~NodeConstraints.Select : laneHeader.constraints | NodeConstraints.Select;\n              }\n            }\n          }\n        }\n      }\n\n      update = true;\n    }\n\n    return update;\n  };\n  /** @private */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Diagram.prototype.insertValue = function (oldNodeObject, isNode) {\n    if (!(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n      var value = void 0;\n      var oldObjects = isNode ? this.oldNodeObjects : this.oldConnectorObjects;\n\n      for (var i = 0; i < oldObjects.length; i++) {\n        if (oldObjects[i].id === oldNodeObject.id) {\n          value = true;\n        }\n      }\n\n      if (!value) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        isNode ? this.oldNodeObjects.push(oldNodeObject) : this.oldConnectorObjects.push(oldNodeObject);\n      }\n    }\n  };\n  /* tslint:disable */\n\n  /** @private */\n  // eslint-disable-next-line max-len\n\n\n  Diagram.prototype.nodePropertyChange = function (actualObject, oldObject, node, isLayout, rotate, propertyChange) {\n    if (this.canEnableBlazorObject && actualObject.id !== 'helper') {\n      var node_2 = cloneObject(actualObject);\n      this.insertValue(node_2, true);\n    }\n\n    var existingBounds = actualObject.wrapper.outerBounds;\n    var existingInnerBounds = actualObject.wrapper.bounds;\n    var updateConnector = false;\n    var i;\n    var j;\n    var offsetX;\n    var offsetY;\n    var update;\n    var tx;\n    var ty;\n\n    if (node.width !== undefined) {\n      if (!actualObject.children) {\n        actualObject.wrapper.children[0].width = node.width;\n        update = true;\n        updateConnector = true;\n      } else if (!actualObject.container) {\n        this.scaleObject(actualObject, node.width, true);\n      } else {\n        actualObject.wrapper.width = node.width;\n      }\n    }\n\n    if (node.height !== undefined) {\n      if (!actualObject.children) {\n        actualObject.wrapper.children[0].height = node.height;\n        update = true;\n        updateConnector = true;\n      } else if (!actualObject.container) {\n        this.scaleObject(actualObject, node.height, false);\n      } else {\n        actualObject.wrapper.height = node.height;\n      }\n    }\n\n    update = this.nodePropertyChangeExtend(actualObject, oldObject, node, update);\n\n    if (node.constraints !== undefined && canShadow(oldObject) !== canShadow(node)) {\n      actualObject.wrapper.children[0].shadow = canShadow(actualObject) ? actualObject.shadow : null;\n    }\n\n    if (node.offsetX !== undefined) {\n      if (actualObject.wrapper.flip !== 'None') {\n        if (actualObject.offsetX !== actualObject.wrapper.offsetX && oldObject.offsetX !== undefined) {\n          var offsetX_1 = node.offsetX - oldObject.offsetX;\n          actualObject.wrapper.offsetX = actualObject.wrapper.offsetX + offsetX_1;\n          this.updateFlipOffset(actualObject.wrapper, offsetX_1, 0, actualObject.wrapper.flip);\n        }\n      } else {\n        actualObject.wrapper.offsetX = node.offsetX;\n      }\n\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.offsetY !== undefined) {\n      if (actualObject.wrapper.flip !== 'None') {\n        if (actualObject.offsetY !== actualObject.wrapper.offsetY && oldObject.offsetY !== undefined) {\n          var offsetY_1 = node.offsetY - oldObject.offsetY;\n          actualObject.wrapper.offsetY = actualObject.wrapper.offsetY + offsetY_1;\n          this.updateFlipOffset(actualObject.wrapper, 0, offsetY_1, actualObject.wrapper.flip);\n        }\n      } else {\n        actualObject.wrapper.offsetY = node.offsetY;\n      }\n\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.pivot !== undefined) {\n      actualObject.wrapper.pivot = node.pivot;\n      update = true;\n    }\n\n    if (node.minWidth !== undefined) {\n      actualObject.wrapper.minWidth = actualObject.wrapper.children[0].minWidth = node.minWidth;\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.minHeight !== undefined) {\n      actualObject.wrapper.minHeight = actualObject.wrapper.children[0].minHeight = node.minHeight;\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.maxWidth !== undefined) {\n      actualObject.wrapper.maxWidth = node.maxWidth;\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.maxHeight !== undefined) {\n      actualObject.wrapper.maxHeight = node.maxHeight;\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.flip !== undefined) {\n      actualObject.wrapper.flip = node.flip;\n      update = true;\n      updateConnector = true;\n\n      if (actualObject.wrapper.elementActions & ElementAction.ElementIsGroup) {\n        alignElement(actualObject.wrapper, actualObject.offsetX, actualObject.offsetY, this, node.flip);\n\n        if (actualObject && actualObject.children) {\n          for (var _i = 0, _a = actualObject.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var updateNode = this.nameTable[child];\n            updateNode.wrapper.flip = node.flip;\n            this.updatePorts(updateNode, node.flip);\n          }\n        }\n      } else {\n        if (actualObject.flipMode && (actualObject.flipMode === 'Port' || actualObject.flipMode === 'All')) this.updatePorts(actualObject, node.flip);\n      }\n    }\n\n    if (node.rotateAngle !== undefined && actualObject.constraints & NodeConstraints.Rotate) {\n      if (actualObject.children && rotate) {\n        // eslint-disable-next-line max-len\n        this.commandHandler.rotateObjects(actualObject, [actualObject], actualObject.rotateAngle - actualObject.wrapper.rotateAngle, {\n          x: actualObject.offsetX,\n          y: actualObject.offsetY\n        }, false);\n      }\n\n      actualObject.wrapper.rotateAngle = node.rotateAngle;\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.backgroundColor !== undefined) {\n      actualObject.wrapper.style.fill = node.backgroundColor;\n    }\n\n    if (node.visible !== undefined) {\n      this.updateElementVisibility(actualObject.wrapper, actualObject, actualObject.visible);\n    }\n\n    if (node.shape !== undefined && actualObject.shape.type !== 'Bpmn') {\n      update = true;\n      updateShape(node, actualObject, oldObject, this);\n      updateConnector = true;\n    }\n\n    if (node.margin) {\n      update = true;\n      this.updateMargin(actualObject, node);\n      updateConnector = true;\n    }\n\n    if ((node.shape !== undefined && node.shape.type === undefined || node.width !== undefined || node.height !== undefined || node.style !== undefined) && actualObject.shape.type === 'Bpmn' && this.bpmnModule || isBlazor() && node && node.shape && node.shape.type === 'Bpmn') {\n      update = true;\n      updateConnector = true;\n      this.bpmnModule.updateBPMN(node, oldObject, actualObject, this);\n    }\n\n    if (actualObject.shape.type === 'UmlActivity' && (!isBlazor() && actualObject.shape.shape === 'FinalNode' || isBlazor() && actualObject.shape.umlActivityShape === 'FinalNode')) {\n      update = true;\n      updateConnector = true;\n      this.updateUMLActivity(node, oldObject, actualObject, this);\n    }\n\n    if (actualObject.shape && actualObject.shape.type === 'UmlClassifier' || actualObject.parentId && this.nameTable[actualObject.parentId] && this.nameTable[actualObject.parentId].shape.type === 'UmlClassifier') {\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.ports !== undefined) {\n      for (var _b = 0, _c = Object.keys(node.ports); _b < _c.length; _b++) {\n        var key = _c[_b];\n        var index = Number(key);\n        update = true;\n        var changedObject = node.ports[key];\n        var actualPort = actualObject.ports[index];\n        this.updatePort(changedObject, actualPort, actualObject.wrapper);\n        updateConnector = true;\n      }\n    }\n\n    if (node.annotation !== undefined || node.annotations !== undefined || node.width !== undefined) {\n      for (var _d = 0, _e = Object.keys(node.annotations || actualObject.annotations); _d < _e.length; _d++) {\n        var key = _e[_d];\n        var index = Number(key);\n        update = true;\n        var changedObject = void 0;\n\n        if (node.annotation) {\n          changedObject = node.annotation;\n        } else {\n          changedObject = node.annotations ? node.annotations[key] : actualObject.annotations;\n        }\n\n        var actualAnnotation = actualObject.annotations[index];\n\n        if (actualAnnotation) {\n          var updateSize = actualObject.width ? true : false;\n          this.updateAnnotation(changedObject, actualAnnotation, actualObject.wrapper, actualObject, updateSize);\n          var swimLaneNode = this.nameTable[actualObject.parentId];\n\n          if (swimLaneNode && swimLaneNode.shape.type === 'SwimLane') {\n            var laneHeader = 'LaneHeaderParent';\n            var phaseHeader = 'PhaseHeaderParent';\n\n            if (actualObject.isLane || actualObject.isPhase) {\n              var collection = actualObject.isLane ? swimLaneNode.shape.lanes : swimLaneNode.shape.phases;\n\n              for (var j_2 = 0; j_2 < collection.length; j_2++) {\n                if (collection[j_2].id === (actualObject[laneHeader] || actualObject[phaseHeader])) {\n                  collection[j_2].header.annotation.content = actualObject.annotations[0].content;\n                  collection[j_2].header.annotation.style = actualObject.annotations[0].style;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (node.expandIcon !== undefined || node.collapseIcon !== undefined || node.isExpanded !== undefined) {\n      this.updateIcon(actualObject);\n      this.updateDefaultLayoutIcons(actualObject);\n\n      if (node.isExpanded !== undefined) {\n        this.commandHandler.expandNode(actualObject, this);\n      }\n\n      update = true;\n    }\n\n    if (node.fixedUserHandles !== undefined) {\n      var index = void 0;\n      var changedObject = void 0;\n      var actualfixedUserHandle = void 0;\n\n      for (var _f = 0, _g = Object.keys(node.fixedUserHandles); _f < _g.length; _f++) {\n        var key = _g[_f];\n        index = Number(key);\n        update = true;\n\n        if (node.fixedUserHandles[index]) {\n          changedObject = node.fixedUserHandles[index];\n        }\n\n        actualfixedUserHandle = actualObject.fixedUserHandles[index];\n\n        if (actualfixedUserHandle) {\n          this.updateNodefixedUserHandle(changedObject, actualfixedUserHandle, actualObject.wrapper, actualObject);\n        }\n      }\n    }\n\n    if (node.tooltip !== undefined) {\n      this.updateTooltip(actualObject, node);\n    }\n\n    if (update) {\n      if (this.bpmnModule !== undefined) {\n        // eslint-disable-next-line max-len\n        this.bpmnModule.updateTextAnnotationProp(actualObject, {\n          offsetX: oldObject.offsetX || actualObject.offsetX,\n          offsetY: oldObject.offsetY || actualObject.offsetY\n        }, this);\n      }\n\n      if (this.checkSelectedItem(actualObject) && actualObject.wrapper.children[0] instanceof TextElement) {\n        actualObject.wrapper.children[0].refreshTextElement();\n      }\n\n      actualObject.wrapper.measure(new Size(actualObject.wrapper.bounds.width, actualObject.wrapper.bounds.height), actualObject.id, this.onLoadImageSize.bind(this));\n      actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n      this.updateObject(actualObject, oldObject, node);\n\n      if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol && !(this.diagramActions & DiagramAction.ToolAction)) {\n        updateHeaderMaxWidth(this, actualObject);\n        var grid = actualObject.wrapper.children[0];\n        var shape = actualObject.shape;\n        var column = grid.columnDefinitions().length;\n\n        if (shape.orientation === 'Horizontal') {\n          var index = shape.header && shape.hasHeader ? 1 : 0;\n          updatePhaseMaxWidth(actualObject, this, grid.rows[index].cells[column - 1], column - 1);\n        }\n\n        actualObject.wrapper.measure(new Size(actualObject.wrapper.bounds.width, actualObject.wrapper.bounds.height));\n        actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n      }\n\n      if (!(this.diagramActions & DiagramAction.ToolAction) || this.diagramActions & DiagramAction.UndoRedo) {\n        if (this.checkSelectedItem(actualObject)) {\n          this.updateSelector();\n        }\n      }\n\n      if (existingBounds.equals(existingBounds, actualObject.wrapper.outerBounds) === false) {\n        this.updateQuad(actualObject);\n      }\n\n      if (!isLayout) {\n        // eslint-disable-next-line max-len\n        this.commandHandler.connectorSegmentChange(actualObject, existingInnerBounds, node.rotateAngle !== undefined ? true : false); // if (updateConnector) {\n        //     this.updateConnectorEdges(actualObject);\n        // }\n      } else {\n        if (actualObject && actualObject.visible && actualObject.outEdges) {\n          this.updateIconVisibility(actualObject, actualObject.outEdges.length === 0 ? false : true);\n        }\n      }\n\n      if (this.bpmnModule !== undefined) {\n        this.bpmnModule.updateDocks(actualObject, this);\n      }\n\n      if (!node.annotations || !actualObject.processId) {\n        this.updateGroupOffset(actualObject);\n      } // if (existingBounds.equals(existingBounds, actualObject.wrapper.outerBounds) === false) { this.updateQuad(actualObject); }\n      // EJ2-42005 - The parent of the actualObject is not measured and arranged when a node or connector is selected.\n      // The condition restricts the measure and arrange of the actualObject whenever a node or connector is selected.\n      // Commented @Dheepshiva\n      // let objects: (NodeModel | ConnectorModel)[] = [];\n      // objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n      // if (objects.length === 0) {\n\n\n      if (actualObject.parentId && this.nameTable[actualObject.parentId]) {\n        var parent_4 = this.nameTable[actualObject.parentId];\n        parent_4.wrapper.measure(new Size(parent_4.wrapper.width, actualObject.wrapper.height));\n        parent_4.wrapper.arrange(parent_4.wrapper.desiredSize);\n        parent_4.offsetX = parent_4.wrapper.offsetX;\n        parent_4.offsetY = parent_4.wrapper.offsetY;\n      } // }\n\n\n      if (existingInnerBounds.equals(existingInnerBounds, actualObject.wrapper.bounds) === false) {\n        this.updateGroupSize(actualObject);\n\n        if (actualObject.children) {\n          this.updateGroupOffset(actualObject);\n        }\n      }\n\n      if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol && this.diagramActions & DiagramAction.Render) {\n        var connectors = getConnectors(this, actualObject.wrapper.children[0], undefined, true);\n        updateConnectorsProperties(connectors, this);\n      }\n\n      if (!this.preventNodesUpdate) {\n        if (!canVitualize(this) || canVitualize(this) && this.scroller.oldCollectionObjects.indexOf(actualObject.id) > -1) {\n          if (this.diagramActions & DiagramAction.PreventZIndexOnDragging) {\n            this.updateDiagramObject(actualObject, true);\n          } else {\n            this.updateDiagramObject(actualObject);\n          }\n        }\n\n        if (!isLayout && updateConnector) {\n          if (this.lineRoutingModule && this.diagramActions && this.constraints & DiagramConstraints.LineRouting && actualObject.id !== 'helper') {\n            if (!(this.diagramActions & DiagramAction.ToolAction)) {\n              this.lineRoutingModule.renderVirtualRegion(this, true);\n            }\n          }\n\n          this.updateConnectorEdges(actualObject);\n\n          if (actualObject.id !== 'helper' && !(this.diagramActions & DiagramAction.ToolAction)) {\n            var objects = this.spatialSearch.findObjects(actualObject.wrapper.outerBounds);\n\n            for (var i_5 = 0; i_5 < objects.length; i_5++) {\n              var object = objects[i_5];\n\n              if (object instanceof Connector) {\n                this.connectorPropertyChange(objects[i_5], {}, {\n                  sourceID: object.sourceID,\n                  targetID: object.targetID,\n                  sourcePortID: object.sourcePortID,\n                  targetPortID: object.targetPortID,\n                  sourcePoint: object.sourcePoint,\n                  targetPoint: object.targetPoint\n                });\n              }\n            }\n          }\n        }\n      }\n\n      if (actualObject.status !== 'New' && this.diagramActions) {\n        actualObject.status = 'Update';\n      }\n    }\n\n    if (!propertyChange) {\n      var element = actualObject;\n      var args = {\n        element: element,\n        cause: this.diagramActions,\n        oldValue: oldObject,\n        newValue: node\n      };\n\n      if (isBlazor() && this.propertyChange) {\n        args.element = {\n          node: cloneBlazorObject(element)\n        };\n        args.oldValue = {\n          node: cloneBlazorObject(oldObject)\n        };\n        args.newValue = {\n          node: cloneBlazorObject(node)\n        };\n      }\n\n      this.triggerEvent(DiagramEvent.propertyChange, args);\n    }\n  };\n\n  Diagram.prototype.updatePorts = function (actualObject, flip) {\n    if (actualObject && actualObject.ports.length > 0) {\n      for (var _i = 0, _a = Object.keys(actualObject.ports); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var index = Number(key);\n        var actualPort = actualObject.ports[index];\n        var portWrapper = this.getWrapper(actualObject.wrapper, actualPort.id);\n        portWrapper = updatePortEdges(portWrapper, flip, actualPort);\n        portWrapper.relativeMode = 'Point';\n        portWrapper.measure(new Size(portWrapper.width, portWrapper.height));\n        portWrapper.arrange(portWrapper.desiredSize);\n      }\n    }\n  };\n\n  Diagram.prototype.updateFlipOffset = function (element, diffX, diffY, flip) {\n    if (element.hasChildren()) {\n      for (var _i = 0, _a = element.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        if (flip === 'Horizontal' || flip === 'Both') {\n          child.flipOffset.x = child.flipOffset.x + diffX;\n        }\n\n        if (flip === 'Vertical' || flip === 'Both') {\n          child.flipOffset.y = child.flipOffset.y + diffY;\n        }\n\n        if (child instanceof Canvas || child instanceof Container) {\n          this.updateFlipOffset(child, diffX, diffY, flip);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.updateUMLActivity = function (changedProp, oldObject, actualObject, diagram) {\n    var sizeChanged = changedProp.width !== undefined || changedProp.height !== undefined;\n\n    if (sizeChanged) {\n      var innerFinalNode = actualObject.wrapper.children[0].children[0];\n      innerFinalNode.width = changedProp.width;\n      innerFinalNode.height = changedProp.height;\n      var outerFinalNode = actualObject.wrapper.children[0].children[1];\n      outerFinalNode.width = changedProp.width / 1.5;\n      outerFinalNode.height = changedProp.height / 1.5;\n    }\n  };\n\n  Diagram.prototype.updateConnectorProperties = function (connector) {\n    if (this.preventConnectorsUpdate) {\n      var index = this.selectionConnectorsList.indexOf(connector);\n\n      if (index === -1) {\n        this.selectionConnectorsList.push(connector);\n      }\n    } else {\n      var conn = {\n        sourcePoint: connector.sourcePoint,\n        targetPoint: connector.targetPoint,\n        sourceID: connector.sourceID,\n        targetID: connector.targetID,\n        sourcePortID: connector.sourcePortID,\n        targetPortID: connector.targetPortID\n      };\n      this.connectorPropertyChange(connector, {}, conn, undefined, true);\n    }\n  };\n  /**\n   * updateConnectorEdges method \\\n   *\n   * @returns { void }     Updates the connectorPropertyChange of the diagram container .\\\n   * @param {Node} actualObject - provide the actualObject value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateConnectorEdges = function (actualObject) {\n    if (actualObject.inEdges.length > 0) {\n      for (var j = 0; j < actualObject.inEdges.length; j++) {\n        this.updateConnectorProperties(this.nameTable[actualObject.inEdges[j]]);\n      }\n    }\n\n    if (actualObject.outEdges.length > 0) {\n      for (var k = 0; k < actualObject.outEdges.length; k++) {\n        this.updateConnectorProperties(this.nameTable[actualObject.outEdges[k]]);\n      }\n    }\n\n    if (actualObject.parentId && this.nameTable[actualObject.parentId]) {\n      this.updateConnectorEdges(this.nameTable[actualObject.parentId]);\n    }\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.connectorProprtyChangeExtend = function (actualObject, oldProp, newProp, updateSelector) {\n    if (newProp.type !== undefined && newProp.type !== oldProp.type) {\n      if (actualObject.segments.length > 0 && newProp.segments === undefined) {\n        actualObject.segments = [];\n      }\n    }\n\n    if (newProp.shape !== undefined && actualObject.shape !== undefined && actualObject.shape && actualObject.shape.type === 'Bpmn' && this.bpmnModule) {\n      this.bpmnModule.updateBPMNConnector(actualObject, oldProp, newProp, this);\n    }\n\n    if (actualObject.constraints !== undefined) {\n      this.updateThumbConstraints(this.selectedItems.connectors, this.selectedItems);\n      return updateSelector = true;\n    }\n\n    return updateSelector;\n  };\n  /* tslint:disable */\n\n  /**\n   * Updates the connectorPropertyChange of the diagram container \\\n   *\n   * @returns { void }     Updates the connectorPropertyChange of the diagram container .\\\n   * @param {DiagramElement} actualObject - provide the actualObject value.\n   * @param {boolean} oldProp - provide the oldProp value.\n   * @param {boolean} newProp - provide the newProp value.\n   * @param {boolean} disableBridging - provide the disableBridging value.\n   * @param {boolean} propertyChange - provide the propertyChange value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.connectorPropertyChange = function (actualObject, oldProp, newProp, disableBridging, propertyChange) {\n    if (this.canEnableBlazorObject) {\n      var node = cloneObject(actualObject);\n      this.insertValue(node, false);\n    }\n\n    var existingBounds = actualObject.wrapper.bounds;\n    var updateSelector = false;\n    var points = [];\n    updateSelector = this.connectorProprtyChangeExtend(actualObject, oldProp, newProp, updateSelector);\n    var inPort;\n    var outPort;\n    var source;\n    var target;\n\n    if (newProp.visible !== undefined) {\n      this.updateElementVisibility(actualObject.wrapper, actualObject, actualObject.visible);\n    }\n\n    if (newProp.sourcePoint !== undefined || newProp.targetPoint !== undefined || newProp.sourceID !== undefined || newProp.targetID !== undefined || newProp.targetPadding !== undefined || newProp.sourcePortID !== undefined || newProp.targetPortID !== undefined || newProp.sourcePadding !== undefined || newProp.type !== undefined || newProp.segments !== undefined || newProp.flip !== undefined) {\n      if (newProp.sourceID !== undefined && newProp.sourceID !== oldProp.sourceID || newProp.sourcePortID) {\n        var sourceNode = this.nameTable[actualObject.sourceID];\n        outPort = this.findInOutConnectPorts(sourceNode, false);\n\n        if (!sourceNode || canOutConnect(sourceNode) || actualObject.sourcePortID !== '' && canPortOutConnect(outPort)) {\n          actualObject.sourceWrapper = sourceNode ? this.getEndNodeWrapper(sourceNode, actualObject, true) : undefined;\n\n          if (actualObject.sourcePortID && newProp.sourcePortID === undefined) {\n            actualObject.sourcePortWrapper = sourceNode ? this.getWrapper(sourceNode.wrapper, actualObject.sourcePortID) : undefined;\n          }\n\n          this.removePortEdges(this.nameTable[oldProp.sourceID] || sourceNode, oldProp.sourcePortID || actualObject.sourcePortID, actualObject.id, false);\n        }\n\n        if (newProp.sourceID !== undefined && oldProp.sourceID !== undefined && oldProp.sourceID !== '') {\n          var oldSource = this.nameTable[oldProp.sourceID];\n\n          if (oldSource !== undefined && oldSource.outEdges && oldSource.outEdges.indexOf(actualObject.id) !== -1) {\n            removeItem(oldSource.outEdges, actualObject.id);\n          }\n        }\n\n        this.updateEdges(actualObject);\n      }\n\n      if (newProp.targetID !== undefined && newProp.targetID !== oldProp.targetID) {\n        var targetNode = this.nameTable[newProp.targetID];\n        inPort = this.findInOutConnectPorts(targetNode, true);\n\n        if (!targetNode || canInConnect(targetNode) || actualObject.targetPortID !== '' && canPortInConnect(inPort)) {\n          actualObject.targetWrapper = targetNode ? this.getEndNodeWrapper(targetNode, actualObject, false) : undefined;\n\n          if (actualObject.targetPortID && newProp.targetPortID === undefined) {\n            actualObject.targetPortWrapper = targetNode ? this.getWrapper(targetNode.wrapper, actualObject.targetPortID) : undefined;\n          }\n\n          this.removePortEdges(this.nameTable[oldProp.targetID] || targetNode, oldProp.targetPortID || actualObject.targetPortID, actualObject.id, true);\n        }\n\n        if (oldProp !== undefined && oldProp.targetID !== undefined && oldProp.targetID !== '') {\n          var oldTarget = this.nameTable[oldProp.targetID];\n\n          if (oldTarget !== undefined && oldTarget.inEdges && oldTarget.inEdges.indexOf(actualObject.id) !== -1) {\n            removeItem(oldTarget.inEdges, actualObject.id);\n          }\n        }\n\n        this.updateEdges(actualObject);\n      }\n\n      if (newProp.sourcePortID !== undefined && newProp.sourcePortID !== oldProp.sourcePortID) {\n        if (actualObject.sourceID && this.nameTable[actualObject.sourceID]) {\n          source = this.nameTable[actualObject.sourceID].wrapper;\n        }\n\n        var sourceNode = this.nameTable[actualObject.sourceID];\n\n        if (!sourceNode || canOutConnect(sourceNode) || actualObject.sourcePortID !== '' && canPortOutConnect(outPort)) {\n          actualObject.sourcePortWrapper = source ? this.getWrapper(source, newProp.sourcePortID) : undefined;\n        } else if (actualObject.sourcePortID === '' && !canOutConnect(sourceNode)) {\n          actualObject.sourcePortWrapper = undefined;\n        }\n      }\n\n      if (newProp.targetPortID !== undefined && newProp.targetPortID !== oldProp.targetPortID) {\n        var targetNode = this.nameTable[actualObject.targetID];\n\n        if (actualObject.targetID && this.nameTable[actualObject.targetID]) {\n          target = this.nameTable[actualObject.targetID].wrapper;\n        }\n\n        if (!targetNode || canInConnect(targetNode) || actualObject.targetPortID !== '' && canPortInConnect(inPort)) {\n          actualObject.targetPortWrapper = target ? this.getWrapper(target, newProp.targetPortID) : undefined;\n        } else if (actualObject.targetPortID === '' && !canInConnect(targetNode)) {\n          actualObject.targetPortWrapper = undefined;\n        }\n      }\n\n      if (newProp.flip !== undefined) {\n        actualObject.flip = newProp.flip;\n        flipConnector(actualObject);\n      }\n\n      if (actualObject.type === 'Orthogonal' && this.lineRoutingModule && this.diagramActions && this.constraints & DiagramConstraints.LineRouting && !(this.diagramActions & DiagramAction.ToolAction)) {\n        this.lineRoutingModule.renderVirtualRegion(this, true);\n        this.lineRoutingModule.refreshConnectorSegments(this, actualObject, false);\n      }\n\n      points = this.getPoints(actualObject);\n    } //Add prop change for zindex, alignments and margin\n\n\n    if (newProp.style !== undefined) {\n      updateStyle(newProp.style, actualObject.wrapper.children[0]);\n    }\n\n    if (points.length > 0 || newProp.sourceDecorator !== undefined || newProp.targetDecorator !== undefined && canMeasureDecoratorPath(Object.keys(newProp.targetDecorator)) || newProp.cornerRadius !== undefined) {\n      updateConnector(actualObject, points.length > 0 ? points : actualObject.intermediatePoints, this.diagramActions);\n\n      if (newProp.type !== undefined) {\n        updateSelector = true;\n      }\n\n      if (points.length > 0) {\n        actualObject.wrapper.measure(new Size(actualObject.wrapper.width, actualObject.wrapper.height));\n        actualObject.wrapper.arrange(actualObject.wrapper.desiredSize); // eslint-disable-next-line max-len\n\n        this.updateConnectorAnnotation(actualObject);\n        this.updateConnectorfixedUserHandles(actualObject);\n        this.updateObject(actualObject, oldProp, newProp);\n      } //work-around to update intersected connector bridging\n\n    }\n\n    if ((newProp.sourcePoint || newProp.targetPoint || newProp.segments) && this.diagramActions === DiagramAction.Render) {\n      updateSelector = true;\n    }\n\n    if (actualObject.shape.type === 'Bpmn' && actualObject.shape.sequence === 'Default') {\n      this.commandHandler.updatePathElementOffset(actualObject);\n    } // eslint-disable-next-line max-len\n\n\n    if (!disableBridging) {\n      this.updateBridging();\n    }\n\n    this.updateAnnotations(newProp, actualObject);\n    this.updatefixedUserHandle(newProp, actualObject);\n    actualObject.wrapper.measure(new Size(actualObject.wrapper.width, actualObject.wrapper.height));\n    actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n\n    if (existingBounds.equals(existingBounds, actualObject.wrapper.bounds) === false) {\n      this.updateQuad(actualObject);\n      this.updateGroupSize(actualObject);\n    }\n\n    if (updateSelector === true && this.checkSelectedItem(actualObject) && (!(this.diagramActions & DiagramAction.ToolAction) || this.diagramActions & DiagramAction.UndoRedo)) {\n      this.updateSelector();\n    }\n\n    if (!this.preventConnectorsUpdate) {\n      if (!canVitualize(this) || canVitualize(this) && this.scroller.oldCollectionObjects.indexOf(actualObject.id) > -1) {\n        if (this.diagramActions & DiagramAction.PreventZIndexOnDragging) {\n          this.updateDiagramObject(actualObject, true);\n        } else {\n          this.updateDiagramObject(actualObject);\n        }\n      }\n    }\n\n    if (this.diagramActions && actualObject.status !== 'New') {\n      actualObject.status = 'Update';\n    }\n\n    this.triggerPropertyChange(propertyChange, actualObject, oldProp, newProp);\n  };\n  /* tslint:enable */\n\n  /**\n   * getDirection methods \\\n   *\n   * @returns { void }  getDirection methods .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {string} portId - provide the portId value.\n   * @param {string} item - provide the item value.\n   * @param {number} isInEdges - provide the isInEdges value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removePortEdges = function (node, portId, item, isInEdges) {\n    if (node) {\n      for (var i = 0; i < node.ports.length; i++) {\n        var port = node.ports[i];\n\n        if (port.id === portId) {\n          var portEdge = isInEdges ? port.inEdges : port.outEdges;\n          removeItem(portEdge, item);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.getpropertyChangeArgs = function (element, oldProp, newProp, args) {\n    args.element = {\n      connector: cloneBlazorObject(element)\n    };\n    args.oldValue = {\n      connector: cloneBlazorObject(oldProp)\n    };\n    args.newValue = {\n      connector: cloneBlazorObject(newProp)\n    };\n    return args;\n  };\n\n  Diagram.prototype.triggerPropertyChange = function (propertyChange, actualObject, oldProp, newProp) {\n    if (!propertyChange) {\n      var element = actualObject;\n      var args = {\n        element: cloneBlazorObject(element),\n        cause: this.diagramActions,\n        oldValue: cloneBlazorObject(oldProp),\n        newValue: cloneBlazorObject(newProp)\n      };\n\n      if (isBlazor()) {\n        args = this.getpropertyChangeArgs(element, oldProp, newProp, args);\n      }\n\n      this.triggerEvent(DiagramEvent.propertyChange, args);\n    }\n  };\n\n  Diagram.prototype.findInOutConnectPorts = function (node, isInconnect) {\n    var port = {};\n\n    if (node) {\n      port = getInOutConnectPorts(node, isInconnect);\n    }\n\n    return port;\n  };\n\n  Diagram.prototype.getPoints = function (actualObject, points) {\n    //let pts: PointModel[];\n    var lineDistributionModule = this.lineDistributionModule ? true : false;\n    var pts = actualObject.getConnectorPoints(actualObject.type, points, this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree' ? this.layout.orientation : undefined, lineDistributionModule);\n    return pts;\n  };\n  /**\n   * update the  opacity  and visibility for the node  once the layout animation starts \\\n   *\n   * @returns { void }  update the  opacity  and visibility for the node  once the layout animation starts .\\\n   * @param {Container} element - provide the element value.\n   * @param {boolean} visible - provide the visible value.\n   * @param {number} opacity - provide the opacity value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateNodeProperty = function (element, visible, opacity) {\n    if (visible === undefined) {\n      this.updateElementVisibility(element, this.nameTable[element.id], visible);\n    } else {\n      element.style.opacity = opacity;\n\n      for (var i = 0; i < element.children.length; i++) {\n        if (element.children[i] instanceof Container) {\n          this.updateNodeProperty(element.children[i], undefined, opacity);\n        }\n\n        element.children[i].style.opacity = opacity;\n      }\n    }\n  };\n  /**\n   * checkSelected Item for Connector \\\n   *\n   * @returns { void }  checkSelected Item for Connector .\\\n   * @param {Connector | Node} actualObject - provide the element value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.checkSelectedItem = function (actualObject) {\n    var selectorModel = this.selectedItems;\n    var isSelected = false;\n    var selItems = [];\n    selItems = selItems.concat(selectorModel.nodes, selectorModel.connectors);\n\n    if (selItems.length > 0) {\n      if (actualObject.id === selItems[selItems.length - 1].id) {\n        isSelected = true;\n      }\n    }\n\n    return isSelected;\n  };\n  /**\n   * Updates the visibility of the diagram container \\\n   *\n   * @returns { void }     Updates the visibility of the diagram container .\\\n   * @param {DiagramElement} element - provide the element value.\n   * @param {boolean} visible - provide the target value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateDiagramContainerVisibility = function (element, visible) {\n    if (element instanceof Container) {\n      for (var i = 0; i < element.children.length; i++) {\n        this.updateDiagramContainerVisibility(element.children[i], visible);\n      }\n    }\n\n    element.visible = visible;\n  };\n  /**\n   * Updates the visibility of the node/connector \\\n   *\n   * @returns { void }  Updates the visibility of the node/connector .\\\n   * @param {Container} element - provide the element value.\n   * @param {Connector | Node} obj - provide the obj value.\n   * @param {boolean} visible - provide the visible value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateElementVisibility = function (element, obj, visible) {\n    if (visible !== undefined) {\n      element.visible = visible;\n\n      if (obj instanceof Node) {\n        //content\n        if (!obj.children) {\n          element.children[0].visible = visible;\n          this.updateDiagramContainerVisibility(element.children[0], visible);\n\n          if (obj.shape.type === 'Bpmn' && this.bpmnModule) {\n            this.bpmnModule.updateElementVisibility(obj, visible, this);\n          }\n        } else {\n          for (var _i = 0, _a = obj.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            this.updateElementVisibility(this.nameTable[child].wrapper, this.nameTable[child], visible);\n          }\n        } //ports\n\n\n        if (obj.ports) {\n          for (var _b = 0, _c = obj.ports; _b < _c.length; _b++) {\n            var port = _c[_b];\n\n            if (port.visibility & PortVisibility.Visible) {\n              var wrapper = this.getWrapper(element, port.id);\n              wrapper.visible = visible;\n            }\n          }\n        }\n\n        if (obj.annotations) {\n          for (var _d = 0, _e = obj.annotations; _d < _e.length; _d++) {\n            var annotation = _e[_d];\n            var wrapper = this.getWrapper(element, annotation.id);\n            wrapper.visible = visible;\n          }\n        }\n      } else {\n        //path and decorators\n        for (var i = 0; i < 3; i++) {\n          element.children[i].visible = visible;\n        }\n      }\n\n      if (obj.annotations) {\n        //annotations\n        for (var _f = 0, _g = obj.annotations; _f < _g.length; _f++) {\n          var annotation = _g[_f];\n          var wrapper = this.getWrapper(element, annotation.id);\n          wrapper.visible = visible;\n        }\n      }\n\n      if (obj.expandIcon || obj.collapseIcon) {\n        var wrapper = this.getWrapper(element, 'icon_content');\n\n        if (wrapper) {\n          for (var i = 0; i < wrapper.children.length; i++) {\n            wrapper.children[i].visible = visible;\n          }\n\n          wrapper.visible = visible;\n        }\n\n        if (obj && obj.visible && obj.outEdges) {\n          this.updateIconVisibility(obj, obj.outEdges.length === 0 ? false : true);\n        }\n      }\n\n      if (visible === false) {\n        this.unSelect(this.nameTable[element.id]);\n      }\n\n      if (obj instanceof Node && !this.preventNodesUpdate || obj instanceof Connector && !this.preventConnectorsUpdate) {\n        //Avoid calling updateDiagramObject method during rendering\n        if (this.diagramActions) {\n          this.updateDiagramObject(this.nameTable[element.id], undefined, true);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.updateAnnotations = function (newProp, actualObject) {\n    if (newProp.annotations !== undefined) {\n      for (var _i = 0, _a = Object.keys(newProp.annotations); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var index = Number(key);\n        var changedObject = newProp.annotations[key];\n        var actualAnnotation = actualObject.annotations[index];\n        this.updateAnnotation(changedObject, actualAnnotation, actualObject.wrapper, actualObject);\n      }\n    }\n  };\n\n  Diagram.prototype.updatefixedUserHandle = function (newProp, actualObject) {\n    if (newProp.fixedUserHandles !== undefined) {\n      var index = void 0;\n      var changedObject = void 0;\n      var actualAnnotation = void 0;\n\n      for (var _i = 0, _a = Object.keys(newProp.fixedUserHandles); _i < _a.length; _i++) {\n        var key = _a[_i];\n        index = Number(key);\n        changedObject = newProp.fixedUserHandles[key];\n        actualAnnotation = actualObject.fixedUserHandles[index];\n        this.updateConnectorfixedUserHandle(changedObject, actualAnnotation, actualObject.wrapper, actualObject);\n      }\n    }\n  };\n  /**\n   * updateConnectorfixedUserHandle method \\\n   *\n   * @returns { void }  updateConnectorfixedUserHandle method .\\\n   * @param {ConnectorFixedUserHandleModel} changedObject - provide the changedObject value.\n   * @param {ConnectorFixedUserHandleModel} actualfixedUserHandle - provide the actualfixedUserHandle value.\n   * @param {Container} nodes - provide the nodes value.\n   * @param {Object} actualObject - provide the actualObject value.\n   * @param {boolean} canUpdateSize - provide the canUpdateSize value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateConnectorfixedUserHandle = function (changedObject, actualfixedUserHandle, nodes, actualObject, canUpdateSize) {\n    var isMeasure = false;\n    var fixedUserHandleWrapper = this.getWrapper(nodes, actualfixedUserHandle.id);\n\n    if (fixedUserHandleWrapper !== undefined) {\n      if (changedObject.width !== undefined) {\n        fixedUserHandleWrapper.width = changedObject.width;\n        isMeasure = true;\n      }\n\n      if (changedObject.height !== undefined) {\n        fixedUserHandleWrapper.height = changedObject.height;\n        isMeasure = true;\n      }\n\n      if (actualfixedUserHandle instanceof ConnectorFixedUserHandle && changedObject.offset !== undefined) {\n        actualObject.updateAnnotation(actualfixedUserHandle, actualObject.intermediatePoints, actualObject.wrapper.bounds, fixedUserHandleWrapper);\n      }\n\n      if (actualfixedUserHandle instanceof ConnectorFixedUserHandle && changedObject.displacement) {\n        if (changedObject.displacement.x !== undefined || changedObject.displacement.y !== undefined) {\n          isMeasure = true;\n        }\n      }\n\n      if (changedObject.fill !== undefined) {\n        fixedUserHandleWrapper.style.fill = changedObject.fill;\n      }\n\n      if (changedObject.handleStrokeColor !== undefined) {\n        fixedUserHandleWrapper.style.strokeColor = changedObject.handleStrokeColor;\n      }\n\n      if (changedObject.handleStrokeWidth !== undefined) {\n        fixedUserHandleWrapper.style.strokeWidth = changedObject.handleStrokeWidth;\n      }\n\n      if (changedObject.visibility !== undefined) {\n        fixedUserHandleWrapper.visible = changedObject.visibility;\n      }\n\n      if (changedObject.cornerRadius !== undefined) {\n        fixedUserHandleWrapper.cornerRadius = changedObject.cornerRadius;\n      }\n\n      this.updatefixedUserHandleContent(changedObject, isMeasure, fixedUserHandleWrapper, actualObject, actualfixedUserHandle, nodes);\n\n      if (isMeasure === true) {\n        fixedUserHandleWrapper.measure(new Size(fixedUserHandleWrapper.width, fixedUserHandleWrapper.height));\n        fixedUserHandleWrapper.arrange(fixedUserHandleWrapper.desiredSize);\n      }\n    }\n  };\n  /**\n   * updateAnnotation method \\\n   *\n   * @returns { void }  updateAnnotation method .\\\n   * @param {AnnotationModel} changedObject - provide the changedObject value.\n   * @param {ShapeAnnotationModel} actualAnnotation - provide the actualAnnotation value.\n   * @param {Container} nodes - provide the nodes value.\n   * @param {Object} actualObject - provide the actualObject value.\n   * @param {boolean} canUpdateSize - provide the canUpdateSize value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateAnnotation = function (changedObject, actualAnnotation, nodes, actualObject, canUpdateSize) {\n    var isMeasure = false; // eslint-disable-next-line max-len\n\n    var annotationWrapper = this.getWrapper(nodes, actualAnnotation.id);\n\n    if (annotationWrapper !== undefined) {\n      if (changedObject.width !== undefined && changedObject.height !== undefined) {\n        annotationWrapper.width = changedObject.width;\n        annotationWrapper.height = changedObject.height;\n        isMeasure = true;\n      }\n\n      if (changedObject.rotateAngle !== undefined) {\n        annotationWrapper.rotateAngle = changedObject.rotateAngle;\n      }\n\n      if (canUpdateSize && !(annotationWrapper instanceof DiagramHtmlElement)) {\n        annotationWrapper.refreshTextElement();\n      }\n\n      if (actualAnnotation instanceof PathAnnotation && changedObject.segmentAngle !== undefined) {\n        annotationWrapper.rotateAngle = actualAnnotation.rotateAngle;\n      }\n\n      if (actualAnnotation instanceof ShapeAnnotation && changedObject.offset !== undefined) {\n        var offset = changedObject.offset;\n        isMeasure = true;\n        var offsetX = offset.x !== undefined ? offset.x : actualAnnotation.offset.x;\n        var offsetY = offset.y !== undefined ? offset.y : actualAnnotation.offset.y;\n        annotationWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n        annotationWrapper.relativeMode = 'Point';\n      } else if (actualAnnotation instanceof PathAnnotation && (changedObject.offset !== undefined || changedObject.segmentAngle !== undefined)) {\n        actualObject.updateAnnotation(actualAnnotation, actualObject.intermediatePoints, actualObject.wrapper.bounds, annotationWrapper);\n      }\n\n      if (actualAnnotation instanceof PathAnnotation && changedObject.displacement) {\n        if (changedObject.displacement.x !== undefined || changedObject.displacement.y !== undefined) {\n          isMeasure = true;\n          actualObject.updateAnnotation(actualAnnotation, actualObject.intermediatePoints, actualObject.wrapper.bounds, annotationWrapper);\n        }\n      }\n\n      if (changedObject.margin !== undefined) {\n        isMeasure = true;\n\n        if (changedObject.margin.bottom !== undefined) {\n          annotationWrapper.margin.bottom = changedObject.margin.bottom;\n        }\n\n        if (changedObject.margin.top !== undefined) {\n          annotationWrapper.margin.top = changedObject.margin.top;\n        }\n\n        if (changedObject.margin.left !== undefined) {\n          annotationWrapper.margin.left = changedObject.margin.left;\n        }\n\n        if (changedObject.margin.right !== undefined) {\n          annotationWrapper.margin.right = changedObject.margin.right;\n        }\n      }\n\n      if (isMeasure || canUpdateSize) {\n        annotationWrapper.width = actualAnnotation.width || actualObject.width;\n\n        if (actualAnnotation.template) {\n          annotationWrapper.width = annotationWrapper.width || annotationWrapper.actualSize.width;\n          annotationWrapper.height = actualAnnotation.height || actualObject.height || annotationWrapper.actualSize.height;\n        }\n      }\n\n      if (changedObject.horizontalAlignment !== undefined) {\n        annotationWrapper.horizontalAlignment = changedObject.horizontalAlignment;\n        isMeasure = true;\n      }\n\n      if (changedObject.verticalAlignment !== undefined) {\n        annotationWrapper.verticalAlignment = changedObject.verticalAlignment;\n        isMeasure = true;\n      }\n\n      if (changedObject.visibility !== undefined) {\n        annotationWrapper.visible = nodes.visible && changedObject.visibility ? true : false;\n      }\n\n      if (changedObject.constraints !== undefined) {\n        var updateSelector = false;\n\n        if (annotationWrapper.constraints & AnnotationConstraints.Select && !(changedObject.constraints & AnnotationConstraints.Select) && isSelected(this, actualObject, false, annotationWrapper)) {//updateSelector = true;\n        }\n\n        annotationWrapper.constraints = changedObject.constraints;\n\n        if (updateSelector) {\n          this.clearSelection();\n        }\n      }\n\n      if (changedObject.style !== undefined) {\n        updateStyle(changedObject.style, annotationWrapper);\n      }\n\n      if (changedObject.hyperlink !== undefined) {\n        updateHyperlink(changedObject.hyperlink, annotationWrapper, actualAnnotation);\n      }\n\n      this.updateAnnotationContent(changedObject, isMeasure, annotationWrapper, actualObject, actualAnnotation, nodes);\n\n      if (isMeasure === true) {\n        annotationWrapper.measure(new Size(annotationWrapper.width, annotationWrapper.height));\n        annotationWrapper.arrange(annotationWrapper.desiredSize);\n      }\n\n      if (!(annotationWrapper instanceof DiagramHtmlElement)) {\n        annotationWrapper.refreshTextElement();\n      } // this.refresh(); this.refreshDiagramLayer();\n\n    }\n  };\n\n  Diagram.prototype.updatefixedUserHandleContent = function (changedObject, isMeasure, fixedUserHandleWrapper, actualObject, fixedUserHandleAnnotation, nodes) {\n    if (changedObject !== undefined) {\n      this.updateConnectorfixedUserHandleWrapper(fixedUserHandleWrapper, actualObject, fixedUserHandleAnnotation, nodes);\n    }\n  };\n\n  Diagram.prototype.updateConnectorfixedUserHandleWrapper = function (fixedUserHandleWrapper, actualObject, actualAnnotation, nodes) {\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var elementId = _a[_i];\n      removeElement(fixedUserHandleWrapper.id + '_groupElement', elementId);\n      removeElement(fixedUserHandleWrapper.id + '_html_element', elementId);\n    }\n\n    if (actualObject instanceof Connector) {\n      var canvas = actualObject.wrapper;\n      var segment = canvas.children[0];\n      var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n      fixedUserHandleWrapper = actualObject.getfixedUserHandle(actualObject.fixedUserHandles[actualObject.fixedUserHandles.length - 1], actualObject.intermediatePoints, bounds);\n    }\n\n    for (var i = 0; i < nodes.children.length; i++) {\n      if (fixedUserHandleWrapper.id === nodes.children[i].id) {\n        nodes.children.splice(i, 1, fixedUserHandleWrapper);\n      }\n    }\n  };\n\n  Diagram.prototype.updateAnnotationContent = function (changedObject, isMeasure, annotationWrapper, actualObject, actualAnnotation, nodes) {\n    if (changedObject.content !== undefined) {\n      if (annotationWrapper) {\n        isMeasure = true;\n\n        if (actualObject.shape.type === 'UmlActivity' && (isBlazor() && actualObject.shape.umlActivityShape === 'StructuredNode' || !isBlazor() && actualObject.shape.shape === 'StructuredNode')) {\n          annotationWrapper.content = '<<' + changedObject.content + '>>';\n        } else {\n          annotationWrapper.content = changedObject.content;\n        }\n      }\n\n      if (annotationWrapper instanceof DiagramHtmlElement) {\n        this.updateAnnotationWrapper(annotationWrapper, actualObject, actualAnnotation, nodes);\n      }\n    }\n\n    if (changedObject.template !== undefined) {\n      annotationWrapper.content = changedObject.template;\n      this.updateAnnotationWrapper(annotationWrapper, actualObject, actualAnnotation, nodes);\n    }\n  };\n\n  Diagram.prototype.updateAnnotationWrapper = function (annotationWrapper, actualObject, actualAnnotation, nodes) {\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var elementId = _a[_i];\n      removeElement(annotationWrapper.id + '_groupElement', elementId);\n      removeElement(annotationWrapper.id + '_html_element', elementId);\n    }\n\n    if (actualObject instanceof Node) {\n      annotationWrapper = actualObject.initAnnotationWrapper(actualAnnotation, this.element.id);\n    } else if (actualObject instanceof Connector) {\n      var canvas = actualObject.wrapper;\n      var segment = canvas.children[0];\n      var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n      annotationWrapper = actualObject.getAnnotationElement(actualObject.annotations[actualObject.annotations.length - 1], actualObject.intermediatePoints, bounds, this.getDescription, this.element.id);\n    }\n\n    for (var i = 0; i < nodes.children.length; i++) {\n      if (annotationWrapper.id === nodes.children[i].id) {\n        nodes.children.splice(i, 1, annotationWrapper);\n      }\n    }\n  };\n  /**\n   * updateNodefixedUserHandle method \\\n   *\n   * @returns { void }  updateNodefixedUserHandle method .\\\n   * @param {NodeFixedUserHandleModel} changedObject - provide the changedObject value.\n   * @param {NodeFixedUserHandleModel} actualfixedUserHandle - provide the actualfixedUserHandle value.\n   * @param {Container} nodes - provide the changedObject value.\n   * @param {Object} actualObject - provide the changedObject value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateNodefixedUserHandle = function (changedObject, actualfixedUserHandle, nodes, actualObject) {\n    //let fixedUserHandleWrapper: Canvas;\n    var isMeasure = false;\n    var fixedUserHandleWrapper = this.getWrapper(nodes, actualfixedUserHandle.id);\n\n    if (fixedUserHandleWrapper !== undefined) {\n      if (changedObject.width !== undefined) {\n        fixedUserHandleWrapper.actualSize.width = changedObject.width;\n        isMeasure = true;\n      }\n\n      if (changedObject.height !== undefined) {\n        fixedUserHandleWrapper.height = changedObject.height;\n        isMeasure = true;\n      }\n\n      if (actualfixedUserHandle instanceof NodeFixedUserHandle && changedObject.offset !== undefined) {\n        var offset = changedObject.offset;\n        isMeasure = true;\n        var offsetX = offset.x !== undefined ? offset.x : actualfixedUserHandle.offset.x;\n        var offsetY = offset.y !== undefined ? offset.y : actualfixedUserHandle.offset.y;\n        fixedUserHandleWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n        fixedUserHandleWrapper.relativeMode = 'Point';\n      }\n\n      if (changedObject.margin !== undefined) {\n        isMeasure = true;\n\n        if (changedObject.margin.bottom !== undefined) {\n          fixedUserHandleWrapper.margin.bottom = changedObject.margin.bottom;\n        }\n\n        if (changedObject.margin.top !== undefined) {\n          fixedUserHandleWrapper.margin.top = changedObject.margin.top;\n        }\n\n        if (changedObject.margin.left !== undefined) {\n          fixedUserHandleWrapper.margin.left = changedObject.margin.left;\n        }\n\n        if (changedObject.margin.right !== undefined) {\n          fixedUserHandleWrapper.margin.right = changedObject.margin.right;\n        }\n      }\n\n      if (changedObject.visibility !== undefined) {\n        fixedUserHandleWrapper.visible = changedObject.visibility;\n      }\n\n      if (changedObject.fill !== undefined) {\n        fixedUserHandleWrapper.style.fill = changedObject.fill;\n      }\n\n      if (changedObject.handleStrokeColor !== undefined) {\n        fixedUserHandleWrapper.style.strokeColor = changedObject.handleStrokeColor;\n      }\n\n      if (changedObject.handleStrokeWidth !== undefined) {\n        fixedUserHandleWrapper.style.strokeWidth = changedObject.handleStrokeWidth;\n      }\n\n      if (changedObject.cornerRadius !== undefined) {\n        fixedUserHandleWrapper.cornerRadius = changedObject.cornerRadius;\n      }\n\n      this.updatefixedUserHandleWrapper(fixedUserHandleWrapper, actualObject, actualfixedUserHandle, nodes);\n\n      if (isMeasure === true) {\n        fixedUserHandleWrapper.measure(new Size(fixedUserHandleWrapper.width, fixedUserHandleWrapper.height));\n        fixedUserHandleWrapper.arrange(fixedUserHandleWrapper.desiredSize);\n      }\n    }\n  };\n\n  Diagram.prototype.updatefixedUserHandleWrapper = function (fixedUserHandleWrapper, actualObject, actualAnnotation, nodes) {\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var elementId = _a[_i];\n      removeElement(fixedUserHandleWrapper.id + '_groupElement', elementId);\n      removeElement(fixedUserHandleWrapper.id + '_html_element', elementId);\n    }\n\n    if (actualObject instanceof Node) {\n      fixedUserHandleWrapper = actualObject.initfixedUserHandles(actualAnnotation);\n    }\n\n    for (var i = 0; i < nodes.children.length; i++) {\n      if (fixedUserHandleWrapper.id === nodes.children[i].id) {\n        nodes.children.splice(i, 1, fixedUserHandleWrapper);\n      }\n    }\n  };\n  /**\n   * updatePort method \\\n   *\n   * @returns { void }  updatePort method .\\\n   * @param {PointPortModel} changedObject - provide the changedObject value.\n   * @param {PointPortModel} actualPort - provide the changedObject value.\n   * @param {Container} nodes - provide the changedObject value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updatePort = function (changedObject, actualPort, nodes) {\n    var isMeasure = false;\n    var portWrapper = this.getWrapper(nodes, actualPort.id);\n\n    if (portWrapper !== undefined) {\n      if (changedObject.offset !== undefined) {\n        isMeasure = true;\n        var offsetX = changedObject.offset.x !== undefined ? changedObject.offset.x : actualPort.offset.x;\n        var offsetY = changedObject.offset.y !== undefined ? changedObject.offset.y : actualPort.offset.y;\n        portWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n        portWrapper.relativeMode = 'Point';\n      }\n\n      if (changedObject.width !== undefined) {\n        isMeasure = true;\n        portWrapper.width = changedObject.width;\n      }\n\n      if (changedObject.height !== undefined) {\n        isMeasure = true;\n        portWrapper.height = changedObject.height;\n      }\n\n      if (changedObject.visibility !== undefined) {\n        portWrapper.visible = nodes.visible && checkPortRestriction(actualPort, PortVisibility.Visible) ? true : false;\n      }\n\n      if (changedObject.margin !== undefined) {\n        isMeasure = true;\n\n        if (changedObject.margin.bottom !== undefined) {\n          portWrapper.margin.bottom = changedObject.margin.bottom;\n        }\n\n        if (changedObject.margin.top !== undefined) {\n          portWrapper.margin.top = changedObject.margin.top;\n        }\n\n        if (changedObject.margin.right !== undefined) {\n          portWrapper.margin.right = changedObject.margin.right;\n        }\n\n        if (changedObject.margin.left !== undefined) {\n          portWrapper.margin.left = changedObject.margin.left;\n        }\n      }\n\n      if (changedObject.horizontalAlignment !== undefined) {\n        isMeasure = true;\n        portWrapper.horizontalAlignment = changedObject.horizontalAlignment;\n      }\n\n      if (changedObject.verticalAlignment !== undefined) {\n        isMeasure = true;\n        portWrapper.verticalAlignment = changedObject.verticalAlignment;\n      }\n\n      if (changedObject.style !== undefined) {\n        if (changedObject.style.fill !== undefined) {\n          portWrapper.style.fill = changedObject.style.fill;\n        }\n\n        if (changedObject.style.opacity !== undefined) {\n          portWrapper.style.opacity = changedObject.style.opacity;\n        }\n\n        if (changedObject.style.strokeColor !== undefined) {\n          portWrapper.style.strokeColor = changedObject.style.strokeColor;\n        }\n\n        if (changedObject.style.strokeWidth !== undefined) {\n          portWrapper.style.strokeWidth = changedObject.style.strokeWidth;\n        }\n\n        if (changedObject.style.strokeDashArray !== undefined) {\n          portWrapper.style.strokeDashArray = changedObject.style.strokeDashArray;\n        }\n      }\n\n      if (changedObject.shape !== undefined) {\n        if (portWrapper) {\n          var pathdata = getPortShape(changedObject.shape);\n          portWrapper.data = pathdata;\n          portWrapper.canMeasurePath = true;\n        }\n      }\n\n      if (changedObject.pathData !== undefined) {\n        portWrapper.data = String(changedObject.pathData);\n        isMeasure = true;\n      }\n\n      if (isMeasure === true) {\n        portWrapper.measure(new Size(portWrapper.width, portWrapper.height));\n        portWrapper.arrange(portWrapper.desiredSize);\n      } //this.refresh(); this.refreshDiagramLayer();\n\n    }\n  };\n  /**\n   * updateIcon method \\\n   *\n   * @returns { void }  updateIcon method .\\\n   * @param {Node} actualObject - provide the obj value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateIcon = function (actualObject) {\n    var iconContainer = this.getWrapper(actualObject.wrapper, 'icon_content');\n    var diagramId = this.diagramActions & DiagramAction.Render ? this.element.id : undefined;\n\n    if (iconContainer) {\n      if (this.mode === 'SVG') {\n        var icon = getDiagramElement(actualObject.wrapper.id + '_icon_content', diagramId);\n\n        if (icon) {\n          var iconRect = getDiagramElement(icon.id + '_rect', diagramId);\n          var iconShape = getDiagramElement(icon.id + '_shape', diagramId);\n          var nativeContent = getDiagramElement(iconShape.id + '_native_element', diagramId);\n\n          if (nativeContent) {\n            nativeContent.parentNode.removeChild(nativeContent);\n          }\n\n          iconShape.parentNode.removeChild(iconShape);\n          iconRect.parentNode.removeChild(iconRect);\n          icon.parentNode.removeChild(icon);\n        }\n      }\n\n      var index = actualObject.wrapper.children.indexOf(iconContainer);\n      actualObject.wrapper.children.splice(index, 1);\n    }\n\n    var portContainer = this.getPortContainer(actualObject);\n    actualObject.initIcons(this.getDescription, this.layout, portContainer, this.element.id);\n  };\n\n  Diagram.prototype.getPortContainer = function (actualObject) {\n    if (actualObject.children) {\n      for (var i = 0; i < actualObject.wrapper.children.length; i++) {\n        if (actualObject.wrapper.children[i].id === actualObject.id + 'group_container') {\n          return actualObject.wrapper.children[i];\n        }\n      }\n    }\n\n    return actualObject.wrapper;\n  };\n\n  Diagram.prototype.updateTooltip = function (actualObject, node) {\n    if (node.tooltip.content !== undefined) {\n      actualObject.tooltip.content = node.tooltip.content;\n    }\n\n    if (node.tooltip.position !== undefined) {\n      actualObject.tooltip.position = node.tooltip.position;\n    }\n\n    if (node.tooltip.height !== undefined) {\n      actualObject.tooltip.height = node.tooltip.height;\n    }\n\n    if (node.tooltip.width !== undefined) {\n      actualObject.tooltip.width = node.tooltip.width;\n    }\n\n    if (node.tooltip.showTipPointer !== undefined) {\n      actualObject.tooltip.showTipPointer = node.tooltip.showTipPointer;\n    }\n\n    if (node.tooltip.relativeMode !== undefined) {\n      actualObject.tooltip.relativeMode = node.tooltip.relativeMode;\n    }\n  };\n  /**\n   * updateQuad method \\\n   *\n   * @returns { void }  updateQuad method .\\\n   * @param {IElement} obj - provide the obj value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateQuad = function (obj) {\n    var modified = this.spatialSearch.updateQuad(obj.wrapper);\n\n    if (modified && !this.preventDiagramUpdate) {\n      this.updatePage();\n    }\n  };\n  /**\n   * removeFromAQuad method \\\n   *\n   * @returns { void }  removeFromAQuad method .\\\n   * @param {IElement} obj - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeFromAQuad = function (obj) {\n    if (obj.children) {\n      var child = void 0;\n      var children = obj.children;\n\n      for (var i = 0; i < children.length; i++) {\n        child = this.nameTable[children[i]];\n\n        if (child) {\n          this.removeFromAQuad(child);\n        }\n      }\n    }\n\n    this.spatialSearch.removeFromAQuad(obj.wrapper);\n    var modified = this.spatialSearch.updateBounds(obj.wrapper);\n\n    if (modified && !this.preventDiagramUpdate) {\n      this.updatePage();\n    }\n  };\n  /**\n   * updateGroupSize method \\\n   *\n   * @returns { void }  updateGroupSize method .\\\n   * @param {NodeModel | ConnectorModel} node - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateGroupSize = function (node) {\n    var tempNode;\n\n    if (node.parentId) {\n      tempNode = this.nameTable[node.parentId];\n\n      if (tempNode) {\n        if (tempNode.parentId) {\n          this.updateGroupSize(tempNode);\n        } else {\n          tempNode.wrapper.measure(new Size());\n          tempNode.wrapper.arrange(tempNode.wrapper.desiredSize);\n          this.updateGroupOffset(tempNode);\n          this.updateDiagramObject(tempNode);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.updatePage = function () {\n    if (this.diagramActions & DiagramAction.Render && !(this.diagramActions & DiagramAction.DragUsingMouse)) {\n      this.scroller.updateScrollOffsets();\n      this.scroller.setSize(); //updating overview\n\n      for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n        var temp = _a[_i];\n        var view = this.views[temp];\n\n        if (!(view instanceof Diagram)) {\n          view.updateView(view);\n        }\n      }\n    }\n\n    if (this.diagramActions & DiagramAction.DragUsingMouse) {\n      this.renderPageBreaks();\n    }\n  };\n  /**\n   * protectPropertyChange method \\\n   *\n   * @returns { void }  protectPropertyChange method .\\\n   * @param {boolean} enable - provide the enable value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.protectPropertyChange = function (enable) {\n    this.isProtectedOnChange = enable;\n  };\n  /**\n   * getProtectPropertyChangeValue method \\\n   *\n   * @returns { boolean }  getProtectPropertyChangeValue method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getProtectPropertyChangeValue = function () {\n    return this.isProtectedOnChange;\n  };\n  /**\n   * enableServerDataBinding method \\\n   *\n   * @returns { void }  enableServerDataBinding method .\\\n   * @param {boolean} enable - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.enableServerDataBinding = function (enable) {\n    if (isBlazor()) {\n      this.allowServerDataBinding = enable;\n\n      if (enable) {\n        this.bulkChanges = {};\n      }\n    }\n  };\n  /**\n   * updateShadow method \\\n   *\n   * @returns { void }  updateShadow method .\\\n   * @param {ShadowModel} nodeShadow - provide the node value.\n   * @param {ShadowModel} changedShadow - provide the Node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateShadow = function (nodeShadow, changedShadow) {\n    if (changedShadow.angle !== undefined) {\n      nodeShadow.angle = changedShadow.angle;\n    }\n\n    if (changedShadow.color !== undefined) {\n      nodeShadow.color = changedShadow.color;\n    }\n\n    if (changedShadow.distance !== undefined) {\n      nodeShadow.distance = changedShadow.distance;\n    }\n\n    if (changedShadow.opacity !== undefined) {\n      nodeShadow.opacity = changedShadow.opacity;\n    }\n  };\n  /**\n   * updateMargin method \\\n   *\n   * @returns { void }  updateMargin method .\\\n   * @param {Node} node - provide the node value.\n   * @param {Node} changes - provide the Node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateMargin = function (node, changes) {\n    if (changes.margin.top !== undefined) {\n      node.margin.top = changes.margin.top;\n    }\n\n    if (changes.margin.bottom !== undefined) {\n      node.margin.bottom = changes.margin.bottom;\n    }\n\n    if (changes.margin.left !== undefined) {\n      node.margin.left = changes.margin.left;\n    }\n\n    if (changes.margin.right !== undefined) {\n      node.margin.right = changes.margin.right;\n    }\n  };\n\n  Diagram.prototype.removePreviewChildren = function (preview) {\n    if (preview.children && preview.children.length && preview.shape && preview.shape.type === 'SwimLane') {\n      for (var z = 0; z < preview.children.length; z++) {\n        var previewChildId = preview.children[z];\n        var previewIndex_1 = this.nodes.indexOf(this.nameTable[previewChildId]);\n\n        if (previewIndex_1 >= 0) {\n          this.nodes.splice(previewIndex_1, 1);\n        }\n\n        delete this.nameTable[previewChildId];\n      }\n\n      var previewIndex = this.nodes.indexOf(this.nameTable[this.currentSymbol.id]);\n\n      if (previewIndex >= 0) {\n        this.nodes.splice(previewIndex, 1);\n      }\n    }\n  };\n\n  Diagram.prototype.selectDragedNode = function (newObj, args, selectedSymbol) {\n    this.currentSymbol = newObj;\n\n    if (this.mode !== 'SVG') {\n      this.refreshDiagramLayer();\n    }\n\n    this.commandHandler.oldSelectedObjects = cloneSelectedObjects(this);\n    this.commandHandler.select(newObj);\n    this.commandHandler.updateBlazorSelector();\n    this.eventHandler.mouseDown(args.event);\n    this.eventHandler.mouseMove(args.event, args);\n    this.preventDiagramUpdate = false;\n    this.updatePage();\n    selectedSymbol.style.opacity = '0';\n  }; //property changes - end region\n\n  /* tslint:disable */\n\n\n  Diagram.prototype.initDroppables = function () {\n    var _this = this; // initiates droppable event\n\n\n    var childTable = {};\n    var entryTable = {};\n    var header;\n    var lane;\n    var selectedSymbols = 'selectedSymbols';\n    this.droppable = new Droppable(this.element); // this.droppable.accept = '.e-dragclone';\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.droppable.over = function (args) {\n      if (!_this.currentSymbol) {\n        var dragDataHelper = null;\n\n        if (!args.dragData && args.name === 'drag') {\n          var helper = document.getElementsByClassName('e-dragclone')[0];\n\n          if (helper) {\n            dragDataHelper = helper;\n          }\n        }\n\n        if (args.dragData || dragDataHelper) {\n          var newObj = void 0;\n          var isHorizontal = void 0;\n          document.getElementById(_this.element.id + 'content').focus();\n\n          var position = _this.eventHandler.getMousePosition(args.event);\n\n          var clonedObject = void 0;\n          var selectedSymbol = dragDataHelper || args.dragData.helper;\n          var paletteId = selectedSymbol.getAttribute('paletteId');\n          var nodeDragSize = void 0;\n          var nodePreviewSize = void 0;\n          var paletteDragSize = void 0;\n          var preview = void 0;\n\n          if (!paletteId && args.dragData) {\n            var arg = {\n              source: null,\n              element: newObj,\n              cancel: false,\n              diagram: _this,\n              dragData: args.dragData.draggedElement.ej2_instances[0].dragData,\n              dragItem: newObj\n            };\n\n            _this.triggerEvent(DiagramEvent.dragEnter, arg);\n\n            var newNode = void 0;\n            var newConnector = void 0;\n\n            if (arg.dragItem && arg.dragItem.sourcePoint && arg.dragItem.targetPoint) {\n              newConnector = new Connector(_this, 'connectors', arg.dragItem, true);\n            } else if (arg.dragItem) {\n              newNode = new Node(_this, 'nodes', arg.dragItem, true);\n            }\n\n            newObj = newNode ? newNode : newConnector;\n\n            _this.initObject(newObj, undefined, undefined, true);\n\n            _this['enterObject'] = newObj;\n            _this['enterTable'] = entryTable;\n\n            if (newObj instanceof Node) {\n              newNode.offsetX = position.x + 5 + newNode.width * newNode.pivot.x;\n              newNode.offsetY = position.y + newNode.height * newNode.pivot.y;\n            } else if (newObj instanceof Connector) {\n              var newObjBounds = Rect.toBounds([newObj.sourcePoint, newObj.targetPoint]);\n              var diffx = position.x - newObjBounds.left;\n              var diffy = position.y - newObjBounds.top;\n              newObj.sourcePoint.x += diffx;\n              newObj.sourcePoint.y += diffy;\n              newObj.targetPoint.x += diffx;\n              newObj.targetPoint.y += diffy;\n            }\n\n            _this.preventDiagramUpdate = true;\n            _this.currentSymbol = newObj;\n\n            if (_this.mode !== 'SVG') {\n              _this.refreshDiagramLayer();\n            }\n\n            _this.selectDragedNode(newObj, args, selectedSymbol);\n\n            delete _this['enterObject'];\n            delete _this['enterTable'];\n            _this.droppable[selectedSymbols] = selectedSymbol;\n            _this.allowServerDataBinding = true;\n          }\n\n          if (paletteId) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var sourceElement = document.getElementById(paletteId).ej2_instances[0];\n            var source = 'sourceElement';\n            _this.droppable[source] = sourceElement;\n            var childtable = 'childTable';\n\n            if (sourceElement) {\n              var obj = sourceElement[selectedSymbols];\n              _this.allowServerDataBinding = false;\n              clonedObject = cloneObject(sourceElement[selectedSymbols]);\n              childTable = sourceElement[childtable];\n              var wrapper = obj.wrapper.children[0].children[0];\n              preview = getPreviewSize(sourceElement, clonedObject, wrapper);\n\n              if (sourceElement[selectedSymbols] instanceof Node) {\n                if (obj.shape.shape === 'TextAnnotation') {\n                  // eslint-disable-next-line max-len\n                  clonedObject.offsetX = position.x + 11 + preview.width * clonedObject.pivot.x; // eslint-disable-next-line max-len\n\n                  clonedObject.offsetY = position.y + 11 + preview.height * clonedObject.pivot.y;\n                } else {\n                  // eslint-disable-next-line max-len\n                  clonedObject.offsetX = position.x + 5 + preview.width * clonedObject.pivot.x; // eslint-disable-next-line max-len\n\n                  clonedObject.offsetY = position.y + preview.height * clonedObject.pivot.y;\n                }\n\n                var newNode = new Node(_this, 'nodes', clonedObject, true);\n\n                if (newNode.shape.type === 'Bpmn' && newNode.shape.activity.subProcess.processes && newNode.shape.activity.subProcess.processes.length) {\n                  newNode.shape.activity.subProcess.processes = [];\n                }\n\n                nodeDragSize = newNode.dragSize;\n                nodePreviewSize = newNode.previewSize;\n                paletteDragSize = sourceElement['symbolDragSize'];\n                var palettePreview = sourceElement['symbolPreview']; // eslint-disable-next-line max-len\n\n                newNode.width = nodeDragSize.width || paletteDragSize.width || nodePreviewSize.width || palettePreview.width || newNode.width; // eslint-disable-next-line max-len\n\n                newNode.height = nodeDragSize.height || paletteDragSize.height || nodePreviewSize.height || palettePreview.height || newNode.height;\n\n                if (newNode.shape.type === 'SwimLane') {\n                  _this.diagramActions |= DiagramAction.PreventHistory;\n\n                  if (newNode.shape.isLane) {\n                    newNode.children = [];\n                    header = {\n                      id: 'header' + randomId()\n                    };\n\n                    if (newNode.shape.orientation === 'Horizontal') {\n                      header.width = newNode.shape.lanes[0].header.width;\n                      header.height = newNode.shape.lanes[0].height;\n                    } else {\n                      header.width = newNode.shape.lanes[0].width;\n                      header.height = newNode.shape.lanes[0].header.height;\n                    }\n\n                    header.style = newNode.shape.lanes[0].header.style;\n                    header.offsetX = position.x + 5 + header.width / 2;\n                    header.offsetY = position.y + header.height / 2;\n                    _this.diagramActions |= DiagramAction.PreventCollectionChangeOnDragOver;\n                    header = _this.add(header);\n                    lane = {\n                      id: 'body' + randomId()\n                    };\n\n                    if (newNode.shape.orientation === 'Horizontal') {\n                      lane.width = newNode.shape.lanes[0].width - header.width;\n                      lane.height = newNode.shape.lanes[0].height; // eslint-disable-next-line max-len\n\n                      lane.offsetX = position.x + 5 + (newNode.shape.lanes[0].header.width + lane.width / 2);\n                      lane.offsetY = position.y + lane.height / 2;\n                    } else {\n                      lane.width = newNode.shape.lanes[0].width;\n                      lane.height = newNode.shape.lanes[0].height - header.height;\n                      lane.offsetX = position.x + 5 + lane.width / 2; // eslint-disable-next-line max-len\n\n                      lane.offsetY = position.y + (newNode.shape.lanes[0].header.height + lane.height / 2);\n                    }\n\n                    lane.style = newNode.shape.lanes[0].style;\n                    lane = _this.add(lane);\n                    var group = {\n                      id: 'group' + randomId(),\n                      children: [header.id, lane.id]\n                    };\n                    group.shape = newNode.shape;\n                    group.width = newNode.shape.lanes[0].width;\n                    group.height = newNode.shape.lanes[0].height;\n                    group.previewSize = newNode.previewSize;\n                    group.dragSize = newNode.dragSize;\n                    group.addInfo = newNode.addInfo;\n                    newNode = _this.add(group);\n                    _this.diagramActions &= ~DiagramAction.PreventCollectionChangeOnDragOver;\n                  }\n\n                  _this.diagramActions &= ~DiagramAction.PreventHistory;\n                }\n\n                if (newNode.shape.isPhase) {\n                  isHorizontal = newNode.shape.orientation === 'Horizontal' ? true : false;\n\n                  if (isHorizontal) {\n                    newNode.offsetX = position.x + 5 + (newNode.width || wrapper.actualSize.width) / 2;\n                    newNode.offsetY = position.y;\n                    newNode.shape.data = 'M' + 20 + ',' + newNode.height / 2 + ' L' + (newNode.width - 20) + ',' + newNode.height / 2 + 'z';\n                    newNode.height = 1;\n                  } else {\n                    newNode.offsetX = position.x + 5;\n                    newNode.offsetY = position.y + (newNode.height || wrapper.actualSize.height) / 2;\n                    newNode.shape.data = 'M' + newNode.width / 2 + ',' + 20 + ' L' + newNode.width / 2 + ',' + (newNode.height - 20) + 'z';\n                    newNode.width = 1;\n                  }\n                }\n\n                newObj = newNode;\n\n                if (clonedObject.children) {\n                  var parentNode = clonedObject;\n                  var tempTable = {};\n                  entryTable = _this.getChildren(parentNode, tempTable, childTable);\n                  arrangeChild(parentNode, -parentNode.offsetX, -parentNode.offsetY, entryTable, true, _this);\n                }\n              } else if (sourceElement[selectedSymbols] instanceof Connector) {\n                newObj = new Connector(_this, 'connectors', clonedObject, true);\n                var bounds = Rect.toBounds([newObj.sourcePoint, newObj.targetPoint]);\n                var tx = position.x - bounds.left;\n                var ty = position.y - bounds.top;\n                newObj.sourcePoint.x += tx;\n                newObj.sourcePoint.y += ty;\n                newObj.targetPoint.x += tx;\n                newObj.targetPoint.y += ty;\n              }\n\n              if (!newObj.shape.isLane) {\n                newObj.id += randomId();\n              }\n\n              var arg = {\n                source: sourceElement,\n                element: newObj,\n                cancel: false,\n                diagram: _this,\n                dragData: null,\n                dragItem: newObj\n              };\n\n              if (isBlazor()) {\n                arg = _this.getBlazorDragEventArgs(arg);\n              }\n\n              _this['enterObject'] = newObj;\n              _this['enterTable'] = entryTable;\n\n              _this.triggerEvent(DiagramEvent.dragEnter, arg);\n\n              if (newObj instanceof Node && newObj.shape.type === 'SwimLane' && newObj.shape.isLane) {\n                var swimLaneObj = arg.element;\n                var laneObj = swimLaneObj.shape.lanes[0]; //let child1: NodeModel; let child2: NodeModel;\n\n                isHorizontal = swimLaneObj.shape.orientation === 'Horizontal' ? true : false;\n                var child1 = _this.nameTable[newObj.children[0]];\n                var child2 = _this.nameTable[newObj.children[1]];\n                nodeDragSize = newObj.dragSize;\n                nodePreviewSize = newObj.previewSize;\n                paletteDragSize = sourceElement['symbolDragSize'];\n                laneObj.width = nodeDragSize.width || paletteDragSize.width || nodePreviewSize.width || laneObj.width;\n                laneObj.height = nodeDragSize.height || paletteDragSize.height || nodePreviewSize.height || laneObj.height;\n\n                if (isHorizontal) {\n                  header.width = laneObj.header.width;\n                  header.height = laneObj.height;\n                  lane.width = laneObj.width - header.width;\n                  lane.height = laneObj.height;\n                  lane.offsetX = position.x + 5 + (laneObj.header.width + child2.width / 2);\n                  lane.offsetY = position.y + child2.height / 2;\n                } else {\n                  header.width = laneObj.width;\n                  header.height = laneObj.header.height;\n                  lane.width = laneObj.width;\n                  lane.height = laneObj.height - header.height;\n                  lane.offsetX = position.x + 5 + child2.width / 2;\n                  lane.offsetY = position.y + (laneObj.header.height + child2.height / 2);\n                }\n\n                header.offsetX = position.x + 5 + child1.width / 2;\n                header.offsetY = position.y + child1.height / 2;\n                newObj.width = laneObj.width;\n                newObj.height = laneObj.height;\n              }\n\n              if (newObj instanceof Node && newObj.shape.isPhase) {\n                if (isHorizontal) {\n                  newObj.height = 1;\n                } else {\n                  newObj.width = 1;\n                }\n              }\n\n              if (!_this.activeLayer.lock && !arg.cancel) {\n                _this.preventDiagramUpdate = true;\n\n                if (newObj.children) {\n                  _this.findChild(newObj, entryTable);\n                }\n\n                _this.preventDiagramUpdate = true;\n\n                if (newObj.zIndex !== -1) {\n                  newObj.zIndex = -1;\n                }\n\n                _this.initObject(newObj, undefined, undefined, true);\n\n                _this.selectDragedNode(newObj, args, selectedSymbol);\n              }\n\n              delete _this['enterObject'];\n              delete _this['enterTable'];\n            }\n\n            _this.droppable[selectedSymbols] = selectedSymbol;\n            _this.allowServerDataBinding = true;\n          }\n        }\n      } else {\n        if (args.event.touches && args.event.touches.length) {\n          _this.eventHandler.mouseMove(args.event, args.event.touches);\n        }\n      }\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    this.droppable.drop = function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var source, value, isPhase, orientation_2, isConnector, arg, id, clonedObject, nodeId, newObj, arg, clonedObject, id, selectedSymbols, draggableElement, i;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.allowServerDataBinding = false;\n              source = 'sourceElement';\n              if (!this.currentSymbol) return [3\n              /*break*/\n              , 4];\n              isPhase = false;\n              isConnector = this.currentSymbol instanceof Connector ? true : false;\n\n              if (args.event.touches) {\n                this.eventHandler.mouseUp(args.event);\n              }\n\n              arg = void 0;\n              arg = {\n                source: this.droppable[source],\n                element: this.currentSymbol,\n                target: this.eventHandler['hoverNode'] || this.eventHandler['lastObjectUnderMouse'] || this,\n                cancel: false,\n                position: {\n                  x: this.currentSymbol.wrapper.offsetX,\n                  y: this.currentSymbol.wrapper.offsetY\n                }\n              };\n              if (!isBlazor()) return [3\n              /*break*/\n              , 2];\n              arg = {\n                source: cloneBlazorObject(this.droppable[source]),\n                // eslint-disable-next-line max-len\n                element: getObjectType(this.currentSymbol) === Connector ? {\n                  connector: cloneBlazorObject(this.currentSymbol)\n                } : {\n                  node: cloneBlazorObject(this.currentSymbol)\n                },\n                cancel: false,\n                target: {},\n                position: {\n                  x: this.currentSymbol.wrapper.offsetX,\n                  y: this.currentSymbol.wrapper.offsetY\n                }\n              }; // eslint-disable-next-line max-len\n\n              this.getDropEventArgs(arg);\n              return [4\n              /*yield*/\n              , this.triggerEvent(DiagramEvent.drop, arg)];\n\n            case 1:\n              arg = _a.sent() || arg;\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              this.triggerEvent(DiagramEvent.drop, arg);\n              _a.label = 3;\n\n            case 3:\n              id = 'id';\n              clonedObject = cloneObject(this.currentSymbol);\n              clonedObject['hasTarget'] = this.currentSymbol['hasTarget'];\n              this.removeFromAQuad(this.currentSymbol);\n              this.removeObjectsFromLayer(this.nameTable[this.currentSymbol.id]);\n              this.removeElements(this.currentSymbol);\n\n              if (this.currentSymbol.shape.isLane || this.currentSymbol.shape.isPhase) {\n                this.removeChildInNodes(this.currentSymbol);\n              }\n\n              if (arg.cancel) {\n                removeChildNodes(this.currentSymbol, this);\n              }\n\n              if (this.currentSymbol.shape.isPhase) {\n                isPhase = true;\n                orientation_2 = this.currentSymbol.shape.orientation;\n              }\n\n              this.removePreviewChildren(this.currentSymbol);\n              delete this.nameTable[this.currentSymbol.id];\n              this.currentSymbol = null;\n              this.protectPropertyChange(true);\n\n              if (!arg.cancel) {\n                this.startGroupAction();\n\n                if (clonedObject && (clonedObject.shape.isLane || isPhase)) {\n                  if (isPhase) {\n                    clonedObject.shape.isPhase = isPhase;\n                    clonedObject.shape.orientation = orientation_2;\n                  }\n\n                  this.eventHandler.addSwimLaneObject(clonedObject);\n                }\n\n                if (clonedObject.shape.type === 'Bpmn' && clonedObject.shape.annotation && clonedObject['hasTarget']) {\n                  nodeId = clonedObject.shape.annotation.nodeId;\n                  clonedObject.shape.annotation.id = clonedObject.id;\n                  this.addTextAnnotation(clonedObject.shape.annotation, this.nameTable[nodeId]);\n                  clonedObject.nodeId = '';\n                }\n\n                if (!clonedObject.shape.isLane && !isPhase) {\n                  if (clonedObject.children) {\n                    this.addChildNodes(clonedObject);\n                  }\n\n                  if (arg.target && arg.target instanceof Node && !isConnector && checkParentAsContainer(this, arg.target) && canAllowDrop(arg.target)) {\n                    addChildToContainer(this, arg.target, clonedObject);\n                  } else {\n                    value = this.add(clonedObject, true);\n                  }\n\n                  if ((clonedObject || value) && canSingleSelect(this)) {\n                    this.select([this.nameTable[clonedObject[id]]]);\n                  }\n                }\n              } else {\n                this.clearSelectorLayer();\n              }\n\n              this.protectPropertyChange(false);\n              newObj = this.nameTable[clonedObject[id]];\n\n              if (clonedObject['hasTarget']) {\n                clonedObject.nodeId = clonedObject['hasTarget'];\n                this.remove(clonedObject);\n              }\n\n              if (this.bpmnModule && newObj instanceof Node && clonedObject.processId) {\n                newObj.processId = clonedObject.processId;\n                this.bpmnModule.dropBPMNchild(this.nameTable[newObj.processId], newObj, this);\n              }\n\n              if (!arg.cancel) {\n                this.endGroupAction();\n              }\n\n              if (this.mode !== 'SVG') {\n                this.refreshDiagramLayer();\n              }\n\n              delete this.droppable[source];\n              return [3\n              /*break*/\n              , 5];\n\n            case 4:\n              arg = {\n                source: cloneBlazorObject(args.droppedElement),\n                element: undefined,\n                target: cloneBlazorObject(this.eventHandler['hoverNode'] || this.eventHandler['lastObjectUnderMouse'] || this),\n                cancel: false,\n                position: undefined\n              };\n\n              if (isBlazor()) {\n                arg = {\n                  source: cloneBlazorObject(args.droppedElement),\n                  element: undefined,\n                  cancel: false,\n                  position: undefined,\n                  target: {}\n                };\n                this.getDropEventArgs(arg);\n              }\n\n              this.triggerEvent(DiagramEvent.drop, arg);\n              clonedObject = void 0;\n              id = 'id';\n              _a.label = 5;\n\n            case 5:\n              selectedSymbols = 'selectedSymbols'; // eslint-disable-next-line max-len\n\n              if (this.droppable[selectedSymbols] && this.droppable[selectedSymbols].parentNode) {\n                remove(this.droppable[selectedSymbols]);\n              } else {\n                draggableElement = document.getElementsByClassName('e-dragclone');\n\n                for (i = 0; i < draggableElement.length; i++) {\n                  draggableElement[i].remove();\n                }\n              }\n\n              this.allowServerDataBinding = true;\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    this.droppable.out = function (args) {\n      if (_this.currentSymbol && (!_this.eventHandler.focus || args.evt.type === \"touchmove\")) {\n        _this.unSelect(_this.currentSymbol);\n\n        _this.removeFromAQuad(_this.currentSymbol);\n\n        if (_this.mode !== 'SVG' && _this.currentSymbol.shape.type === 'Native') {\n          _this.removeElements(_this.currentSymbol);\n        }\n\n        _this.removeObjectsFromLayer(_this.nameTable[_this.currentSymbol.id]);\n\n        _this.removePreviewChildren(_this.currentSymbol);\n\n        delete _this.nameTable[_this.currentSymbol.id];\n        var args_1 = {\n          element: cloneBlazorObject(_this.currentSymbol),\n          diagram: _this\n        };\n\n        if (isBlazor()) {\n          args_1 = _this.getBlazorDragLeaveEventArgs(args_1);\n        }\n\n        _this.triggerEvent(DiagramEvent.dragLeave, args_1);\n\n        if (_this.mode !== 'SVG') {\n          _this.refreshDiagramLayer();\n        } else {\n          _this.removeElements(_this.currentSymbol);\n        }\n\n        _this.currentSymbol = null;\n        var selectedSymbols_1 = 'selectedSymbols';\n        _this.droppable[selectedSymbols_1].style.opacity = '1';\n        var source = 'sourceElement';\n        delete _this.droppable[source];\n        _this.diagramRenderer.rendererActions = _this.removeConstraints(_this.diagramRenderer.rendererActions, RendererAction.DrawSelectorBorder);\n\n        if (_this.previousSelectedObject) {\n          _this.select(_this.previousSelectedObject, _this.previousSelectedObject.length > 1 ? true : false);\n        }\n\n        _this.previousSelectedObject = null;\n      }\n    };\n  };\n\n  Diagram.prototype.getBlazorDragLeaveEventArgs = function (args) {\n    args = {\n      diagramId: this.element.id,\n      element: getObjectType(args.element) === Connector ? {\n        connector: cloneBlazorObject(args.element)\n      } : {\n        node: cloneBlazorObject(args.element)\n      }\n    };\n    return args;\n  };\n\n  Diagram.prototype.getDropEventArgs = function (arg) {\n    if (this.eventHandler['lastObjectUnderMouse'] || this.eventHandler['hoverNode']) {\n      var object = this.eventHandler['lastObjectUnderMouse'] || this.eventHandler['hoverNode']; // eslint-disable-next-line max-len\n\n      arg.target = getObjectType(object) === Connector ? {\n        connector: cloneBlazorObject(object)\n      } : {\n        node: cloneBlazorObject(object)\n      };\n    } else {\n      arg.target.diagramId = this.element.id;\n    }\n  };\n\n  Diagram.prototype.removeChildInNodes = function (node) {\n    if (node) {\n      if (node.children) {\n        for (var i = 0; i < node.children.length; i++) {\n          this.removeChildInNodes(this.nameTable[node.children[i]]);\n        }\n      }\n\n      var index = this.nodes.indexOf(node);\n\n      if (index !== -1) {\n        this.nodes.splice(index, 1);\n      }\n    }\n  };\n\n  Diagram.prototype.getBlazorDragEventArgs = function (args) {\n    args = {\n      // eslint-disable-next-line max-len\n      source: cloneBlazorObject(args.source),\n      element: getObjectType(args.element) === Connector ? {\n        connector: cloneBlazorObject(args.element)\n      } : {\n        node: cloneBlazorObject(args.element)\n      },\n      cancel: args.cancel,\n      diagramId: this.element.id\n    };\n    return args;\n  };\n\n  Diagram.prototype.findChild = function (node, childTable) {\n    var group;\n    var newNode;\n\n    for (var i = 0; i < node.children.length; i++) {\n      group = childTable[node.children[i]];\n\n      if (group) {\n        if (group.children) {\n          this.findChild(group, childTable);\n        }\n\n        group.id = group.id + randomId();\n        childTable[group.id] = group;\n        node.children[i] = group.id;\n        newNode = new Node(this, 'nodes', group, true);\n        this.initObject(newNode, undefined, undefined, true); //this.add(group, true);\n      }\n    }\n  };\n\n  Diagram.prototype.getChildren = function (node, entryTable, childTable) {\n    var temp;\n\n    for (var i = 0; i < node.children.length; i++) {\n      temp = childTable[node.children[i]];\n\n      if (temp) {\n        if (temp.children) {\n          entryTable = this.getChildren(temp, entryTable, childTable);\n        }\n\n        entryTable[temp.id] = cloneObject(temp);\n      }\n    }\n\n    return entryTable;\n  };\n\n  Diagram.prototype.addChildNodes = function (node) {\n    var temp;\n\n    for (var i = 0; i < node.children.length; i++) {\n      temp = this.nameTable[node.children[i]];\n\n      if (temp) {\n        if (temp.children) {\n          this.addChildNodes(temp);\n        }\n\n        this.add(temp, true);\n      }\n    }\n  };\n\n  Diagram.prototype.moveNode = function (node) {\n    var currentLayer = this.commandHandler.getObjectLayer(node.id);\n    var index = currentLayer.zIndex;\n    var length = currentLayer.objects.length;\n    var targetLayer;\n\n    for (var i = 0; i < this.layers.length; i++) {\n      if (index === this.layers[i].zIndex) {\n        targetLayer = this.layers[i + 1];\n      }\n    }\n\n    if (length > 1) {\n      this.commandHandler.moveSvgNode(node.id, currentLayer.objects[length - 2]);\n      this.commandHandler.moveSvgNode(currentLayer.objects[length - 2], node.id);\n    } else {\n      if (targetLayer) {\n        var targetObject = this.commandHandler.getLayer(this.layerZIndexTable[targetLayer.zIndex]).objects[0];\n\n        if (targetObject) {\n          this.commandHandler.moveSvgNode(node.id, targetObject);\n          this.commandHandler.updateNativeNodeIndex(node.id, targetObject);\n        } else {\n          this.moveObjectsUp(node, currentLayer);\n        }\n      } else {\n        this.moveObjectsUp(node, currentLayer);\n      }\n    }\n  };\n  /**\n   * moves the node or connector forward within given layer \\\n   *\n   * @returns { void }  moves the node or connector forward within given layer .\\\n   * @param {Node | Connector} node - provide the source value.\n   * @param {LayerModel} currentLayer - provide the source value.\n   *\n   */\n\n\n  Diagram.prototype.moveObjectsUp = function (node, currentLayer) {\n    var targetLayer;\n\n    for (var i = this.layers.length - 1; i >= 0; i--) {\n      targetLayer = this.layers[i];\n\n      if (currentLayer.id !== targetLayer.id) {\n        // eslint-disable-next-line max-len\n        var targetObject = this.commandHandler.getLayer(this.layerZIndexTable[targetLayer.zIndex]).objects[targetLayer.objects.length - 1];\n\n        if (targetObject) {\n          this.commandHandler.moveSvgNode(node.id, targetObject);\n          this.commandHandler.moveSvgNode(targetObject, node.id);\n          break;\n        }\n      }\n    }\n  };\n  /**\n   * Inserts newly added element into the database \\\n   *\n   * @returns { void }  Inserts newly added element into the database .\\\n   * @param {Node | Connector} node - provide the source value.\n   *\n   */\n\n\n  Diagram.prototype.insertData = function (node) {\n    return this.crudOperation(node, 'create', this.getNewUpdateNodes('New'));\n  };\n  /**\n   * updates the user defined element properties into the existing database \\\n   *\n   * @returns { void }     Removes the user deleted element from the existing database .\\\n   * @param {Node | Connector} node - provide the source value.\n   *\n   */\n\n\n  Diagram.prototype.updateData = function (node) {\n    return this.crudOperation(node, 'update', this.getNewUpdateNodes('Update'));\n  };\n  /**\n   * Removes the user deleted element from the existing database \\\n   *\n   * @returns { void }     Removes the user deleted element from the existing database .\\\n   * @param {Node | Connector} node - provide the source value.\n   *\n   */\n\n\n  Diagram.prototype.removeData = function (node) {\n    return this.crudOperation(node, 'destroy', this.getDeletedNodes());\n  };\n\n  Diagram.prototype.crudOperation = function (node, crud, getNodesCollection) {\n    if (node) {\n      var data = this.parameterMap(node, node instanceof Connector ? false : true);\n\n      if (data) {\n        // eslint-disable-next-line max-len\n        var url = node instanceof Connector ? this.dataSourceSettings.connectionDataSource.crudAction[crud] : this.dataSourceSettings.crudAction[crud];\n        this.raiseAjaxPost(JSON.stringify(data), url);\n      }\n\n      return data;\n    } else {\n      var newObjects = getNodesCollection; // eslint-disable-next-line max-len\n\n      this.processCrudCollection(newObjects, this.dataSourceSettings.crudAction[crud], this.dataSourceSettings.connectionDataSource.crudAction[crud]);\n      return newObjects;\n    }\n  };\n\n  Diagram.prototype.processCrudCollection = function (newObjects, nodeCrudAction, connectorCrudAction) {\n    if (newObjects.nodes) {\n      var data = [];\n      var i = void 0;\n\n      for (i = 0; i < newObjects.nodes.length; i++) {\n        data.push(this.parameterMap(newObjects.nodes[i], true));\n      }\n\n      if (data && data.length > 0) {\n        this.raiseAjaxPost(JSON.stringify(data), nodeCrudAction);\n      }\n    }\n\n    if (newObjects.connectors) {\n      var data = [];\n      var i = void 0;\n\n      for (i = 0; i < newObjects.connectors.length; i++) {\n        data.push(this.parameterMap(newObjects.connectors[i], false));\n      }\n\n      if (data && data.length > 0) {\n        this.raiseAjaxPost(JSON.stringify(data), connectorCrudAction);\n      }\n    }\n  };\n\n  Diagram.prototype.parameterMap = function (object, isNode) {\n    var mappingObj = {};\n    var i;\n    var fields = isNode ? this.dataSourceSettings : this.dataSourceSettings.connectionDataSource;\n\n    if (fields.id) {\n      mappingObj[fields.id] = object.id;\n    }\n\n    if (fields.sourcePointX && fields.sourcePointY) {\n      mappingObj[fields.sourcePointX] = object.sourcePoint.x;\n      mappingObj[fields.sourcePointY] = object.sourcePoint.y;\n    }\n\n    if (fields.targetPointX && fields.targetPointY) {\n      mappingObj[fields.targetPointX] = object.targetPoint.x;\n      mappingObj[fields.targetPointY] = object.targetPoint.y;\n    }\n\n    if (fields.sourceID) {\n      mappingObj[fields.sourceID] = object.sourceID;\n    }\n\n    if (fields.targetID) {\n      mappingObj[fields.targetID] = object.targetID;\n    }\n\n    if (fields.crudAction && fields.crudAction.customFields && fields.crudAction.customFields.length > 0) {\n      for (i = 0; i < fields.crudAction.customFields.length; i++) {\n        mappingObj[fields.crudAction.customFields[i]] = object[fields.crudAction.customFields[i]];\n      }\n    }\n\n    return mappingObj;\n  };\n\n  Diagram.prototype.getNewUpdateNodes = function (status) {\n    var nodes = [];\n    var connectors = []; // eslint-disable-next-line guard-for-in\n\n    for (var name_1 in this.nameTable) {\n      var node = this.nameTable[name_1];\n\n      if (node.status === status) {\n        if (node && node instanceof Connector) {\n          node.status = 'None';\n          connectors.push(node);\n        } else {\n          node.status = 'None';\n          nodes.push(node);\n        }\n      }\n    }\n\n    return {\n      nodes: nodes,\n      connectors: connectors\n    };\n  };\n\n  Diagram.prototype.getDeletedNodes = function () {\n    var nodes = [];\n    var connectors = [];\n    var i;\n\n    for (i = 0; i < this.crudDeleteNodes.length; i++) {\n      var node = this.crudDeleteNodes[i];\n\n      if (node && node.segments) {\n        connectors.push(node);\n      } else if (node) {\n        nodes.push(node);\n      }\n    }\n\n    this.crudDeleteNodes = [];\n    return {\n      nodes: nodes,\n      connectors: connectors\n    };\n  };\n\n  Diagram.prototype.raiseAjaxPost = function (value, url) {\n    var callback = new Ajax(url, 'POST', true, 'application/json');\n    var data = JSON.stringify(JSON.parse(value));\n    callback.send(data).then();\n    /* eslint-disable */\n\n    callback.onSuccess = function (data) {};\n    /* eslint-enable */\n\n  };\n\n  Diagram.prototype.getHiddenItems = function (args) {\n    var hiddenItems = [];\n\n    if (this.contextMenuModule) {\n      this.contextMenuModule.hiddenItems = [];\n\n      for (var _i = 0, _a = args.items; _i < _a.length; _i++) {\n        var item = _a[_i];\n        this.contextMenuModule.ensureItems(item, args.event);\n\n        if (item.items && item.items.length) {\n          for (var _b = 0, _c = item.items; _b < _c.length; _b++) {\n            var newItem = _c[_b];\n            this.contextMenuModule.ensureItems(newItem, args.event);\n          }\n        }\n      }\n\n      return this.contextMenuModule.hiddenItems;\n    }\n\n    return hiddenItems;\n  };\n\n  __decorate([Property('100%')], Diagram.prototype, \"width\", void 0);\n\n  __decorate([Property('SVG')], Diagram.prototype, \"mode\", void 0);\n\n  __decorate([Property('100%')], Diagram.prototype, \"height\", void 0);\n\n  __decorate([Complex({}, ContextMenuSettings)], Diagram.prototype, \"contextMenuSettings\", void 0);\n\n  __decorate([Property(DiagramConstraints.Default)], Diagram.prototype, \"constraints\", void 0);\n\n  __decorate([Property(DiagramTools.Default)], Diagram.prototype, \"tool\", void 0);\n\n  __decorate([Property('Top')], Diagram.prototype, \"bridgeDirection\", void 0);\n\n  __decorate([Property('transparent')], Diagram.prototype, \"backgroundColor\", void 0);\n\n  __decorate([Complex({}, SnapSettings)], Diagram.prototype, \"snapSettings\", void 0);\n\n  __decorate([Complex({}, RulerSettings)], Diagram.prototype, \"rulerSettings\", void 0);\n\n  __decorate([Complex({}, PageSettings)], Diagram.prototype, \"pageSettings\", void 0);\n\n  __decorate([Complex({}, SerializationSettings)], Diagram.prototype, \"serializationSettings\", void 0);\n\n  __decorate([Collection([], Node)], Diagram.prototype, \"nodes\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"drawingObject\", void 0);\n\n  __decorate([Collection([], Connector)], Diagram.prototype, \"connectors\", void 0);\n\n  __decorate([Property([])], Diagram.prototype, \"basicElements\", void 0);\n\n  __decorate([Complex({}, DiagramTooltip)], Diagram.prototype, \"tooltip\", void 0);\n\n  __decorate([Complex({}, DataSource)], Diagram.prototype, \"dataSourceSettings\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"addInfo\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"historyManager\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"nodeTemplate\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"annotationTemplate\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"userHandleTemplate\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getNodeDefaults\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"nodeDefaults\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getConnectorDefaults\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"connectorDefaults\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"setNodeTemplate\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getDescription\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getCustomProperty\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getCustomTool\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getCustomCursor\", void 0);\n\n  __decorate([Collection([], CustomCursorAction)], Diagram.prototype, \"customCursor\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"updateSelection\", void 0);\n\n  __decorate([Complex({}, DiagramSettings)], Diagram.prototype, \"diagramSettings\", void 0);\n\n  __decorate([Complex({}, Selector)], Diagram.prototype, \"selectedItems\", void 0);\n\n  __decorate([Complex({}, ScrollSettings)], Diagram.prototype, \"scrollSettings\", void 0);\n\n  __decorate([Complex({}, Layout)], Diagram.prototype, \"layout\", void 0);\n\n  __decorate([Complex({}, CommandManager)], Diagram.prototype, \"commandManager\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"dataLoaded\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"dragEnter\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"dragLeave\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"dragOver\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"click\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"historyChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"historyStateChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"doubleClick\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"textEdit\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"scrollChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"selectionChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"sizeChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"connectionChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"sourcePointChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"targetPointChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"propertyChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"positionChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"keyUp\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"keyDown\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"animationComplete\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"rotateChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"collectionChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"fixedUserHandleClick\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"onUserHandleMouseDown\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"onUserHandleMouseUp\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"onUserHandleMouseEnter\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"onUserHandleMouseLeave\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"segmentCollectionChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"onImageLoad\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"expandStateChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"created\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"mouseEnter\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"mouseLeave\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"mouseOver\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"contextMenuOpen\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"contextMenuBeforeItemRender\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"contextMenuClick\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"commandExecute\", void 0);\n\n  __decorate([Collection([], Layer)], Diagram.prototype, \"layers\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"drop\", void 0);\n\n  return Diagram;\n}(Component);\n\nexport { Diagram };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","push","Component","Property","Complex","Collection","EventHandler","L10n","Droppable","remove","Ajax","isBlazor","blazorTemplates","isNullOrUndefined","Browser","Event","updateBlazorTemplate","resetBlazorTemplate","CanvasRenderer","SvgRenderer","DiagramRenderer","PageSettings","ScrollSettings","ServiceLocator","Container","Node","BpmnShape","cloneBlazorObject","cloneSelectedObjects","findObjectIndex","selectionHasConnector","checkBrowserInfo","updateDefaultValues","getCollectionChangeEventArguements","flipConnector","updatePortEdges","alignElement","setConnectorDefaults","getPreviewSize","Connector","SnapSettings","RulerSettings","removeRulerElements","updateRuler","getRulerSize","renderRuler","renderOverlapElement","Size","Keys","KeyModifiers","DiagramTools","AnnotationConstraints","NodeConstraints","ScrollActions","RendererAction","BlazorAction","DiagramConstraints","SelectorConstraints","PortVisibility","DiagramEvent","DiagramAction","ThumbsConstraints","RealAction","ElementAction","PortConstraints","PathElement","TextElement","updateStyle","removeItem","updateConnector","updateShape","setUMLActivityDefaults","findNodeByName","setSwimLaneDefaults","checkPortRestriction","serialize","deserialize","updateHyperlink","getObjectType","removeGradient","getChild","Rect","getPortShape","ShapeAnnotation","PathAnnotation","Canvas","GridPanel","ColumnDefinition","DataSource","Layout","Selector","Text","DiagramEventHandler","CommandHandler","DiagramScroller","isSelected","SpatialSearch","setAttributeSvg","setAttributeHtml","measureHtmlText","removeElement","createMeasureElements","getDomIndex","getDiagramElement","getScrollerWidth","getHTMLLayer","createUserHandleTemplates","getBackgroundLayer","createHtmlElement","createSvgElement","getNativeLayerSvg","getUserHandleLayer","getPortLayerSvg","getDiagramLayerSvg","applyStyleAgainstCsp","getAdornerLayerSvg","getSelectorElement","getGridLayerSvg","getBackgroundLayerSvg","CommandManager","ContextMenuSettings","canDelete","canInConnect","canOutConnect","canRotate","canVitualize","canDrawThumbs","canPortInConnect","canPortOutConnect","canResize","canSingleSelect","canZoomPan","canZoomTextEdit","canMultiSelect","canDragSourceEnd","canDragTargetEnd","canDragSegmentThumb","enableReadOnly","canMove","findAnnotation","arrangeChild","getInOutConnectPorts","removeChildNodes","canMeasureDecoratorPath","randomId","cloneObject","extendObject","getFunction","getBounds","DiagramTooltip","initTooltip","PointPort","canShadow","Layer","DiagramNativeElement","DiagramHtmlElement","canAllowDrop","checkParentAsContainer","addChildToContainer","updateLaneBoundsAfterAddChild","getConnectors","updateConnectorsProperties","phaseDefine","swimLaneMeasureAndArrange","arrangeChildNodesInSwimLane","updateHeaderMaxWidth","updatePhaseMaxWidth","addLane","addPhase","SerializationSettings","removeSwimLane","removeLane","removePhase","removeLaneChildNode","RowDefinition","CustomCursorAction","DiagramSettings","StackPanel","ConnectorFixedUserHandle","NodeFixedUserHandle","Diagram","_super","options","element","_this","version","checkMenu","isServerUpdate","oldNodeObjects","oldDiagramObject","oldConnectorObjects","canEnableBlazorObject","connectorTable","groupTable","scrollActions","None","blazorActions","Default","activeLabel","id","parentId","isGroup","text","undefined","textEditing","isTriggerEvent","preventNodesUpdate","preventConnectorsUpdate","callBlazorModel","selectionConnectorsList","deleteVirtualObject","canLayout","swimlaneChildTable","swimlaneZIndexTable","changedConnectorCollection","changedNodesCollection","previousNodeCollection","previousConnectorCollection","crudDeleteNodes","blazorAddorRemoveCollection","blazorRemoveIndexCollection","diagramid","selectedObject","helperObject","actualObject","renderTimer","child","node","blazor","canCloneObject","window","dataSourceSettings","dataSource","ignoreCollectionWatch","nodes","children","style","fill","strokeColor","shape","type","nodeDefaults","updateAnnotationText","annotations","connectors","connectorDefaults","defaultConnector","connector","defaultPropChanges","bulkChanges","enableServerDataBinding","protectPropertyChange","keys","i_1","split","sfIndex","Number","content","join","callFromServer","arg","methodName","mId","nameTable","outEdge","isOutEdge","outEdges","inEdges","obj","isAdding","args","add","remove_1","data","loadDiagram","clearCollection","isConnector","collection","_i","_a","clearObjects","onPropertyChanged","newProp","oldProp","newValue","oldValue","isPropertyChanged","refreshLayout","refereshColelction","diagramActions","Render","prop","width","getSizeValue","height","eventHandler","updateViewPortSize","_b","_c","views","view","temp","updateView","_d","_e","index","changedProp","gradient","updateGradient","oldGradientValue","excludeFromLayout","nodePropertyChange","cause","triggerEvent","propertyChange","mode","refreshDiagramLayer","oldObject","_f","_g","sourceDecorator","targetDecorator","DecoratorPropertyChange","connectorPropertyChange","updateConnectorEdges","updateBridging","intOffPageBackground","validatePageSize","updatePage","selectedItems","userHandles","wrapper","renderSelector","constraints","updateSnapSettings","initCommands","clear","initObjects","layout","updateRulerSettings","updateLayer","PropertyChange","updateScrollSettings","locale","realActions","PreventDataInit","refresh","contextMenuSettings","showCustomMenuOnly","show","items","_h","_j","contextMenuModule","refreshItems","serializationSettings","preventDefaults","connectionPointOrigin","enableRouting","ports","j","removePorts","sourcePortid","sourcePortID","targetPortId","targetPortID","sourcePortWrapper","targetPortWrapper","segments","doLayout","renderReactTemplates","diagram","canLogChange","modelChanged","entry","undoObject","redoObject","category","historyManager","addHistoryEntry","resetDiagramActions","scrollAlone","scrollSettings","_k","_l","currentZoom","updateHtmlLayer","refreshCanvasDiagramLayer","snapSettings","horizontalGridlines","verticalGridlines","gridType","diagramRenderer","updateGrid","scroller","transform","rulerSettings","hRuler","vRuler","nodeObj","linearNode","radialNode","linearProp","radialProp","x1","x2","y1","y2","cx","cy","fx","fy","stops","values","dynamicGrid","showRulers","setSize","renderRulers","horizontalRuler","verticalRuler","thickness","getPersistData","keyEntity","addOnPersist","preRender","initializePrivateVariables","isProtectedOnChange","serviceLocator","initializeServices","setCulture","measureWindowElement","initDiagram","initViews","unWireEvents","wireEvents","classList","document","getElementsByClassName","defaultLocale","Copy","Cut","Paste","Undo","Redo","SelectAll","Grouping","Group","UnGroup","Order","BringToFront","MoveForward","SendToBack","SendBackward","layerZIndex","layerZIndexTable","pathTable","commands","isLoading","commandHandler","spatialSearch","register","localeObj","getModuleName","render","refreshing","domTable","collapsedNode","changedNodes","changedConnectors","deepDiffer","removeEmptyValues","blazorInterop","diagramObject","updateBlazorProperties","crudAction","read","renderInitialCrud","initHistory","initLayers","initializeDiagramLayers","setLayers","isLayout","insertValue","isExpanded","expandNode","getBlazorOldValues","lineRoutingModule","previousConnectorObject","updateConnectorObject","changeConnectors","lineRouting","getObjectChanges","ClearObject","renderPageBreaks","renderSvgGridlines","initSelectorWrapper","notify","trigger","updateScrollOffsets","verticalOffset","horizontalOffset","updateScrollOffset","isDevice","tool","ZoomPan","SingleSelect","tooltipObject","hiddenUserHandleTemplate","userHandleTemplate","updateTemplate","renderComplete","updateFitToPage","pageSettings","fitOptions","canFit","fitToPage","annotation","pathAnnotation","annotationType","template","resetTemplate","htmlNode","templateAnnotation","path","HTMLElement","tempObj","callback","onSuccess","dataManager","JSON","parse","dataBind","send","connectionDataSource","getClassName","requiredModules","modules","member","UndoRedo","enableAnimation","LineRouting","arrangement","removeUserHandlesTemplate","elementId","name","destroy","clearInterval","droppable","clearTemplate","getElementById","tooltipelement","parentNode","removeChild","usageCount","measureElementCount","layers","currentLayer","zIndexTable","startEvent","touchStartEvent","stopEvent","touchEndEvent","moveEvent","touchMoveEvent","cancelEvent","isPointer","isIE11Pointer","wheelEvent","info","diagramCanvas","mouseDown","mouseMove","mouseUp","mouseLeave","keyDown","keyUp","doubleClick","scrolled","mouseWheel","windowResize","initDroppables","select","objects","multipleSelection","selectObjects","selectAll","getObjectsOfLayer","activeLayer","unSelect","oldSelectedObjects","updateBlazorSelector","clearSelection","updateViewPort","attribute","getZoomingAttribute","updateBlazorDiagramProperties","cutCommand","cut","addProcess","process","bpmnModule","removeProcess","pasteCommand","paste","bringIntoView","bound","bringToCenter","copyCommand","copy","group","concat","insertBlazorDiagramObjects","unGroup","sendToBack","setActiveLayer","layerName","layer","getLayer","addLayer","layerObject","addDiagramLayer","removeLayer","layerId","removeDiagramLayer","moveObjects","targetLayer","oldValues","map","diffValue","frameObject","layerObjectUpdate","leyerObject","zIndex","sendLayerBackward","updateLayerObject","bringLayerForward","cloneLayer","bringToFront","moveForward","sendForward","sendBackward","getObject","getNodeObject","getConnectorObject","getActiveLayer","nudgeCommand","direction","x","nudge","tx","ty","negativeDirection","labelDrag","drag","refreshCanvasLayers","interaction","object","updated","updateAnnotationDrag","parent_1","isLane","swimlane","conn","indexOf","updateSelector","DragUsingMouse","updateConnectorProperties","sequence","updatePathElementOffset","ToolAction","GroupClipboardInProcess","disableStackContainerPadding","disable","considerPadding","scale","sx","sy","pivot","checkBoundaryConstraints","bounds","selector","rotate","angle","offsetX","offsetY","rotateAngle","rotateObjects","dragSourceEnd","dragTargetEnd","findObjectsUnderMouse","position","source","findObjectUnderMouse","action","inAction","findTargetObjectUnderMouse","findTargetUnderMouse","findElementUnderMouse","padding","findActionToBeDone","getTool","getCustomTool","getCursor","active","cursor","getCustomCursor","customCursor","undoRedoModule","currentSymbol","checkCurrentSymbol","historyChangeTrigger","check","undoObjects","addCustomHistoryEntry","change","entryType","changeType","sourceValue","historyChange","startGroupAction","endGroupAction","undo","redo","getBlazorDiagramObjects","align","option","PublicMethod","distribute","sameSize","canCall","isServerDataBindEnabled","allowServerDataBinding","getDiagramOldValues","zoom","factor","focusedPoint","zoomTo","zoomFactor","focusPoint","pan","setCursor","reset","resetSegments","setBlazorDiagramProps","eventName","eventArgs","updateEventValue","addNodeToLane","swimLane","lane","swimlaneNode","phases","laneId","laneNode","margin","left","top","orientation","laneHeaderId","lanes","containsPoint","updateDiagramElementQuad","showTooltip","tooltip","Math","round","openOn","targetPoint","hideTooltip","close","addNode","addChildToGroup","severDataBind","propChange","isHistoryAdded","PreventHistory","addChild","childTable","objectId","getHistoryStack","isUndoStack","historyEntry","undoStack","redoStack","stackLimit","getEdges","getParentId","addConnector","UpdateBlazorDiagramModelCollection","copiedObject","multiSelectDelete","isBlazorGroupUpdate","updatedModel","connectorModelCollection","updatedModelCollection","objectTypeCollection","removalIndexCollection","updatedModel_1","elements","removalIndex","tempNode","getChildren","isNode","dgmObj","stringify","UpdateBlazorDiagramModel","objectType","annotationNodeIndex","Clear","UpdateBlazorLabelOrPortObjects","nodeIndex","nodeIndexCollection","addBlazorDiagramObjects","nodesCollection","connectorCollection","dataBindingModule","removeNodeEdges","isOutEdges","edges","splice","insertBlazorConnector","sourceID","targetID","newObj","propertyChangeValue","state","cancel","parentObject","PreventCollectionChangeOnDragOver","collectionChange","drawingObject","removeElements","sourceNodee","isOutEdgee","port","removePortEdges","lock","visible","status","initObject","GroupingInProgress","updateElementVisibility","updateEdges","umlIndex","getTextAnnotationConn","obj_1","initConnectors","activity","subProcess","processes","updateDocks","findObjects","outerBounds","sourcePoint","parent_2","measure","arrange","desiredSize","updateDiagramObject","updateSvgNodes","updateTextElementValue","updateProcesses","moveNode","moveSvgNode","processes_1","processes_2","nodeId","parent","parentElement","appendChild","addTextAnnotation","addAnnotation","getObjectLayer","spliceConnectorEdges","isSource","isInEdge","removeDependentConnector","removeObjectsFromLayer","objIndex","currentObj","removeElement_1","removePort","removeCollection","annotationId","removeCommand","groupAction","checkAndRemoveAnnotations","isPhase","isStackChild","deleteGroup","deleteChild","removeBpmnProcesses","swimLaneNode","grid","updateNodeEdges","currentDrawingObject","parentnode","removeFromAQuad","resetTool","textAnnotationConnectors","k","isstack","container","redoElement","sourceIndex","targetIndex","childNode","updateStackProperty","actualSize","length_1","objects_1","startEditCommad","laneHeader","canvasId","slice","currentParentId","substring","header","hasHeader","rows","cells","startTextEdit","minWidth","attributes","textWrapper","selectedNode","bpmnAnnotation","getTextAnnotationWrapper","ReadOnly","addLabels","getWrapper","maxWidth","textArea","createTextNode","isEmpty","fontSize","center","textAlign","max","getCenterPoint","getMidPoint","fontFamily","toLocaleLowerCase","fontWeight","bold","fontStyle","italic","lineHeight","toString","textDecoration","TextEdit","inputChange","focusOutEdit","updateConnectorfixedUserHandles","fixedUserHandles","fixedUserHandleWrapper","fixedUserHandle","updateAnnotation","intermediatePoints","updateNodeExpand","visibility","updateConnectorAnnotation","annotationWrapper","Interactions","removeChildrenFromLayout","processId","update","canDoOverlap","canEnableRouting","viewPort","viewPortWidth","viewPortHeight","lineDistributionModule","initLineDistribution","organizationalChartModule","updateLayout","layoutAnimateModule","rootNode","mindMapChartModule","root","radialTreeModule","symmetricalLayoutModule","maxIteration","springLength","springFactor","complexHierarchicalTreeModule","nodes_1","getLayoutNodesCollection","preventDiagramUpdate","updatedNodes","updatedNodes_1","PreventIconsUpdate","updateIcon","updateDefaultLayoutIcons","connection","resetConnectorSegments","points","getPoints","resetRoutingSegments","updateQuad","distributeLines","saveDiagram","gridChild","i_2","getDiagramContent","styleSheets","printandExportModule","exportImage","image","exportImages","printImage","printOptions","setStackLimit","applyLimit","currentEntry","clearHistory","getDiagramBounds","exportDiagram","print","addPorts","portCollection","isAddPortInServer","initPort","getDescription","canvas","initPortWrapper","addConstraints","constraintsType","constraintsValue","removeConstraints","addNodeLabels","labels","addConnectorLabels","isAddLabelInServer","annotationCollection","i_3","initAnnotationWrapper","segment","getAnnotationElement","addLanes","addPhases","phase","removelabelExtension","match","element_1","textElement","htmlElement","removeLabels","removePortsExtenion","real","rulerSize","attr","background","backgroundColor","renderHiddenUserHandleTemplateLayer","renderBackgroundLayer","commonStyle","bgLayer","createSvg","backgroundImage","renderGridLayer","svgGridSvg","setAttribute","svgGrid","rect","location","protocol","host","pathname","renderDiagramLayer","diagramLayerDiv","diagramSvg","diagramLayer","transformationLayer","createCanvas","getBoundingClientRect","scrollerSize","scrollerWidth","setViewPortSize","measureElements","renderHTMLLayer","renderPortsExpandLayer","renderNativeLayer","renderAdornerLayer","divElement","svgAdornerSvg","adornerLayer","svgSelector","svgPortsSvg","svgPortsLayer","svgExpandLayer","htmlLayer","htmlLayerDiv","nativeLayerSvg","nativeLayer","svgObj","createElementNS","updateBazorShape","bpmnShape","umlActivityShape","flowShape","basicShape","textContent","isLoad","initData","initLayerObjects","hasLayers","tempTabel","bpmnTable","groups","previousNodeObject","updateNodeObject","changeNodes","addToLayer","initNodes","sourceNode","targetNode","flag","alignedGroups","alignGroup","_m","alignedGroups_1","_o","connectors_1","_p","_q","_r","_s","parents","newList","parentist","isSourceId","isTargetId","findNodeInLane","setZIndex","layerObject_1","hPan","vPan","VerticalOffset","HorizontalOffset","ViewportHeight","ViewportWidth","CurrentZoom","panStatus","PanInProgress","panState","scrollChange","sourceId","updatePanState","Virtualization","adapter","generateData","url","initSource","row","makeData","fields","sourcePointX","sourcePointY","targetPointX","targetPointY","customFields","independentObj","objectZIndex","tabelLength","j_1","defaultLayer","initObjectExtend","a","getDefaults","getNodeDefaults","defaults","initNode","getConnectorDefaults","getConnectedPort","targetPort","outPort","findInOutConnectPorts","inPort","sourceWrapper","getEndNodeWrapper","OutConnect","targetWrapper","InConnect","getConnectorPoints","init","absoluteBounds","updateGroupOffset","scaleObject","size","isWidth","sw","sh","PreventDrag","updateDefaultLayoutIcon","expandIcon","collapseIcon","icon","horizontalAlignment","verticalAlignment","offset","iconWrapper","setOffsetWithRespectToBounds","isUpdateSize","isUpdateGroupToBlazor","node1","PreventScale","EnableGroupAction","diffX","diffY","flip","diagramId","initContainer","portContainer","diagramSettings","inversedAlignment","measureChildren","preventContainer","relativeMode","checkPorts","childCollection","addObject","rowIndex","columnIndex","rowSpan","columnSpan","elementActions","ElementIsGroup","setNodeTemplate","wrapperContent","description","initAnnotations","annotationTemplate","initPorts","initIcons","initfixedUserHandles","obj_2","onLoadImageSize","bind","updateChildPosition","onImageLoad","canExecute","newCommands","commandManager","execute","gesture","C","keyModifiers","Control","V","X","Delete","A","Z","Y","Up","parameter","Right","Down","Left","F2","endEditCommand","Escape","Tab","Enter","initCommandManager","overrideCommands","newCommand","command","edge","updateIconVisibility","updateDiagramContainerVisibility","isInEdges","portId","portEdges","refreshDiagram","layoutInfo","isRootInverse","isProtectedChange","isAllowServerUpdate","Branch","renderDocument","renderNodes","updateCanupdateStyle","canApplyStyle","getZindexPosition","viewId","canIgnoreIndex","isUpdateObject","diagramElementsLayer","centerPoint","updateNode","finalPoint","bezierPoint2","bezierPoint1","helperPoints","findPointOnCurve","pointOne","pointTwo","pointOnCurve","updateGridContainer","objectArray","nodeArray","objectArray_1","refreshSvgDiagramLayer","view_1","renderBasicElement","basicElements","prevRotateAngle","renderElement","refreshElements","isDestroyed","clearCanvas","getContext","setTransform","renderDiagramElements","transformOrigin","setTimeout","updatePortVisibility","portVisibility","inverse","portElement","changed","Hover","Connect","virtualizeElements","removeVirtualObjects","clearIntervalVal","canMeasure","updateVirtualObjects","tCollection","updateVirtualization","renderer","fromExport","isOverView","pageBounds","getPageBounds","difX","difY","top_1","oldCollectionObjects","renderNode","transformValue","verticalValue","vScrollbarMoved","hScrollbarMoved","status_1","isSvgMode","bridgingModule","pathSegment","getSegmentElement","contentWidth","contentHeight","ctx","clearRect","setScrollOffset","scrollLeft","scrollTop","setOffset","w","h","adornerSVG","gridLayer","transformLayers","removePageBreaks","line","childNodes","length_2","backgroundLayer","renderSvgBackGroundImage","stroke","strokeWidth","color","opacity","pivotX","pivotY","dashArray","drawRect","showPageBreaks","getPageBreak","drawLine","class","startPoint","endPoint","setOverview","overview","updateThumbConstraints","selectorModel","canInitialize","hideRotate","hideResize","thumbConstraints","thumbsConstraints","collapsed","Rotate","ResizeSouthEast","ResizeNorthWest","ResizeEast","ResizeWest","ResizeNorth","ResizeSouth","ResizeNorthEast","ResizeSouthWest","ConnectorSource","ConnectorTarget","isSwimLane","isProtectedOnChangeValue","selectorConstraints","rendererActions","innertemplate","div","DrawSelectorBorder","clearSelectorLayer","hasSelection","selectorElement","diagramUserHandlelayer","renderSelectorForAnnotation","HideThumbs","renderResizeHandle","renderEndPointHandle","connectorEditingToolModule","renderUserHandler","userHandle","display","canUpdate","canRender","isRotate","includes","isSelect","selectorEle","canHideResizers","UserHandle","userHandletemplate","stackPanel","PreventRenderSelector","drawSelectionRectangle","renderHighlighter","adornerSvg","clearHighlighter","highlighter","getNodesConnectors","selectionRect","i_4","templates","symbolBorder","getPortContainer","shadow","parent_3","containsMargin","right","bottom","endEdit","changedvalues","eventObj","annotation_1","deleteNode","changesAnnotation","oldnodes","newnodes","clonedObject","phaseHeader","textEdit","getBlazorTextEditArgs","isBpmnTextAnnotation","updateBlazorDiagramEvents","updateTextAnnotationContent","isAddTextNode","getIndex","isHeader","connectorId","textNode","bridgeDirection","isAction","removeNode","childernCollection","groupElement","beforeElement","childElement","insertBefore","tempNode_1","updateObject","oldNode","oldConnector","actualSourcePoint","actualTargetPoint","nodePropertyChangeExtend","updateShadow","Select","swimLaneNodePropertyChange","actualShape","orientation_1","oldShape","oldObjects","newObjects","count","indexValue","laneIndex","newLane","childNodeIndex","node_1","phaseSize","updateColumnWidth","updateRowHeight","previousPhase","removeRow","removeColumn","rowDef","addRow","colDef","addColumn","id_1","headerNode","oldSelectConstraints","newSelectConstraints","phaseNode","l","oldNodeObject","node_2","existingBounds","existingInnerBounds","offsetX_1","updateFlipOffset","offsetY_1","minHeight","maxHeight","updatePorts","flipMode","updateMargin","updateBPMN","updateUMLActivity","changedObject","actualPort","updatePort","actualAnnotation","updateSize","j_2","actualfixedUserHandle","updateNodefixedUserHandle","updateTooltip","updateTextAnnotationProp","checkSelectedItem","refreshTextElement","column","columnDefinitions","equals","connectorSegmentChange","parent_4","updateGroupSize","PreventZIndexOnDragging","renderVirtualRegion","i_5","portWrapper","hasChildren","flipOffset","sizeChanged","innerFinalNode","outerFinalNode","connectorProprtyChangeExtend","updateBPMNConnector","disableBridging","targetPadding","sourcePadding","oldSource","oldTarget","refreshConnectorSegments","cornerRadius","updateAnnotations","updatefixedUserHandle","triggerPropertyChange","item","portEdge","getpropertyChangeArgs","isInconnect","pts","updateNodeProperty","selItems","Visible","updateConnectorfixedUserHandle","canUpdateSize","isMeasure","displacement","handleStrokeColor","handleStrokeWidth","updatefixedUserHandleContent","segmentAngle","hyperlink","updateAnnotationContent","fixedUserHandleAnnotation","updateConnectorfixedUserHandleWrapper","getfixedUserHandle","updateAnnotationWrapper","updatefixedUserHandleWrapper","strokeDashArray","pathdata","canMeasurePath","pathData","String","iconContainer","iconRect","iconShape","nativeContent","showTipPointer","modified","updateBounds","enable","getProtectPropertyChangeValue","nodeShadow","changedShadow","distance","changes","removePreviewChildren","preview","z","previewChildId","previewIndex_1","previewIndex","selectDragedNode","selectedSymbol","event","entryTable","selectedSymbols","over","dragDataHelper","dragData","helper","isHorizontal","focus","getMousePosition","paletteId","getAttribute","nodeDragSize","nodePreviewSize","paletteDragSize","draggedElement","ej2_instances","dragItem","dragEnter","newNode","newConnector","newObjBounds","toBounds","diffx","diffy","sourceElement","childtable","dragSize","previewSize","palettePreview","addInfo","tempTable","getBlazorDragEventArgs","swimLaneObj","laneObj","child1","child2","findChild","touches","drop","orientation_2","draggableElement","getDropEventArgs","removeChildInNodes","addSwimLaneObject","addChildNodes","dropBPMNchild","droppedElement","out","evt","args_1","getBlazorDragLeaveEventArgs","dragLeave","selectedSymbols_1","previousSelectedObject","targetObject","updateNativeNodeIndex","moveObjectsUp","insertData","crudOperation","getNewUpdateNodes","updateData","removeData","getDeletedNodes","crud","getNodesCollection","parameterMap","raiseAjaxPost","processCrudCollection","nodeCrudAction","connectorCrudAction","mappingObj","name_1","getHiddenItems","hiddenItems","ensureItems","newItem"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable prefer-spread */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-returns */\nimport { Component, Property, Complex, Collection, EventHandler, L10n, Droppable, remove, Ajax, isBlazor, blazorTemplates } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Browser, Event } from '@syncfusion/ej2-base';\nimport { updateBlazorTemplate, resetBlazorTemplate } from '@syncfusion/ej2-base';\nimport { CanvasRenderer } from './rendering/canvas-renderer';\nimport { SvgRenderer } from './rendering/svg-renderer';\nimport { DiagramRenderer } from './rendering/renderer';\nimport { PageSettings, ScrollSettings } from './diagram/page-settings';\nimport { ServiceLocator } from './objects/service';\nimport { Container } from './core/containers/container';\nimport { Node, BpmnShape } from './objects/node';\nimport { cloneBlazorObject, cloneSelectedObjects, findObjectIndex, selectionHasConnector } from './utility/diagram-util';\nimport { checkBrowserInfo } from './utility/diagram-util';\nimport { updateDefaultValues, getCollectionChangeEventArguements } from './utility/diagram-util';\nimport { flipConnector, updatePortEdges, alignElement, setConnectorDefaults, getPreviewSize } from './utility/diagram-util';\nimport { Connector } from './objects/connector';\nimport { SnapSettings } from './diagram/grid-lines';\nimport { RulerSettings } from './diagram/ruler-settings';\nimport { removeRulerElements, updateRuler, getRulerSize } from './ruler/ruler';\nimport { renderRuler, renderOverlapElement } from './ruler/ruler';\nimport { Size } from './primitives/size';\nimport { Keys, KeyModifiers, DiagramTools, AnnotationConstraints, NodeConstraints, ScrollActions } from './enum/enum';\nimport { RendererAction } from './enum/enum';\nimport { BlazorAction } from './enum/enum';\nimport { DiagramConstraints, SelectorConstraints, PortVisibility, DiagramEvent } from './enum/enum';\nimport { DiagramAction, ThumbsConstraints } from './enum/enum';\nimport { RealAction, ElementAction, PortConstraints } from './enum/enum';\nimport { PathElement } from './core/elements/path-element';\nimport { TextElement } from './core/elements/text-element';\nimport { updateStyle, removeItem, updateConnector, updateShape, setUMLActivityDefaults, findNodeByName } from './utility/diagram-util';\nimport { setSwimLaneDefaults } from './utility/diagram-util';\nimport { checkPortRestriction, serialize, deserialize, updateHyperlink, getObjectType, removeGradient, getChild } from './utility/diagram-util';\nimport { Rect } from './primitives/rect';\nimport { getPortShape } from './objects/dictionary/common';\nimport { ShapeAnnotation, PathAnnotation } from './objects/annotation';\nimport { Canvas } from './core/containers/canvas';\nimport { GridPanel, ColumnDefinition } from './core/containers/grid';\nimport { DataSource } from './diagram/data-source';\nimport { Layout } from './layout/layout-base';\nimport { Selector, Text } from './objects/node';\nimport { DiagramEventHandler } from './interaction/event-handlers';\nimport { CommandHandler } from './interaction/command-manager';\nimport { DiagramScroller } from './interaction/scroller';\nimport { isSelected } from './interaction/actions';\nimport { SpatialSearch } from './interaction/spatial-search/spatial-search';\nimport { setAttributeSvg, setAttributeHtml, measureHtmlText, removeElement, createMeasureElements, getDomIndex } from './utility/dom-util';\nimport { getDiagramElement, getScrollerWidth, getHTMLLayer, createUserHandleTemplates } from './utility/dom-util';\nimport { getBackgroundLayer, createHtmlElement, createSvgElement, getNativeLayerSvg, getUserHandleLayer } from './utility/dom-util';\nimport { getPortLayerSvg, getDiagramLayerSvg, applyStyleAgainstCsp } from './utility/dom-util';\nimport { getAdornerLayerSvg, getSelectorElement, getGridLayerSvg, getBackgroundLayerSvg } from './utility/dom-util';\nimport { CommandManager, ContextMenuSettings } from './diagram/keyboard-commands';\nimport { canDelete, canInConnect, canOutConnect, canRotate, canVitualize, canDrawThumbs } from './utility/constraints-util';\nimport { canPortInConnect, canPortOutConnect } from './utility/constraints-util';\nimport { canResize, canSingleSelect, canZoomPan, canZoomTextEdit, canMultiSelect } from './utility/constraints-util';\nimport { canDragSourceEnd, canDragTargetEnd, canDragSegmentThumb, enableReadOnly, canMove } from './utility/constraints-util';\nimport { findAnnotation, arrangeChild, getInOutConnectPorts, removeChildNodes, canMeasureDecoratorPath } from './utility/diagram-util';\nimport { randomId, cloneObject, extendObject, getFunction, getBounds } from './utility/base-util';\nimport { DiagramTooltip, initTooltip } from './objects/tooltip';\nimport { PointPort } from './objects/port';\nimport { canShadow } from './utility/constraints-util';\nimport { Layer } from './diagram/layer';\nimport { DiagramNativeElement } from './core/elements/native-element';\nimport { DiagramHtmlElement } from './core/elements/html-element';\nimport { canAllowDrop } from './utility/constraints-util';\nimport { checkParentAsContainer, addChildToContainer, updateLaneBoundsAfterAddChild } from './interaction/container-interaction';\nimport { getConnectors, updateConnectorsProperties, phaseDefine } from './utility/swim-lane-util';\nimport { swimLaneMeasureAndArrange } from './utility/swim-lane-util';\nimport { arrangeChildNodesInSwimLane, updateHeaderMaxWidth, updatePhaseMaxWidth } from './utility/swim-lane-util';\nimport { addLane, addPhase } from './utility/swim-lane-util';\nimport { SerializationSettings } from './diagram/serialization-settings';\nimport { removeSwimLane, removeLane, removePhase, removeLaneChildNode } from './utility/swim-lane-util';\nimport { RowDefinition } from './core/containers/grid';\nimport { CustomCursorAction } from './diagram/custom-cursor';\nimport { DiagramSettings } from '../diagram/diagram-settings';\nimport { StackPanel } from './core/containers/stack-panel';\nimport { ConnectorFixedUserHandle, NodeFixedUserHandle } from './objects/fixed-user-handle';\n/**\n * Represents the Diagram control\n * ```html\n * <div id='diagram'/>\n * ```\n * ```typescript\n * let diagram: Diagram = new Diagram({\n * width:'1000px', height:'500px' });\n * diagram.appendTo('#diagram');\n * ```\n */\nvar Diagram = /** @class */ (function (_super) {\n    __extends(Diagram, _super);\n    /**\n     * Constructor for creating the widget\n     */\n    function Diagram(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        /** @private */\n        _this.version = 17.1;\n        /** @private */\n        _this.checkMenu = false;\n        /** @private */\n        _this.isServerUpdate = false;\n        /** @private */\n        _this.oldNodeObjects = [];\n        /** @private */\n        _this.oldDiagramObject = {};\n        /** @private */\n        _this.oldConnectorObjects = [];\n        /** @private */\n        _this.canEnableBlazorObject = false;\n        /** @private */\n        _this.connectorTable = {};\n        /** @private */\n        _this.groupTable = {};\n        /** @private */\n        _this.scrollActions = ScrollActions.None;\n        /** @private */\n        _this.blazorActions = BlazorAction.Default;\n        /** @private */\n        _this.activeLabel = { id: '', parentId: '', isGroup: false, text: undefined };\n        /** @private */\n        _this.textEditing = false;\n        /** @private */\n        _this.isTriggerEvent = false;\n        /** @private */\n        _this.preventNodesUpdate = false;\n        /** @private */\n        _this.preventConnectorsUpdate = false;\n        /** @private */\n        _this.callBlazorModel = true;\n        /** @private */\n        _this.selectionConnectorsList = [];\n        /** @private */\n        _this.deleteVirtualObject = false;\n        _this.canLayout = true;\n        /** @private */\n        _this.swimlaneChildTable = {};\n        /** @private */\n        _this.swimlaneZIndexTable = {};\n        _this.changedConnectorCollection = [];\n        _this.changedNodesCollection = [];\n        _this.previousNodeCollection = [];\n        _this.previousConnectorCollection = [];\n        _this.crudDeleteNodes = [];\n        // Group update to server when BlazorAction is isGroupAction;\n        _this.blazorAddorRemoveCollection = [];\n        _this.blazorRemoveIndexCollection = [];\n        _this.diagramid = 88123;\n        /** @private */\n        _this.selectedObject = { helperObject: undefined, actualObject: undefined };\n        _this.renderTimer = null;\n        var child;\n        var node;\n        var blazor = 'Blazor';\n        var canCloneObject = isBlazor() && window && window[blazor] && !_this.dataSourceSettings.dataSource;\n        _this.ignoreCollectionWatch = true;\n        for (var i = 0; options && options.nodes && i < options.nodes.length; i++) {\n            child = options.nodes[i];\n            node = _this.nodes[i];\n            if (child.children && child.children.length > 0) {\n                if (!child.style || !child.style.fill) {\n                    node.style.fill = 'transparent';\n                }\n                if (!child.style || !child.style.strokeColor) {\n                    node.style.strokeColor = 'transparent';\n                }\n            }\n            if (child.shape && child.shape.type === 'UmlActivity') {\n                setUMLActivityDefaults(child, node);\n            }\n            if (child.shape && child.shape.type === 'SwimLane') {\n                setSwimLaneDefaults(child, node);\n            }\n            if (canCloneObject) {\n                _this.previousNodeCollection.push(cloneObject(node, undefined, undefined, true));\n            }\n            if (_this.nodeDefaults) {\n                updateDefaultValues(node, child, _this.nodeDefaults);\n            }\n            _this.updateAnnotationText(node.annotations);\n        }\n        if (options && options.connectors) {\n            for (var i = 0; options && options.connectors && i < options.connectors.length; i++) {\n                child = options.connectors[i];\n                node = _this.connectors[i];\n                if (canCloneObject) {\n                    _this.previousConnectorCollection.push(cloneObject(node, undefined, undefined, true));\n                }\n                if (_this.connectorDefaults) {\n                    updateDefaultValues(node, child, _this.connectorDefaults);\n                }\n                _this.updateAnnotationText(node.annotations);\n            }\n        }\n        for (var i = 0; options && options.connectors && i < options.connectors.length; i++) {\n            var defaultConnector = options.connectors[i];\n            var connector = _this.connectors[i];\n            if (defaultConnector.shape && defaultConnector.shape.type !== 'None') {\n                setConnectorDefaults(defaultConnector, connector);\n            }\n            if (isBlazor()) {\n                var defaultPropChanges = cloneObject(_this.bulkChanges);\n                _this.enableServerDataBinding(true);\n                _this.protectPropertyChange(true);\n                var keys = Object.keys(defaultPropChanges);\n                for (var i_1 = 0; i_1 < keys.length; i_1++) {\n                    var key = keys[i_1];\n                    var split = key.split('-');\n                    if (split && split[0]) {\n                        if (split[0] === 'nodes') {\n                            defaultPropChanges[key].sfIndex = Number(split[1]);\n                            _this.changedNodesCollection.push(defaultPropChanges[key]);\n                        }\n                        if (split[0] === 'connectors') {\n                            defaultPropChanges[key].sfIndex = Number(split[1]);\n                            _this.changedConnectorCollection.push(defaultPropChanges[key]);\n                        }\n                    }\n                }\n            }\n        }\n        return _this;\n    }\n    Diagram.prototype.updateAnnotationText = function (annotations) {\n        if (isBlazor() && annotations.length > 0) {\n            for (var i = 0; annotations && i < annotations.length; i++) {\n                var label = annotations[i];\n                label.content = label.content.split('\\\\n').join('\\n');\n            }\n        }\n    };\n    Diagram.prototype.callFromServer = function (arg) {\n        var methodName = 'methodName';\n        var mId = 'id';\n        if (arg[methodName] === 'getParentID') {\n            var id = arg[mId];\n            return this.nameTable[id].parentId;\n        }\n        else if (arg[methodName] === 'getEdges') {\n            var outEdge = 'outEdge';\n            var isOutEdge = arg[outEdge];\n            var id = arg[mId];\n            if (isOutEdge) {\n                return this.nameTable[id].outEdges;\n            }\n            else {\n                return this.nameTable[id].inEdges;\n            }\n        }\n        else if (arg[methodName] === 'updateDiagramObjects') {\n            var obj = 'obj';\n            var isAdding = 'IsAdding';\n            var args = arg[obj];\n            this.isServerUpdate = true;\n            if (arg[isAdding]) {\n                var add = 'add';\n                this[add].apply(this, args);\n            }\n            else {\n                var remove_1 = 'remove';\n                this[remove_1].apply(this, args);\n            }\n            this.isServerUpdate = false;\n        }\n        else if (arg[methodName] === 'invokeLoadDiagramMethod') {\n            var data = 'data';\n            this.loadDiagram(arg[data]);\n        }\n    };\n    Diagram.prototype.clearCollection = function (isConnector) {\n        var collection = [];\n        var obj;\n        for (var _i = 0, _a = Object.keys(this.nameTable); _i < _a.length; _i++) {\n            var key = _a[_i];\n            obj = this.nameTable[key];\n            if (obj && ((isConnector && obj instanceof Connector) || (!isConnector && obj instanceof Node))) {\n                collection.push(obj);\n            }\n        }\n        this.clearObjects(collection);\n    };\n    /**\n     * Updates the diagram control when the objects are changed\n     *\n     * @param {DiagramModel} newProp - Lists the new values of the changed properties\n     * @param {DiagramModel} oldProp - Lists the old values of the changed properties\n     */\n    /* tslint:disable */\n    Diagram.prototype.onPropertyChanged = function (newProp, oldProp) {\n        // Model Changed\n        var newValue;\n        var oldValue;\n        var isPropertyChanged = true;\n        var refreshLayout = false;\n        var refereshColelction = false;\n        if (this.diagramActions & DiagramAction.Render) {\n            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                switch (prop) {\n                    case 'width':\n                    case 'height':\n                        this.element.style.width = this.getSizeValue(this.width);\n                        this.element.style.height = this.getSizeValue(this.height);\n                        this.eventHandler.updateViewPortSize(this.element);\n                        for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n                            var view = _c[_b];\n                            var temp = this.views[view];\n                            if (!(temp instanceof Diagram)) {\n                                temp.updateView(temp);\n                            }\n                        }\n                        break;\n                    case 'nodes':\n                        if (newProp.nodes.length > 0 && oldProp.nodes.length === 0) {\n                            this.clearCollection();\n                            refereshColelction = true;\n                        }\n                        else {\n                            for (var _d = 0, _e = Object.keys(newProp.nodes); _d < _e.length; _d++) {\n                                var key = _e[_d];\n                                var index = Number(key);\n                                var actualObject = this.nodes[index];\n                                var changedProp = newProp.nodes[index];\n                                if (newProp.nodes[index].style && newProp.nodes[index].style.gradient) {\n                                    this.updateGradient(newProp.nodes[index], oldProp.nodes[index], this.nodes[index]);\n                                    this.nodes[index].oldGradientValue = cloneObject(newProp.nodes[index].style.gradient);\n                                }\n                                refreshLayout = refreshLayout || changedProp.excludeFromLayout !== undefined;\n                                this.nodePropertyChange(actualObject, oldProp.nodes[index], changedProp, undefined, true, true);\n                                var args = {\n                                    element: cloneBlazorObject(actualObject), cause: this.diagramActions,\n                                    oldValue: cloneBlazorObject(oldProp.nodes[index]),\n                                    newValue: cloneBlazorObject(newProp.nodes[index])\n                                };\n                                if (isBlazor()) {\n                                    args.element = { node: cloneBlazorObject(actualObject) };\n                                    args.oldValue = { node: cloneBlazorObject(oldValue) };\n                                    args.newValue = { node: cloneBlazorObject(newValue) };\n                                }\n                                this.triggerEvent(DiagramEvent.propertyChange, args);\n                                if (isPropertyChanged) {\n                                    isPropertyChanged = false;\n                                }\n                            }\n                            if (this.mode === 'Canvas') {\n                                this.refreshDiagramLayer();\n                            }\n                        }\n                        break;\n                    case 'connectors':\n                        // eslint-disable-next-line no-case-declarations\n                        var oldObject = void 0;\n                        if (newProp.connectors.length > 0 && oldProp.connectors.length === 0) {\n                            this.clearCollection(true);\n                            refereshColelction = true;\n                        }\n                        else {\n                            for (var _f = 0, _g = Object.keys(newProp.connectors); _f < _g.length; _f++) {\n                                var key = _g[_f];\n                                var index = Number(key);\n                                var actualObject = this.connectors[index];\n                                var changedProp = newProp.connectors[index];\n                                if (changedProp && (changedProp.sourceDecorator || changedProp.targetDecorator)) {\n                                    this.diagramActions |= DiagramAction.DecoratorPropertyChange;\n                                }\n                                this.connectorPropertyChange(actualObject, oldProp.connectors[index], changedProp, true, true);\n                                if (changedProp && (changedProp.sourceDecorator || changedProp.targetDecorator)) {\n                                    this.diagramActions = this.diagramActions & ~DiagramAction.DecoratorPropertyChange;\n                                }\n                                var args = {\n                                    element: cloneBlazorObject(actualObject), cause: this.diagramActions,\n                                    oldValue: cloneBlazorObject(oldProp.connectors[index]),\n                                    newValue: cloneBlazorObject(newProp.connectors[index])\n                                };\n                                if (isBlazor()) {\n                                    args.element = { connector: cloneBlazorObject(actualObject) };\n                                    args.oldValue = { connector: cloneBlazorObject(oldValue) };\n                                    args.newValue = { connector: cloneBlazorObject(newValue) };\n                                }\n                                this.triggerEvent(DiagramEvent.propertyChange, args);\n                                if (actualObject && actualObject.parentId && this.nameTable[actualObject.parentId].shape.type === 'UmlClassifier') {\n                                    this.updateConnectorEdges(this.nameTable[actualObject.parentId] || actualObject);\n                                }\n                                if (isPropertyChanged) {\n                                    isPropertyChanged = false;\n                                }\n                            }\n                            this.updateBridging();\n                            if (this.mode === 'Canvas') {\n                                this.refreshDiagramLayer();\n                            }\n                        }\n                        break;\n                    case 'bridgeDirection':\n                        this.updateBridging();\n                        if (this.mode === 'Canvas') {\n                            this.refreshDiagramLayer();\n                        }\n                        break;\n                    case 'backgroundColor':\n                        this.intOffPageBackground();\n                        break;\n                    case 'pageSettings':\n                        this.validatePageSize();\n                        this.updatePage();\n                        break;\n                    case 'selectedItems':\n                        if (newProp.selectedItems.userHandles && this.selectedItems.wrapper && this.selectedItems.userHandles) {\n                            if (this.selectedItems.userHandles.length > 0) {\n                                this.renderSelector(true);\n                                break;\n                            }\n                        }\n                        if (newProp.selectedItems.constraints) {\n                            this.renderSelector(true);\n                            break;\n                        }\n                        break;\n                    case 'snapSettings':\n                        this.updateSnapSettings(newProp);\n                        break;\n                    case 'commandManager':\n                        this.initCommands();\n                        break;\n                    case 'layout':\n                        refreshLayout = true;\n                        break;\n                    case 'dataSourceSettings':\n                        this.clear();\n                        this.initObjects();\n                        if (this.layout.type === 'None') {\n                            refereshColelction = true;\n                        }\n                        else {\n                            refreshLayout = true;\n                        }\n                        break;\n                    case 'tooltip':\n                        initTooltip(this);\n                        break;\n                    case 'rulerSettings':\n                        this.updateRulerSettings(newProp);\n                        break;\n                    case 'layers':\n                        this.updateLayer(newProp);\n                        break;\n                    case 'scrollSettings':\n                        this.scrollActions |= ScrollActions.PropertyChange;\n                        this.updateScrollSettings(newProp);\n                        this.scrollActions &= ~ScrollActions.PropertyChange;\n                        break;\n                    case 'locale':\n                        if (newProp.locale !== oldProp.locale) {\n                            this.realActions |= RealAction.PreventDataInit;\n                            _super.prototype.refresh.call(this);\n                            this.realActions &= ~RealAction.PreventDataInit;\n                        }\n                        break;\n                    case 'contextMenuSettings':\n                        if (newProp.contextMenuSettings.showCustomMenuOnly !== undefined) {\n                            this.contextMenuSettings.showCustomMenuOnly = newProp.contextMenuSettings.showCustomMenuOnly;\n                        }\n                        if (newProp.contextMenuSettings.show !== undefined) {\n                            this.contextMenuSettings.show = newProp.contextMenuSettings.show;\n                        }\n                        if (newProp.contextMenuSettings.items) {\n                            var items = newProp.contextMenuSettings.items;\n                            for (var _h = 0, _j = Object.keys(items); _h < _j.length; _h++) {\n                                var key = _j[_h];\n                                var index = Number(key);\n                                this.contextMenuSettings.items[index] = items[index];\n                            }\n                            if (this.contextMenuModule) {\n                                this.contextMenuModule.refreshItems();\n                            }\n                        }\n                        break;\n                    case 'serializationSettings':\n                        if (newProp.serializationSettings.preventDefaults !== undefined) {\n                            this.serializationSettings.preventDefaults = newProp.serializationSettings.preventDefaults;\n                        }\n                        break;\n                }\n            }\n            if (refreshLayout && !refereshColelction) {\n                if (oldProp.layout && oldProp.layout.connectionPointOrigin === 'DifferentPoint' && newProp.layout.connectionPointOrigin === 'SamePoint'\n                    || (oldProp.layout && newProp.layout && !newProp.layout.enableRouting && oldProp.layout.enableRouting)) {\n                    for (var i = 0; i < this.nodes.length; i++) {\n                        var node = this.nodes[i];\n                        if ((node.ports && node.ports.length > 0)) {\n                            var ports = [];\n                            for (var j = node.ports.length - 1; j >= 0; j--) {\n                                if (node.ports[j].id.split('_')[1] === 'LineDistribution') {\n                                    ports.push(node.ports[j]);\n                                }\n                            }\n                            this.removePorts(node, ports);\n                        }\n                    }\n                    for (var j = 0; j < this.connectors.length; j++) {\n                        var connector = this.connectors[j];\n                        var sourcePortid = connector.sourcePortID;\n                        var targetPortId = connector.targetPortID;\n                        //const oldSegment: OrthogonalSegmentModel = (connector.segments as OrthogonalSegmentModel);\n                        connector.sourcePortID = '';\n                        connector.targetPortID = '';\n                        connector.sourcePortWrapper = undefined;\n                        connector.targetPortWrapper = undefined;\n                        connector.segments = [];\n                        this.connectorPropertyChange(connector, {\n                            sourcePortID: sourcePortid, targetPortID: targetPortId\n                        }, { sourcePortID: '', targetPortID: '' });\n                    }\n                }\n                this.doLayout();\n                this.renderReactTemplates();\n            }\n            if (isPropertyChanged && this.propertyChange) {\n                var args = {\n                    element: cloneBlazorObject(this), cause: this.diagramActions,\n                    oldValue: cloneBlazorObject(oldProp), newValue: cloneBlazorObject(newProp)\n                };\n                if (isBlazor()) {\n                    args.element = { diagram: cloneBlazorObject(this) };\n                    args.oldValue = { diagram: cloneBlazorObject(oldValue) };\n                    args.newValue = { diagram: cloneBlazorObject(newValue) };\n                }\n                this.triggerEvent(DiagramEvent.propertyChange, args);\n            }\n            if (!refereshColelction && (this.canLogChange()) && (this.modelChanged(newProp, oldProp))) {\n                var entry = { type: 'PropertyChanged', undoObject: oldProp, redoObject: newProp, category: 'Internal' };\n                if (this.historyManager) {\n                    this.addHistoryEntry(entry);\n                }\n            }\n            this.resetDiagramActions();\n            if (refereshColelction) {\n                this.initObjects(true);\n                this.refreshDiagramLayer();\n                if (refreshLayout) {\n                    this.doLayout();\n                }\n            }\n            var scrollAlone = ((Object.keys(newProp).length === 1) && newProp.scrollSettings !== undefined);\n            if (!refereshColelction) {\n                for (var _k = 0, _l = this.views; _k < _l.length; _k++) {\n                    var temp = _l[_k];\n                    var view = this.views[temp];\n                    if (!(view instanceof Diagram)) {\n                        if (newProp.scrollSettings && newProp.scrollSettings.currentZoom !== oldProp.scrollSettings.currentZoom) {\n                            view.updateHtmlLayer(view);\n                        }\n                        if (!scrollAlone) {\n                            this.refreshCanvasDiagramLayer(view);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /* tslint:enable */\n    Diagram.prototype.updateSnapSettings = function (newProp) {\n        if (newProp.snapSettings.constraints !== undefined || newProp.snapSettings.horizontalGridlines ||\n            newProp.snapSettings.verticalGridlines || newProp.snapSettings.gridType) {\n            this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n        }\n    };\n    // This private method has been specially provided to update only the node old gradient value in oldProperty.\n    // This issue belong to core team but we fixed in our end.\n    // https://syncfusion.atlassian.net/browse/EJ2-49232\n    Diagram.prototype.updateGradient = function (newProp, oldProp, nodeObj) {\n        if (nodeObj.oldGradientValue) {\n            var linearNode = nodeObj;\n            var radialNode = nodeObj;\n            var linearProp = oldProp.style.gradient;\n            var radialProp = oldProp.style.gradient;\n            for (var _i = 0, _a = Object.keys(newProp.style.gradient); _i < _a.length; _i++) {\n                var key = _a[_i];\n                switch (key) {\n                    case 'type':\n                        if (linearNode.type) {\n                            linearProp.type = linearNode.type;\n                        }\n                        break;\n                    case 'x1':\n                        if (linearNode.x1) {\n                            linearProp.x1 = linearNode.x1;\n                        }\n                        break;\n                    case 'x2':\n                        if (linearNode.x2) {\n                            linearProp.x2 = linearNode.x2;\n                        }\n                        break;\n                    case 'y1':\n                        if (linearNode.y1) {\n                            linearProp.y1 = linearNode.y1;\n                        }\n                        break;\n                    case 'y2':\n                        if (linearNode.y2) {\n                            linearProp.y2 = linearNode.y2;\n                        }\n                        break;\n                    case 'cx':\n                        if (radialNode.cx) {\n                            radialProp.cx = radialNode.cx;\n                        }\n                        break;\n                    case 'cy':\n                        if (radialNode.cy) {\n                            radialProp.cy = radialNode.cy;\n                        }\n                        break;\n                    case 'fx':\n                        if (radialNode.fx) {\n                            radialProp.fx = radialNode.fx;\n                        }\n                        break;\n                    case 'fy':\n                        if (radialNode.fy) {\n                            radialProp.fy = radialNode.fy;\n                        }\n                        break;\n                    case 'r':\n                        if (radialNode.r) {\n                            radialProp.r = radialNode.r;\n                        }\n                        break;\n                    case 'stops':\n                        if (nodeObj.oldGradientValue.stops) {\n                            var stops = (Object.values(cloneObject(nodeObj.oldGradientValue.stops)));\n                            stops.pop();\n                            oldProp.style.gradient.stops = stops;\n                        }\n                        break;\n                }\n            }\n        }\n    };\n    Diagram.prototype.updateRulerSettings = function (newProp) {\n        if (newProp.rulerSettings.dynamicGrid !== undefined) {\n            this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n        }\n        if (newProp.rulerSettings.showRulers !== undefined) {\n            this.intOffPageBackground();\n            this.scroller.setSize();\n            this.renderRulers();\n        }\n        else if (newProp.rulerSettings.horizontalRuler !== undefined ||\n            newProp.rulerSettings.verticalRuler !== undefined) {\n            if (newProp.rulerSettings.horizontalRuler.thickness !== undefined ||\n                newProp.rulerSettings.verticalRuler.thickness !== undefined) {\n                removeRulerElements(this);\n                this.intOffPageBackground();\n                this.scroller.setSize();\n                this.renderRulers();\n            }\n            else {\n                updateRuler(this);\n            }\n        }\n        this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string}\n     */\n    Diagram.prototype.getPersistData = function () {\n        var keyEntity = ['loaded'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * Initialize nodes, connectors and renderer\n     */\n    Diagram.prototype.preRender = function () {\n        this.initializePrivateVariables();\n        this.isProtectedOnChange = true;\n        this.serviceLocator = new ServiceLocator;\n        this.initializeServices();\n        this.setCulture();\n        var measureWindowElement = 'measureElement';\n        if (window[measureWindowElement]) {\n            window[measureWindowElement] = null;\n        }\n        this.initDiagram();\n        this.initViews();\n        this.unWireEvents();\n        this.wireEvents();\n        this.element.classList.add('e-diagram');\n    };\n    Diagram.prototype.initializePrivateVariables = function () {\n        if (this.element.id === '') {\n            var collection = document.getElementsByClassName('e-diagram').length;\n            this.element.id = 'diagram_' + this.diagramid + '_' + collection;\n        }\n        this.defaultLocale = {\n            Copy: 'Copy',\n            Cut: 'Cut',\n            Paste: 'Paste',\n            Undo: 'Undo',\n            Redo: 'Redo',\n            SelectAll: 'Select All',\n            Grouping: 'Grouping',\n            Group: 'Group',\n            UnGroup: 'Un Group',\n            Order: 'Order',\n            BringToFront: 'Bring To Front',\n            MoveForward: 'Move Forward',\n            SendToBack: 'Send To Back',\n            SendBackward: 'Send Backward'\n        };\n        this.layerZIndex = -1;\n        this.layerZIndexTable = {};\n        this.nameTable = {};\n        this.pathTable = {};\n        this.groupTable = {};\n        this.commands = {};\n        if (!this.isLoading) {\n            this.views = [];\n        }\n        this.commandHandler = new CommandHandler(this);\n        this.eventHandler = new DiagramEventHandler(this, this.commandHandler);\n        this.spatialSearch = new SpatialSearch(this.nameTable);\n        this.scroller = new DiagramScroller(this);\n    };\n    Diagram.prototype.initializeServices = function () {\n        this.serviceLocator.register('localization', this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale));\n    };\n    /**\n     * Method to set culture for chart\n     */\n    Diagram.prototype.setCulture = function () {\n        this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);\n    };\n    /* tslint:disable */\n    /**\n     * Renders the diagram control with nodes and connectors\n     */\n    Diagram.prototype.render = function () {\n        if (this.refreshing && this.dataSourceSettings.dataSource && !this.isLoading) {\n            this.nodes = [];\n            this.connectors = [];\n        }\n        this.ignoreCollectionWatch = true;\n        var domTable = 'domTable';\n        window[domTable] = {};\n        var collapsedNode = [];\n        if (isBlazor()) {\n            var changedNodes = [];\n            var changedConnectors = [];\n            for (var i = 0; i < this.changedNodesCollection.length; i++) {\n                changedNodes.push(this.commandHandler.deepDiffer.removeEmptyValues(this.changedNodesCollection[i]));\n            }\n            for (var i = 0; i < this.changedConnectorCollection.length; i++) {\n                changedConnectors.push(this.commandHandler.deepDiffer.removeEmptyValues(this.changedConnectorCollection[i]));\n            }\n            var blazorInterop = 'sfBlazor';\n            var blazor = 'Blazor';\n            var diagramObject = { nodes: changedNodes, connectors: changedConnectors };\n            if (window && window[blazor] && !this.dataSourceSettings.dataSource\n                && (changedNodes.length > 0 || changedConnectors.length > 0)) {\n                var obj = { 'methodName': 'UpdateBlazorProperties', 'diagramobj': diagramObject };\n                window[blazorInterop].updateBlazorProperties(obj, this);\n            }\n        }\n        if (this.dataSourceSettings.crudAction.read) {\n            this.renderInitialCrud();\n        }\n        this.initHistory();\n        this.diagramRenderer = new DiagramRenderer(this.element.id, new SvgRenderer(), this.mode === 'SVG');\n        this.initLayers();\n        this.initializeDiagramLayers();\n        this.diagramRenderer.setLayers();\n        this.initObjects(true);\n        var isLayout = false;\n        if (isBlazor() && !this.dataSourceSettings.dataSource && this.layout.type !== 'None') {\n            for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n                var obj = _a[_i];\n                this.insertValue(cloneObject(obj), true);\n            }\n            for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n                var obj = _c[_b];\n                this.insertValue(cloneObject(obj), false);\n            }\n            isLayout = true;\n        }\n        var nodes = this.nodes;\n        for (var i = 0; i < nodes.length; i++) {\n            if (!nodes[i].isExpanded) {\n                collapsedNode.push(nodes[i]);\n            }\n        }\n        if (collapsedNode.length) {\n            for (var i = collapsedNode.length - 1; i >= 0; i--) {\n                if (i === 0) {\n                    this.commandHandler.expandNode(collapsedNode[i], this, false);\n                }\n                else {\n                    this.commandHandler.expandNode(collapsedNode[i], this, true);\n                }\n            }\n        }\n        if (this.canLayout) {\n            this.doLayout();\n        }\n        if (isLayout) {\n            this.commandHandler.getBlazorOldValues();\n        }\n        if (this.lineRoutingModule) {\n            var previousConnectorObject = [];\n            var updateConnectorObject = [];\n            var changeConnectors = [];\n            if (isBlazor()) {\n                for (var _d = 0, _e = this.connectors; _d < _e.length; _d++) {\n                    var obj = _e[_d];\n                    previousConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n                }\n            }\n            this.lineRoutingModule.lineRouting(this);\n            if (isBlazor()) {\n                for (var _f = 0, _g = this.connectors; _f < _g.length; _f++) {\n                    var obj = _g[_f];\n                    updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n                }\n                this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n                if (!(this.blazorActions & BlazorAction.ClearObject)) {\n                    var blazorInterop = 'sfBlazor';\n                    var blazor = 'Blazor';\n                    var diagramObject = { nodes: [], connectors: changeConnectors };\n                    if (window && window[blazor]) {\n                        var obj = { 'methodName': 'UpdateBlazorProperties', 'diagramobj': diagramObject };\n                        window[blazorInterop].updateBlazorProperties(obj, this);\n                    }\n                }\n            }\n        }\n        this.validatePageSize();\n        this.renderPageBreaks();\n        this.diagramRenderer.renderSvgGridlines(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n        this.commandHandler.initSelectorWrapper();\n        /**\n         * Used to render context menu\n         */\n        this.notify('initial-load', {});\n        /**\n         * Used to load context menu\n         */\n        this.trigger('load');\n        this.scroller.setSize();\n        this.scroller.updateScrollOffsets();\n        this.refreshDiagramLayer();\n        if (this.scrollSettings.verticalOffset > 0 || this.scrollSettings.horizontalOffset > 0) {\n            this.updateScrollOffset();\n        }\n        /**\n         * Used to end the context menu rendering\n         */\n        if (Browser.isDevice) {\n            this.tool = DiagramTools.ZoomPan | DiagramTools.SingleSelect;\n        }\n        this.notify('initial-end', {});\n        this.isProtectedOnChange = false;\n        this.tooltipObject = initTooltip(this);\n        this.diagramActions = DiagramAction.Render;\n        this.initCommands();\n        var hiddenUserHandleTemplate = document.getElementsByClassName(this.element.id + '_hiddenUserHandleTemplate');\n        createUserHandleTemplates(this.userHandleTemplate, hiddenUserHandleTemplate, this.selectedItems, this.element.id);\n        if (isBlazor() && this.layout && this.layout.type === 'None') {\n            this.updateTemplate();\n        }\n        this.isLoading = false;\n        this.renderComplete();\n        this.updateFitToPage();\n        if (this.refreshing) {\n            this.renderReactTemplates();\n        }\n    };\n    /* tslint:enable */\n    Diagram.prototype.updateFitToPage = function () {\n        if (this.pageSettings && this.pageSettings.fitOptions && this.pageSettings.fitOptions.canFit) {\n            this.fitToPage(this.pageSettings.fitOptions);\n        }\n    };\n    Diagram.prototype.updateTemplate = function () {\n        var node;\n        var annotation;\n        var pathAnnotation;\n        for (var i = 0; i < this.nodes.length; i++) {\n            node = this.nodes[i];\n            if (node.shape.type === 'HTML' || node.shape.type === 'Native') {\n                // CR-F170298 Template is not updated properly while render multiple diagram in same page\n                updateBlazorTemplate('diagramsf_node_template', 'NodeTemplate', this, true);\n                break;\n            }\n        }\n        for (var i = 0; i < this.nodes.length; i++) {\n            node = this.nodes[i];\n            annotation = node.annotations[0];\n            if (annotation && annotation.annotationType === 'Template') {\n                // CR-F170298 Template is not updated properly while render multiple diagram in same page\n                updateBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate', this, false);\n                break;\n            }\n        }\n        for (var i = 0; i < this.connectors.length; i++) {\n            pathAnnotation = this.connectors[i].annotations[0];\n            if (pathAnnotation && pathAnnotation.annotationType === 'Template') {\n                // CR-F170298 Template is not updated properly while render multiple diagram in same page\n                updateBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate', this, false);\n                break;\n            }\n        }\n        for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n            if (this.selectedItems.userHandles[i].template) {\n                // CR-F170298 Template is not updated properly while render multiple diagram in same page\n                updateBlazorTemplate('diagramsf_userHandle_template', 'UserHandleTemplate', this, false);\n                break;\n            }\n        }\n    };\n    Diagram.prototype.resetTemplate = function () {\n        var htmlNode;\n        var templateAnnotation;\n        var path;\n        for (var i = 0; i < this.nodes.length; i++) {\n            htmlNode = this.nodes[i];\n            if (htmlNode.shape.type === 'HTML' && htmlNode.shape.content === '') {\n                resetBlazorTemplate('diagramsf_node_template', 'NodeTemplate');\n                break;\n            }\n        }\n        for (var i = 0; i < this.nodes.length; i++) {\n            htmlNode = this.nodes[i];\n            templateAnnotation = htmlNode.annotations[0];\n            if (templateAnnotation && templateAnnotation.annotationType === 'Template'\n                && templateAnnotation.content instanceof HTMLElement) {\n                resetBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate');\n                break;\n            }\n        }\n        for (var i = 0; i < this.connectors.length; i++) {\n            path = this.connectors[i].annotations[0];\n            if (path && path.annotationType === 'Template' && path.content instanceof HTMLElement) {\n                resetBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate');\n                break;\n            }\n        }\n        for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n            if (this.selectedItems.userHandles[i].template) {\n                updateBlazorTemplate('diagramsf_userHandle_template', 'UserHandleTemplate', this, false);\n                break;\n            }\n        }\n    };\n    //Call back function to the node template\n    // private measureNode(node: NodeModel): void {\n    //     if (node.shape.type === 'Native' && isBlazor()) {\n    //         node.wrapper.measure(new Size(node.width, node.height));\n    //         node.wrapper.arrange(node.wrapper.desiredSize);\n    //     }\n    // }\n    Diagram.prototype.renderInitialCrud = function () {\n        /* eslint-disable */\n        var tempObj = this;\n        /* eslint-enable */\n        if (tempObj.dataSourceSettings.crudAction.read) {\n            var callback = new Ajax(tempObj.dataSourceSettings.crudAction.read, 'GET', false);\n            callback.onSuccess = function (data) {\n                if (tempObj.dataSourceSettings.dataManager) {\n                    tempObj.dataSourceSettings.dataManager = JSON.parse(data);\n                }\n                else {\n                    tempObj.dataSourceSettings.dataSource = JSON.parse(data);\n                }\n                tempObj.dataBind();\n            };\n            callback.send().then();\n        }\n        if (tempObj.dataSourceSettings.connectionDataSource.crudAction.read) {\n            var callback = new Ajax(tempObj.dataSourceSettings.connectionDataSource.crudAction.read, 'GET', false);\n            callback.onSuccess = function (data) {\n                tempObj.dataSourceSettings.connectionDataSource.dataManager = JSON.parse(data);\n                tempObj.dataBind();\n            };\n            callback.send().then();\n        }\n    };\n    /**\n     * Returns the module name of the diagram\n     *\n     * @returns {string}  Returns the module name of the diagram\n     */\n    Diagram.prototype.getModuleName = function () {\n        return 'diagram';\n    };\n    /**\n     *\n     * Returns the name of class Diagram\n     * @returns {string}  Returns the module name of the diagram\n     * @private\n     */\n    Diagram.prototype.getClassName = function () {\n        return 'Diagram';\n    };\n    /* tslint:disable */\n    /**\n     * To provide the array of modules needed for control rendering\n     *\n     * @returns {ModuleDeclaration[]} To provide the array of modules needed for control rendering .\\\n     * @private\n     */\n    Diagram.prototype.requiredModules = function () {\n        var modules = [];\n        modules.push({\n            member: 'Bpmn',\n            args: []\n        });\n        modules.push({\n            member: 'Bridging',\n            args: []\n        });\n        modules.push({\n            member: 'ConnectorEditingTool',\n            args: []\n        });\n        if (isBlazor()) {\n            modules.push({\n                member: 'BlazorTooltip',\n                args: []\n            });\n        }\n        if (this.constraints & DiagramConstraints.UndoRedo) {\n            modules.push({\n                member: 'UndoRedo',\n                args: []\n            });\n        }\n        if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree' ||\n            this.layout.enableAnimation) {\n            modules.push({\n                member: 'LayoutAnimate',\n                args: []\n            });\n        }\n        if (this.snapSettings.constraints) {\n            modules.push({\n                member: 'Snapping',\n                args: [this]\n            });\n        }\n        modules.push({\n            member: 'PrintandExport',\n            args: [this]\n        });\n        if (this.contextMenuSettings.show) {\n            modules.push({\n                member: 'contextMenu',\n                args: [this, this.serviceLocator]\n            });\n        }\n        if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree') {\n            modules.push({\n                member: 'OrganizationalChart',\n                args: [this]\n            });\n        }\n        if (this.layout.type === 'ComplexHierarchicalTree') {\n            modules.push({\n                member: 'ComplexHierarchicalTree',\n                args: []\n            });\n        }\n        if (this.layout.type === 'MindMap') {\n            modules.push({\n                member: 'MindMapChart',\n                args: []\n            });\n        }\n        if (this.layout.type === 'RadialTree') {\n            modules.push({\n                member: 'RadialTree',\n                args: []\n            });\n        }\n        if (this.layout.type === 'SymmetricalLayout') {\n            modules.push({\n                member: 'SymmetricalLayout',\n                args: []\n            });\n        }\n        if (this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource ||\n            this.dataSourceSettings.crudAction.read || this.dataSourceSettings.connectionDataSource.crudAction.read) {\n            modules.push({\n                member: 'DataBinding',\n                args: []\n            });\n        }\n        if (this.constraints & DiagramConstraints.LineRouting) {\n            modules.push({\n                member: 'LineRouting',\n                args: []\n            });\n        }\n        if ((this.layout && this.layout.connectionPointOrigin === 'DifferentPoint') || (this.layout.arrangement === 'Linear' || (this.layout.enableRouting))) {\n            modules.push({\n                member: 'LineDistribution',\n                args: []\n            });\n        }\n        return modules;\n    };\n    /* tslint:enable */\n    Diagram.prototype.removeUserHandlesTemplate = function () {\n        if (this.selectedItems.userHandles.length) {\n            for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n                for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n                    var elementId = _a[_i];\n                    removeElement(this.selectedItems.userHandles[i].name + '_template_hiddenUserHandle', elementId);\n                }\n            }\n        }\n    };\n    /**\n     *To destroy the diagram\n     *\n     * @returns {void} To destroy the diagram\n     */\n    Diagram.prototype.destroy = function () {\n        clearInterval(this.renderTimer);\n        this.renderTimer = null;\n        if (this.hRuler && this.vRuler) {\n            this.hRuler.destroy();\n            this.vRuler.destroy();\n        }\n        this.tooltipObject.destroy();\n        this.droppable.destroy();\n        this.unWireEvents();\n        this.notify('destroy', {});\n        _super.prototype.destroy.call(this);\n        this.removeUserHandlesTemplate();\n        this.clearTemplate();\n        if (document.getElementById(this.element.id)) {\n            this.element.classList.remove('e-diagram');\n            var tooltipelement = document.getElementsByClassName('e-diagram-tooltip');\n            while (tooltipelement.length > 0) {\n                tooltipelement[0].parentNode.removeChild(tooltipelement[0]);\n            }\n            var content = document.getElementById(this.element.id + 'content');\n            if (content) {\n                this.element.removeChild(content);\n            }\n            var measureWindowElement = 'measureElement';\n            if (window[measureWindowElement]) {\n                window[measureWindowElement].usageCount -= 1;\n                var measureElementCount = 'measureElementCount';\n                window[measureElementCount]--;\n                if (window[measureElementCount] === 0) {\n                    window[measureWindowElement].parentNode.removeChild(window[measureWindowElement]);\n                    window[measureWindowElement] = null;\n                }\n            }\n        }\n        var domTable = 'domTable';\n        window[domTable] = {};\n        for (var i = 0; i < this.layers.length; i++) {\n            var currentLayer = this.layers[i];\n            currentLayer.zIndexTable = {};\n        }\n        this.diagramActions = undefined;\n    };\n    //Wires the mouse events with diagram control\n    Diagram.prototype.wireEvents = function () {\n        var startEvent = Browser.touchStartEvent;\n        var stopEvent = Browser.touchEndEvent;\n        var moveEvent = Browser.touchMoveEvent;\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        var isIE11Pointer = Browser.isPointer;\n        var wheelEvent = Browser.info.name === 'mozilla' ?\n            (isIE11Pointer ? 'mousewheel' : 'DOMMouseScroll') : 'mousewheel';\n        EventHandler.add(this.diagramCanvas, startEvent, this.eventHandler.mouseDown, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, moveEvent, this.eventHandler.mouseMove, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, stopEvent, this.eventHandler.mouseUp, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, cancelEvent, this.eventHandler.mouseLeave, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, 'keydown', this.eventHandler.keyDown, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, 'keyup', this.eventHandler.keyUp, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, 'dblclick', this.eventHandler.doubleClick, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, 'scroll', this.eventHandler.scrolled, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, wheelEvent, this.eventHandler.mouseWheel, this.eventHandler);\n        EventHandler.add(window, 'resize', this.eventHandler.windowResize, this.eventHandler);\n        this.initDroppables();\n    };\n    //Unwires the mouse events from diagram control\n    Diagram.prototype.unWireEvents = function () {\n        var startEvent = Browser.touchStartEvent;\n        var moveEvent = Browser.touchMoveEvent;\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        var isIE11Pointer = Browser.isPointer;\n        var wheelEvent = Browser.info.name === 'mozilla' ?\n            (isIE11Pointer ? 'mousewheel' : 'DOMMouseScroll') : 'mousewheel';\n        var stopEvent = Browser.touchEndEvent;\n        EventHandler.remove(this.diagramCanvas, startEvent, this.eventHandler.mouseDown);\n        EventHandler.remove(this.diagramCanvas, moveEvent, this.eventHandler.mouseMove);\n        EventHandler.remove(this.diagramCanvas, stopEvent, this.eventHandler.mouseUp);\n        EventHandler.remove(this.diagramCanvas, cancelEvent, this.eventHandler.mouseLeave);\n        EventHandler.remove(this.diagramCanvas, 'keydown', this.eventHandler.keyDown);\n        EventHandler.remove(this.diagramCanvas, 'keyup', this.eventHandler.keyUp);\n        EventHandler.remove(this.diagramCanvas, 'dblclick', this.eventHandler.doubleClick);\n        EventHandler.remove(this.diagramCanvas, 'scroll', this.eventHandler.scrolled);\n        EventHandler.remove(this.diagramCanvas, wheelEvent, this.eventHandler.mouseWheel);\n        EventHandler.remove(window, 'resize', this.eventHandler.windowResize);\n    };\n    //public methods - start region\n    /**\n     * Selects the given collection of objects \\\n     *\n     * @returns { void } Selects the given collection of objects .\\\n     * @param {NodeModel | ConnectorModel} objects - Defines the collection of nodes and connectors to be selected\n     * @param {boolean} multipleSelection -Defines whether the existing selection has to be cleared or not\n     *\n     */\n    Diagram.prototype.select = function (objects, multipleSelection) {\n        if (isBlazor()) {\n            for (var i = 0; i < objects.length; i++) {\n                objects[i] = this.nameTable[objects[i].id];\n            }\n            objects = this.nameTable[objects.id] || objects;\n        }\n        if (objects != null) {\n            this.commandHandler.selectObjects(objects, multipleSelection);\n        }\n    };\n    /**\n     *  Selects the all the objects. \\\n     *\n     * @returns { void }  Selects the all the objects. .\\\n     *\n     */\n    Diagram.prototype.selectAll = function () {\n        var selectedItems = [];\n        selectedItems = this.getObjectsOfLayer(this.activeLayer.objects);\n        this.select(selectedItems);\n    };\n    /**\n     * Removes the given object from selection list \\\n     *\n     * @returns { void } Selects the given collection of objects .\\\n     * @param {NodeModel | ConnectorModel} obj -  Removes the given object from selection list\n     *\n     */\n    Diagram.prototype.unSelect = function (obj) {\n        if (isBlazor()) {\n            this.commandHandler.oldSelectedObjects = cloneObject(this.selectedItems);\n            obj = this.nameTable[obj.id] || obj;\n        }\n        if (obj && isSelected(this, obj)) {\n            this.commandHandler.unSelect(obj);\n            this.commandHandler.updateBlazorSelector();\n        }\n    };\n    /**\n     * Removes all elements from the selection list\\\n     *\n     * @returns { void } Removes all elements from the selection list .\\\n     *\n     */\n    Diagram.prototype.clearSelection = function () {\n        this.commandHandler.clearSelection(true);\n    };\n    /**\n     *  Update the diagram clipboard dimension \\\n     *\n     * @returns { void }  Update the diagram clipboard dimension .\\\n     *\n     */\n    Diagram.prototype.updateViewPort = function () {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.eventHandler.updateViewPortSize(this.element);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    Diagram.prototype.cutCommand = function () {\n        this.cut();\n    };\n    /**\n     *  Removes the selected nodes and connectors from diagram and moves them to diagram clipboard \\\n     *\n     * @returns { void }  Removes the selected nodes and connectors from diagram and moves them to diagram clipboard .\\\n     *\n     */\n    Diagram.prototype.cut = function () {\n        this.commandHandler.cut();\n    };\n    /**\n     *   Add a process into the sub-process \\\n     *\n     * @returns { void }  Add a process into the sub-process.\\\n     * @param {NodeModel | ConnectorModel} process - provide the process value.\n     * @param {boolean} parentId - provide the parentId value.\n     *\n     */\n    Diagram.prototype.addProcess = function (process, parentId) {\n        if (this.bpmnModule) {\n            this.bpmnModule.addProcess(process, parentId, this);\n        }\n    };\n    /**\n     *  Remove a process from the sub-processs \\\n     *\n     * @returns { void }  Remove a process from the sub-process.\\\n     * @param {string} id - provide the id value.\n     *\n     */\n    Diagram.prototype.removeProcess = function (id) {\n        if (this.bpmnModule) {\n            this.bpmnModule.removeProcess(id, this);\n        }\n    };\n    Diagram.prototype.pasteCommand = function () {\n        this.paste();\n    };\n    /**\n     *  Adds the given objects/ the objects in the diagram clipboard to diagram control \\\n     *\n     * @returns { void }  Remove a process from the sub-process.\\\n     * @param {NodeModel[] | ConnectorModel[]} obj - Defines the objects to be added to diagram\n\n     *\n     */\n    Diagram.prototype.paste = function (obj) {\n        this.commandHandler.paste(obj);\n    };\n    /**\n     *  fit the diagram to the page with respect to mode and region \\\n     *\n     * @returns { void }  fit the diagram to the page with respect to mode and region.\\\n     * @param {IFitOptions} options - provide the options value.\n     *\n     */\n    Diagram.prototype.fitToPage = function (options) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.scroller.fitToPage(options);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    /**\n     * bring the specified bounds into the viewport \\\n     *\n     * @returns { void }  bring the specified bounds into the viewport.\\\n     * @param {Rect} bound - provide the bound value.\n     *\n     */\n    Diagram.prototype.bringIntoView = function (bound) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.scroller.bringIntoView(bound);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    /**\n     * bring the specified bounds to the center of the viewport \\\n     *\n     * @returns { void }  bring the specified bounds to the center of the viewport.\\\n     * @param {Rect} bound - provide the bound value.\n     *\n     */\n    Diagram.prototype.bringToCenter = function (bound) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.scroller.bringToCenter(bound);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    Diagram.prototype.copyCommand = function () {\n        this.copy();\n    };\n    /**\n     * Copies the selected nodes and connectors to diagram clipboard \\\n     *\n     * @returns { Object } Copies the selected nodes and connectors to diagram clipboard.\\\n     *\n     */\n    Diagram.prototype.copy = function () {\n        var obj = this.commandHandler.copy();\n        return obj;\n    };\n    /**\n     *  Group the selected nodes and connectors in diagram \\\n     *\n     * @returns { void }   Group the selected nodes and connectors in diagram.\\\n     *\n     */\n    Diagram.prototype.group = function () {\n        var selectedItems = [];\n        selectedItems = this.selectedItems.nodes;\n        selectedItems = selectedItems.concat(this.selectedItems.connectors);\n        if (selectedItems.length > 1) {\n            this.callBlazorModel = false;\n            this.insertBlazorDiagramObjects(this.selectedItems);\n            this.commandHandler.group();\n            this.callBlazorModel = true;\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    /**\n     *  UnGroup the selected nodes and connectors in diagram \\\n     *\n     * @returns { void }   UnGroup the selected nodes and connectors in diagram.\\\n     *\n     */\n    Diagram.prototype.unGroup = function () {\n        this.callBlazorModel = false;\n        this.insertBlazorDiagramObjects(this.selectedItems);\n        this.commandHandler.unGroup();\n        this.callBlazorModel = true;\n        this.commandHandler.getBlazorOldValues();\n    };\n    /**\n     *  send the selected nodes or connectors back \\\n     *\n     * @returns { void }   send the selected nodes or connectors back.\\\n     *\n     */\n    Diagram.prototype.sendToBack = function () {\n        this.commandHandler.sendToBack();\n    };\n    /**\n     * set the active layer\\\n     *\n     * @returns { void } set the active layer.\\\n     * @param {string} layerName - defines the name of the layer which is to be active layer.\n     *\n     */\n    Diagram.prototype.setActiveLayer = function (layerName) {\n        var layer = this.commandHandler.getLayer(layerName);\n        this.activeLayer = layer;\n    };\n    /**\n     * add the layer into diagram\\\n     *\n     * @returns { void } add the layer into diagram.\\\n     * @param {LayerModel} layer - defines the layer model which is to be added\n     * @param {Object[]} layerObject - defines the object of the layer\n     * @blazorArgsType layer|DiagramLayer\n\n     *\n     */\n    Diagram.prototype.addLayer = function (layer, layerObject) {\n        this.commandHandler.addLayer(layer, layerObject);\n    };\n    /* eslint-disable */\n    /**\n     *  @private\n     */\n    Diagram.prototype.addDiagramLayer = function (layer, layerObject) {\n        this.commandHandler.addLayer(layer, layerObject, false);\n    };\n    /**\n     * remove the layer from diagram \\\n     *\n     * @returns { void } remove the layer from diagram.\\\n     * @param {string} layerId - provide the bound value.\n\n     *\n     */\n    Diagram.prototype.removeLayer = function (layerId) {\n        this.commandHandler.removeLayer(layerId, isBlazor());\n    };\n    /**\n     *  @private\n     */\n    Diagram.prototype.removeDiagramLayer = function (layerId) {\n        this.commandHandler.removeLayer(layerId, false);\n    };\n    /* eslint-enable */\n    /**\n     * move objects from the layer to another layer from diagram\\\n     *\n     * @returns { void } move objects from the layer to another layer from diagram.\\\n     * @param {string[]} objects - define the objects id of string array\n     * @param {string} targetLayer - define the objects id of string array\n     *\n     */\n    Diagram.prototype.moveObjects = function (objects, targetLayer) {\n        var oldValues = cloneObject(this.layers);\n        this.enableServerDataBinding(false);\n        this.commandHandler.moveObjects(objects, targetLayer);\n        var result = this.commandHandler.deepDiffer.map(oldValues, cloneObject(this.layers));\n        var diffValue = this.commandHandler.deepDiffer.frameObject({}, result);\n        this.oldDiagramObject = { layers: diffValue };\n        this.commandHandler.updateBlazorProperties();\n    };\n    /* tslint:disable */\n    Diagram.prototype.layerObjectUpdate = function () {\n        if (isBlazor()) {\n            this.enableServerDataBinding(false);\n            this.oldDiagramObject['layers'] = [];\n            for (var i = 0; i < this.layers.length; i++) {\n                // tslint:disable-next-line:no-any\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var leyerObject = cloneObject(this.layers[i]);\n                leyerObject.sfIndex = this.layers[i].zIndex;\n                this.oldDiagramObject['layers'].push(leyerObject);\n            }\n        }\n    };\n    /* tslint:enable */\n    /**\n     * move the layer backward \\\n     *\n     * @returns { void } move the layer backward .\\\n     * @param {string} layerName - define the name of the layer\n     * @param {string} targetLayer - define the objects id of string array\n     *\n     */\n    Diagram.prototype.sendLayerBackward = function (layerName) {\n        this.layerObjectUpdate();\n        this.commandHandler.sendLayerBackward(layerName);\n        this.commandHandler.updateLayerObject(this.oldDiagramObject, true);\n    };\n    /**\n     * move the layer forward \\\n     *\n     * @returns { void } move the layer forward.\\\n     * @param {string} layerName - define the name of the layer\n     *\n     */\n    Diagram.prototype.bringLayerForward = function (layerName) {\n        this.layerObjectUpdate();\n        this.commandHandler.bringLayerForward(layerName);\n        this.commandHandler.updateLayerObject(this.oldDiagramObject);\n    };\n    /**\n     *clone a layer with its object \\\n     *\n     * @returns { void } move the layer forward.\\\n     * @param {string} layerName - define the name of the layer\n     *\n     */\n    Diagram.prototype.cloneLayer = function (layerName) {\n        this.commandHandler.cloneLayer(layerName);\n    };\n    /**\n     *bring the selected nodes or connectors to front \\\n     *\n     * @returns { void } move the layer forward.\\\n     *\n     */\n    Diagram.prototype.bringToFront = function () {\n        this.commandHandler.bringToFront();\n    };\n    /**\n     *send the selected nodes or connectors forward \\\n     *\n     * @returns { void } send the selected nodes or connectors forward.\\\n     *\n     */\n    Diagram.prototype.moveForward = function () {\n        this.commandHandler.sendForward();\n    };\n    /**\n     *send the selected nodes or connectors back\\\n     *\n     * @returns { void } send the selected nodes or connectors back.\\\n     *\n     */\n    Diagram.prototype.sendBackward = function () {\n        this.commandHandler.sendBackward();\n    };\n    /**\n     *gets the node or connector having the given name \\\n     *\n     * @returns { void } gets the node or connector having the given name.\\\n     * @param {string} name - define the name of the layer\n     *\n     */\n    Diagram.prototype.getObject = function (name) {\n        return this.nameTable[name];\n    };\n    /**\n     * gets the node object for the given node ID \\\n     *\n     * @returns { void } gets the node object for the given node ID.\\\n     * @param {string} id - define the name of the layer\n     *\n     */\n    Diagram.prototype.getNodeObject = function (id) {\n        return cloneObject(this.nameTable[id]);\n    };\n    /**\n     *gets the connector object for the given node ID \\\n     *\n     * @returns { void } gets the connector object for the given node ID.\\\n     * @param {string} id - define the name of the layer\n     *\n     */\n    Diagram.prototype.getConnectorObject = function (id) {\n        return cloneObject(this.nameTable[id]);\n    };\n    /**\n     * gets the active layer back \\\n     *\n     * @returns { void } gets the active layer back.\\\n     *\n     */\n    Diagram.prototype.getActiveLayer = function () {\n        return this.activeLayer;\n    };\n    Diagram.prototype.nudgeCommand = function (direction, x, y) {\n        if (typeof direction !== 'object' && (this.selectedItems.nodes.length || this.selectedItems.connectors.length) > 0) {\n            this.nudge(direction);\n        }\n    };\n    /**\n     * Moves the selected objects towards the given direction\n     *\n     * @returns { void }  Moves the selected objects towards the given direction .\\\n     * @param {NudgeDirection} direction -  Defines the direction by which the objects have to be moved\n     * @param {number} x - Defines the distance by which the selected objects have to be horizontally moved\n     * @param {number} y -  Defines the distance by which the selected objects have to be vertically moved\n     */\n    Diagram.prototype.nudge = function (direction, x, y) {\n        var tx = 0;\n        var ty = 0;\n        var negativeDirection;\n        if (direction === 'Left' || direction === 'Right') {\n            negativeDirection = (direction === 'Left');\n            tx = (negativeDirection ? -1 : 1) * (x ? x : 1);\n        }\n        else {\n            negativeDirection = (direction === 'Up');\n            ty = (negativeDirection ? -1 : 1) * (y ? y : 1);\n        }\n        var obj = this.selectedItems;\n        var annotation = this.selectedItems.wrapper.children[0];\n        if (annotation instanceof TextElement) {\n            this.commandHandler.labelDrag(obj.nodes[0], annotation, tx, ty);\n        }\n        else {\n            var undoObject = cloneObject(this.selectedItems);\n            this.protectPropertyChange(true);\n            this.drag(obj, tx, ty);\n            this.protectPropertyChange(false);\n            var entry = {\n                type: 'PositionChanged',\n                redoObject: cloneObject(this.selectedItems), undoObject: undoObject, category: 'Internal'\n            };\n            this.addHistoryEntry(entry);\n        }\n        this.refreshCanvasLayers();\n    };\n    Diagram.prototype.insertBlazorDiagramObjects = function (actualObject) {\n        if (isBlazor() && !(this.blazorActions & BlazorAction.interaction)) {\n            this.enableServerDataBinding(false);\n            if (actualObject instanceof Selector) {\n                for (var i = 0; i < actualObject.nodes.length; i++) {\n                    this.insertBlazorDiagramObjects(actualObject.nodes[i]);\n                }\n                for (var i = 0; i < actualObject.connectors.length; i++) {\n                    this.insertBlazorDiagramObjects(actualObject.connectors[i]);\n                }\n            }\n            if (!(actualObject instanceof Selector)) {\n                //let object: object;\n                if (actualObject && actualObject.children && actualObject.children.length > 0) {\n                    for (var i = 0; i < actualObject.children.length; i++) {\n                        this.insertBlazorDiagramObjects(this.nameTable[actualObject.children[i]]);\n                    }\n                }\n                var object = cloneObject(this.nameTable[actualObject.id]);\n                this.insertValue(object, !(getObjectType(actualObject) === Connector));\n            }\n        }\n    };\n    /**\n     * Drags the given object by the specified pixels\n     *\n     * @returns { void }  Drags the given object by the specified pixels .\\\n     * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the nodes/connectors to be dragged\n     * @param {number} tx - Defines the distance by which the given objects have to be horizontally moved\n     * @param {number} ty - Defines the distance by which the given objects have to be vertically moved\n     */\n    Diagram.prototype.drag = function (obj, tx, ty) {\n        this.insertBlazorDiagramObjects(obj);\n        if (isBlazor() && obj.id) {\n            obj = this.nameTable[obj.id] || obj;\n        }\n        if (this.bpmnModule && (obj instanceof Node)) {\n            var updated = this.bpmnModule.updateAnnotationDrag(obj, this, tx, ty);\n            if (updated) {\n                return;\n            }\n        }\n        if (obj instanceof Selector) {\n            this.preventConnectorsUpdate = true;\n            if (obj.nodes && obj.nodes.length) {\n                for (var _i = 0, _a = obj.nodes; _i < _a.length; _i++) {\n                    var node = _a[_i];\n                    this.callBlazorModel = false;\n                    this.drag(node, tx, ty);\n                    if (node.parentId) {\n                        var parent_1 = this.nameTable[node.parentId];\n                        if (parent_1.isLane) {\n                            var swimlane = this.nameTable[parent_1.parentId];\n                            updateLaneBoundsAfterAddChild(parent_1, swimlane, node, this);\n                        }\n                    }\n                }\n                this.callBlazorModel = true;\n            }\n            if (obj.connectors && obj.connectors.length) {\n                this.callBlazorModel = false;\n                for (var _b = 0, _c = obj.connectors; _b < _c.length; _b++) {\n                    var conn = _c[_b];\n                    this.drag(conn, tx, ty);\n                    if (this.selectionConnectorsList.indexOf(conn) === -1) {\n                        this.selectionConnectorsList.push(conn);\n                    }\n                }\n                this.callBlazorModel = true;\n            }\n            this.updateSelector();\n            if ((this.diagramActions & DiagramAction.DragUsingMouse)) {\n                this.updatePage();\n            }\n        }\n        else {\n            if (obj instanceof Node) {\n                if (this.bpmnModule) {\n                    this.bpmnModule.updateAnnotationDrag(obj, this, tx, ty);\n                }\n            }\n            this.commandHandler.drag(obj, tx, ty);\n        }\n        if (obj instanceof Selector) {\n            this.preventConnectorsUpdate = false;\n            for (var _d = 0, _e = this.selectionConnectorsList; _d < _e.length; _d++) {\n                var connectors = _e[_d];\n                this.updateConnectorProperties(this.nameTable[connectors.id]);\n                if (connectors.shape.type === 'Bpmn' && connectors.shape.sequence === 'Default') {\n                    this.commandHandler.updatePathElementOffset(connectors);\n                }\n            }\n            this.selectionConnectorsList = [];\n        }\n        if (!(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.DragUsingMouse)) {\n            this.updateSelector();\n        }\n        if (this.callBlazorModel && (!(this.blazorActions & BlazorAction.interaction)) &&\n            (!(this.blazorActions & BlazorAction.GroupClipboardInProcess))) {\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    Diagram.prototype.disableStackContainerPadding = function (wrapper, disable) {\n        if (wrapper instanceof StackPanel) {\n            wrapper.considerPadding = disable;\n        }\n        if (wrapper.children) {\n            for (var _i = 0, _a = wrapper.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                this.disableStackContainerPadding(child, false);\n            }\n        }\n    };\n    /**\n     * Scales the given objects by the given ratio\n     *\n     * @returns { void } Scales the given objects by the given ratio .\\\n     * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the objects to be resized\n     * @param {number} sx - Defines the ratio by which the objects have to be horizontally scaled\n     * @param {number} sy - Defines the ratio by which the objects have to be vertically scaled\n     * @param {PointModel} pivot - Defines the reference point with respect to which the objects will be resized\n     */\n    Diagram.prototype.scale = function (obj, sx, sy, pivot) {\n        this.disableStackContainerPadding(obj.wrapper, false);\n        this.insertBlazorDiagramObjects(obj);\n        var checkBoundaryConstraints = true;\n        if (obj.id) {\n            obj = this.nameTable[obj.id] || obj;\n        }\n        if (obj instanceof Selector) {\n            if (obj.nodes && obj.nodes.length) {\n                this.callBlazorModel = false;\n                for (var _i = 0, _a = obj.nodes; _i < _a.length; _i++) {\n                    var node = _a[_i];\n                    checkBoundaryConstraints = this.commandHandler.scale(node, sx, sy, pivot, obj);\n                    if (!this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds)) {\n                        this.commandHandler.scale(node, 1 / sx, 1 / sy, pivot, obj);\n                    }\n                }\n                this.callBlazorModel = true;\n            }\n            if (obj.connectors && obj.connectors.length) {\n                this.callBlazorModel = false;\n                for (var _b = 0, _c = obj.connectors; _b < _c.length; _b++) {\n                    var conn = _c[_b];\n                    this.commandHandler.scale(conn, sx, sy, pivot, obj);\n                    if (!this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds)) {\n                        this.commandHandler.scale(conn, 1 / sx, 1 / sy, pivot, obj);\n                    }\n                }\n                this.callBlazorModel = true;\n            }\n            var selector = this.selectedItems;\n            if (!(selectionHasConnector(this, selector))) {\n                this.updateSelector();\n            }\n            this.refreshCanvasLayers();\n        }\n        else {\n            this.commandHandler.scale(obj, sx, sy, pivot, (obj.children ? obj : undefined));\n        }\n        if (this.callBlazorModel && (!(this.blazorActions & BlazorAction.interaction)) &&\n            (!(this.blazorActions & BlazorAction.GroupClipboardInProcess))) {\n            this.commandHandler.getBlazorOldValues();\n        }\n        this.disableStackContainerPadding(obj.wrapper, true);\n        return checkBoundaryConstraints;\n    };\n    /**\n     * Rotates the given nodes/connectors by the given angle\n     *\n     * @returns { void } Rotates the given nodes/connectors by the given angle .\\\n     * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the objects to be rotated\n     * @param {number} angle - Defines the angle by which the objects have to be rotated\n     * @param {PointModel} pivot - Defines the reference point with reference to which the objects have to be rotated\n     */\n    Diagram.prototype.rotate = function (obj, angle, pivot) {\n        this.insertBlazorDiagramObjects(obj);\n        var checkBoundaryConstraints;\n        if (obj.id) {\n            obj = this.nameTable[obj.id] || obj;\n        }\n        if (obj) {\n            pivot = pivot || { x: obj.wrapper.offsetX, y: obj.wrapper.offsetY };\n            if (obj instanceof Selector) {\n                this.callBlazorModel = false;\n                obj.rotateAngle += angle;\n                obj.wrapper.rotateAngle += angle;\n                var bounds = getBounds(obj.wrapper);\n                checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, bounds);\n                if (!checkBoundaryConstraints) {\n                    obj.rotateAngle -= angle;\n                    obj.wrapper.rotateAngle -= angle;\n                    return checkBoundaryConstraints;\n                }\n                var objects = [];\n                objects = objects.concat(obj.nodes);\n                objects = objects.concat(obj.connectors);\n                this.commandHandler.rotateObjects(obj, objects, angle, pivot);\n                this.callBlazorModel = true;\n            }\n            else {\n                this.commandHandler.rotateObjects(obj, [obj], angle, pivot);\n            }\n        }\n        if (this.callBlazorModel && (!(this.blazorActions & BlazorAction.interaction))) {\n            this.commandHandler.getBlazorOldValues();\n        }\n        return checkBoundaryConstraints;\n    };\n    /**\n     * Moves the source point of the given connector\n     *\n     * @returns { void }  Moves the source point of the given connector .\\\n     * @param {ConnectorModel} obj - Defines the connector, the end points of which has to be moved\n     * @param {number} tx - Defines the distance by which the end point has to be horizontally moved\n     * @param {number} ty - Defines the distance by which the end point has to be vertically moved\n     */\n    Diagram.prototype.dragSourceEnd = function (obj, tx, ty) {\n        this.insertBlazorDiagramObjects(obj);\n        this.commandHandler.dragSourceEnd(obj, tx, ty);\n        if (this.callBlazorModel) {\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    /**\n     * Moves the target point of the given connector\n     *\n     * @returns { void }   Moves the target point of the given connector.\\\n     * @param {ConnectorModel} obj - Defines the connector, the end points of which has to be moved\n     * @param {number} tx - Defines the distance by which the end point has to be horizontally moved\n     * @param {number} ty - Defines the distance by which the end point has to be vertically moved\n     */\n    Diagram.prototype.dragTargetEnd = function (obj, tx, ty) {\n        this.insertBlazorDiagramObjects(obj);\n        this.commandHandler.dragTargetEnd(obj, tx, ty);\n        if (this.callBlazorModel) {\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    /**\n     * Finds all the objects that is under the given mouse position\n     *\n     * @returns { void }   Finds all the objects that is under the given mouse position.\\\n     * @param {PointModel} position - Defines the position, the objects under which has to be found\n     * @param {IElement} source - Defines the object, the objects under which has to be found\n     */\n    Diagram.prototype.findObjectsUnderMouse = function (position, source) {\n        return this.eventHandler.findObjectsUnderMouse(position, source);\n    };\n    /**\n     * Finds the object that is under the given mouse position\n     *\n     * @returns { void }   Finds the object that is under the given mouse position.\\\n     * @param {NodeModel[] | ConnectorModel[]}objects - Defines the collection of objects, from which the object has to be found.\n     * @param {Actions} action - Defines the action, using which the relevant object has to be found.\n     * @param {boolean} inAction - Defines the active state of the action.\n     */\n    Diagram.prototype.findObjectUnderMouse = function (objects, action, inAction) {\n        return this.eventHandler.findObjectUnderMouse(objects, action, inAction);\n    };\n    /**\n     * Finds the object that is under the given active object (Source)\n     *\n     * @returns { void } Finds the object that is under the given active object (Source) .\\\n     * @param {NodeModel[] | ConnectorModel[]} objects - Defines the collection of objects, from which the object has to be found.\n     * @param {Actions} action - Defines the action, using which the relevant object has to be found.\n     * @param {boolean} inAction - Defines the active state of the action.\n     * @param {PointModel} position - Defines the position.\n     * @param {IElement} source - Defines the source.\n     */\n    Diagram.prototype.findTargetObjectUnderMouse = function (objects, action, inAction, position, source) {\n        return this.eventHandler.findTargetUnderMouse(objects, action, inAction, position, source);\n    };\n    /**\n     * Finds the child element of the given object at the given position\n     *\n     * @returns { void } Finds the child element of the given object at the given position .\\\n     * @param {IElement} obj - Defines the object, the child element of which has to be found\n     * @param {PointModel} position - Defines the position, the child element under which has to be found\n     * @param {number} padding - Defines the padding, the child element under which has to be found\n     */\n    Diagram.prototype.findElementUnderMouse = function (obj, position, padding) {\n        return this.eventHandler.findElementUnderMouse(obj, position, padding);\n    };\n    /**\n     * Defines the action to be done, when the mouse hovers the given element of the given object\n     *\n     * @returns { void } Defines the action to be done, when the mouse hovers the given element of the given object .\\\n     * @param {NodeModel | ConnectorModel} obj - Defines the object under mouse\n     * @param {DiagramElement} wrapper - Defines the target element of the object under mouse\n     * @param {PointModel} position - Defines the current mouse position\n     * @param { NodeModel | PointPortModel | ShapeAnnotationModel | PathAnnotationModel} target - Defines the target\n     * @private\n     */\n    Diagram.prototype.findActionToBeDone = function (obj, wrapper, position, target) {\n        return this.eventHandler.findActionToBeDone(obj, wrapper, position, target);\n    };\n    /**\n     * Returns the tool that handles the given action\n     *\n     * @returns { ToolBase } Returns the tool that handles the given action \\\n     * @param {string} action - Defines the action that is going to be performed\n     */\n    Diagram.prototype.getTool = function (action) {\n        var tool;\n        var getCustomTool = getFunction(this.getCustomTool);\n        if (getCustomTool) {\n            tool = getCustomTool(action);\n            if (tool) {\n                return tool;\n            }\n        }\n        return this.eventHandler.getTool(action);\n    };\n    /**\n     * Defines the cursor that corresponds to the given action\n     *\n     * @returns { string } Defines the cursor that corresponds to the given action \\\n     * @param {string} action - Defines the action that is going to be performed\n     * @param {boolean} active - Defines the active\n     */\n    Diagram.prototype.getCursor = function (action, active) {\n        var cursor;\n        var getCustomCursor = getFunction(this.getCustomCursor);\n        if (getCustomCursor) {\n            cursor = getCustomCursor(action, active);\n            if (cursor) {\n                return cursor;\n            }\n        }\n        if (this.customCursor.length) {\n            for (var i = 0; i < this.customCursor.length; i++) {\n                if (this.customCursor[i].action === action) {\n                    return this.customCursor[i].cursor;\n                }\n            }\n        }\n        return this.eventHandler.getCursor(action);\n    };\n    /**\n     * Initializes the undo redo actions\n     *\n     * @returns { void } Initializes the undo redo actions \\\n     * @private\n     */\n    Diagram.prototype.initHistory = function () {\n        if (this.undoRedoModule) {\n            this.undoRedoModule.initHistory(this);\n        }\n    };\n    /**\n     * Adds the given change in the diagram control to the track\n     *\n     * @returns { void } Adds the given change in the diagram control to the track \\\n     * @param {HistoryEntry} entry - Defines the entry/information about a change in diagram\n     */\n    Diagram.prototype.addHistoryEntry = function (entry) {\n        if (this.undoRedoModule && (this.constraints & DiagramConstraints.UndoRedo)\n            && (!this.currentSymbol || this.checkCurrentSymbol(this.currentSymbol, entry))) {\n            if (entry.undoObject && entry.undoObject.id === 'helper') {\n                return;\n            }\n            this.undoRedoModule.addHistoryEntry(entry, this);\n            if (entry.type !== 'StartGroup' && entry.type !== 'EndGroup') {\n                this.historyChangeTrigger(entry, 'CustomAction');\n            }\n        }\n    };\n    Diagram.prototype.checkCurrentSymbol = function (currentSymbol, entry) {\n        var check = false;\n        if (entry.undoObject && entry.redoObject) {\n            var undoObjects = entry.undoObject;\n            var redoObject = entry.undoObject;\n            if (redoObject.id && undoObjects.id && redoObject.id !== currentSymbol.id && undoObjects.id !== currentSymbol.id) {\n                return check = true;\n            }\n            else {\n                return check;\n            }\n        }\n        return check;\n    };\n    /**\n     * Adds the given custom change in the diagram control to the track\n     *\n     * @returns { void } Adds the given custom change in the diagram control to the track \\\n     * @param {HistoryEntry} entry - Defines the entry/information about a change in diagram\n     */\n    Diagram.prototype.addCustomHistoryEntry = function (entry) {\n        if (isBlazor() && this.undoRedoModule && (this.constraints & DiagramConstraints.UndoRedo)) {\n            entry.type = undefined;\n            entry.category = 'External';\n            this.undoRedoModule.addHistoryEntry(entry, this);\n        }\n    };\n    /* eslint-disable */\n    /** @private */\n    Diagram.prototype.historyChangeTrigger = function (entry, action) {\n        var change = {};\n        /* eslint-enable */\n        var oldValue = 'oldValue';\n        var newValue = 'newValue';\n        var type = 'type';\n        var entryType = 'entryType';\n        var source = [];\n        if (entry.category === 'Internal') {\n            if (entry && entry.redoObject && ((entry.redoObject.nodes) instanceof Array) &&\n                ((entry.redoObject.connectors) instanceof Array)) {\n                source = entry.redoObject.nodes.concat(entry.redoObject.connectors);\n            }\n            else {\n                if (entry.redoObject) {\n                    source.push(entry.redoObject);\n                }\n            }\n            change[type] = entry.type;\n            if (isBlazor()) {\n                change[entryType] = entry.type;\n            }\n            switch (entry.type) {\n                case 'PositionChanged':\n                    change[oldValue] = {\n                        offsetX: entry.undoObject.offsetX,\n                        offsetY: entry.undoObject.offsetY\n                    };\n                    change[newValue] = {\n                        offsetX: entry.redoObject.offsetX,\n                        offsetY: entry.redoObject.offsetY\n                    };\n                    break;\n                case 'RotationChanged':\n                    change[oldValue] = { rotateAngle: entry.undoObject.rotateAngle };\n                    change[newValue] = { rotateAngle: entry.redoObject.rotateAngle };\n                    break;\n                case 'SizeChanged':\n                    change[oldValue] = {\n                        offsetX: entry.undoObject.offsetX, offsetY: entry.undoObject.offsetY,\n                        width: entry.undoObject.width, height: entry.undoObject.height\n                    };\n                    change[newValue] = {\n                        offsetX: entry.redoObject.offsetX, offsetY: entry.redoObject.offsetY,\n                        width: entry.redoObject.width, height: entry.redoObject.height\n                    };\n                    break;\n                case 'CollectionChanged':\n                    change[entry.changeType] = source;\n                    break;\n                case 'ConnectionChanged':\n                    change[oldValue] = {\n                        offsetX: entry.undoObject.offsetX,\n                        offsetY: entry.undoObject.offsetY\n                    };\n                    change[newValue] = {\n                        offsetX: entry.redoObject.offsetX,\n                        offsetY: entry.redoObject.offsetY\n                    };\n                    break;\n            }\n            var arg = void 0;\n            arg = {\n                cause: entry.category, source: cloneBlazorObject(source), change: cloneBlazorObject(change),\n                action: action\n            };\n            if (isBlazor()) {\n                arg = {\n                    cause: entry.category, change: cloneBlazorObject(change),\n                    source: { connectors: undefined, nodes: undefined }, action: action\n                };\n                var sourceValue = arg.source;\n                sourceValue.connectors = [];\n                sourceValue.nodes = [];\n                var object = void 0;\n                for (var i = 0; i < source.length; i++) {\n                    object = cloneBlazorObject(source[i]);\n                    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                    (getObjectType(source[i]) === Connector) ?\n                        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                        (sourceValue.connectors.push(object)) : (sourceValue.nodes.push(object));\n                }\n                arg.source = sourceValue;\n            }\n            if (source.length) {\n                this.triggerEvent(DiagramEvent.historyChange, arg);\n            }\n        }\n    };\n    /**\n     * Starts grouping the actions that will be undone/restored as a whole\n     *\n     * @returns { void } Starts grouping the actions that will be undone/restored as a whole\\\n     */\n    Diagram.prototype.startGroupAction = function () {\n        var entry = { type: 'StartGroup', category: 'Internal' };\n        if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n            this.addHistoryEntry(entry);\n        }\n    };\n    /**\n     * Closes grouping the actions that will be undone/restored as a whole\n     *\n     * @returns { void } Closes grouping the actions that will be undone/restored as a whole .\\\n     */\n    Diagram.prototype.endGroupAction = function () {\n        var entry = { type: 'EndGroup', category: 'Internal' };\n        if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n            this.addHistoryEntry(entry);\n        }\n    };\n    /**\n     * Restores the last action that is performed\n     *\n     * @returns { void } Restores the last action that is performed .\\\n     */\n    Diagram.prototype.undo = function () {\n        this.canEnableBlazorObject = true;\n        this.callBlazorModel = false;\n        if (this.undoRedoModule && (this.constraints & DiagramConstraints.UndoRedo)) {\n            this.undoRedoModule.undo(this);\n        }\n        this.commandHandler.getBlazorOldValues();\n        this.callBlazorModel = true;\n        this.canEnableBlazorObject = false;\n    };\n    /**\n     * Restores the last undone action\n     *\n     * @returns { void } Restores the last undone action .\\\n     */\n    Diagram.prototype.redo = function () {\n        this.canEnableBlazorObject = true;\n        this.callBlazorModel = false;\n        if (this.undoRedoModule && (this.constraints & DiagramConstraints.UndoRedo)) {\n            this.undoRedoModule.redo(this);\n        }\n        this.commandHandler.getBlazorOldValues();\n        this.callBlazorModel = true;\n        this.canEnableBlazorObject = false;\n    };\n    Diagram.prototype.getBlazorDiagramObjects = function (objects) {\n        if (objects) {\n            for (var j = 0; j < objects.length; j++) {\n                this.insertBlazorDiagramObjects(objects[j]);\n            }\n        }\n        else {\n            this.insertBlazorDiagramObjects(this.selectedItems);\n        }\n        this.callBlazorModel = false;\n        this.canEnableBlazorObject = true;\n    };\n    /**\n     * Aligns the group of objects to with reference to the first object in the group\n     *\n     * @returns { void } Aligns the group of objects to with reference to the first object in the group .\\\n     * @param {AlignmentOptions}option - Defines the factor, by which the objects have to be aligned\n     * @param {NodeModel[] | ConnectorModel[]} objects - Defines the objects that have to be aligned\n     * @param {AlignmentMode} type - Defines the type to be aligned\n     */\n    Diagram.prototype.align = function (option, objects, type) {\n        this.getBlazorDiagramObjects(objects);\n        if (!objects) {\n            objects = [];\n            objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n        }\n        this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n        this.commandHandler.align(objects, option, (type ? type : 'Object'));\n        this.commandHandler.getBlazorOldValues();\n        this.callBlazorModel = true;\n        this.canEnableBlazorObject = false;\n    };\n    /**\n     * Arranges the group of objects with equal intervals, but within the group of objects\n     *\n     * @returns { void } Arranges the group of objects with equal intervals, but within the group of objects .\\\n     * @param {NodeModel[] | ConnectorModel[]} option - Defines the factor to distribute the shapes\n     * @param {DistributeOptions} objects - Defines the objects that have to be equally spaced\n     */\n    Diagram.prototype.distribute = function (option, objects) {\n        this.getBlazorDiagramObjects(objects);\n        if (!objects) {\n            objects = [];\n            objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n        }\n        this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n        this.commandHandler.distribute(objects, option);\n        this.commandHandler.getBlazorOldValues();\n        this.canEnableBlazorObject = false;\n        this.callBlazorModel = true;\n    };\n    /**\n     * Scales the given objects to the size of the first object in the group\n     *\n     * @returns { void } Scales the given objects to the size of the first object in the group .\\\n     * @param {SizingOptions} option - Defines whether the node has to be horizontally scaled, vertically scaled or both\n     * @param {NodeModel[] | ConnectorModel[]}objects - Defines the collection of objects that have to be scaled\n     */\n    Diagram.prototype.sameSize = function (option, objects) {\n        this.getBlazorDiagramObjects(objects);\n        if (!objects) {\n            objects = [];\n            objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n        }\n        this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n        this.commandHandler.sameSize(objects, option);\n        this.commandHandler.getBlazorOldValues();\n        this.canEnableBlazorObject = false;\n        this.callBlazorModel = true;\n    };\n    Diagram.prototype.updateBlazorDiagramProperties = function (attribute, canCall) {\n        if (isBlazor() && !canCall) {\n            //Need to send the client changes into server side for public APIs changes.\n            var isServerDataBindEnabled = this.allowServerDataBinding;\n            this.enableServerDataBinding(true);\n            for (var i = 0; i < attribute.length; i++) {\n                this.oldDiagramObject[attribute[i]] = cloneObject(this[attribute[i]]);\n            }\n            this.enableServerDataBinding(isServerDataBindEnabled);\n        }\n        if (canCall) {\n            this.commandHandler.getDiagramOldValues(this.oldDiagramObject, attribute);\n        }\n    };\n    Diagram.prototype.getZoomingAttribute = function () {\n        var attribute = [];\n        attribute.push('scrollSettings');\n        attribute.push('snapSettings');\n        return attribute;\n    };\n    /**\n     * Scales the diagram control by the given factor\n     *\n     * @returns { void } Scales the diagram control by the given factor .\\\n     * @param {number} factor - Defines the factor by which the diagram is zoomed\n     * @param {PointModel} focusedPoint - Defines the point with respect to which the diagram has to be zoomed\n     */\n    Diagram.prototype.zoom = function (factor, focusedPoint) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.scroller.zoom(factor, 0, 0, focusedPoint);\n        if (!(this.blazorActions & BlazorAction.interaction)) {\n            this.updateBlazorDiagramProperties(attribute, true);\n        }\n    };\n    /**\n     * Scales the diagram control by the given factor\n     *\n     * @returns { void }  Scales the diagram control by the given factor .\\\n     * @param {ZoomOptions} options - used to define the zoom factor, focus point and zoom type.\n     *\n     */\n    Diagram.prototype.zoomTo = function (options) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        var factor = options.zoomFactor ? options.zoomFactor : 0.2;\n        factor = options.type === 'ZoomOut' ? 1 / (1 + factor) : (1 + factor);\n        this.scroller.zoom(factor, 0, 0, options.focusPoint);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    /**\n     * Pans the diagram control to the given horizontal and vertical offsets\n     *\n     * @returns { void } Pans the diagram control to the given horizontal and vertical offsets .\\\n     * @param {number} horizontalOffset - Defines the horizontal distance to which the diagram has to be scrolled\n     * @param {number} verticalOffset - Defines the vertical distance to which the diagram has to be scrolled\n     * @param {PointModel} focusedPoint - Provide the focusedPoint value\n     */\n    Diagram.prototype.pan = function (horizontalOffset, verticalOffset, focusedPoint) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.setCursor('grabbing');\n        this.scroller.zoom(1, horizontalOffset, verticalOffset, focusedPoint);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    /**\n     * Resets the zoom and scroller offsets to default values\n     *\n     * @returns { void } Resets the zoom and scroller offsets to default values .\\\n     */\n    Diagram.prototype.reset = function () {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.scroller.zoom(1 / this.scroller.currentZoom, -this.scroller.horizontalOffset, -this.scroller.verticalOffset, { x: 0, y: 0 });\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    /**\n     * Resets the segments of the connectors\n     *\n     * @returns { void } Resets the segments of the connectors .\\\n     */\n    Diagram.prototype.resetSegments = function () {\n        var previousConnectorObject = [];\n        var updateConnectorObject = [];\n        var changeConnectors = [];\n        if (isBlazor()) {\n            for (var _i = 0, _a = this.connectors; _i < _a.length; _i++) {\n                var obj = _a[_i];\n                previousConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n            }\n        }\n        if (this.constraints & DiagramConstraints.LineRouting && this.lineRoutingModule) {\n            this.lineRoutingModule.lineRouting(this);\n        }\n        else {\n            this.protectPropertyChange(true);\n            var connector = void 0;\n            for (var i = 0; i < this.connectors.length; i++) {\n                connector = this.connectors[i];\n                connector.segments = [];\n                this.connectorPropertyChange(connector, {}, { segments: connector.segments });\n            }\n            this.protectPropertyChange(false);\n        }\n        if (isBlazor()) {\n            for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n                var obj = _c[_b];\n                updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n            }\n            this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n            var blazorInterop = 'sfBlazor';\n            var blazor = 'Blazor';\n            var diagramObject = { nodes: [], connectors: changeConnectors };\n            if (window && window[blazor]) {\n                var obj = { 'methodName': 'UpdateBlazorProperties', 'diagramobj': diagramObject };\n                window[blazorInterop].updateBlazorProperties(obj, this);\n            }\n        }\n    };\n    /**\n     * setBlazorDiagramProps method\n     *\n     * @returns {void} setBlazorDiagramProps method .\\\n     * @param {boolean} arg - provide the eventName value.\n     * @private\n     */\n    Diagram.prototype.setBlazorDiagramProps = function (arg) {\n        var attribute = this.getZoomingAttribute();\n        if (arg) {\n            this.updateBlazorDiagramProperties(attribute);\n        }\n        else {\n            this.updateBlazorDiagramProperties(attribute, true);\n        }\n    };\n    /**\n     * getDirection method\n     *\n     * @returns { Promise<void | object> } getDirection method .\\\n     * @param {DiagramEvent} eventName - provide the eventName value.\n     * @param {Object} args - provide the args value.\n     * @private\n     */\n    Diagram.prototype.triggerEvent = function (eventName, args) {\n        return __awaiter(this, void 0, void 0, function () {\n            var eventArgs;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (args) {\n                            this.updateEventValue(args);\n                        }\n                        return [4 /*yield*/, this.trigger(DiagramEvent[eventName], args)];\n                    case 1:\n                        eventArgs = _a.sent();\n                        if (isBlazor() && typeof eventArgs === 'string') {\n                            eventArgs = JSON.parse(eventArgs);\n                        }\n                        return [2 /*return*/, eventArgs];\n                }\n            });\n        });\n    };\n    Diagram.prototype.updateEventValue = function (args) {\n        var element = args.element;\n        if (args.element && element instanceof Selector && (element.nodes.length + element.connectors.length === 1)) {\n            args.element = (element.nodes.length === 1) ? element.nodes[0] : element.connectors[0];\n        }\n    };\n    /**\n     * Adds the given node to the lane\n     *\n     * @returns { void }     Adds the given node to the lane .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {string} swimLane - provide the swimLane value.\n     * @param {string} lane - provide the lane value.\n\n     */\n    Diagram.prototype.addNodeToLane = function (node, swimLane, lane) {\n        if (this.nameTable[swimLane]) {\n            var swimlaneNode = this.nameTable[swimLane];\n            this.protectPropertyChange(true);\n            if (this.undoRedoModule) {\n                this.historyManager.startGroupAction();\n            }\n            if (!this.nameTable[node.id]) {\n                node.offsetX = swimlaneNode.wrapper.bounds.width + swimlaneNode.wrapper.bounds.x;\n                node.offsetY = swimlaneNode.wrapper.bounds.height + swimlaneNode.wrapper.bounds.y;\n                node = this.add(node);\n            }\n            node.parentId = '';\n            if (!swimlaneNode.shape.phases.length) {\n                var laneId = swimLane + lane + '0';\n                if (this.nameTable[laneId]) {\n                    addChildToContainer(this, this.nameTable[laneId], node, undefined, true);\n                    updateLaneBoundsAfterAddChild(this.nameTable[laneId], swimlaneNode, node, this);\n                }\n            }\n            else {\n                for (var i = 0; i < swimlaneNode.shape.phases.length; i++) {\n                    var laneId = swimLane + lane + i;\n                    if (this.nameTable[laneId] && this.nameTable[laneId].isLane) {\n                        var laneNode = this.nameTable[laneId].wrapper.bounds;\n                        var focusPoint = {\n                            x: laneNode.x +\n                                (laneNode.x - swimlaneNode.wrapper.bounds.x + node.margin.left + (node.wrapper.bounds.width / 2)),\n                            y: laneNode.y + swimlaneNode.wrapper.bounds.y - node.margin.top\n                        };\n                        if (swimlaneNode.shape.orientation === 'Horizontal') {\n                            focusPoint.y = laneNode.y;\n                        }\n                        else {\n                            focusPoint.x = laneNode.x;\n                            var laneHeaderId = this.nameTable[laneId].parentId +\n                                swimlaneNode.shape.lanes[0].id + '_0_header';\n                            focusPoint.y = laneNode.y +\n                                (swimlaneNode.wrapper.bounds.y - this.nameTable[laneHeaderId].wrapper.bounds.height +\n                                    node.margin.top + (node.wrapper.bounds.height / 2));\n                        }\n                        if (laneNode.containsPoint(focusPoint) ||\n                            (laneId === swimLane + lane + (swimlaneNode.shape.phases.length - 1))) {\n                            addChildToContainer(this, this.nameTable[laneId], node, undefined, true);\n                            updateLaneBoundsAfterAddChild(this.nameTable[laneId], swimlaneNode, node, this);\n                            break;\n                        }\n                    }\n                }\n            }\n            if (this.undoRedoModule) {\n                this.historyManager.endGroupAction();\n            }\n            this.protectPropertyChange(false);\n        }\n        this.updateDiagramElementQuad();\n    };\n    /**\n     * Shows tooltip for corresponding diagram object\n     *\n     * @param {NodeModel | ConnectorModel} obj - Defines the object for that tooltip has to be shown\n     */\n    Diagram.prototype.showTooltip = function (obj) {\n        if (obj && obj.id && !obj.wrapper) {\n            obj = this.nameTable[obj.id];\n        }\n        var bounds = getBounds(obj.wrapper);\n        var position = { x: 0, y: 0 };\n        var content = obj.tooltip.content ?\n            obj.tooltip.content : 'X:' + Math.round(bounds.x) + ' ' + 'Y:' + Math.round(bounds.y);\n        if (obj && obj.tooltip.openOn === 'Custom') {\n            if (obj instanceof Node) {\n                position = { x: obj.offsetX + (obj.width / 2), y: obj.offsetY + (obj.height / 2) };\n            }\n            else {\n                position = { x: obj.targetPoint.x, y: obj.targetPoint.x };\n            }\n            this.commandHandler.showTooltip(obj, position, content, 'SelectTool', true);\n        }\n    };\n    /**\n     * hides tooltip for corresponding diagram object\n     *\n     * @param {NodeModel | ConnectorModel} obj - Defines the object for that tooltip has to be hide\n     */\n    Diagram.prototype.hideTooltip = function (obj) {\n        if (obj && obj.tooltip.openOn === 'Custom') {\n            this.tooltipObject.close();\n        }\n    };\n    /**\n     * Adds the given node to diagram control\n     *\n     * @returns { Node }     getDirection method .\\\n     * @param {NodeModel} obj - Defines the node that has to be added to diagram\n     * @param {boolean} group - Defines the node that has to be added to diagram\n     * @blazorArgsType obj|DiagramNode\n     */\n    Diagram.prototype.addNode = function (obj, group) {\n        return this.add(obj, group);\n    };\n    /**\n     * Adds the given diagram object to the group.\n     *\n     * @returns { void }     Adds the given diagram object to the group.\\\n     * @param {NodeModel} group - defines where the diagram object to be added.\n     * @param {string | NodeModel | ConnectorModel} child - defines the diagram object to be added to the group\n     * @blazorArgsType obj|DiagramNode\n     */\n    Diagram.prototype.addChildToGroup = function (group, child) {\n        var severDataBind = this.allowServerDataBinding;\n        this.enableServerDataBinding(false);\n        var propChange = this.isProtectedOnChange;\n        this.protectPropertyChange(true);\n        group = this.getObject(group.id);\n        if (isBlazor()) {\n            this.insertValue(group, true);\n        }\n        var isHistoryAdded = (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group) &&\n            !(this.diagramActions & DiagramAction.PreventHistory));\n        if (isHistoryAdded) {\n            this.startGroupAction();\n        }\n        var id = this.addChild(group, child);\n        if (isHistoryAdded) {\n            var childTable = {};\n            childTable[id] = cloneObject(this.getObject(id));\n            var entry = {\n                type: 'AddChildToGroupNode', changeType: 'Insert', undoObject: cloneObject(group),\n                redoObject: cloneObject(group), category: 'Internal', objectId: id, childTable: childTable\n            };\n            this.addHistoryEntry(entry);\n            this.endGroupAction();\n        }\n        this.protectPropertyChange(propChange);\n        this.enableServerDataBinding(severDataBind);\n        this.updateSelector();\n        if (isBlazor() && isHistoryAdded) {\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    /**\n     * Will return the history stack values\n     *\n     * @returns { void } Will return the history stack values .\\\n     * @param {boolean} isUndoStack - returns the history stack values\n     */\n    Diagram.prototype.getHistoryStack = function (isUndoStack) {\n        //let temp: HistoryEntry[];\n        var historyEntry = [];\n        var temp = isUndoStack ? this.historyManager.undoStack : this.historyManager.redoStack;\n        if (this.historyManager.stackLimit !== undefined) {\n            for (var i = temp.length - 1; i >= 0; i--) {\n                historyEntry.push(temp[i]);\n                if (historyEntry.length > this.historyManager.stackLimit) {\n                    return historyEntry;\n                }\n            }\n        }\n        else {\n            historyEntry = temp;\n        }\n        return historyEntry;\n    };\n    /* tslint:disable */\n    /**\n     * Return the edges for the given node\n     *\n     * @returns { string[] } Return the edges for the given node .\\\n\n     * @param {Object} args - return the edge of the given node\n     */\n    Diagram.prototype.getEdges = function (args) {\n        return args['outEdge'] ? this.nameTable[args['id']].outEdges : this.nameTable[args['id']].inEdges;\n    };\n    /* tslint:enable */\n    /**\n     * Returns the parent id for the node\n     *\n     * @returns { string }Returns the parent id for the node .\\\n\n     * @param {string} id - returns the parent id\n     */\n    Diagram.prototype.getParentId = function (id) {\n        return this.nameTable[id].parentId;\n    };\n    /**\n     * Adds the given connector to diagram control\n     * @returns { Connector } Adds the given connector to diagram control .\\\n     *\n     * @param {ConnectorModel} obj - Defines the connector that has to be added to diagram\n     * @blazorArgsType obj|DiagramConnector\n     */\n    Diagram.prototype.addConnector = function (obj) {\n        return this.add(obj);\n    };\n    /* eslint-disable */\n    /** @private */\n    Diagram.prototype.UpdateBlazorDiagramModelCollection = function (obj, copiedObject, multiSelectDelete, isBlazorGroupUpdate) {\n        /* eslint-enable */\n        if (!(this.blazorActions & BlazorAction.ClearObject)) {\n            var blazorInterop = 'sfBlazor';\n            var blazor = 'Blazor';\n            if (window && window[blazor]) {\n                var updatedModel = void 0;\n                var connectorModelCollection = [];\n                var updatedModelCollection = [];\n                var objectTypeCollection = [];\n                var removalIndexCollection = [];\n                if (isBlazorGroupUpdate && !copiedObject) {\n                    for (var i = 0; i < this.blazorAddorRemoveCollection.length; i++) {\n                        objectTypeCollection.push(getObjectType(this.blazorAddorRemoveCollection[i]) === Connector ? 'Connector' : 'Node');\n                        updatedModel = cloneBlazorObject(this.blazorAddorRemoveCollection[i]);\n                        updatedModelCollection.push(updatedModel);\n                        removalIndexCollection = this.blazorRemoveIndexCollection;\n                    }\n                }\n                else if ((!this.isServerUpdate || multiSelectDelete)) {\n                    this.isServerUpdate = true;\n                    var updatedModel_1 = cloneBlazorObject(obj);\n                    var elements = [];\n                    var removalIndex = void 0;\n                    var tempNode = [];\n                    if (!copiedObject) {\n                        if (!multiSelectDelete) {\n                            tempNode = this.commandHandler.getChildren(obj, elements);\n                        }\n                        else {\n                            tempNode = multiSelectDelete;\n                        }\n                        for (var i = 0; i < tempNode.length; i++) {\n                            updatedModel_1 = cloneBlazorObject(tempNode[i]);\n                            updatedModelCollection.push(updatedModel_1);\n                            if (getObjectType(tempNode[i]) === Connector) {\n                                removalIndex = this.connectors.indexOf(tempNode[i]);\n                            }\n                            else {\n                                removalIndex = this.nodes.indexOf(tempNode[i]);\n                            }\n                            removalIndexCollection.push(removalIndex);\n                            objectTypeCollection.push(getObjectType(tempNode[i]) === Connector ? 'Connector' : 'Node');\n                        }\n                        if (!multiSelectDelete) {\n                            updatedModelCollection.push(cloneBlazorObject(obj));\n                            removalIndexCollection.push(this.nodes.indexOf(obj));\n                            objectTypeCollection.push(getObjectType(obj) === Connector ? 'Connector' : 'Node');\n                        }\n                    }\n                    if (copiedObject && copiedObject.length > 0) {\n                        for (var i = 0; i < copiedObject.length; i++) {\n                            updatedModel_1 = cloneBlazorObject(copiedObject[i]);\n                            var isNode = (copiedObject[i] instanceof Node) ? true : false;\n                            /* eslint-disable */\n                            isNode ? updatedModelCollection.push(updatedModel_1) : connectorModelCollection.push(updatedModel_1);\n                            /* eslint-enable */\n                            objectTypeCollection.push(getObjectType(copiedObject[i]) === Connector ? 'Connector' : 'Node');\n                        }\n                    }\n                    this.isServerUpdate = false;\n                }\n                var dgmObj = {\n                    'methodName': 'UpdateBlazorDiagramObjects',\n                    'diagramobj': {\n                        'nodeObj': JSON.stringify(updatedModelCollection),\n                        'ObjectType': objectTypeCollection,\n                        'removalIndex': copiedObject ? undefined : removalIndexCollection,\n                        'isMultipleObjects': true, 'annotationIndex': undefined,\n                        'connectorObj': JSON.stringify(connectorModelCollection)\n                    }\n                };\n                window[blazorInterop].updateBlazorProperties(dgmObj, this);\n                if (isBlazorGroupUpdate && !copiedObject) {\n                    this.blazorAddorRemoveCollection = [];\n                    this.blazorRemoveIndexCollection = [];\n                }\n            }\n        }\n    };\n    /**\n     *  UpdateBlazorDiagramModel method\n     *\n     * @returns { void }  UpdateBlazorDiagramModel method .\\\n     * @param {Node | Connector | ShapeAnnotation | PathAnnotation} obj - provide the obj value.\n     * @param {string} objectType - provide the objectType value.\n     * @param {number} removalIndex - provide the removalIndex value.\n     * @param {number} annotationNodeIndex - provide the annotationNodeIndex value.\n     *\n     * @private\n     */\n    Diagram.prototype.UpdateBlazorDiagramModel = function (obj, objectType, removalIndex, annotationNodeIndex) {\n        if (!(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n            var blazorInterop = 'sfBlazor';\n            var blazor = 'Blazor';\n            if (window && window[blazor] && !this.isServerUpdate && !(this.diagramActions & DiagramAction.Clear)) {\n                var updatedModel = cloneBlazorObject(obj);\n                var dgmObj = {\n                    'methodName': 'UpdateBlazorDiagramObjects',\n                    'diagramobj': {\n                        'nodeObj': JSON.stringify(updatedModel),\n                        'ObjectType': objectType, 'removalIndex': removalIndex,\n                        'isMultipleObjects': false,\n                        'annotationIndex': annotationNodeIndex, 'connectorObj': undefined\n                    }\n                };\n                window[blazorInterop].updateBlazorProperties(dgmObj, this);\n            }\n        }\n    };\n    // eslint-disable-next-line max-len\n    Diagram.prototype.UpdateBlazorLabelOrPortObjects = function (obj, objectType, removalIndex, nodeIndex) {\n        var blazorInterop = 'sfBlazor';\n        var blazor = 'Blazor';\n        if (window && window[blazor] && obj.length > 0 && !this.isServerUpdate && !(this.diagramActions & DiagramAction.Clear)) {\n            // eslint-disable-next-line max-len\n            var updatedModelCollection = [];\n            var objectTypeCollection = [];\n            var nodeIndexCollection = [];\n            for (var i = 0; i < obj.length; i++) {\n                updatedModelCollection.push(cloneBlazorObject(obj[i]));\n                objectTypeCollection.push(objectType);\n                nodeIndexCollection.push(nodeIndex);\n            }\n            var dgmObj = {\n                'methodName': 'UpdateBlazorDiagramObjects',\n                'diagramobj': {\n                    'nodeObj': JSON.stringify(updatedModelCollection),\n                    'ObjectType': objectTypeCollection, 'removalIndex': removalIndex,\n                    'isMultipleObjects': true,\n                    'annotationIndex': nodeIndexCollection,\n                    'connectorObj': null,\n                    'portIndex': (objectType === 'Port') ? nodeIndexCollection : []\n                }\n            };\n            window[blazorInterop].updateBlazorProperties(dgmObj, this);\n        }\n    };\n    /**\n     *  addBlazorDiagramObjects method\n     *\n     * @returns { void }  addBlazorDiagramObjects method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.addBlazorDiagramObjects = function () {\n        var nodesCollection = [];\n        var connectorCollection = [];\n        if (this.dataBindingModule && !(this.realActions & RealAction.PreventDataInit)) {\n            for (var i = 0; i < this.nodes.length; i++) {\n                nodesCollection.push(cloneObject(this.nodes[i], undefined, undefined, true));\n            }\n            for (var i = 0; i < this.connectors.length; i++) {\n                connectorCollection.push(cloneObject(this.connectors[i], undefined, undefined, true));\n            }\n        }\n        var blazorInterop = 'sfBlazor';\n        var blazor = 'Blazor';\n        if (window && window[blazor]) {\n            var obj = {\n                'methodName': 'AddBlazorObjects',\n                'diagramobj': { 'nodeObj': JSON.stringify(nodesCollection), 'isConnector': false }\n            };\n            window[blazorInterop].updateBlazorProperties(obj, this);\n            obj = {\n                'methodName': 'AddBlazorObjects',\n                'diagramobj': { 'nodeObj': JSON.stringify(connectorCollection), 'isConnector': true }\n            };\n            window[blazorInterop].updateBlazorProperties(obj, this);\n        }\n    };\n    Diagram.prototype.removeNodeEdges = function (elementId, id, isOutEdges) {\n        var node = this.nameTable[elementId];\n        var edges = isOutEdges ? node.outEdges : node.inEdges;\n        if (edges.length > 0) {\n            for (var i = 0; i < edges.length; i++) {\n                if (edges[i] === id) {\n                    edges.splice(i, 1);\n                }\n            }\n        }\n    };\n    /**\n     *  insertBlazorConnector method\n     *\n     * @returns { void }  insertBlazorConnector method .\\\n     * @param {Connector} obj - provide the nodeId value.\n     *\n     * @private\n     */\n    Diagram.prototype.insertBlazorConnector = function (obj) {\n        if (isBlazor() && (obj instanceof Connector)) {\n            if (obj.sourceID && this.nameTable[obj.sourceID]) {\n                this.insertValue(cloneObject(this.nameTable[obj.sourceID]), true);\n            }\n            if (obj.targetID && this.nameTable[obj.targetID]) {\n                this.insertValue(cloneObject(this.nameTable[obj.targetID]), true);\n            }\n        }\n    };\n    /* tslint:disable */\n    /**\n     * Adds the given object to diagram control\n     *\n     * @returns { Node | Connector }     getDirection method .\\\n     * @param {NodeModel | ConnectorModel} obj - Defines the object that has to be added to diagram\n     * @param {boolean} group - provide the group value.\n     */\n    Diagram.prototype.add = function (obj, group) {\n        var newObj;\n        var propertyChangeValue = this.isProtectedOnChange;\n        this.protectPropertyChange(true);\n        if (obj) {\n            obj = cloneObject(obj);\n            var args = void 0;\n            args = {\n                element: obj, cause: this.diagramActions, state: 'Changing', type: 'Addition', cancel: false\n            };\n            if (this.parentObject) {\n                args.parentId = this.parentObject.id;\n            }\n            if (isBlazor()) {\n                args = getCollectionChangeEventArguements(args, obj, 'Changing', 'Addition');\n            }\n            if (obj.id !== 'helper' && !(this.diagramActions & DiagramAction.PreventCollectionChangeOnDragOver)) {\n                this.triggerEvent(DiagramEvent.collectionChange, args);\n            }\n            if (args.cancel && this.drawingObject) {\n                this.removeElements(args.element);\n                this.tooltipObject.close();\n                var sourceNodee = this.getObject(args.element.sourceID);\n                var isOutEdgee = void 0;\n                if (getObjectType(args.element) === Connector) {\n                    if (args.element.sourceID) {\n                        this.removeNodeEdges(args.element.sourceID, args.element.id, true);\n                        if (sourceNodee.ports.length > 0) {\n                            for (var i = 0; i < sourceNodee.ports.length; i++) {\n                                var port = sourceNodee.ports[i];\n                                if (port.id === args.element.sourcePortID) {\n                                    if (port.outEdges.length > 0) {\n                                        isOutEdgee = false;\n                                    }\n                                    else {\n                                        isOutEdgee = true;\n                                    }\n                                }\n                            }\n                            this.removePortEdges(sourceNodee, args.element.sourcePortID, args.element.id, isOutEdgee);\n                        }\n                    }\n                    if (args.element.targetID) {\n                        this.removeNodeEdges(args.element.targetID, args.element.id, false);\n                    }\n                }\n            }\n            this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n            obj.id = obj.id || randomId();\n            var layers = this.activeLayer;\n            if (!args.cancel && !layers.lock) {\n                if (layers.objects.indexOf(obj.id) < 0 && !layers.lock) {\n                    if (!layers.visible) {\n                        layers.visible = true;\n                        this.dataBind();\n                    }\n                    layers.objects.push(obj.id);\n                }\n                if (getObjectType(obj) === Connector) {\n                    newObj = new Connector(this, 'connectors', obj, true);\n                    newObj.status = 'New';\n                    updateDefaultValues(newObj, obj, this.connectorDefaults);\n                    this.connectors.push(newObj);\n                    this.initObject(newObj);\n                    if (isBlazor()) {\n                        if ((this.blazorActions & BlazorAction.GroupingInProgress)) {\n                            this.blazorAddorRemoveCollection.push(newObj);\n                        }\n                        else if (this.blazorAddorRemoveCollection.length > 0) {\n                            this.isServerUpdate = false;\n                            this.blazorAddorRemoveCollection.push(newObj);\n                            this.UpdateBlazorDiagramModelCollection(undefined, this.blazorAddorRemoveCollection, undefined, true);\n                            this.blazorAddorRemoveCollection = [];\n                            this.commandHandler.getBlazorOldValues();\n                        }\n                        else if ((!this.isServerUpdate) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                            this.UpdateBlazorDiagramModel(newObj, 'Connector');\n                            this.commandHandler.getBlazorOldValues();\n                        }\n                    }\n                    if (obj.visible === false) {\n                        this.updateElementVisibility(newObj.wrapper, newObj, obj.visible);\n                    }\n                    this.updateEdges(newObj);\n                    this.insertBlazorConnector(newObj);\n                }\n                else {\n                    newObj = new Node(this, 'nodes', obj, true);\n                    updateDefaultValues(newObj, obj, this.nodeDefaults);\n                    newObj.parentId = (obj.parentId) ? obj.parentId : newObj.parentId;\n                    newObj.umlIndex = obj.umlIndex;\n                    newObj.status = 'New';\n                    this.nodes.push(newObj);\n                    this.initObject(newObj, layers, undefined, group);\n                    if (isBlazor()) {\n                        if ((this.blazorActions & BlazorAction.GroupingInProgress)) {\n                            this.blazorAddorRemoveCollection.push(newObj);\n                        }\n                        else if (this.blazorAddorRemoveCollection.length > 0) {\n                            this.blazorAddorRemoveCollection.push(newObj);\n                            this.isServerUpdate = false;\n                            this.UpdateBlazorDiagramModelCollection(undefined, this.blazorAddorRemoveCollection, undefined, true);\n                            this.commandHandler.getBlazorOldValues();\n                            this.blazorAddorRemoveCollection = [];\n                        }\n                        else if ((!this.isServerUpdate) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                            this.UpdateBlazorDiagramModel(newObj, 'Node');\n                            this.commandHandler.getBlazorOldValues();\n                        }\n                    }\n                    this.updateTemplate();\n                    if (this.bpmnModule) {\n                        if (newObj.shape.annotations && newObj.shape.annotations.length !== 0) {\n                            for (var _i = 0, _a = this.bpmnModule.getTextAnnotationConn(newObj); _i < _a.length; _i++) {\n                                var obj_1 = _a[_i];\n                                this.initConnectors(obj_1, layers, false);\n                            }\n                        }\n                        if (newObj.shape.activity && newObj.shape.activity.subProcess.processes &&\n                            newObj.shape.activity.subProcess.processes.length) {\n                            this.bpmnModule.updateDocks(newObj, this);\n                        }\n                    }\n                    if (this.lineRoutingModule && (this.constraints & DiagramConstraints.LineRouting)) {\n                        var objects = this.spatialSearch.findObjects(newObj.wrapper.outerBounds);\n                        for (var i = 0; i < objects.length; i++) {\n                            var object = objects[i];\n                            if (object instanceof Connector) {\n                                this.connectorPropertyChange(object, {}, {\n                                    sourceID: object.sourceID, targetID: object.targetID, sourcePortID: object.sourcePortID,\n                                    targetPortID: object.targetPortID, sourcePoint: object.sourcePoint, targetPoint: object.targetPoint\n                                });\n                            }\n                        }\n                    }\n                    if (newObj.umlIndex > -1 && obj.parentId && this.nameTable[obj.parentId] &&\n                        this.nameTable[obj.parentId].shape.type === 'UmlClassifier') {\n                        var parent_2 = this.nameTable[obj.parentId];\n                        parent_2.children.splice(newObj.umlIndex, 0, newObj.id);\n                        parent_2.wrapper.children.splice(newObj.umlIndex, 0, newObj.wrapper);\n                        parent_2.wrapper.measure(new Size());\n                        parent_2.wrapper.arrange(parent_2.wrapper.desiredSize);\n                        this.updateDiagramObject(parent_2);\n                    }\n                }\n                args = {\n                    element: newObj, cause: this.diagramActions, state: 'Changed', type: 'Addition', cancel: false\n                };\n                if (this.parentObject) {\n                    args.parentId = this.parentObject.id;\n                }\n                if (isBlazor()) {\n                    args = getCollectionChangeEventArguements(args, obj, 'Changed', 'Addition');\n                }\n                if (obj.id !== 'helper' && !(this.diagramActions & DiagramAction.PreventCollectionChangeOnDragOver)) {\n                    this.triggerEvent(DiagramEvent.collectionChange, args);\n                }\n                if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group) &&\n                    !(this.diagramActions & DiagramAction.PreventHistory)) {\n                    var entry = {\n                        type: 'CollectionChanged', changeType: 'Insert', undoObject: cloneObject(obj),\n                        redoObject: cloneObject(obj), category: 'Internal'\n                    };\n                    this.addHistoryEntry(entry);\n                }\n                this.parentObject = undefined;\n                if (this.mode === 'SVG') {\n                    this.updateSvgNodes(newObj);\n                    this.updateTextElementValue(newObj);\n                    this.updateDiagramObject(newObj);\n                    if (newObj.shape.activity && newObj.shape.activity.subProcess.processes &&\n                        newObj.shape.activity.subProcess.processes.length) {\n                        this.updateProcesses(newObj);\n                    }\n                    this.updateBridging();\n                }\n            }\n        }\n        this.protectPropertyChange(propertyChangeValue);\n        this.resetDiagramActions(DiagramAction.PublicMethod);\n        if (newObj && this.layers.length > 1) {\n            this.moveNode(newObj);\n        }\n        for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n            var temp = _c[_b];\n            var view = this.views[temp];\n            if (!(view instanceof Diagram)) {\n                this.refreshCanvasDiagramLayer(view);\n            }\n        }\n        this.renderReactTemplates();\n        return newObj;\n    };\n    /* tslint:enable */\n    Diagram.prototype.updateSvgNodes = function (node) {\n        if (node.children) {\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var j = _a[_i];\n                if (this.nameTable[j] && this.nameTable[j].parentId) {\n                    var child = getDiagramElement(j + '_groupElement', this.element.id);\n                    if (child) {\n                        child.parentNode.removeChild(child);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *  updateProcesses method\n     *\n     * @returns { void }  updateProcesses method .\\\n     * @param {(Node | Connector)} node - provide the nodeId value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateProcesses = function (node) {\n        if (this.bpmnModule && node && node.shape && node.shape.activity &&\n            node.shape.activity.subProcess.processes &&\n            node.shape.activity.subProcess.processes.length) {\n            var processes = node.shape.activity.subProcess.processes;\n            this.moveSvgNode(node.id);\n            for (var _i = 0, processes_1 = processes; _i < processes_1.length; _i++) {\n                var j = processes_1[_i];\n                this.moveSvgNode(j);\n                var edges = [];\n                edges = edges.concat(this.nameTable[j].outEdges, this.nameTable[j].inEdges);\n                for (var i = edges.length - 1; i >= 0; i--) {\n                    this.moveSvgNode(edges[i]);\n                }\n            }\n            for (var _a = 0, processes_2 = processes; _a < processes_2.length; _a++) {\n                var j = processes_2[_a];\n                if (this.nameTable[j].shape.activity.subProcess.processes &&\n                    this.nameTable[j].shape.activity.subProcess.processes.length) {\n                    this.updateProcesses(this.nameTable[j]);\n                }\n            }\n        }\n        else {\n            this.moveSvgNode(node.id);\n        }\n    };\n    /**\n     *  moveSvgNode method\n     *\n     * @returns { void }  moveSvgNode method .\\\n     * @param {string} nodeId - provide the nodeId value.\n     *\n     * @private\n     */\n    Diagram.prototype.moveSvgNode = function (nodeId) {\n        var child = getDiagramElement(nodeId + '_groupElement', this.element.id);\n        var parent = child.parentElement;\n        child.parentNode.removeChild(child);\n        parent.appendChild(child);\n    };\n    /**\n     * Adds the given annotation to the given node\n     *\n     * @returns { void } Adds the given annotation to the given node .\\\n     * @param {BpmnAnnotationModel} annotation - Defines the annotation to be added\n     * @param {NodeModel} node - Defines the node to which the annotation has to be added\n     */\n    Diagram.prototype.addTextAnnotation = function (annotation, node) {\n        if (this.bpmnModule) {\n            var connector = this.bpmnModule.addAnnotation(node, annotation, this);\n            this.initConnectors(connector, this.commandHandler.getObjectLayer(node.id), false);\n            this.updateDiagramObject(node);\n            if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n                var entry = {\n                    type: 'CollectionChanged', changeType: 'Insert', undoObject: cloneObject(annotation),\n                    redoObject: cloneObject(annotation), category: 'Internal'\n                };\n                this.addHistoryEntry(entry);\n            }\n        }\n    };\n    //Splice the InEdge and OutEdge of the for the node with respect to corresponding connectors that is deleting\n    Diagram.prototype.spliceConnectorEdges = function (connector, isSource) {\n        //let node: Node;\n        var edges = [];\n        //let isInEdge: boolean;\n        var node = isSource ? this.nameTable[connector.sourceID] : this.nameTable[connector.targetID];\n        if (node) {\n            edges = isSource ? node.outEdges : node.inEdges;\n            for (var i = edges.length - 1; i >= 0; i--) {\n                if (edges[i] === connector.id) {\n                    edges.splice(i, 1);\n                }\n            }\n            for (var j = 0; node.ports && j < node.ports.length; j++) {\n                var isInEdge = isSource ? false : true;\n                this.removePortEdges(node, node.ports[j].id, connector.id, isInEdge);\n            }\n        }\n    };\n    /**\n     * Remove the dependent connectors if the node is deleted\n     * @returns { void } Remove the dependent connectors if the node is deleted .\\\n     * @param {Node} node - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeDependentConnector = function (node) {\n        var connector;\n        var edges = [];\n        edges = edges.concat(node.outEdges, node.inEdges);\n        for (var i = edges.length - 1; i >= 0; i--) {\n            connector = this.nameTable[edges[i]];\n            if (connector) {\n                this.connectorTable[connector.id] = cloneObject(connector);\n                this.remove(connector);\n            }\n        }\n    };\n    /**\n     * Remove the dependent connectors if the node is deleted\n     * @returns { void } Remove the dependent connectors if the node is deleted .\\\n     * @param {(NodeModel | ConnectorModel)} obj - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeObjectsFromLayer = function (obj) {\n        if (obj.children) {\n            for (var i = 0; i < obj.children.length; i++) {\n                var object = this.nameTable[obj.children[i]];\n                if (object) {\n                    this.removeObjectsFromLayer(object);\n                }\n            }\n        }\n        var layer = this.layers.indexOf(this.commandHandler.getObjectLayer(obj.id));\n        var objects = this.layers[layer].objects;\n        var objIndex = objects.indexOf(obj.id);\n        if (objIndex > -1) {\n            if (isSelected(this, obj)) {\n                this.unSelect(obj);\n            }\n            this.layers[layer].objects.splice(objIndex, 1);\n            delete this.layers[layer].zIndexTable[this.nameTable[obj.id].zIndex];\n        }\n    };\n    /**\n     * removeElements method \\\n     *\n     * @returns { string }     removeElements method .\\\n     * @param {NodeModel | ConnectorModel} currentObj - provide the currentObj value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeElements = function (currentObj) {\n        if (this.mode === 'SVG' || (this.mode === 'Canvas' && currentObj.shape.type === 'Native')) {\n            var removeElement_1 = getDiagramElement(currentObj.id + '_groupElement', this.element.id);\n            var object = currentObj;\n            if ((object).ports && (object).ports.length > 0) {\n                for (var i = 0; i < (object).ports.length; i++) {\n                    var port = (object).ports[i];\n                    var removePort = getDiagramElement(object.id + '_' + port.id + '_groupElement', this.element.id);\n                    if (removePort) {\n                        removePort.parentNode.removeChild(removePort);\n                    }\n                }\n            }\n            if (removeElement_1) {\n                removeElement_1.parentNode.removeChild(removeElement_1);\n            }\n        }\n        this.refreshCanvasLayers();\n        if (currentObj.wrapper) {\n            var children = currentObj.wrapper.children;\n            var element = void 0;\n            var view = void 0;\n            if (children) {\n                for (var i = 0; i < children.length; i++) {\n                    if (children[i] instanceof DiagramNativeElement || ((children[i].id) && (children[i].id).indexOf('icon_content') > 0)) {\n                        if ((children[i].id).indexOf('icon_content') > 0 && this.mode === 'SVG') {\n                            element = getDiagramElement(children[i].id + '_shape_groupElement', this.element.id);\n                            if (element) {\n                                element.parentNode.removeChild(element);\n                            }\n                            element = getDiagramElement(children[i].id + '_rect_groupElement', this.element.id);\n                            if (element) {\n                                element.parentNode.removeChild(element);\n                            }\n                        }\n                        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n                            var elementId = _a[_i];\n                            removeElement(children[i].id + '_groupElement', elementId);\n                            var nodeIndex = this.scroller.removeCollection.indexOf(currentObj.id);\n                            this.scroller.removeCollection.splice(nodeIndex, 1);\n                        }\n                    }\n                    else if (children[i] instanceof DiagramHtmlElement) {\n                        for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n                            var elementId = _c[_b];\n                            removeElement(currentObj.id + '_html_element', elementId);\n                            removeElement(children[i].id + '_html_element', elementId);\n                            this.clearTemplate(['nodeTemplate' + '_' + currentObj.id]);\n                            if (children[i].annotationId) {\n                                this.clearTemplate(['annotationTemplate' + '_' + currentObj.id + (children[i].annotationId)]);\n                            }\n                        }\n                    }\n                    removeGradient(children[i].id);\n                }\n            }\n        }\n    };\n    Diagram.prototype.removeCommand = function () {\n        this.remove();\n    };\n    /**\n     * Removes the given object from diagram\n     *\n     * @param {NodeModel | ConnectorModel} obj - Defines the object that has to be removed from diagram\n     */\n    /* tslint:disable */\n    Diagram.prototype.remove = function (obj) {\n        var selectedItems = [];\n        selectedItems = selectedItems.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n        var args;\n        var groupAction = false;\n        if (obj) {\n            obj = this.nameTable[obj.id];\n            this.insertBlazorConnector(obj);\n            if (obj && (canDelete(obj) || (this.diagramActions & DiagramAction.Clear))) {\n                args = {\n                    element: obj, cause: this.diagramActions,\n                    state: 'Changing', type: 'Removal', cancel: false\n                };\n                if (isBlazor()) {\n                    args = getCollectionChangeEventArguements(args, obj, 'Changing', 'Removal');\n                }\n                if (!(this.diagramActions & DiagramAction.Clear) && (obj.id !== 'helper')) {\n                    this.triggerEvent(DiagramEvent.collectionChange, args);\n                }\n                if (!args.cancel) {\n                    if (canDelete(obj)) {\n                        if (obj && obj.shape && obj.shape.type === 'SwimLane') {\n                            removeSwimLane(this, obj);\n                        }\n                    }\n                    if (this.bpmnModule) {\n                        if (this.bpmnModule.checkAndRemoveAnnotations(obj, this)) {\n                            this.refreshCanvasLayers();\n                            return;\n                        }\n                    }\n                    if ((!(this.diagramActions & DiagramAction.UndoRedo)) && !(this.diagramActions & DiagramAction.PreventHistory) &&\n                        (obj instanceof Node || obj instanceof Connector)) {\n                        var entry = {\n                            type: 'CollectionChanged', changeType: 'Remove', undoObject: cloneObject(obj),\n                            redoObject: cloneObject(obj), category: 'Internal'\n                        };\n                        if (!(this.diagramActions & DiagramAction.Clear)) {\n                            if (obj.children && !obj.isLane && !obj.isPhase && obj.children.length > 0 && this.undoRedoModule && this.layout.type === 'None') {\n                                this.historyManager.startGroupAction();\n                                groupAction = true;\n                            }\n                        }\n                        if (obj instanceof Node) {\n                            this.removeDependentConnector(obj);\n                        }\n                        if (!obj.isLane && !obj.isPhase) {\n                            if (!(this.diagramActions & DiagramAction.Clear) && !this.isStackChild(obj)) {\n                                this.addHistoryEntry(entry);\n                            }\n                        }\n                    }\n                    if (obj.children && !obj.isLane && !obj.isPhase &&\n                        (!isBlazor() || !(this.diagramActions & DiagramAction.UndoRedo))) {\n                        this.deleteGroup(obj);\n                    }\n                    if (obj.parentId) {\n                        this.deleteChild(obj);\n                        if (this.nameTable[obj.parentId] && this.nameTable[obj.parentId].shape.type === 'UmlClassifier') {\n                            this.updateDiagramObject(this.nameTable[obj.parentId]);\n                            this.updateConnectorEdges(this.nameTable[obj.parentId]);\n                        }\n                    }\n                    var index = void 0;\n                    this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n                    var currentObj = this.nameTable[obj.id];\n                    if (currentObj instanceof Node) {\n                        if (currentObj.shape.type === 'Bpmn' && this.bpmnModule) {\n                            this.bpmnModule.removeBpmnProcesses(currentObj, this);\n                        }\n                        if (currentObj.isLane || currentObj.isPhase || currentObj.shape.type === 'SwimLane') {\n                            var swimLaneNode = (currentObj.isLane || currentObj.isPhase) ?\n                                this.nameTable[currentObj.parentId] : this.nameTable[currentObj.id];\n                            var grid = swimLaneNode.wrapper.children[0];\n                            if (currentObj.isLane) {\n                                removeLane(this, currentObj, swimLaneNode);\n                            }\n                            else if (currentObj.isPhase) {\n                                removePhase(this, currentObj, swimLaneNode);\n                            }\n                        }\n                        index = this.nodes.indexOf(currentObj);\n                        if (isBlazor() && (obj.id !== 'helper')) {\n                            if (this.blazorActions & BlazorAction.GroupingInProgress) {\n                                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                            }\n                            else if (this.blazorAddorRemoveCollection.length > 0) {\n                                this.commandHandler.getBlazorOldValues();\n                                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                                this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n                            }\n                            else if ((!this.isServerUpdate) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                                this.UpdateBlazorDiagramModel(obj, 'Node', index);\n                            }\n                        }\n                        if (index !== -1) {\n                            this.crudDeleteNodes.push(this.nameTable[currentObj.id]);\n                            this.nodes.splice(index, 1);\n                            this.updateNodeEdges(currentObj);\n                        }\n                    }\n                    else {\n                        index = this.connectors.indexOf(currentObj);\n                        if (isBlazor()) {\n                            if (this.blazorActions & BlazorAction.GroupingInProgress) {\n                                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                            }\n                            else if (this.blazorAddorRemoveCollection.length > 0) {\n                                this.commandHandler.getBlazorOldValues();\n                                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                                this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n                            }\n                            else if ((!this.isServerUpdate) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                                this.UpdateBlazorDiagramModel(obj, 'Connector', index);\n                            }\n                        }\n                        if (index !== -1) {\n                            this.crudDeleteNodes.push(this.nameTable[currentObj.id]);\n                            this.connectors.splice(index, 1);\n                        }\n                        this.updateEdges(currentObj);\n                        this.spliceConnectorEdges(obj, true);\n                        this.spliceConnectorEdges(obj, false);\n                    }\n                    if ((!this.isServerUpdate) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                        this.commandHandler.getBlazorOldValues();\n                    }\n                    if (groupAction) {\n                        this.historyManager.endGroupAction();\n                    }\n                    if (isSelected(this, currentObj)) {\n                        this.unSelect(currentObj);\n                    }\n                    if (!currentObj.isPhase) {\n                        this.removeObjectsFromLayer(obj);\n                        if (this.currentDrawingObject) {\n                            this.currentDrawingObject.wrapper = undefined;\n                        }\n                        delete this.nameTable[obj.id];\n                        if (selectedItems.length > 0 && selectedItems[0].id === currentObj.id && currentObj.parentId) {\n                            var parentnode = this.nameTable[currentObj.parentId];\n                            if (parentnode && parentnode.isLane && this.nameTable[parentnode.parentId].shape.type === 'SwimLane') {\n                                var swimLaneNode = this.nameTable[parentnode.parentId];\n                                removeLaneChildNode(this, swimLaneNode, parentnode, currentObj);\n                            }\n                        }\n                        this.removeElements(currentObj);\n                        this.updateBridging();\n                        if (this.mode !== 'SVG') {\n                            this.refreshDiagramLayer();\n                        }\n                        if (!(this.diagramActions & DiagramAction.Clear)) {\n                            this.removeFromAQuad(currentObj);\n                            args = {\n                                element: obj, cause: this.diagramActions,\n                                state: 'Changed', type: 'Removal', cancel: false\n                            };\n                            if (isBlazor()) {\n                                args = getCollectionChangeEventArguements(args, obj, 'Changed', 'Removal');\n                            }\n                            if (obj.id !== 'helper') {\n                                this.triggerEvent(DiagramEvent.collectionChange, args);\n                            }\n                            this.resetTool();\n                        }\n                    }\n                }\n            }\n        }\n        else if (selectedItems.length > 0) {\n            if (this.undoRedoModule) {\n                this.historyManager.startGroupAction();\n                this.blazorActions |= BlazorAction.GroupingInProgress;\n                groupAction = true;\n            }\n            if (isBlazor() && selectedItems.length > 1) {\n                this.clearSelection();\n            }\n            for (var i = 0; i < selectedItems.length; i++) {\n                var node = selectedItems[i];\n                if (this.nameTable[selectedItems[i].id]) {\n                    if ((selectedItems[i] instanceof Connector) && this.bpmnModule &&\n                        this.bpmnModule.textAnnotationConnectors.indexOf(selectedItems[i]) > -1) {\n                        this.remove(this.nameTable[selectedItems[i].targetID]);\n                        return;\n                    }\n                    if (isBlazor()) {\n                        if (!this.isServerUpdate && selectedItems && selectedItems.length > 1) {\n                            this.isServerUpdate = true;\n                        }\n                        if (selectedItems[i].parentId) {\n                            this.insertBlazorDiagramObjects(this.nameTable[selectedItems[i].parentId]);\n                        }\n                    }\n                    this.remove(selectedItems[i]);\n                    if (isBlazor() && selectedItems[i].parentId) {\n                        this.commandHandler.getBlazorOldValues();\n                        this.isServerUpdate = false;\n                    }\n                }\n            }\n            if (groupAction) {\n                this.blazorActions &= ~BlazorAction.GroupingInProgress;\n                this.isServerUpdate = true;\n                this.commandHandler.getBlazorOldValues();\n                this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n                this.historyManager.endGroupAction();\n                this.isServerUpdate = false;\n            }\n            this.clearSelection();\n        }\n        this.tooltipObject.close();\n        if (isBlazor() && selectedItems && selectedItems.length > 0) {\n            var check = true;\n            for (var k = 0; k < selectedItems.length; k++) {\n                if (this.nameTable[selectedItems[k].id]) {\n                    check = false;\n                }\n            }\n            if (check) {\n                this.isServerUpdate = false;\n            }\n        }\n    };\n    /* tslint:enable */\n    Diagram.prototype.isStackChild = function (obj) {\n        var isstack;\n        var parent = this.nameTable[obj.parentId];\n        if (obj && obj.parentId && parent.container &&\n            (parent.container.type === 'Stack' &&\n                this.nameTable[obj.parentId].shape.type !== 'UmlClassifier')) {\n            isstack = true;\n            var redoElement = {\n                sourceIndex: parent.wrapper.children.indexOf(obj.wrapper), source: obj,\n                target: undefined, targetIndex: undefined\n            };\n            var entry = {\n                type: 'StackChildPositionChanged', redoObject: {\n                    sourceIndex: undefined, source: obj,\n                    target: undefined, targetIndex: undefined\n                },\n                undoObject: redoElement,\n                category: 'Internal'\n            };\n            if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n                this.addHistoryEntry(entry);\n            }\n        }\n        return isstack;\n    };\n    /** @private */\n    Diagram.prototype.deleteChild = function (node, parentNode) {\n        var id;\n        parentNode = parentNode ? this.nameTable[parentNode.id] : this.nameTable[node.parentId];\n        if (typeof node === 'string') {\n            id = node;\n        }\n        else {\n            id = node.id;\n        }\n        if (parentNode && parentNode.children) {\n            for (var i = 0; i < parentNode.children.length; i++) {\n                if (parentNode.children[i] === id) {\n                    parentNode.children.splice(i, 1);\n                    for (var j = 0; j < parentNode.wrapper.children.length; j++) {\n                        if (parentNode.wrapper.children[j].id === id) {\n                            parentNode.wrapper.children.splice(j, 1);\n                        }\n                    }\n                }\n            }\n            parentNode.wrapper.measure(new Size());\n            parentNode.wrapper.arrange(parentNode.wrapper.desiredSize);\n        }\n    };\n    /**\n     * addChild method \\\n     *\n     * @returns { string }     addChild method .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {string | NodeModel | ConnectorModel} child - provide the child value.\n     * @param {number} index - provide the layoutOrientation value.\n     *\n     * @private\n     */\n    Diagram.prototype.addChild = function (node, child, index) {\n        var id;\n        var parentNode = this.nameTable[node.id];\n        if (!parentNode.children) {\n            parentNode.children = [];\n        }\n        if (parentNode.children) {\n            if (typeof child === 'string') {\n                if (this.nameTable[child]) {\n                    id = child;\n                }\n            }\n            else {\n                id = child.id = child.id || randomId();\n                this.add(child);\n            }\n            if (id && (!child.umlIndex || child.umlIndex === -1)) {\n                var childNode = this.nameTable[id];\n                childNode.parentId = parentNode.id;\n                if (parentNode.container && parentNode.container.type === 'Stack') {\n                    this.updateStackProperty(parentNode, childNode);\n                }\n                if (index) {\n                    parentNode.children.splice(index, 0, id);\n                    parentNode.wrapper.children.splice(index, 0, childNode.wrapper);\n                }\n                else {\n                    parentNode.children.push(id);\n                    parentNode.wrapper.children.push(childNode.wrapper);\n                }\n                parentNode.wrapper.measure(new Size());\n                parentNode.wrapper.arrange(parentNode.wrapper.desiredSize);\n                if (!parentNode.isLane) {\n                    this.nameTable[node.id].width = parentNode.wrapper.actualSize.width;\n                    this.nameTable[node.id].height = parentNode.wrapper.actualSize.height;\n                    this.nameTable[node.id].offsetX = parentNode.wrapper.offsetX;\n                    this.nameTable[node.id].offsetY = parentNode.wrapper.offsetY;\n                }\n                if (parentNode.container !== undefined) {\n                    childNode.offsetX = childNode.wrapper.offsetX;\n                    childNode.offsetY = childNode.wrapper.offsetY;\n                }\n                if (!parentNode.parentId ||\n                    (this.nameTable[parentNode.parentId] &&\n                        this.nameTable[parentNode.parentId].shape.type !== 'SwimLane')) {\n                    this.updateDiagramObject(parentNode);\n                }\n            }\n        }\n        return id;\n    };\n    /**\n     * Clears all nodes and objects in the diagram\n     *\n     * @returns { void }     getDirection method .\\\n\n     */\n    Diagram.prototype.clear = function () {\n        this.clearObjects();\n    };\n    Diagram.prototype.clearObjects = function (collection) {\n        var objects = [];\n        if (!collection) {\n            objects = objects.concat(this.nodes);\n            objects = objects.concat(this.connectors);\n        }\n        else {\n            objects = collection;\n        }\n        this.diagramActions = this.diagramActions | DiagramAction.Clear;\n        if (isBlazor() && blazorTemplates[\"diagramsf_node_template\"]) {\n            this.resetTemplate();\n            var length_1 = blazorTemplates[\"diagramsf_node_template\"].length;\n            if (length_1 > 0) {\n                blazorTemplates[\"diagramsf_node_template\"].splice(0, length_1 - 1);\n            }\n        }\n        for (var _i = 0, objects_1 = objects; _i < objects_1.length; _i++) {\n            var obj = objects_1[_i];\n            if (this.nameTable[obj.id]) {\n                this.remove(obj);\n            }\n        }\n        this.diagramActions = this.diagramActions & ~DiagramAction.Clear;\n        this.spatialSearch = new SpatialSearch(this.nameTable);\n        this.initHistory();\n    };\n    Diagram.prototype.startEditCommad = function () {\n        var laneHeader;\n        var node = (this.selectedItems.nodes[0]) ? this.selectedItems.nodes[0] : undefined;\n        if (node && node instanceof Node) {\n            if (node.isLane && node.parentId) {\n                var swimlane = this.nameTable[node.parentId];\n                var lanes = swimlane.shape.lanes;\n                var canvasId = (node.id.slice(swimlane.id.length));\n                var currentParentId = canvasId.substring(0, canvasId.length - 1);\n                for (var i = 0; i < lanes.length; i++) {\n                    if (node.isLane && currentParentId === lanes[i].id) {\n                        laneHeader = this.nameTable[lanes[i].header.id];\n                    }\n                }\n            }\n            else if (node.shape.type === 'SwimLane' && node.shape.header && node.shape.hasHeader) {\n                var id = node.wrapper.children[0].rows[0].cells[0].children[0].id;\n                laneHeader = this.nameTable[id];\n            }\n        }\n        this.startTextEdit(laneHeader);\n    };\n    /* tslint:disable */\n    /**\n     * Specified annotation to edit mode\n     *\n     * @returns { void }  Specified annotation to edit mode .\\\n     * @param {NodeModel | ConnectorModel} node - Defines node/connector that contains the annotation to be edited\n     * @param {string} id - Defines annotation id to be edited in the node\n     */\n    Diagram.prototype.startTextEdit = function (node, id) {\n        if ((!canZoomPan(this) && !canMultiSelect(this)) || canSingleSelect(this)) {\n            this.textEditing = true;\n            var transform = this.scroller.transform;\n            var scale = canZoomTextEdit(this) ? transform.scale : 1;\n            var minWidth = 90;\n            var text = void 0;\n            var bounds = void 0;\n            var attributes = void 0;\n            var x = void 0;\n            var y = void 0;\n            var textWrapper = void 0;\n            if (!node) {\n                node = (this.selectedItems.nodes[0]) ? this.selectedItems.nodes[0] : this.selectedItems.connectors[0];\n            }\n            if (node) {\n                if (isBlazor()) {\n                    var selectedNode = cloneObject(node);\n                    if (selectedNode.annotations.length > 0) {\n                        this.insertValue(selectedNode, (node instanceof Node) ? true : false);\n                    }\n                    node = this.nameTable[node.id] || node;\n                }\n                if (node.shape && node.shape.type === 'UmlClassifier') {\n                    node = this.nameTable[node.children[0]];\n                }\n                var bpmnAnnotation = false;\n                if (this.bpmnModule) {\n                    textWrapper = this.bpmnModule.getTextAnnotationWrapper(node, id);\n                    if (textWrapper) {\n                        node = this.nameTable[node.id.split('_textannotation_')[0]];\n                    }\n                }\n                if (!textWrapper) {\n                    if (node.shape.type !== 'Text' && node.annotations.length === 0) {\n                        if (!(node.constraints & NodeConstraints.ReadOnly)) {\n                            this.activeLabel.isGroup = true;\n                            this.startGroupAction();\n                            this.addLabels(node, [{ id: randomId(), content: '' }]);\n                        }\n                    }\n                    if (!id && ((node.shape.type !== 'Text' && node.annotations.length > 0) || (node.shape.type === 'Text'))) {\n                        id = (node.shape.type === 'Text') ? (node.wrapper.children[0].id).split('_')[1] : node.annotations[0].id;\n                    }\n                    if (id) {\n                        textWrapper = this.getWrapper(node.wrapper, id);\n                    }\n                }\n                else {\n                    bpmnAnnotation = true;\n                }\n                if (node && textWrapper && !(textWrapper instanceof DiagramHtmlElement) &&\n                    (!enableReadOnly(textWrapper, node) || bpmnAnnotation)) {\n                    var style = (textWrapper.style);\n                    var maxWidth = void 0;\n                    maxWidth = textWrapper.bounds.width < node.wrapper.bounds.width ? textWrapper.bounds.width : node.wrapper.bounds.width;\n                    maxWidth = minWidth > maxWidth ? minWidth : maxWidth;\n                    var textEditing = document.getElementById(this.element.id + '_editTextBoxDiv');\n                    var textArea = document.getElementById(this.element.id + '_editBox');\n                    text = textArea ? textArea.value : textWrapper.content;\n                    this.activeLabel.text = text;\n                    if (!textEditing && !textArea) {\n                        textEditing = createHtmlElement('div', {});\n                        textArea = createHtmlElement('textarea', {});\n                        this.diagramCanvas.appendChild(textEditing);\n                        textEditing.appendChild(textArea);\n                        textArea.appendChild(document.createTextNode(text));\n                    }\n                    bounds = measureHtmlText(textWrapper.style, text, undefined, undefined, maxWidth);\n                    if (bounds.isEmpty()) {\n                        if (node.shape.type !== 'Text') {\n                            bounds = new Size(findAnnotation(node, (textWrapper.id).split(node.id + '_')[1]).width || 50, textWrapper.style.fontSize);\n                        }\n                        else {\n                            bounds = new Size((node.width > 50) ? 50 : node.width, textWrapper.style.fontSize);\n                        }\n                    }\n                    if (node.parentId && this.nameTable[node.parentId].shape.type === 'UmlClassifier') {\n                        bounds.width = node.wrapper.bounds.width - 20;\n                        x = ((((node.wrapper.bounds.center.x + transform.tx) * transform.scale) - (bounds.width / 2) * scale) - 2.5);\n                        y = ((((node.wrapper.bounds.center.y + transform.ty) * transform.scale) - (bounds.height / 2) * scale) - 3);\n                        textWrapper.style.textAlign = 'Left';\n                    }\n                    else {\n                        bounds.width = Math.max(bounds.width, 50);\n                        x = ((((textWrapper.bounds.center.x + transform.tx) * transform.scale) - (bounds.width / 2) * scale) - 2.5);\n                        y = ((((textWrapper.bounds.center.y + transform.ty) * transform.scale) - (bounds.height / 2) * scale) - 3);\n                    }\n                    if (node instanceof Connector && node.type === 'Bezier') {\n                        var getCenterPoint = this.getMidPoint(node);\n                        x = getCenterPoint.cx;\n                        y = getCenterPoint.cy;\n                    }\n                    attributes = {\n                        'id': this.element.id + '_editTextBoxDiv', 'style': 'position: absolute' + ';left:' + x + 'px;top:' +\n                            y + 'px;width:' + ((bounds.width + 1) * scale) + 'px;height:' + (bounds.height * scale) +\n                            'px; containerName:' + node.id + ';'\n                    };\n                    setAttributeHtml(textEditing, attributes);\n                    attributes = {\n                        'id': this.element.id + '_editBox', 'style': 'width:' + ((bounds.width + 1) * scale) +\n                            'px;height:' + (bounds.height * scale) + 'px;resize: none;outline: none;overflow: hidden;' +\n                            ';font-family:' + style.fontFamily +\n                            ';font-size:' + (style.fontSize * scale) + 'px;text-align:' +\n                            (textWrapper.style.textAlign.toLocaleLowerCase()) + ';', 'class': 'e-diagram-text-edit'\n                    };\n                    setAttributeHtml(textArea, attributes);\n                    textArea.style.fontWeight = (style.bold) ? 'bold' : '';\n                    textArea.style.fontStyle = (style.italic) ? 'italic' : '';\n                    textArea.style.lineHeight = (style.fontSize * 1.2 + 'px;').toString();\n                    textArea.style.textDecoration = (style.textDecoration) ? style.textDecoration : '';\n                    this.activeLabel.parentId = node.id;\n                    this.activeLabel.id = id;\n                    textWrapper.visible = false;\n                    this.updateDiagramObject(node);\n                    this.diagramActions = this.diagramActions | DiagramAction.TextEdit;\n                    if (!this.isTriggerEvent) {\n                        EventHandler.add(textArea, 'input', this.eventHandler.inputChange, this.eventHandler);\n                        EventHandler.add(textArea, 'focusout', this.focusOutEdit, this);\n                        textArea.select();\n                    }\n                }\n            }\n        }\n    };\n    Diagram.prototype.updateConnectorfixedUserHandles = function (connector) {\n        if (connector.fixedUserHandles.length) {\n            var fixedUserHandleWrapper = void 0;\n            for (var _i = 0, _a = connector.fixedUserHandles; _i < _a.length; _i++) {\n                var fixedUserHandle = _a[_i];\n                fixedUserHandleWrapper = this.getWrapper(connector.wrapper, fixedUserHandle.id);\n                connector.updateAnnotation(fixedUserHandle, connector.intermediatePoints, connector.wrapper.bounds, fixedUserHandleWrapper);\n            }\n        }\n        connector.wrapper.measure(new Size(connector.wrapper.width, connector.wrapper.height));\n        connector.wrapper.arrange(connector.wrapper.desiredSize);\n    };\n    /* tslint:enable */\n    Diagram.prototype.updateNodeExpand = function (node, visibility) {\n        for (var i = 0; i < node.outEdges.length; i++) {\n            var connector = this.nameTable[node.outEdges[i]];\n            var target = this.nameTable[connector.targetID];\n            connector.visible = visibility;\n            if (target) {\n                if (!visibility) {\n                    this.updateElementVisibility(connector.wrapper, connector, false);\n                    target.isExpanded = visibility;\n                }\n                this.updateNodeExpand(target, target.isExpanded);\n                target.visible = visibility;\n                if (!visibility) {\n                    this.updateElementVisibility(target.wrapper, target, false);\n                }\n            }\n        }\n    };\n    Diagram.prototype.updateConnectorAnnotation = function (connector) {\n        if (connector.annotations.length) {\n            var annotationWrapper = void 0;\n            for (var _i = 0, _a = connector.annotations; _i < _a.length; _i++) {\n                var annotation = _a[_i];\n                annotationWrapper = this.getWrapper(connector.wrapper, annotation.id);\n                connector.updateAnnotation(annotation, connector.intermediatePoints, connector.wrapper.bounds, annotationWrapper, (this.diagramActions & DiagramAction.Interactions));\n            }\n        }\n        connector.wrapper.measure(new Size(connector.wrapper.width, connector.wrapper.height));\n        connector.wrapper.arrange(connector.wrapper.desiredSize);\n    };\n    Diagram.prototype.removeChildrenFromLayout = function (nodes) {\n        var nodesCollection = [];\n        var node;\n        var parentId = 'parentId';\n        var processId = 'processId';\n        for (var i = 0; i < nodes.length; i++) {\n            node = nodes[i];\n            if (!node[parentId] && !node[processId]) {\n                nodesCollection.push(node);\n            }\n        }\n        return nodesCollection;\n    };\n    /* tslint:disable */\n    /**\n     * Automatically updates the diagram objects based on the type of the layout\n     * @returns { ILayout | boolean }  Automatically updates the diagram objects based on the type of the layout .\\\n     */\n    Diagram.prototype.doLayout = function () {\n        var update = false;\n        var layout;\n        var canDoOverlap = (this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree');\n        var propChange = this.isProtectedOnChange;\n        this.protectPropertyChange(true);\n        var nodes = this.removeChildrenFromLayout(this.nodes);\n        var canEnableRouting = this.layout.enableRouting && this.layout.type === 'ComplexHierarchicalTree';\n        var viewPort = { x: this.scroller.viewPortWidth, y: this.scroller.viewPortHeight };\n        if (this.layout.type !== 'None') {\n            if (canEnableRouting || (this.layout.connectionPointOrigin === 'DifferentPoint' && this.lineDistributionModule && canDoOverlap) || this.layout.arrangement === 'Linear') {\n                this.lineDistributionModule.initLineDistribution(this.layout, this);\n            }\n            if (this.organizationalChartModule) {\n                layout = this.organizationalChartModule.updateLayout(nodes, this.nameTable, this.layout, viewPort, this.dataSourceSettings.id, this.diagramActions);\n                update = true;\n                if (this.layoutAnimateModule && layout.rootNode && !this.diagramActions) {\n                    this.updateNodeExpand(layout.rootNode, layout.rootNode.isExpanded);\n                }\n            }\n            else if (this.mindMapChartModule) {\n                if (nodes && nodes.length > 0) {\n                    this.mindMapChartModule.updateLayout(nodes, this.nameTable, this.layout, viewPort, this.dataSourceSettings.id, this.dataSourceSettings.root);\n                }\n                update = true;\n            }\n            else if (this.radialTreeModule) {\n                this.radialTreeModule.updateLayout(nodes, this.nameTable, this.layout, viewPort);\n                update = true;\n            }\n            else if (this.symmetricalLayoutModule) {\n                this.symmetricalLayoutModule.maxIteration = this.layout.maxIteration;\n                this.symmetricalLayoutModule.springLength = this.layout.springLength;\n                this.symmetricalLayoutModule.springFactor = this.layout.springFactor;\n                this.symmetricalLayoutModule.updateLayout(nodes, this.connectors, this.symmetricalLayoutModule, this.nameTable, this.layout, viewPort);\n                update = true;\n            }\n            else if (this.complexHierarchicalTreeModule) {\n                var nodes_1 = this.complexHierarchicalTreeModule.getLayoutNodesCollection(this.nodes);\n                if (nodes_1.length > 0) {\n                    // eslint-disable-next-line max-len\n                    this.complexHierarchicalTreeModule.doLayout(nodes_1, this.nameTable, this.layout, viewPort, this.lineDistributionModule);\n                }\n                update = true;\n            }\n            if (update) {\n                this.preventDiagramUpdate = true;\n                var connectors = {};\n                var updatedNodes = nodes;\n                if (isBlazor()) {\n                    this.updateTemplate();\n                }\n                for (var _i = 0, updatedNodes_1 = updatedNodes; _i < updatedNodes_1.length; _i++) {\n                    var obj = updatedNodes_1[_i];\n                    var node = obj;\n                    if (!this.preventNodesUpdate && (!this.diagramActions || !(this.diagramActions & DiagramAction.PreventIconsUpdate))) {\n                        this.updateIcon(node);\n                        this.updateDefaultLayoutIcons(node);\n                    }\n                    this.preventNodesUpdate = true;\n                    this.nodePropertyChange(node, {}, { offsetX: node.offsetX, offsetY: node.offsetY }, true);\n                    this.preventNodesUpdate = false;\n                    node.wrapper.measure(new Size(node.wrapper.width, node.wrapper.height));\n                    node.wrapper.arrange(node.wrapper.desiredSize);\n                    this.updateDiagramObject(node, true);\n                    if (node.inEdges.length > 0) {\n                        for (var j = 0; j < node.inEdges.length; j++) {\n                            var connector = this.nameTable[node.inEdges[j]];\n                            connectors[connector.id] = connector;\n                        }\n                    }\n                    if (node.outEdges.length > 0) {\n                        for (var k = 0; k < node.outEdges.length; k++) {\n                            var connection = this.nameTable[node.outEdges[k]];\n                            connectors[connection.id] = connection;\n                        }\n                    }\n                }\n                for (var _a = 0, _b = Object.keys(connectors); _a < _b.length; _a++) {\n                    var conn = _b[_a];\n                    if (canEnableRouting) {\n                        this.lineDistributionModule.resetConnectorSegments(this.nameTable[conn]);\n                    }\n                    var connector = connectors[conn];\n                    var points = this.getPoints(connector);\n                    if (canEnableRouting) {\n                        this.lineDistributionModule.resetRoutingSegments(connector, this, points);\n                    }\n                    updateConnector(connector, points);\n                    if (connector.shape.type === 'Bpmn' && connector.shape.sequence === 'Default') {\n                        this.commandHandler.updatePathElementOffset(connector);\n                    }\n                    connector.wrapper.measure(new Size(undefined, undefined));\n                    connector.wrapper.arrange(connector.wrapper.desiredSize);\n                    this.updateConnectorAnnotation(connector);\n                    this.updateConnectorfixedUserHandles(connector);\n                    this.updateQuad(connector);\n                    this.updateDiagramObject(connector, true);\n                }\n                if (canEnableRouting || this.layout.connectionPointOrigin === 'DifferentPoint' && this.lineDistributionModule && canDoOverlap) {\n                    this.lineDistributionModule.distributeLines(this.layout, this);\n                }\n                this.preventDiagramUpdate = false;\n                this.updatePage();\n                if ((!(this.diagramActions & DiagramAction.Render)) || this.mode === 'Canvas') {\n                    this.refreshDiagramLayer();\n                }\n            }\n            if (!propChange) {\n                this.protectPropertyChange(propChange);\n            }\n        }\n        if (update) {\n            this.updateDiagramElementQuad();\n        }\n        return ((this.blazorActions & BlazorAction.expandNode) ? layout : isBlazor() ? null : true);\n    };\n    /* tslint:enable */\n    /**\n     * Serializes the diagram control as a string\n     * @returns { string }     Serializes the diagram control as a string .\\\n     */\n    Diagram.prototype.saveDiagram = function () {\n        var children = [];\n        var node;\n        var grid;\n        var childTable;\n        var child;\n        var gridChild = 'childTable';\n        for (var i = 0; i < this.nodes.length; i++) {\n            node = this.nodes[i];\n            if (node.shape.type === 'SwimLane') {\n                grid = node.wrapper.children[0];\n                childTable = grid[gridChild];\n                for (var _i = 0, _a = Object.keys(childTable); _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    child = childTable[key];\n                    children = getChild(child, children);\n                }\n                for (var i_2 = 0; i_2 < children.length; i_2++) {\n                    if (this.nameTable[children[i_2]]) {\n                        this.swimlaneChildTable[children[i_2]] = this.nameTable[children[i_2]].zIndex;\n                    }\n                }\n                this.swimlaneZIndexTable[node.id] = node.zIndex;\n            }\n        }\n        return serialize(this);\n    };\n    /**\n     * Converts the given string as a Diagram Control\n     *\n     * @returns { Object }      Converts the given string as a Diagram Control .\\\n     * @param {string} data - Defines the behavior of the diagram to be loaded\n\n     */\n    Diagram.prototype.loadDiagram = function (data) {\n        return deserialize(data, this);\n    };\n    /**\n     * To  get the html diagram content\n     *\n     * @returns { string }     getDirection method .\\\n     * @param {StyleSheetList} styleSheets - defines the collection of style files to be considered while exporting.\n     */\n    Diagram.prototype.getDiagramContent = function (styleSheets) {\n        if (this.printandExportModule) {\n            var data = this.printandExportModule.getDiagramContent(styleSheets);\n            return data;\n        }\n        return '';\n    };\n    /**\n     * To export diagram native/html image\n     *\n     * @returns { void } To export diagram native/html image .\\\n     * @param {string} image - defines image content to be exported.\n     * @param {IExportOptions} options - defines the image properties.\n     */\n    Diagram.prototype.exportImage = function (image, options) {\n        if (this.printandExportModule) {\n            this.printandExportModule.exportImages(image, options);\n        }\n    };\n    /**\n     * To print native/html nodes of diagram\n     *\n     * @returns { void } To print native/html nodes of diagram .\\\n     * @param {string} image - defines image content.\n     * @param {IExportOptions} options - defines the properties of the image\n     */\n    Diagram.prototype.printImage = function (image, options) {\n        if (this.printandExportModule) {\n            options.printOptions = true;\n            this.printandExportModule.exportImages(image, options);\n        }\n    };\n    /**\n     * To limit the history entry of the diagram\n     *\n     * @returns { void }  To limit the history entry of the diagram.\\\n     * @param {number} stackLimit - defines stackLimit of the history manager.\n     */\n    Diagram.prototype.setStackLimit = function (stackLimit) {\n        if (this.undoRedoModule && stackLimit) {\n            this.historyManager.stackLimit = stackLimit;\n            this.undoRedoModule.applyLimit(this.historyManager.currentEntry, stackLimit, this, true);\n        }\n    };\n    /**\n     * To clear history of the diagram\n     * @returns { void } To clear history of the diagram .\\\n     */\n    Diagram.prototype.clearHistory = function () {\n        if (this.undoRedoModule) {\n            this.undoRedoModule.clearHistory(this);\n        }\n    };\n    /**\n     * To get the bound of the diagram\n     * @returns { void } To get the bound of the diagram .\\\n     */\n    Diagram.prototype.getDiagramBounds = function () {\n        if (this.printandExportModule) {\n            var bounds = this.printandExportModule.getDiagramBounds('', {});\n            bounds.width = bounds.width > this.scrollSettings.viewPortWidth ?\n                bounds.width + (bounds.x > 0 ? bounds.x : 0) : this.scrollSettings.viewPortWidth;\n            bounds.height = bounds.height > this.scrollSettings.viewPortHeight ?\n                bounds.height + (bounds.y > 0 ? bounds.y : 0) : this.scrollSettings.viewPortHeight;\n            bounds.x = bounds.x > 0 ? 0 : bounds.x;\n            bounds.y = bounds.y > 0 ? 0 : bounds.y;\n            return bounds;\n        }\n        return new Rect();\n    };\n    /**\n     * To export Diagram\n     *\n     * @returns { void } To export Diagram .\\\n     * @param {IExportOptions} options - defines the how the image to be exported.\n     */\n    Diagram.prototype.exportDiagram = function (options) {\n        if (this.printandExportModule) {\n            var data = this.printandExportModule.exportDiagram(options);\n            return data;\n        }\n        return '';\n    };\n    /**\n     * To print Diagram\n     *\n     * @returns { void }     To print Diagram .\\\n     * @param {IPrintOptions} optons - defines how the image to be printed.\n     */\n    Diagram.prototype.print = function (options) {\n        if (this.printandExportModule) {\n            this.printandExportModule.print(options);\n        }\n    };\n    /**\n     * Add ports at the run time \\\n     *\n     * @returns { void }    Remove Labels at the run time .\\\n     * @param { Node | ConnectorModel} obj - provide the obj value.\n     * @param {ShapeAnnotationModel[] | PathAnnotationModel[]} ports - provide the ports value.\n     * @blazorArgsType obj|DiagramNode\n     */\n    Diagram.prototype.addPorts = function (obj, ports) {\n        this.protectPropertyChange(true);\n        var portCollection = [];\n        var isAddPortInServer = true;\n        if (isBlazor() && obj !== null && (obj.ports.length > 0 && !(this.diagramActions & DiagramAction.UndoRedo))) {\n            var index = Number(findObjectIndex(obj, ports[0].id, false));\n            if (index !== -1) {\n                isAddPortInServer = false;\n            }\n        }\n        obj = this.nameTable[obj.id] || obj;\n        var newObj;\n        if (ports.length > 1) {\n            this.startGroupAction();\n        }\n        for (var i = 0; i < ports.length; i++) {\n            newObj = new PointPort(obj, 'ports', ports[i], true);\n            obj.ports.push(newObj);\n            if (isBlazor() && isAddPortInServer) {\n                portCollection.push(newObj);\n            }\n            if (obj.children) {\n                var container = obj.wrapper;\n                obj.initPort(this.getDescription, obj.wrapper.children[container.children.length - 1], newObj);\n            }\n            else {\n                var canvas = obj.wrapper;\n                canvas.children.push(obj.initPortWrapper(obj.ports[obj.ports.length - 1]));\n            }\n            if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n                var entry = {\n                    type: 'PortCollectionChanged', changeType: 'Insert', undoObject: cloneObject(newObj),\n                    redoObject: cloneObject(obj), category: 'Internal'\n                };\n                this.addHistoryEntry(entry);\n            }\n        }\n        if (ports.length > 1) {\n            this.endGroupAction();\n        }\n        if (isBlazor() && isAddPortInServer) {\n            this.UpdateBlazorLabelOrPortObjects(portCollection, 'Port', undefined, this.nodes.indexOf(obj));\n        }\n        obj.wrapper.measure(new Size(obj.width, obj.height));\n        obj.wrapper.arrange(obj.wrapper.desiredSize);\n        this.updateDiagramObject(obj);\n        this.protectPropertyChange(false);\n    };\n    /**\n     * Add constraints at run time \\\n     *\n     * @returns { void }Add constraints at run time .\\\n     * @param {number} constraintsType - provide the source value.\n     * @param {number} constraintsValue - provide the target value.\n     *\n     */\n    Diagram.prototype.addConstraints = function (constraintsType, constraintsValue) {\n        return constraintsType | constraintsValue;\n    };\n    /**\n     * Remove constraints at run time \\\n     *\n     * @returns { void }Remove constraints at run time .\\\n     * @param {number} constraintsType - provide the source value.\n     * @param {number} constraintsValue - provide the target value.\n     *\n     */\n    Diagram.prototype.removeConstraints = function (constraintsType, constraintsValue) {\n        return constraintsType & ~constraintsValue;\n    };\n    /**\n     * Add labels in node at the run time in the blazor platform \\\n     *\n     * @returns { void } Add labels in node at the run time in the blazor platform .\\\n     * @param {NodeModel} obj - provide the obj value.\n     * @param {ShapeAnnotationModel[]} labels - provide the labels value.\n     *\n     */\n    Diagram.prototype.addNodeLabels = function (obj, labels) {\n        this.addLabels(obj, labels);\n    };\n    /**\n     * Add labels in connector at the run time in the blazor platform\\\n     *\n     * @returns { void } Add labels in connector at the run time in the blazor platform .\\\n     * @param {ConnectorModel} obj - provide the obj value.\n     * @param {PathAnnotationModel[]} labels - provide the labels value.\n     *\n     */\n    Diagram.prototype.addConnectorLabels = function (obj, labels) {\n        this.addLabels(obj, labels);\n    };\n    /**\n     * Add Labels at the run time \\\n     *\n     * @returns { void } Add Labels at the run time .\\\n     * @param {NodeModel | ConnectorModel} obj - provide the obj value.\n     * @param {ShapeAnnotationModel[] | PathAnnotation[] | PathAnnotationModel[]} labels - provide the labels value.\n     *\n     */\n    Diagram.prototype.addLabels = function (obj, labels) {\n        this.protectPropertyChange(true);\n        var isAddLabelInServer = true;\n        var annotationCollection = [];\n        if (isBlazor() && obj != null && obj.annotations.length > 0 && !(this.diagramActions & DiagramAction.UndoRedo)) {\n            var index = Number(findObjectIndex(obj, labels[0].id, true));\n            if (index !== -1) {\n                isAddLabelInServer = false;\n            }\n        }\n        obj = this.nameTable[obj.id] || obj;\n        var canvas = obj.wrapper;\n        var newObj;\n        if (labels.length > 1) {\n            this.startGroupAction();\n        }\n        for (var i = 0; i < labels.length; i++) {\n            if (obj instanceof Node) {\n                newObj = new ShapeAnnotation(obj, 'annotations', labels[i], true);\n                obj.annotations.push(newObj);\n                if (isBlazor() && isAddLabelInServer) {\n                    annotationCollection.push(newObj);\n                }\n                if (obj.children) {\n                    var node = obj;\n                    for (var i_3 = 0; i_3 < node.wrapper.children.length; i_3++) {\n                        if (node.wrapper.children[i_3].id === node.id + 'group_container') {\n                            var container = node.wrapper.children[i_3];\n                            container.children.push(obj.initAnnotationWrapper(obj.annotations[obj.annotations.length - 1], this.element.id));\n                        }\n                    }\n                }\n                else {\n                    canvas.children.push(obj.initAnnotationWrapper(obj.annotations[obj.annotations.length - 1], this.element.id));\n                }\n            }\n            else if (obj instanceof Connector) {\n                newObj = new PathAnnotation(obj, 'annotations', labels[i], true);\n                obj.annotations.push(newObj);\n                if (isBlazor() && isAddLabelInServer) {\n                    annotationCollection.push(newObj);\n                }\n                var segment = canvas.children[0];\n                var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n                canvas.children.push(obj.getAnnotationElement(obj.annotations[obj.annotations.length - 1], obj.intermediatePoints, bounds, this.getDescription, this.element.id));\n            }\n            if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n                var entry = {\n                    type: 'LabelCollectionChanged', changeType: 'Insert', undoObject: cloneObject(newObj),\n                    redoObject: cloneObject(obj), category: 'Internal'\n                };\n                this.addHistoryEntry(entry);\n            }\n        }\n        if (labels.length > 1) {\n            this.endGroupAction();\n        }\n        if (isBlazor() && isAddLabelInServer) {\n            this.UpdateBlazorLabelOrPortObjects(annotationCollection, (obj instanceof Node) ? 'NodeAnnotation' : 'ConnectorAnnotation', undefined, (obj instanceof Node) ? this.nodes.indexOf(obj) : this.connectors.indexOf(obj));\n        }\n        obj.wrapper.measure(new Size(canvas.width, canvas.height));\n        obj.wrapper.arrange(canvas.desiredSize);\n        this.updateDiagramObject(obj);\n        this.protectPropertyChange(false);\n    };\n    /**\n     * Add dynamic Lanes to swimLane at runtime \\\n     *\n     * @returns { void } Add dynamic Lanes to swimLane at runtime .\\\n     * @param {NodeModel} node - provide the obj value.\n     * @param {LaneModel[]} lane - provide the labels value.\n     * @param {number} index - provide the labels value.\n     *\n     */\n    Diagram.prototype.addLanes = function (node, lane, index) {\n        node = this.nameTable[node.id] || node;\n        for (var i = 0; i < lane.length; i++) {\n            addLane(this, node, lane[i], index);\n            if (index !== undefined) {\n                index += 1;\n            }\n        }\n        this.updateDiagramElementQuad();\n    };\n    /**\n     * Add a phase to a swimLane at runtime \\\n     *\n     * @returns { void } Add a phase to a swimLane at runtime .\\\n     * @param {NodeModel} node - provide the obj value.\n     * @param {PhaseModel[]} phases - provide the labels value.\n     *\n     */\n    Diagram.prototype.addPhases = function (node, phases) {\n        node = this.nameTable[node.id] || node;\n        for (var i = 0; i < phases.length; i++) {\n            addPhase(this, node, phases[i]);\n        }\n        this.updateDiagramElementQuad();\n    };\n    /**\n     *Remove dynamic Lanes to swimLane at runtime \\\n     *\n     * @returns { void } Remove dynamic Lanes to swimLane at runtime .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {LaneModel} lane - provide the lane value.\n     *\n     */\n    Diagram.prototype.removeLane = function (node, lane) {\n        removeLane(this, undefined, node, lane);\n        this.updateDiagramElementQuad();\n    };\n    /**\n     *Remove a phase to a swimLane at runtime \\\n     *\n     * @returns { void } Remove a phase to a swimLane at runtime .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {PhaseModel} phase - provide the phase value.\n     *\n     */\n    Diagram.prototype.removePhase = function (node, phase) {\n        removePhase(this, undefined, node, phase);\n        this.updateDiagramElementQuad();\n    };\n    Diagram.prototype.removelabelExtension = function (obj, labels, j, wrapper) {\n        for (var i = 0; i < wrapper.children.length; i++) {\n            var canvas = wrapper.children[i];\n            if ((canvas instanceof TextElement) || (canvas instanceof DiagramHtmlElement)) {\n                if (canvas.id.match('_' + labels[j].id + '$')) {\n                    for (var k = 0; k < obj.annotations.length; k++) {\n                        if (canvas.id.match('_' + obj.annotations[k].id + '$')) {\n                            if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n                                var entry = {\n                                    type: 'LabelCollectionChanged', changeType: 'Remove', undoObject: cloneObject(obj.annotations[k]),\n                                    redoObject: cloneObject(obj), category: 'Internal'\n                                };\n                                this.addHistoryEntry(entry);\n                            }\n                            obj.annotations.splice(k, 1);\n                        }\n                    }\n                    wrapper.children.splice(i, 1);\n                    if (this.mode === 'SVG') {\n                        var element = getDiagramElement(canvas.id, this.element.id);\n                        if (element) {\n                            var element_1 = getDiagramElement(canvas.id, this.element.id);\n                            element_1.parentNode.removeChild(element_1);\n                        }\n                        var textElement = getDiagramElement(canvas.id + '_text', this.element.id);\n                        if (textElement) {\n                            element = getDiagramElement(canvas.id + '_text', this.element.id);\n                            element.parentNode.removeChild(element);\n                        }\n                        var htmlElement = getDiagramElement(canvas.id + '_html_element', this.element.id);\n                        if (htmlElement) {\n                            htmlElement.parentNode.removeChild(htmlElement);\n                        }\n                    }\n                    else {\n                        this.refreshCanvasLayers();\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Remove Labels at the run time \\\n     *\n     * @returns { string }    Remove Labels at the run time .\\\n     * @param { Node | ConnectorModel} obj - provide the obj value.\n     * @param {ShapeAnnotationModel[] | PathAnnotationModel[]} labels - provide the labels value.\n     *\n     */\n    Diagram.prototype.removeLabels = function (obj, labels) {\n        var isAddLabelInServer = true;\n        if (isBlazor() && obj !== null && !(this.diagramActions & DiagramAction.UndoRedo)) {\n            var index = (obj.annotations.length > 0) ? Number(findObjectIndex(obj, (labels[0]).id, true)) : -1;\n            if (index === -1) {\n                isAddLabelInServer = false;\n            }\n        }\n        obj = this.nameTable[obj.id] || obj;\n        if (isBlazor() && isAddLabelInServer) {\n            var annotationCollection = [];\n            var removalIndexCollection = [];\n            for (var j = 0; j < labels.length; j++) {\n                var index = Number(findObjectIndex(obj, labels[j].id, true));\n                removalIndexCollection.push(index);\n                annotationCollection.push(labels[j]);\n            }\n            this.UpdateBlazorLabelOrPortObjects(annotationCollection, (obj instanceof Node) ? 'NodeAnnotation' : 'ConnectorAnnotation', removalIndexCollection, (obj instanceof Node) ? this.nodes.indexOf(obj) : this.connectors.indexOf(obj));\n        }\n        if (labels.length > 1) {\n            this.startGroupAction();\n        }\n        for (var j = labels.length - 1; j >= 0; j--) {\n            if (obj.children && obj.children.length > 0) {\n                for (var k = 0; k < obj.wrapper.children.length; k++) {\n                    this.removelabelExtension(obj, labels, j, obj.wrapper.children[k]);\n                }\n            }\n            else {\n                this.removelabelExtension(obj, labels, j, obj.wrapper);\n            }\n        }\n        if (labels.length > 1) {\n            this.endGroupAction();\n        }\n    };\n    Diagram.prototype.removePortsExtenion = function (obj, ports, j, wrapper) {\n        for (var i = 0; i < wrapper.children.length; i++) {\n            var canvas = wrapper.children[i];\n            if (canvas instanceof PathElement) {\n                if (canvas.id.match('_' + ports[j].id + '$')) {\n                    for (var k = 0; k < obj.ports.length; k++) {\n                        if (canvas.id.match('_' + obj.ports[k].id + '$')) {\n                            if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n                                var entry = {\n                                    type: 'PortCollectionChanged', changeType: 'Remove', undoObject: cloneObject(obj.ports[k]),\n                                    redoObject: cloneObject(obj), category: 'Internal'\n                                };\n                                this.addHistoryEntry(entry);\n                            }\n                            obj.ports.splice(k, 1);\n                        }\n                    }\n                    wrapper.children.splice(i, 1);\n                    if (this.mode === 'SVG') {\n                        var element = getDiagramElement(canvas.id, this.element.id);\n                        element.parentNode.removeChild(element);\n                    }\n                    else {\n                        this.refreshCanvasLayers();\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Remove Ports at the run time \\\n     *\n     * @returns { void } checkSourcePointInTarget method .\\\n     * @param {Node} obj - provide the Connector value.\n     * @param {PointPortModel[]} ports - provide the Connector value.\n     *\n     */\n    Diagram.prototype.removePorts = function (obj, ports) {\n        var isAddPortInServer = true;\n        if (isBlazor() && obj !== null && !(this.diagramActions & DiagramAction.UndoRedo)) {\n            var index = (obj.ports.length > 0) ? Number(findObjectIndex(obj, ports[0].id, false)) : -1;\n            if (index === -1) {\n                isAddPortInServer = false;\n            }\n        }\n        obj = this.nameTable[obj.id] || obj;\n        if (isBlazor() && isAddPortInServer) {\n            var removalIndexCollection = [];\n            var portCollection = [];\n            for (var j = ports.length - 1; j >= 0; j--) {\n                var index = Number(findObjectIndex(obj, ports[j].id, false));\n                removalIndexCollection.push(index);\n                portCollection.push(ports[j]);\n            }\n            this.UpdateBlazorLabelOrPortObjects(portCollection, 'Port', removalIndexCollection, this.nodes.indexOf(obj));\n        }\n        if (ports.length > 1) {\n            this.startGroupAction();\n        }\n        for (var j = ports.length - 1; j >= 0; j--) {\n            if (obj.children && obj.children.length > 0) {\n                for (var k = 0; k < obj.wrapper.children.length; k++) {\n                    this.removePortsExtenion(obj, ports, j, obj.wrapper.children[k]);\n                }\n            }\n            else {\n                this.removePortsExtenion(obj, ports, j, obj.wrapper);\n            }\n        }\n        if (ports.length > 1) {\n            this.endGroupAction();\n        }\n    };\n    //public methods - end region\n    /**\n     * getSizeValue method \\\n     *\n     * @returns { string }     getSizeValue method .\\\n     * @param {string | Number} real - provide the real value.\n     * @param {string | Number} rulerSize - provide the rulerSize value.\n     *\n     * @private\n     */\n    Diagram.prototype.getSizeValue = function (real, rulerSize) {\n        var value;\n        if (real.toString().indexOf('px') > 0) {\n            value = real.toString();\n        }\n        else if (real.toString().indexOf('%') > 0) {\n            value = rulerSize !== undefined ? '100%' : real.toString();\n        }\n        else {\n            value = real.toString() + 'px';\n        }\n        if (rulerSize) {\n            var position = getRulerSize(this);\n            value = 'calc(' + value + ' - ' + rulerSize + 'px)';\n        }\n        return value;\n    };\n    Diagram.prototype.renderRulers = function () {\n        if (this.rulerSettings.showRulers) {\n            renderOverlapElement(this);\n            renderRuler(this, true);\n            renderRuler(this, false);\n        }\n        else {\n            removeRulerElements(this);\n        }\n    };\n    Diagram.prototype.intOffPageBackground = function () {\n        var position = new Size();\n        position = getRulerSize(this);\n        var element = document.getElementById(this.element.id + 'content');\n        var width = this.getSizeValue(this.width, position.width);\n        var height = this.getSizeValue(this.height, position.height);\n        var style = this.rulerSettings.showRulers ?\n            'width:' + width + '; height:' + height + ';' +\n                'top:' + position.height + 'px;left:' + position.width + 'px;' +\n                'overflow: scroll;position:absolute;overflow:auto;' :\n            'width:' + width + '; height:' + height + ';position:absolute;' +\n                ' left:0px;  top:0px;overflow: auto;';\n        var attr = {\n            'id': this.element.id + 'content',\n            'tabindex': '0',\n            'style': style\n        };\n        if (!element) {\n            this.diagramCanvas = createHtmlElement('div', attr);\n            this.element.appendChild(this.diagramCanvas);\n        }\n        else {\n            this.diagramCanvas = element;\n            applyStyleAgainstCsp(this.diagramCanvas, style);\n        }\n        this.diagramCanvas.style.background = this.backgroundColor;\n    };\n    Diagram.prototype.initDiagram = function () {\n        this.intOffPageBackground();\n        setAttributeHtml(this.element, {\n            style: 'width:' + this.getSizeValue(this.width) + '; height:'\n                + this.getSizeValue(this.height) + ';position:relative;overflow:hidden;'\n        });\n    };\n    Diagram.prototype.renderHiddenUserHandleTemplateLayer = function (bounds) {\n        //let element: HTMLElement;\n        var attributes = {\n            'class': this.element.id + '_hiddenUserHandleTemplate',\n            'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;' + 'visibility:hidden ;  overflow: hidden;'\n        };\n        var element = createHtmlElement('div', attributes);\n        this.element.appendChild(element);\n    };\n    Diagram.prototype.renderBackgroundLayer = function (bounds, commonStyle) {\n        var bgLayer = this.createSvg(this.element.id + '_backgroundLayer_svg', bounds.width, bounds.height);\n        applyStyleAgainstCsp(bgLayer, commonStyle);\n        var backgroundImage = createSvgElement('g', {\n            'id': this.element.id + '_backgroundImageLayer',\n            'class': 'e-background-image-layer'\n        });\n        bgLayer.appendChild(backgroundImage);\n        var attr = { 'id': this.element.id + '_backgroundLayer', 'class': 'e-background-layer' };\n        var background = createSvgElement('g', attr);\n        bgLayer.appendChild(background);\n        this.diagramCanvas.appendChild(bgLayer);\n    };\n    Diagram.prototype.renderGridLayer = function (bounds, commonStyle) {\n        var svgGridSvg = this.createSvg(this.element.id + '_gridline_svg', bounds.width, bounds.height);\n        svgGridSvg.setAttribute('class', 'e-grid-layer');\n        var svgGrid = createSvgElement('g', { 'id': this.element.id + '_gridline' });\n        var rect = createSvgElement('rect', {\n            'id': this.element.id + '_grid_rect', 'x': '0', 'y': '0', 'width': '100%', 'height': '100%'\n        });\n        if (checkBrowserInfo()) {\n            rect.setAttribute('fill', 'url(' + location.protocol + '//' + location.host + location.pathname +\n                '#' + this.element.id + '_pattern)');\n        }\n        else {\n            rect.setAttribute('fill', 'url(#' + this.element.id + '_pattern)');\n        }\n        svgGrid.appendChild(rect);\n        svgGridSvg.appendChild(svgGrid);\n        this.diagramCanvas.appendChild(svgGridSvg);\n        setAttributeSvg(svgGridSvg, { 'style': commonStyle });\n    };\n    Diagram.prototype.renderDiagramLayer = function (bounds, commonStyle) {\n        var attributes = {\n            'id': this.element.id + '_diagramLayer_div',\n            'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;' + commonStyle\n        };\n        this.diagramLayerDiv = createHtmlElement('div', attributes);\n        if (this.mode === 'SVG') {\n            var diagramSvg = this.createSvg(this.element.id + '_diagramLayer_svg', bounds.width, bounds.height);\n            diagramSvg.style['pointer-events'] = 'none';\n            diagramSvg.setAttribute('class', 'e-diagram-layer');\n            var diagramLayer = createSvgElement('g', { 'id': this.element.id + '_diagramLayer' });\n            var transformationLayer = createSvgElement('g', {});\n            this.diagramLayer = diagramLayer;\n            diagramSvg.style['pointer-events'] = 'all';\n            transformationLayer.appendChild(diagramLayer);\n            diagramSvg.appendChild(transformationLayer);\n            this.diagramLayerDiv.appendChild(diagramSvg);\n        }\n        else {\n            this.diagramLayer = CanvasRenderer.createCanvas(this.element.id + '_diagram', bounds.width, bounds.height);\n            applyStyleAgainstCsp(this.diagramLayer, 'position:absolute;left:0px;top:0px;');\n            this.diagramLayerDiv.appendChild(this.diagramLayer);\n        }\n        this.diagramCanvas.appendChild(this.diagramLayerDiv);\n    };\n    Diagram.prototype.initLayers = function () {\n        var commonStyle = 'position:absolute;top:0px;left:0px;overflow:hidden;pointer-events:none;';\n        var container = document.getElementById(this.element.id);\n        var bounds = container.getBoundingClientRect();\n        var scrollerSize = getScrollerWidth();\n        this.scroller.scrollerWidth = scrollerSize;\n        this.scroller.setViewPortSize(bounds.width, bounds.height);\n        this.renderRulers();\n        var measureWindowElement = 'measureElement';\n        if (window[measureWindowElement]) {\n            window[measureWindowElement] = null;\n            var measureElements = document.getElementById('measureElement');\n            measureElements.remove();\n        }\n        createMeasureElements();\n        // this.renderBackgroundImageLayer(bounds, commonStyle);\n        this.renderBackgroundLayer(bounds, commonStyle);\n        this.renderGridLayer(bounds, commonStyle);\n        this.renderDiagramLayer(bounds, commonStyle);\n        this.renderHTMLLayer(bounds, commonStyle);\n        this.renderPortsExpandLayer(bounds, commonStyle);\n        this.renderNativeLayer(bounds, commonStyle);\n        this.renderAdornerLayer(bounds, commonStyle);\n        this.renderHiddenUserHandleTemplateLayer(bounds);\n    };\n    Diagram.prototype.renderAdornerLayer = function (bounds, commonStyle) {\n        var divElement = createHtmlElement('div', {\n            'id': this.element.id + '_diagramAdornerLayer',\n            'style': 'width:' + bounds.width + 'px;height:' + bounds.height + 'px;' + commonStyle\n        });\n        var element = createHtmlElement('div', {\n            'id': this.element.id + '_diagramUserHandleLayer',\n            'style': 'width:' + bounds.width + 'px;height:' + bounds.height + 'px;' + commonStyle\n        });\n        element.setAttribute('class', 'e-userHandle-layer');\n        divElement.appendChild(element);\n        var svgAdornerSvg = this.createSvg(this.element.id + '_diagramAdorner_svg', bounds.width, bounds.height);\n        svgAdornerSvg.setAttribute('class', 'e-adorner-layer');\n        svgAdornerSvg.style['pointer-events'] = 'none';\n        this.adornerLayer = createSvgElement('g', { 'id': this.element.id + '_diagramAdorner' });\n        this.adornerLayer.style[' pointer-events'] = 'all';\n        svgAdornerSvg.appendChild(this.adornerLayer);\n        divElement.appendChild(svgAdornerSvg);\n        this.diagramCanvas.appendChild(divElement);\n        var svgSelector = createSvgElement('g', { 'id': this.element.id + '_SelectorElement' });\n        this.adornerLayer.appendChild(svgSelector);\n        setAttributeSvg(svgAdornerSvg, { style: 'pointer-events:none;' });\n    };\n    Diagram.prototype.renderPortsExpandLayer = function (bounds, commonStyle) {\n        var svgPortsSvg = this.createSvg(this.element.id + '_diagramPorts_svg', bounds.width, bounds.height);\n        svgPortsSvg.setAttribute('class', 'e-ports-expand-layer');\n        var svgPortsLayer = createSvgElement('g', {\n            'id': this.element.id + '_diagramPorts',\n            'class': 'e-ports-layer',\n            'style': 'pointer-events: all;'\n        });\n        svgPortsSvg.appendChild(svgPortsLayer);\n        var svgExpandLayer = createSvgElement('g', {\n            'id': this.element.id + '_diagramExpander',\n            'class': 'e-expand-layer',\n            'style': 'pointer-events: all;'\n        });\n        svgPortsSvg.appendChild(svgExpandLayer);\n        this.diagramCanvas.appendChild(svgPortsSvg);\n        setAttributeSvg(svgPortsSvg, { 'style': commonStyle });\n    };\n    Diagram.prototype.renderHTMLLayer = function (bounds, commonStyle) {\n        this.htmlLayer = createHtmlElement('div', {\n            'id': this.element.id + '_htmlLayer',\n            'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;position:absolute;top:0px;' +\n                'left:0px;overflow:hidden;pointer-events:none;',\n            'class': 'e-html-layer'\n        });\n        var htmlLayerDiv = createHtmlElement('div', {\n            'id': this.element.id + '_htmlLayer_div',\n            'style': 'position:absolute;top:0px;left:0px;pointer-events:all;'\n        });\n        this.htmlLayer.appendChild(htmlLayerDiv);\n        this.diagramCanvas.appendChild(this.htmlLayer);\n    };\n    Diagram.prototype.renderNativeLayer = function (bounds, commonStyle) {\n        var nativeLayerSvg = this.createSvg(this.element.id + '_nativeLayer_svg', bounds.width, bounds.height);\n        var nativeLayer = createSvgElement('g', { 'id': this.element.id + '_nativeLayer', 'style': 'pointer-events:all;' });\n        nativeLayerSvg.appendChild(nativeLayer);\n        this.diagramLayerDiv.appendChild(nativeLayerSvg);\n        setAttributeSvg(nativeLayerSvg, { 'class': 'e-native-layer', 'style': commonStyle });\n    };\n    /**\n     * createSvg method \\\n     *\n     * @returns { void }     createSvg method .\\\n     * @param {string} id - provide the source value.\n     * @param {string | Number} width - provide the source value.\n     * @param {string | Number} height - provide the source value.\n     *\n     * @private\n     */\n    Diagram.prototype.createSvg = function (id, width, height) {\n        var svgObj = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        setAttributeSvg(svgObj, { 'id': id, 'width': width, 'height': height });\n        return svgObj;\n    };\n    Diagram.prototype.updateBazorShape = function () {\n        for (var i = 0; i < this.nodes.length; i++) {\n            var node = this.nodes[i];\n            switch (node.shape.type) {\n                case 'Bpmn':\n                    node.shape.bpmnShape =\n                        node.shape.shape ? node.shape.shape\n                            : node.shape.bpmnShape;\n                    break;\n                case 'UmlActivity':\n                    node.shape.umlActivityShape =\n                        node.shape.shape ? node.shape.shape\n                            : node.shape.umlActivityShape;\n                    break;\n                case 'Flow':\n                    node.shape.flowShape =\n                        node.shape.shape ? node.shape.shape\n                            : node.shape.flowShape;\n                    break;\n                case 'Basic':\n                    node.shape.basicShape =\n                        node.shape.shape ? node.shape.shape\n                            : node.shape.basicShape;\n                    break;\n                case 'Text':\n                    node.shape.textContent =\n                        node.shape.content ? node.shape.content\n                            : node.shape.textContent;\n                    break;\n            }\n        }\n    };\n    Diagram.prototype.initObjects = function (isLoad) {\n        this.updateBazorShape();\n        if (!this.isLoading) {\n            this.initData();\n        }\n        this.initLayerObjects();\n        this.updateBridging(isLoad);\n    };\n    /**\n     * initLayerObjects method \\\n     *\n     * @returns { void }     initLayerObjects method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.initLayerObjects = function () {\n        var hasLayers = this.layers.length > 1; //const set: boolean = false;\n        var connectors = [];\n        var blazor = 'Blazor';\n        var canCloneObject = window && window[blazor] && !this.dataSourceSettings.dataSource;\n        var tempTabel = {};\n        var bpmnTable = {};\n        var tempNode = [];\n        var groups = [];\n        var i = 0;\n        var previousNodeObject = [];\n        var previousConnectorObject = [];\n        var updateNodeObject = [];\n        var updateConnectorObject = [];\n        var changeNodes = [];\n        var changeConnectors = [];\n        if (isBlazor() && canCloneObject) {\n            previousNodeObject = this.previousNodeCollection;\n            previousConnectorObject = this.previousConnectorCollection;\n        }\n        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n            var obj = _a[_i];\n            obj.id = obj.id || randomId();\n            this.addToLayer(obj, hasLayers);\n            tempTabel[obj.id] = obj;\n        }\n        for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n            var obj = _c[_b];\n            obj.id = obj.id || randomId();\n            this.addToLayer(obj, hasLayers);\n            tempTabel[obj.id] = obj;\n        }\n        for (var _d = 0, _e = this.layers; _d < _e.length; _d++) {\n            var layer = _e[_d];\n            for (var _f = 0, _g = layer.objects; _f < _g.length; _f++) {\n                var obj = _g[_f];\n                if (tempTabel[obj]) {\n                    if (!(tempTabel[obj] instanceof Connector)) {\n                        if (tempTabel[obj].children) {\n                            groups.push(obj);\n                        }\n                        else if ((tempTabel[obj].shape instanceof BpmnShape) &&\n                            tempTabel[obj].shape.activity.subProcess.processes &&\n                            tempTabel[obj].shape.activity.subProcess.processes.length > 0) {\n                            bpmnTable[tempTabel[obj].id] = obj;\n                        }\n                        else {\n                            this.initNodes(tempTabel[obj], layer);\n                        }\n                    }\n                    else {\n                        var connector = tempTabel[obj];\n                        if (connector.sourceID && connector.targetID) {\n                            var sourceNode = tempTabel[connector.sourceID];\n                            var targetNode = tempTabel[connector.targetID];\n                            var flag = true;\n                            if (this.isLoading && ((sourceNode && sourceNode.children && sourceNode.children.length > 0) ||\n                                (targetNode && targetNode.children && targetNode.children.length > 0))) {\n                                flag = false;\n                            }\n                            if ((sourceNode && sourceNode.wrapper && targetNode && targetNode.wrapper) && flag) {\n                                this.initConnectors(tempTabel[obj], layer);\n                            }\n                            else {\n                                connectors.push(tempTabel[obj]);\n                            }\n                        }\n                        else {\n                            this.initConnectors(tempTabel[obj], layer);\n                        }\n                    }\n                }\n            }\n            if (this.bpmnModule) {\n                for (var _h = 0, _j = this.bpmnModule.textAnnotationConnectors; _h < _j.length; _h++) {\n                    var obj = _j[_h];\n                    this.initConnectors(obj, layer, false);\n                }\n            }\n        }\n        for (var _k = 0, _l = Object.keys(bpmnTable); _k < _l.length; _k++) {\n            var obj = _l[_k];\n            this.initObject(tempTabel[obj]);\n            this.bpmnModule.updateDocks(tempTabel[obj], this);\n        }\n        var alignedGroups = this.alignGroup(groups, tempTabel);\n        for (var _m = 0, alignedGroups_1 = alignedGroups; _m < alignedGroups_1.length; _m++) {\n            var obj = alignedGroups_1[_m];\n            var layer = this.commandHandler.getObjectLayer(obj);\n            this.initNodes(tempTabel[obj], layer);\n        }\n        for (var _o = 0, connectors_1 = connectors; _o < connectors_1.length; _o++) {\n            var connector = connectors_1[_o];\n            var layer = this.commandHandler.getObjectLayer(connector.id);\n            this.initConnectors(connector, layer);\n        }\n        if (isBlazor() && canCloneObject) {\n            for (var _p = 0, _q = this.nodes; _p < _q.length; _p++) {\n                var obj = _q[_p];\n                updateNodeObject.push(cloneObject(obj, undefined, undefined, true));\n            }\n            for (var _r = 0, _s = this.connectors; _r < _s.length; _r++) {\n                var obj = _s[_r];\n                updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n            }\n            this.commandHandler.getObjectChanges(previousNodeObject, updateNodeObject, changeNodes);\n            this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n            if (!(this.blazorActions & BlazorAction.ClearObject)) {\n                var blazorInterop = 'sfBlazor';\n                var diagramObject = { nodes: changeNodes, connectors: changeConnectors };\n                var obj = {\n                    'methodName': 'UpdateBlazorProperties',\n                    'diagramobj': diagramObject\n                };\n                window[blazorInterop].updateBlazorProperties(obj, this);\n            }\n        }\n    };\n    Diagram.prototype.alignGroup = function (parents, tempTabel) {\n        var newList = [];\n        var parentist = [];\n        var child;\n        var childNode;\n        var i;\n        var j;\n        for (i = 0; i < parents.length; i++) {\n            child = parents[i];\n            childNode = tempTabel[child];\n            var node = void 0;\n            if (childNode && childNode.children.length) {\n                for (j = 0; j < childNode.children.length; j++) {\n                    node = childNode.children[j];\n                    if (parents.indexOf(node) > -1 && (newList.indexOf(node) === -1) &&\n                        (parentist.indexOf(node) === -1)) {\n                        newList.splice(0, 0, node);\n                    }\n                }\n            }\n            if (newList.indexOf(child) === -1) {\n                parentist.push(child);\n            }\n        }\n        newList = newList.concat(parentist);\n        return newList;\n    };\n    Diagram.prototype.addToLayer = function (obj, hasLayers) {\n        var layer;\n        var isSourceId = false;\n        var isTargetId = false;\n        if (hasLayers) {\n            layer = this.commandHandler.getObjectLayer(obj.id);\n        }\n        if (!hasLayers || !layer) {\n            if (this.activeLayer.objects.indexOf(obj.id) === -1) {\n                this.activeLayer.objects.push(obj.id);\n            }\n        }\n        if ((obj instanceof Node || obj instanceof Connector) &&\n            (obj.shape.type !== 'SwimLane' || (obj.children && obj.children.length > 0))) {\n            if (obj.parentId) {\n                var zIndex = this.swimlaneZIndexTable[obj.parentId];\n                if (zIndex && zIndex !== -1) {\n                    obj.zIndex = this.swimlaneChildTable[obj.id];\n                }\n            }\n            if (obj instanceof Connector && (obj.sourceID && obj.targetID)) {\n                if (this.findNodeInLane(obj.sourceID) && this.findNodeInLane(obj.targetID)) {\n                    if (this.activeLayer.objects.indexOf(obj.sourceID) !== -1 &&\n                        this.activeLayer.objects.indexOf(obj.targetID) !== -1) {\n                        this.setZIndex(layer || this.activeLayer, obj);\n                    }\n                }\n                else {\n                    this.setZIndex(layer || this.activeLayer, obj);\n                }\n            }\n            else {\n                this.setZIndex(layer || this.activeLayer, obj);\n            }\n        }\n    };\n    /** Check whether node is in lane or not */\n    Diagram.prototype.findNodeInLane = function (nodeId) {\n        var temp = false;\n        for (var i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].shape.type !== 'SwimLane') {\n                if (this.nodes[i].id === nodeId) {\n                    temp = true;\n                    break;\n                }\n            }\n            else {\n                var node = this.nodes[i].shape;\n                if (node.lanes && node.lanes.length > 0) {\n                    for (var j = 0; j < node.lanes.length; j++) {\n                        if (node.lanes[j].children && node.lanes[j].children.length > 0) {\n                            for (var k = 0; k < node.lanes[j].children.length; k++) {\n                                if (node.lanes[j].children[k].id === nodeId) {\n                                    temp = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (temp) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Diagram.prototype.updateLayer = function (newProp) {\n        for (var _i = 0, _a = Object.keys(newProp.layers); _i < _a.length; _i++) {\n            var key = _a[_i];\n            var layerObject = this.layers[key].objects;\n            for (var _b = 0, layerObject_1 = layerObject; _b < layerObject_1.length; _b++) {\n                var obj = layerObject_1[_b];\n                var node = this.nameTable[obj];\n                if (newProp.layers[key].visible !== undefined) {\n                    this.updateElementVisibility(node.wrapper, node, newProp.layers[key].visible);\n                }\n                else if (newProp.layers[key].lock === true) {\n                    this.unSelect(node);\n                }\n            }\n            if (newProp.layers[key].lock !== undefined) {\n                this.layers[key].lock = newProp.layers[key].lock;\n            }\n        }\n        if (this.mode !== 'SVG') {\n            this.refreshDiagramLayer();\n        }\n    };\n    Diagram.prototype.updateScrollSettings = function (newProp) {\n        var hPan = (-this.scroller.horizontalOffset + newProp.scrollSettings.horizontalOffset || 0);\n        var vPan = (this.scroller.verticalOffset - newProp.scrollSettings.verticalOffset || 0);\n        var oldValue = {\n            VerticalOffset: this.scrollSettings.verticalOffset, HorizontalOffset: this.scrollSettings.horizontalOffset,\n            ViewportHeight: this.scrollSettings.viewPortHeight, ViewportWidth: this.scrollSettings.viewPortWidth,\n            CurrentZoom: this.scroller.currentZoom\n        };\n        if (hPan !== 0 || vPan !== 0) {\n            this.pan(hPan, vPan);\n        }\n        var newValue = {\n            VerticalOffset: this.scrollSettings.verticalOffset, HorizontalOffset: this.scrollSettings.horizontalOffset,\n            ViewportHeight: this.scrollSettings.viewPortHeight, ViewportWidth: this.scrollSettings.viewPortWidth,\n            CurrentZoom: this.scroller.currentZoom\n        };\n        var panStatus = 'Start';\n        if (this.realActions & RealAction.PanInProgress) {\n            panStatus = 'Progress';\n        }\n        var arg = {\n            oldValue: oldValue,\n            newValue: newValue, source: this,\n            panState: panStatus\n        };\n        if (isBlazor() && this.scrollChange) {\n            arg = {\n                oldValue: oldValue,\n                newValue: newValue,\n                sourceId: this.element.id,\n                panState: panStatus\n            };\n        }\n        this.triggerEvent(DiagramEvent.scrollChange, arg);\n        this.commandHandler.updatePanState(true);\n        if (this.mode === 'Canvas' && (this.constraints & DiagramConstraints.Virtualization)) {\n            this.refreshDiagramLayer();\n        }\n    };\n    Diagram.prototype.initData = function () {\n        var dataSourceSettings = this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource;\n        var adapter = 'adaptorName';\n        if (this.dataBindingModule && !(this.realActions & RealAction.PreventDataInit)) {\n            if (dataSourceSettings && this.dataSourceSettings.connectionDataSource.dataManager) {\n                var dataManager = this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource;\n                this.nodes = this.generateData(dataManager, true);\n                this.connectors = this.generateData(this.dataSourceSettings.connectionDataSource.dataManager, false);\n            }\n            else if (dataSourceSettings && dataSourceSettings.dataSource &&\n                (dataSourceSettings.dataSource.url || (dataSourceSettings[adapter] === 'BlazorAdaptor' &&\n                    !dataSourceSettings.dataSource.url))) {\n                this.dataBindingModule.initSource(this.dataSourceSettings, this);\n            }\n            else {\n                this.dataBindingModule.initData(this.dataSourceSettings, this);\n            }\n        }\n    };\n    Diagram.prototype.generateData = function (dataSource, isNode) {\n        var nodes = [];\n        var i;\n        for (i = 0; i < dataSource.length; i++) {\n            var row = dataSource[i];\n            var node = isNode ? this.makeData(row, true) : this.makeData(row, false);\n            if (node && node.id && (!findNodeByName(nodes, node.id) || !findNodeByName(nodes, node.id))) {\n                nodes.push(node);\n            }\n        }\n        return (nodes);\n    };\n    Diagram.prototype.makeData = function (row, isNode) {\n        var i;\n        var fields = isNode ? this.dataSourceSettings : this.dataSourceSettings.connectionDataSource;\n        var data = {};\n        data.id = row[fields.id] ? row[fields.id] : randomId();\n        if (fields.sourceID) {\n            data.sourceID = row[fields.sourceID];\n        }\n        if (fields.targetID) {\n            data.targetID = row[fields.targetID];\n        }\n        if (row[fields.sourcePointX] && row[fields.sourcePointY]) {\n            data.sourcePoint = { 'x': Number(row[fields.sourcePointX]), 'y': Number(row[fields.sourcePointY]) };\n        }\n        if (row[fields.targetPointX] && row[fields.targetPointY]) {\n            data.targetPoint = { 'x': Number(row[fields.targetPointX]), 'y': Number(row[fields.targetPointY]) };\n        }\n        if (fields.crudAction.customFields && fields.crudAction.customFields.length > 0) {\n            for (i = 0; i < fields.crudAction.customFields.length; i++) {\n                data[fields.crudAction.customFields[i]] = row[fields.crudAction.customFields[i]];\n            }\n        }\n        return data;\n    };\n    Diagram.prototype.initNodes = function (obj, layer) {\n        this.preventDiagramUpdate = true;\n        this.initObject(obj, layer);\n        this.preventDiagramUpdate = false;\n    };\n    Diagram.prototype.initConnectors = function (obj, layer, independentObj) {\n        this.preventDiagramUpdate = true;\n        this.initObject(obj, layer, independentObj);\n        this.updateEdges(obj);\n        this.preventDiagramUpdate = false;\n    };\n    Diagram.prototype.setZIndex = function (layer, obj) {\n        //should be changed\n        var currentLayer = layer;\n        if ((obj).zIndex === -1) {\n            while (currentLayer.zIndexTable[currentLayer.objectZIndex + 1]) {\n                layer.objectZIndex++;\n            }\n            obj.zIndex = ++currentLayer.objectZIndex;\n        }\n        else {\n            var index = obj.zIndex;\n            if (currentLayer.zIndexTable[index]) {\n                var tabelLength = Object.keys(currentLayer.zIndexTable).length;\n                var j = 0;\n                for (var i = 0; i < tabelLength; i++) {\n                    if (i === index) {\n                        for (var j_1 = tabelLength; j_1 > index; j_1--) {\n                            currentLayer.zIndexTable[j_1] = currentLayer.zIndexTable[j_1 - 1];\n                            if (this.nameTable[currentLayer.zIndexTable[j_1]]) {\n                                this.nameTable[currentLayer.zIndexTable[j_1]].zIndex = j_1;\n                            }\n                        }\n                        currentLayer.zIndexTable[i] = obj.id;\n                    }\n                    j++;\n                }\n            }\n        }\n    };\n    Diagram.prototype.initializeDiagramLayers = function () {\n        //const tempLayers: LayerModel[] = this.layers;\n        for (var i = 0; i < this.layers.length; i++) {\n            if (this.layers[i].zIndex !== -1) {\n                var temp = this.layers[i];\n                this.layers[i] = this.layers[this.layers[i].zIndex];\n                this.layers[temp.zIndex] = temp;\n            }\n        }\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            layer.zIndex = layer.zIndex !== -1 ? layer.zIndex : this.layers.indexOf(layer);\n            this.layerZIndexTable[layer.zIndex] = layer.id;\n        }\n        for (var i = 0; i < this.layers.length; i++) {\n            for (var j = i + 1; j < this.layers.length; j++) {\n                if (this.layers[i].zIndex > this.layers[j].zIndex) {\n                    var temp = this.layers[i];\n                    this.layers[i] = this.layers[j];\n                    this.layers[j] = temp;\n                }\n            }\n        }\n        if (this.layers.length === 0) {\n            var defaultLayer = {\n                id: 'default_layer', visible: true, lock: false, objects: [], zIndex: 0,\n                objectZIndex: -1, zIndexTable: {}\n            };\n            this.commandHandler.addLayer(defaultLayer, null, true);\n        }\n        this.setActiveLayer(this.layers[this.layers.length - 1].id);\n    };\n    /**\n     * resetTool method \\\n     *\n     * @returns { void }     resetTool method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.resetTool = function () {\n        this.eventHandler.resetTool();\n    };\n    Diagram.prototype.initObjectExtend = function (obj, layer, independentObj) {\n        if (independentObj) {\n            var checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds);\n            for (var i = 0, a = Object.keys(layer.zIndexTable); i < a.length; i++) {\n                if (layer.zIndexTable[a[i]] && layer.zIndexTable[a[i]] === obj.id) {\n                    delete layer.zIndexTable[a[i]];\n                }\n            }\n            layer.zIndexTable[obj.zIndex] = obj.id;\n            if (!checkBoundaryConstraints) {\n                var node = obj instanceof Node ? this.nodes : this.connectors;\n                for (var i = 0; i <= node.length; i++) {\n                    if (node[i] && obj.id === node[i].id) {\n                        node.splice(i, 1);\n                    }\n                }\n                delete layer.zIndexTable[obj.zIndex];\n            }\n        }\n    };\n    /* tslint:disable */\n    /**\n     * initObject method \\\n     *\n     * @returns { void }     initObject method .\\\n     * @param {End} obj - provide the obj value.\n     * @param {End} layer - provide the layer value.\n     * @param {LayoutOrientation} independentObj - provide the independentObj value.\n     * @param {boolean} group - provide the independentObj value.\n     *\n     * @private\n     */\n    Diagram.prototype.initObject = function (obj, layer, independentObj, group) {\n        if (independentObj === void 0) { independentObj = true; }\n        if (obj !== undefined) {\n            if (independentObj) {\n                if (!layer) {\n                    this.addToLayer(obj, false);\n                    layer = this.activeLayer;\n                }\n                //Move the common properties like zindex and id to an abstract class\n                if ((obj instanceof Node || obj instanceof Connector) &&\n                    (obj.shape.type !== 'SwimLane' || (obj.children && obj.children.length > 0))) {\n                    this.setZIndex(layer, obj);\n                }\n            }\n            if (obj instanceof Node) {\n                if (independentObj) {\n                    if (obj.id !== 'helper') {\n                        var getDefaults = getFunction(this.getNodeDefaults);\n                        if (getDefaults) {\n                            var defaults = getDefaults(obj, this);\n                            if (defaults && defaults.ports) {\n                                for (var i = 0; i < defaults.ports.length; i++) {\n                                    defaults.ports[i].inEdges = [];\n                                    defaults.ports[i].outEdges = [];\n                                }\n                            }\n                            if (defaults && defaults !== obj) {\n                                extendObject(defaults, obj);\n                            }\n                        }\n                    }\n                    this.initNode(obj, this.element.id);\n                }\n            }\n            else if (obj instanceof Connector) {\n                var getDefaults = getFunction(this.getConnectorDefaults);\n                if (getDefaults) {\n                    var defaults = getDefaults(obj, this);\n                    if (defaults && defaults !== obj) {\n                        extendObject(defaults, obj);\n                    }\n                    if (obj.segments.length) {\n                        if (obj.type !== obj.segments[0].type) {\n                            obj.segments = [];\n                        }\n                    }\n                }\n                var sourceNode = this.nameTable[obj.sourceID];\n                var targetNode = this.nameTable[obj.targetID];\n                var port = this.getConnectedPort(sourceNode, obj, true);\n                var targetPort = this.getConnectedPort(targetNode, obj);\n                var outPort = this.findInOutConnectPorts(sourceNode, false);\n                var inPort = this.findInOutConnectPorts(targetNode, true);\n                if ((sourceNode !== undefined && canOutConnect(sourceNode)) || (obj.sourcePortID !== ''\n                    && canPortOutConnect(outPort))) {\n                    obj.sourceWrapper = this.getEndNodeWrapper(sourceNode, obj, true);\n                    if (obj.sourcePortID) {\n                        // eslint-disable-next-line max-len\n                        if (port && port.constraints && !(port.constraints & PortConstraints.None) && (port.constraints & PortConstraints.OutConnect)) {\n                            obj.sourcePortWrapper = this.getWrapper(sourceNode.wrapper, obj.sourcePortID);\n                        }\n                    }\n                }\n                if ((targetNode !== undefined && canInConnect(targetNode)) || (obj.targetPortID !== ''\n                    && canPortInConnect(inPort))) {\n                    obj.targetWrapper = this.getEndNodeWrapper(targetNode, obj, false);\n                    if (obj.targetPortID) {\n                        // eslint-disable-next-line max-len\n                        if (targetPort && targetPort.constraints && !(targetPort.constraints & PortConstraints.None) && (targetPort.constraints & PortConstraints.InConnect)) {\n                            obj.targetPortWrapper = this.getWrapper(targetNode.wrapper, obj.targetPortID);\n                        }\n                    }\n                }\n                if (!independentObj) {\n                    var points = obj.getConnectorPoints(obj.type);\n                    updateConnector(obj, points);\n                }\n                if (independentObj) {\n                    obj.init(this);\n                }\n                for (var k = 0; k < obj.wrapper.children.length; k++) {\n                    if (this.pathTable[obj.wrapper.children[k].data]) {\n                        obj.wrapper.children[k].absoluteBounds =\n                            this.pathTable[obj.wrapper.children[k].data].absoluteBounds;\n                    }\n                }\n                obj.wrapper.measure(new Size(undefined, undefined));\n                obj.wrapper.arrange(obj.wrapper.desiredSize);\n                if (obj instanceof Connector && obj.type === 'Bezier') {\n                    this.updateConnectorAnnotation(obj);\n                    this.updateConnectorfixedUserHandles(obj);\n                }\n                for (var j = 0; j < obj.wrapper.children.length; j++) {\n                    this.pathTable[obj.wrapper.children[j].data] = {};\n                    this.pathTable[obj.wrapper.children[j].data].absoluteBounds =\n                        obj.wrapper.children[j].absoluteBounds;\n                }\n            }\n            if (obj instanceof Node && obj.children && obj.container) {\n                for (var i = 0; i < obj.children.length; i++) {\n                    this.nameTable[obj.children[i]].offsetX = this.nameTable[obj.children[i]].wrapper.offsetX;\n                    this.nameTable[obj.children[i]].offsetY = this.nameTable[obj.children[i]].wrapper.offsetY;\n                }\n            }\n            if (this.bpmnModule && obj instanceof Node\n                && obj.shape.type === 'Bpmn' && obj.shape.annotations.length > 0) {\n                this.bpmnModule.updateQuad(obj, this);\n            }\n            this.initObjectExtend(obj, layer, independentObj);\n            this.nameTable[obj.id] = obj;\n            if (obj instanceof Node && obj.children) {\n                this.preventNodesUpdate = true;\n                this.preventConnectorsUpdate = true;\n                if (!group && !obj.container) {\n                    this.updateGroupOffset(obj, true);\n                }\n                this.groupTable[obj.id] = obj.children;\n                for (var i = 0; i < obj.children.length; i++) {\n                    var node = (this.nameTable[obj.children[i]]);\n                    if (node) {\n                        node.parentId = obj.id;\n                    }\n                }\n                if (!this.isLoading && obj.rotateAngle && !obj.container) {\n                    this.commandHandler.rotateObjects(obj, [obj], obj.rotateAngle, { x: obj.offsetX, y: obj.offsetY }, false);\n                }\n                this.preventNodesUpdate = false;\n                this.preventConnectorsUpdate = false;\n            }\n            if (this['enterObject'] === undefined) {\n                this.updateQuad(obj);\n            }\n        }\n        if (obj.visible === false) {\n            this.updateElementVisibility(obj.wrapper, obj, false);\n        }\n    };\n    /* tslint:enable */\n    Diagram.prototype.getConnectedPort = function (node, connector, isSource) {\n        if (node && node.ports) {\n            for (var _i = 0, _a = node.ports; _i < _a.length; _i++) {\n                var port = _a[_i];\n                if (port.id === connector.sourcePortID && isSource) {\n                    return port;\n                }\n                else if (port.id === connector.targetPortID && !isSource) {\n                    return port;\n                }\n            }\n        }\n        return null;\n    };\n    Diagram.prototype.scaleObject = function (obj, size, isWidth) {\n        var actualSize = isWidth ? obj.wrapper.actualSize.width : obj.wrapper.actualSize.height;\n        var sw = (isWidth) ? 1 + ((size - actualSize) / actualSize) : 1;\n        var sh = (isWidth) ? 1 : 1 + ((size - actualSize) / actualSize);\n        //const groupOffsetX: number = obj.offsetX; const groupOffsetY: number = obj.offsetY;\n        this.realActions |= RealAction.PreventDrag;\n        this.scale(obj, sw, sh, { x: 0.5, y: 0.5 });\n        this.realActions &= ~RealAction.PreventDrag;\n    };\n    Diagram.prototype.updateDefaultLayoutIcons = function (node) {\n        if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree' ||\n            this.layout.type === 'ComplexHierarchicalTree') {\n            {\n                this.updateDefaultLayoutIcon(node, node.expandIcon);\n                this.updateDefaultLayoutIcon(node, node.collapseIcon);\n            }\n        }\n    };\n    Diagram.prototype.updateDefaultLayoutIcon = function (node, icon) {\n        if (icon.shape !== 'None') {\n            if (icon.horizontalAlignment === 'Auto' && icon.verticalAlignment === 'Auto' &&\n                icon.offset.x === .5 && icon.offset.y === 1) {\n                var iconWrapper = this.getWrapper(node.wrapper, 'icon_content');\n                var offsetX = void 0;\n                var offsetY = void 0;\n                if (this.layout.orientation === 'TopToBottom' || this.layout.orientation === 'BottomToTop') {\n                    offsetX = .5;\n                    offsetY = this.layout.orientation === 'TopToBottom' ? 1 : 0;\n                }\n                else if (this.layout.orientation === 'RightToLeft' || this.layout.orientation === 'LeftToRight') {\n                    offsetX = this.layout.orientation === 'LeftToRight' ? 1 : 0;\n                    offsetY = .5;\n                }\n                iconWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n                iconWrapper.horizontalAlignment = 'Center';\n                iconWrapper.verticalAlignment = 'Center';\n                node.wrapper.measure(new Size(node.wrapper.width, node.wrapper.height));\n                node.wrapper.arrange(node.wrapper.desiredSize);\n            }\n        }\n    };\n    /**\n     * updateGroupOffset method \\\n     *\n     * @returns { void }     updateGroupOffset method .\\\n     * @param {NodeModel | ConnectorModel} node - provide the source value.\n     * @param {boolean} isUpdateSize - provide the target value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateGroupOffset = function (node, isUpdateSize) {\n        var isUpdateGroupToBlazor = false;\n        if ((node.children && node.children.length > 0 && (!node.container)) || (node.processId)) {\n            var node1 = this.nameTable[node.id];\n            if (!(this.realActions & RealAction.PreventScale) && !(this.realActions & RealAction.PreventDrag)) {\n                if (node1.offsetX && ((this.realActions & RealAction.EnableGroupAction) ||\n                    ((!(this.diagramActions & DiagramAction.UndoRedo)) && (!(this.diagramActions & DiagramAction.ToolAction)\n                        && !(this.diagramActions & DiagramAction.PublicMethod))))) {\n                    this.realActions |= RealAction.PreventScale;\n                    var diffX = (node1.offsetX - node.wrapper.offsetX);\n                    node1.offsetX = node.wrapper.offsetX;\n                    var diffY = (node1.offsetY - node.wrapper.offsetY);\n                    node1.offsetY = node.wrapper.offsetY;\n                    if (node.flip === 'None' && (diffX + diffY) !== 0) {\n                        this.drag(node1, diffX, diffY);\n                    }\n                    this.realActions &= ~RealAction.PreventScale;\n                }\n                else {\n                    if (isBlazor()) {\n                        this.insertValue(cloneObject(node1), true);\n                        isUpdateGroupToBlazor = true;\n                    }\n                    node1.offsetX = node.wrapper.offsetX;\n                }\n                if (node1.offsetY && ((this.realActions & RealAction.EnableGroupAction) ||\n                    ((!(this.diagramActions & DiagramAction.UndoRedo)) && (!(this.diagramActions & DiagramAction.ToolAction)\n                        && !(this.diagramActions & DiagramAction.PublicMethod))))) {\n                    this.realActions |= RealAction.PreventScale;\n                    var diffY = (node1.offsetY - node.wrapper.offsetY);\n                    node1.offsetY = node.wrapper.offsetY;\n                    if (node.flip === 'None') {\n                        this.drag(node1, 0, diffY);\n                    }\n                    this.realActions &= ~RealAction.PreventScale;\n                }\n                else {\n                    if (isBlazor()) {\n                        this.insertValue(cloneObject(node1), true);\n                        isUpdateGroupToBlazor = true;\n                    }\n                    node1.offsetY = node.wrapper.offsetY;\n                }\n                if (this.diagramActions) {\n                    if (isBlazor()) {\n                        this.insertValue(cloneObject(node1), true);\n                        isUpdateGroupToBlazor = true;\n                    }\n                    node1.width = node.wrapper.actualSize.width;\n                    node1.height = node.wrapper.actualSize.height;\n                }\n            }\n        }\n        if (isUpdateSize) {\n            if ((node.children && node.children.length > 0)) {\n                if (this.nameTable[node.id].width !== undefined) {\n                    this.scaleObject(node, this.nameTable[node.id].width, true);\n                }\n                else {\n                    if (isBlazor()) {\n                        this.insertValue(cloneObject(this.nameTable[node.id]), true);\n                        isUpdateGroupToBlazor = true;\n                    }\n                    this.nameTable[node.id].width = node.wrapper.actualSize.width;\n                }\n                if (this.nameTable[node.id].height !== undefined) {\n                    this.scaleObject(node, this.nameTable[node.id].height, false);\n                }\n                else {\n                    if (isBlazor()) {\n                        this.insertValue(cloneObject(this.nameTable[node.id]), true);\n                        isUpdateGroupToBlazor = true;\n                    }\n                    this.nameTable[node.id].height = node.wrapper.actualSize.height;\n                }\n            }\n        }\n        if (isUpdateGroupToBlazor && !(this.diagramActions & DiagramAction.UndoRedo) &&\n            !(this.diagramActions & DiagramAction.ToolAction) &&\n            !(this.diagramActions & DiagramAction.PublicMethod)) {\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    /* eslint-disable */\n    Diagram.prototype.initNode = function (obj, diagramId, group) {\n        var canvas = obj.initContainer();\n        var portContainer = new Canvas();\n        var content;\n        if (!this.diagramSettings.inversedAlignment) {\n            canvas.inversedAlignment = false;\n        }\n        if (!canvas.children) {\n            canvas.children = [];\n        }\n        if (obj.children) {\n            canvas.measureChildren = false;\n            portContainer.id = obj.id + 'group_container';\n            portContainer.style.fill = 'none';\n            portContainer.style.strokeColor = 'none';\n            portContainer.horizontalAlignment = 'Stretch';\n            portContainer.verticalAlignment = 'Stretch';\n            canvas.style = obj.style;\n            portContainer.children = [];\n            portContainer.preventContainer = true;\n            if (obj.container) {\n                portContainer.relativeMode = 'Object';\n            }\n            var checkPorts = (obj.ports && obj.ports.length > 0) ? true : false;\n            if (isNullOrUndefined(obj.container) && !checkPorts) {\n                canvas.children.push(portContainer);\n            }\n            if (obj.container && (obj.container.type === 'Grid')) {\n                for (var i = 0; i < obj.children.length; i++) {\n                    var childCollection = new Canvas();\n                    var child = this.nameTable[obj.children[i]];\n                    childCollection.children = [];\n                    childCollection.children.push(child.wrapper);\n                    if (child) {\n                        canvas.addObject(child.wrapper, child.rowIndex, child.columnIndex, child.rowSpan, child.columnSpan);\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < obj.children.length; i++) {\n                    if (this.nameTable[obj.children[i]]) {\n                        var child = this.nameTable[obj.children[i]];\n                        this.updateStackProperty(obj, child, i);\n                        canvas.children.push(child.wrapper);\n                        canvas.elementActions = canvas.elementActions | ElementAction.ElementIsGroup;\n                        child.wrapper.flip = child.wrapper.flip === 'None' ?\n                            obj.wrapper.flip : child.wrapper.flip;\n                    }\n                }\n            }\n            if (checkPorts || (obj.container && (obj.container.type !== 'Grid'))) {\n                canvas.children.push(portContainer);\n            }\n        }\n        else {\n            var setNodeTemplate = getFunction(this.setNodeTemplate);\n            if (setNodeTemplate && obj.id !== 'helper') {\n                content = setNodeTemplate(obj, this);\n            }\n            if (!content) {\n                content = obj.init(this);\n            }\n            canvas.children.push(content);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var wrapperContent;\n        wrapperContent = getFunction(this.getDescription);\n        if (wrapperContent) {\n            (obj.children ? canvas : content).description = wrapperContent;\n        }\n        else {\n            (obj.children ? canvas : content).description = obj.annotations.length ? obj.annotations[0].content : obj.id;\n        }\n        var container = obj.children ? portContainer : canvas;\n        obj.initAnnotations(this.getDescription, container, this.element.id, canVitualize(this) ? true : false, this.annotationTemplate);\n        obj.initPorts(this.getDescription, container);\n        obj.initIcons(this.getDescription, this.layout, container, diagramId);\n        for (var i = 0; obj.fixedUserHandles !== undefined, i < obj.fixedUserHandles.length; i++) {\n            var fixedUserHandles = obj.initfixedUserHandles(obj.fixedUserHandles[i]);\n            container.children.push(fixedUserHandles);\n        }\n        if (obj.shape.type === 'SwimLane' && obj.wrapper && obj.wrapper.children.length > 0 &&\n            obj.wrapper.children[0] instanceof GridPanel) {\n            this.setZIndex(this.activeLayer, obj);\n            if (this.connectors.length > 0) {\n                for (var i = 0; i < this.connectors.length; i++) {\n                    var obj_2 = this.connectors[i];\n                    if ((obj_2.sourceID && obj_2.targetID) && (this.activeLayer.objects.indexOf(obj_2.sourceID) === -1 &&\n                        this.activeLayer.objects.indexOf(obj_2.targetID) === -1)) {\n                        this.setZIndex(this.activeLayer, obj_2);\n                    }\n                }\n            }\n            swimLaneMeasureAndArrange(obj);\n            arrangeChildNodesInSwimLane(this, obj);\n            this.updateDiagramElementQuad();\n        }\n        else {\n            canvas.measure(new Size(obj.width, obj.height), obj.id, this.onLoadImageSize.bind(this));\n            if (canvas instanceof GridPanel) {\n                canvas.arrange(canvas.desiredSize, true);\n            }\n            else {\n                canvas.arrange(canvas.desiredSize);\n            }\n        }\n        if (obj.wrapper.flip !== 'None' && obj.wrapper.elementActions & ElementAction.ElementIsGroup) {\n            alignElement(obj.wrapper, obj.wrapper.offsetX, obj.wrapper.offsetY, this, obj.wrapper.flip);\n        }\n        if (obj instanceof Node && obj.container && (obj.width < canvas.outerBounds.width || obj.height < canvas.outerBounds.height) &&\n            canvas.bounds.x <= canvas.outerBounds.x && canvas.bounds.y <= canvas.outerBounds.y) {\n            obj.width = canvas.width = canvas.outerBounds.width;\n            obj.height = canvas.height = canvas.outerBounds.height;\n            canvas.measure(new Size(obj.width, obj.height));\n            canvas.arrange(canvas.desiredSize);\n        }\n        if (obj.container && obj.container.type === 'Grid' && obj.children && obj.children.length > 0) {\n            this.updateChildPosition(obj);\n        }\n    };\n    /* eslint-enable */\n    /**\n     * updateDiagramElementQuad method \\\n     *\n     * @returns { void }     updateDiagramElementQuad method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.updateDiagramElementQuad = function () {\n        for (var i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].wrapper && (this.nodes[i].wrapper instanceof Container)) {\n                this.updateQuad(this.nodes[i]);\n            }\n        }\n    };\n    Diagram.prototype.onLoadImageSize = function (id, size) {\n        var obj = this.getObject(id);\n        var image = document.getElementById(id + 'sf-imageNode');\n        if (image) {\n            image.parentNode.removeChild(image);\n        }\n        this.nodePropertyChange(obj, {}, { width: size.width, height: size.height });\n        var args = { element: cloneObject(obj), size: size };\n        this.triggerEvent(DiagramEvent.onImageLoad, args);\n    };\n    Diagram.prototype.updateChildPosition = function (obj) {\n        for (var i = 0; i < obj.children.length; i++) {\n            var child = this.getObject(obj.children[i]);\n            child.offsetX = child.wrapper.offsetX;\n            child.offsetY = child.wrapper.offsetY;\n            if (child.children && child.children.length > 0) {\n                this.updateChildPosition(child);\n            }\n        }\n    };\n    Diagram.prototype.canExecute = function () {\n        return true;\n    };\n    Diagram.prototype.updateStackProperty = function (obj, child, index) {\n        if (obj.container && obj.container.type === 'Stack') {\n            if (!child.width) {\n                child.wrapper.horizontalAlignment = 'Stretch';\n                child.horizontalAlignment = 'Stretch';\n            }\n            if (!child.height) {\n                child.verticalAlignment = 'Stretch';\n                child.wrapper.verticalAlignment = 'Stretch';\n            }\n            if (index && obj.shape.type === 'UmlClassifier') {\n                child.umlIndex = index;\n            }\n        }\n    };\n    Diagram.prototype.initViews = function () {\n        if (!this.isLoading) {\n            this.views.push(this.element.id);\n            this.views[this.element.id] = this;\n        }\n    };\n    Diagram.prototype.initCommands = function () {\n        var i;\n        var newCommands = this.commandManager.commands;\n        var commands = {\n            'copy': {\n                execute: this.copyCommand.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.C, keyModifiers: KeyModifiers.Control }\n            },\n            'paste': {\n                execute: this.pasteCommand.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.V, keyModifiers: KeyModifiers.Control }\n            },\n            'cut': {\n                execute: this.cutCommand.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.X, keyModifiers: KeyModifiers.Control }\n            },\n            'delete': {\n                execute: this.removeCommand.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.Delete }\n            },\n            'selectAll': {\n                execute: this.selectAll.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.A, keyModifiers: KeyModifiers.Control }\n            },\n            'undo': {\n                execute: this.undo.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.Z, keyModifiers: KeyModifiers.Control }\n            },\n            'redo': {\n                execute: this.redo.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.Y, keyModifiers: KeyModifiers.Control }\n            },\n            'nudgeUp': {\n                execute: this.nudgeCommand.bind(this, 'Up'),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Up },\n                parameter: 'up'\n            },\n            'nudgeRight': {\n                execute: this.nudgeCommand.bind(this, 'Right'),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Right },\n                parameter: 'right'\n            },\n            'nudgeDown': {\n                execute: this.nudgeCommand.bind(this, 'Down'),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Down },\n                parameter: 'down'\n            },\n            'nudgeLeft': {\n                execute: this.nudgeCommand.bind(this, 'Left'),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Left },\n                parameter: 'left'\n            },\n            'startEdit': {\n                execute: this.startEditCommad.bind(this),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.F2 }\n            },\n            'endEdit': {\n                execute: this.endEditCommand.bind(this),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Escape }\n            },\n            'focusToNextItem': {\n                // execute: this.focusToItem.bind(this),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Tab }\n            },\n            'focusToPreviousItem': {\n                // execute: this.focusToItem.bind(this),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Tab, keyModifiers: KeyModifiers.Control }\n            },\n            'selectFocusedItem': {\n                execute: this.startEditCommad.bind(this),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Enter }\n            }\n        };\n        this.initCommandManager(newCommands, commands);\n    };\n    Diagram.prototype.overrideCommands = function (newCommand, commands) {\n        var command;\n        for (var _i = 0, _a = Object.keys(commands); _i < _a.length; _i++) {\n            var key = _a[_i];\n            command = commands[key];\n            if (newCommand.gesture.key === command.gesture.key && newCommand.gesture.keyModifiers === command.gesture.keyModifiers) {\n                delete commands[key];\n                break;\n            }\n        }\n    };\n    Diagram.prototype.initCommandManager = function (newCommands, commands) {\n        var i = 0;\n        if (newCommands) {\n            for (i = 0; i < newCommands.length; i++) {\n                if (commands[newCommands[i].name] && newCommands[i]) {\n                    if (newCommands[i].canExecute) {\n                        commands[newCommands[i].name].canExecute = newCommands[i].canExecute;\n                    }\n                    if (newCommands[i].execute) {\n                        commands[newCommands[i].name].execute = newCommands[i].execute;\n                    }\n                    if (newCommands[i].gesture.key || newCommands[i].gesture.keyModifiers) {\n                        commands[newCommands[i].name].gesture = newCommands[i].gesture;\n                    }\n                    if (newCommands[i].parameter !== '') {\n                        commands[newCommands[i].name].parameter = newCommands[i].parameter;\n                    }\n                }\n                else {\n                    this.overrideCommands(newCommands[i], commands);\n                    commands[newCommands[i].name] = {\n                        execute: newCommands[i].execute, canExecute: newCommands[i].canExecute, gesture: newCommands[i].gesture,\n                        parameter: newCommands[i].parameter\n                    };\n                }\n            }\n        }\n        this.commands = commands;\n    };\n    /**\n     * updateNodeEdges method \\\n     *\n     * @returns { void }     updateNodeEdges method .\\\n     * @param {Node} node - provide the source value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateNodeEdges = function (node) {\n        for (var _i = 0, _a = node.inEdges; _i < _a.length; _i++) {\n            var edge = _a[_i];\n            if (this.nameTable[edge]) {\n                this.nameTable[edge].targetID = '';\n            }\n        }\n        for (var _b = 0, _c = node.outEdges; _b < _c.length; _b++) {\n            var edge = _c[_b];\n            if (this.nameTable[edge]) {\n                this.nameTable[edge].sourceID = '';\n            }\n        }\n        node.inEdges = [];\n        node.outEdges = [];\n    };\n    /**\n     * updateIconVisibility method \\\n     *\n     * @returns { void }     updateIconVisibility method .\\\n     * @param {Node} node - provide the source value.\n     * @param {boolean} visibility - provide the source value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateIconVisibility = function (node, visibility) {\n        for (var i = 0; i < node.wrapper.children.length; i++) {\n            var child = node.wrapper.children[i];\n            if (child.id) {\n                var id = child.id.split(node.id)[1];\n                if (id && id.match('^_icon')) {\n                    child.visible = visibility;\n                    this.updateDiagramContainerVisibility(child, visibility);\n                }\n            }\n        }\n    };\n    /**\n     * updateEdges method \\\n     *\n     * @returns { void }     updateEdges method .\\\n     * @param {Connector} obj - provide the source value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateEdges = function (obj) {\n        if (obj.sourceID !== undefined && obj.sourceID !== '') {\n            var node = this.nameTable[obj.sourceID];\n            if (node && node.outEdges && node.outEdges.length === 0) {\n                node.outEdges = [];\n            }\n            if (node && node.outEdges && node.outEdges.indexOf(obj.id) === -1) {\n                node.outEdges.push(obj.id);\n            }\n            this.updatePortEdges(node, obj, false);\n        }\n        if (obj.targetID !== undefined && obj.targetID !== '') {\n            var node = this.nameTable[obj.targetID];\n            if (node && node.inEdges && node.inEdges.length === 0) {\n                node.inEdges = [];\n            }\n            if (node && node.inEdges && node.inEdges.indexOf(obj.id) === -1) {\n                node.inEdges.push(obj.id);\n            }\n            this.updatePortEdges(node, obj, true);\n            if (node && node.visible && node.outEdges) {\n                var value = node.outEdges.length === 0 ? false : true;\n                this.updateIconVisibility(node, value);\n            }\n        }\n    };\n    /**\n     * updatePortEdges method \\\n     *\n     * @returns { void }     updatePortEdges method .\\\n     * @param {NodeModel} node - provide the source value.\n     * @param {ConnectorModel} obj - provide the target value.\n     * @param {boolean} isInEdges - provide the layoutOrientation value.\n     *\n     * @private\n     */\n    Diagram.prototype.updatePortEdges = function (node, obj, isInEdges) {\n        if (node) {\n            for (var i = 0; i < node.ports.length; i++) {\n                var port = node.ports[i];\n                var portId = (isInEdges) ? obj.targetPortID : obj.sourcePortID;\n                if (port.id === portId) {\n                    var portEdges = (isInEdges) ? port.inEdges : port.outEdges;\n                    if (portEdges.indexOf(obj.id) === -1) {\n                        portEdges.push(obj.id);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * refreshDiagram method \\\n     *\n     * @returns { void }     refreshDiagram method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.refreshDiagram = function () {\n        this.initLayerObjects();\n        this.doLayout();\n        this.updateBridging();\n        this.scroller.setSize();\n        this.addBlazorDiagramObjects();\n        if (isBlazor() && this.layout && this.layout.layoutInfo && this.layout.layoutInfo.isRootInverse && this.nodes.length > 2) {\n            var rootNode = this.nodes[0];\n            if (rootNode.outEdges.length > 1) {\n                var isProtectedChange = this.isProtectedOnChange;\n                for (var i = 1; i < rootNode.outEdges.length; i++) {\n                    var connector = this.nameTable[rootNode.outEdges[i]];\n                    var isAllowServerUpdate = this.allowServerDataBinding;\n                    this.protectPropertyChange(false);\n                    this.enableServerDataBinding(false);\n                    this.preventDiagramUpdate = true;\n                    var target = this.getObject(connector.targetID);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    if (target.data.Branch === 'Left') {\n                        connector.sourcePortID = rootNode.ports[1].id;\n                    }\n                    this.dataBind();\n                    this.preventDiagramUpdate = false;\n                    this.enableServerDataBinding(isAllowServerUpdate);\n                    this.protectPropertyChange(isProtectedChange);\n                }\n            }\n        }\n        if (isBlazor()) {\n            var view = void 0;\n            for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n                var temp = _a[_i];\n                view = this.views[temp];\n                if (view.renderDocument) {\n                    view.renderDocument(view);\n                    view.diagramRenderer.setLayers();\n                    view.updateView(view);\n                    this.renderNodes(view);\n                }\n            }\n        }\n        this.updateFitToPage();\n    };\n    Diagram.prototype.updateCanupdateStyle = function (element, value) {\n        for (var j = 0; j < element.length; j++) {\n            if (element[j].children) {\n                this.updateCanupdateStyle(element[j].children, value);\n            }\n            element[j].canApplyStyle = value;\n        }\n    };\n    Diagram.prototype.getZindexPosition = function (obj, viewId) {\n        var objects = [];\n        var index = undefined;\n        objects = objects.concat(this.nodes);\n        objects = objects.concat(this.connectors);\n        var type;\n        if (obj.zIndex !== -1) {\n            for (var i = 0; i < objects.length; i++) {\n                if (objects[i].zIndex > obj.zIndex) {\n                    if (obj.shape.type === 'HTML' || obj.shape.type === 'Native') {\n                        type = obj.shape.type === 'HTML' ? 'html' : 'native';\n                    }\n                    index = getDomIndex(viewId, objects[i].id, type);\n                    break;\n                }\n            }\n        }\n        return index;\n    };\n    /**\n     *updateDiagramObject method \\\n     *\n     * @returns { void } updateDiagramObject method .\\\n     * @param { (NodeModel | ConnectorModel) } obj - provide the obj value.\n     * @param { boolean } canIgnoreIndex - provide the canIgnoreIndex value.\n     * @param { boolean } isUpdateObject - provide the isUpdateObject value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateDiagramObject = function (obj, canIgnoreIndex, isUpdateObject) {\n        var view;\n        var domTable = 'domTable';\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var temp = _a[_i];\n            view = this.views[temp];\n            if (this.diagramActions) {\n                if (view.mode === 'SVG') {\n                    var hasLayers = this.layers.length > 1;\n                    var layer = void 0;\n                    if (hasLayers) {\n                        layer = this.commandHandler.getObjectLayer(obj.id);\n                    }\n                    if ((layer === undefined || (layer && layer.visible)) || isUpdateObject) {\n                        var htmlLayer = getHTMLLayer(this.element.id);\n                        if (!window[domTable][view.element.id + '_diagramLayer']) {\n                            window[domTable][view.element.id + '_diagramLayer'] =\n                                document.getElementById(view.element.id + '_diagramLayer');\n                        }\n                        var diagramElementsLayer = window[domTable][view.element.id + '_diagramLayer'];\n                        if (this.diagramActions & DiagramAction.Interactions) {\n                            this.updateCanupdateStyle(obj.wrapper.children, true);\n                        }\n                        var centerPoint = this.getMidPoint(obj);\n                        this.diagramRenderer.updateNode(obj.wrapper, diagramElementsLayer, htmlLayer, undefined, canIgnoreIndex ? undefined : this.getZindexPosition(obj, view.element.id), centerPoint);\n                        this.updateCanupdateStyle(obj.wrapper.children, true);\n                    }\n                }\n            }\n        }\n    };\n    //Method used to get mid point of Bezier Curve\n    Diagram.prototype.getMidPoint = function (obj) {\n        var centerPoint;\n        centerPoint = obj.annotations[0] ? obj.annotations[0].offset : 0.5;\n        var finalPoint;\n        if (obj instanceof Connector && obj.type === 'Bezier') {\n            var points = [\n                [obj.sourcePoint.x, obj.sourcePoint.y],\n                [obj.segments[0].bezierPoint2.x, obj.segments[0].bezierPoint2.y],\n                [obj.segments[0].bezierPoint1.x, obj.segments[0].bezierPoint1.y],\n                [obj.targetPoint.x, obj.targetPoint.y]\n            ];\n            var helperPoints = [];\n            for (var i = 1; i < 4; i++) {\n                var p = this.findPointOnCurve(points[i - 1], points[i], centerPoint);\n                helperPoints.push(p);\n            }\n            helperPoints.push(this.findPointOnCurve(helperPoints[0], helperPoints[1], centerPoint));\n            helperPoints.push(this.findPointOnCurve(helperPoints[1], helperPoints[2], centerPoint));\n            helperPoints.push(this.findPointOnCurve(helperPoints[3], helperPoints[4], centerPoint));\n            finalPoint = { cx: helperPoints[5][0] - 2, cy: helperPoints[5][1] - 2 };\n        }\n        return finalPoint;\n    };\n    Diagram.prototype.findPointOnCurve = function (pointOne, pointTwo, t) {\n        var pointOnCurve = [\n            (pointTwo[0] - pointOne[0]) * t + pointOne[0],\n            (pointTwo[1] - pointOne[1]) * t + pointOne[1]\n        ];\n        return pointOnCurve;\n    };\n    /**\n     *updateGridContainer method \\\n     *\n     * @returns { void } updateGridContainer method .\\\n     * @param { GridPanel } grid - provide the objectArray value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateGridContainer = function (grid) {\n        var view;\n        var htmlLayer = getHTMLLayer(this.element.id);\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var temp = _a[_i];\n            view = this.views[temp];\n            if (view.mode === 'SVG' && this.diagramActions) {\n                var diagramElementsLayer = document.getElementById(view.element.id + '_diagramLayer');\n                this.diagramRenderer.updateNode(grid, diagramElementsLayer, htmlLayer, undefined);\n            }\n            else {\n                this.refreshCanvasDiagramLayer(view);\n            }\n        }\n    };\n    /**\n     *getObjectsOfLayer method \\\n     *\n     * @returns { (NodeModel | ConnectorModel)[] } getObjectsOfLayer method .\\\n     * @param { string[] } objectArray - provide the objectArray value.\n     *\n     * @private\n     */\n    Diagram.prototype.getObjectsOfLayer = function (objectArray) {\n        var nodeArray = [];\n        for (var _i = 0, objectArray_1 = objectArray; _i < objectArray_1.length; _i++) {\n            var obj = objectArray_1[_i];\n            if (this.nameTable[obj]) {\n                nodeArray.push(this.nameTable[obj]);\n            }\n        }\n        return nodeArray;\n    };\n    /**\n     *refreshDiagramLayer method \\\n     *\n     * @returns { void } refreshDiagramLayer method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.refreshDiagramLayer = function () {\n        var view;\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var temp = _a[_i];\n            view = this.views[temp];\n            switch (view.mode) {\n                case 'SVG':\n                    this.refreshSvgDiagramLayer(view);\n                    break;\n                case 'Canvas':\n                    this.refreshCanvasLayers(view);\n                    break;\n            }\n        }\n    };\n    /**\n     *refreshCanvasLayers method \\\n     *\n     * @returns { void } refreshCanvasLayers method .\\\n     * @param { View } view - provide the view value.\n     *\n     * @private\n     */\n    Diagram.prototype.refreshCanvasLayers = function (view) {\n        if (!view) {\n            for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n                var temp = _a[_i];\n                var view_1 = this.views[temp];\n                this.refreshCanvasDiagramLayer(view_1);\n            }\n        }\n        else {\n            this.refreshCanvasDiagramLayer(view);\n        }\n    };\n    Diagram.prototype.renderBasicElement = function (view) {\n        var htmlLayer = getHTMLLayer(view.element.id);\n        for (var i = 0; i < this.basicElements.length; i++) {\n            var element = this.basicElements[i];\n            if (element instanceof Container) {\n                element.prevRotateAngle = 0;\n            }\n            element.measure(new Size(element.width, element.height));\n            element.arrange(element.desiredSize);\n            view.diagramRenderer.renderElement(element, view.diagramLayer, htmlLayer);\n        }\n    };\n    Diagram.prototype.refreshElements = function (view) {\n        if (!this.isDestroyed) {\n            this.clearCanvas(view);\n            if (view instanceof Diagram) {\n                view.diagramLayer.getContext('2d').setTransform(view.scroller.currentZoom, 0, 0, view.scroller.currentZoom, 0, 0);\n                view.diagramLayer.getContext('2d').scale(1.5, 1.5);\n            }\n            else {\n                var element = document.getElementById(view.element.id + '_nativeLayer');\n                if (element.children.length > 0) {\n                    view.updateView(view);\n                }\n            }\n            var htmlLayer = getHTMLLayer(view.element.id);\n            //const bounds: Rect = this.spatialSearch.getPageBounds();\n            this.renderDiagramElements(view.diagramLayer, view.diagramRenderer, htmlLayer);\n            for (var i = 0; i < this.basicElements.length; i++) {\n                var element = this.basicElements[i];\n                element.measure(new Size(element.width, element.height));\n                element.arrange(element.desiredSize);\n                view.diagramRenderer.renderElement(element, view.diagramLayer, htmlLayer);\n            }\n            if (view instanceof Diagram) {\n                view.diagramLayer.style.transform = 'scale(' + (2 / 3) + ')';\n                view.diagramLayer.style.transformOrigin = '0 0';\n            }\n            this.renderTimer = null;\n        }\n    };\n    /**\n     *refreshCanvasDiagramLayer method \\\n     *\n     * @returns { void } refreshCanvasDiagramLayer method .\\\n     * @param { View } view - provide the view value.\n     *\n     * @private\n     */\n    Diagram.prototype.refreshCanvasDiagramLayer = function (view) {\n        var _this = this;\n        if (view.mode !== 'SVG' && !this.isDestroyed) {\n            if (this.basicElements.length > 0) {\n                this.renderBasicElement(view);\n            }\n            if ((!this.diagramActions || (this.diagramActions & DiagramAction.Render) === 0)\n                || (DiagramAction.ToolAction & this.diagramActions) || canVitualize(this) || (this.scroller.currentZoom !== 1)) {\n                this.refreshElements(view);\n            }\n            else if (!this.renderTimer) {\n                this.renderTimer = setTimeout(function () {\n                    _this.refreshElements(view);\n                }, 40);\n            }\n        }\n    };\n    /**\n     *updatePortVisibility method \\\n     *\n     * @returns { void } updatePortVisibility method .\\\n     * @param { Node } node - provide the node value.\n     * @param { PortVisibility } portVisibility - provide the portVisibility value.\n     * @param { Boolean } inverse - provide the inverse value.\n     *\n     * @private\n     */\n    Diagram.prototype.updatePortVisibility = function (node, portVisibility, inverse) {\n        var portElement;\n        var drawingObject = !(this.drawingObject && this.drawingObject.shape) ? true : false;\n        if (node instanceof Node && drawingObject && canMove(node)) {\n            var ports = node.ports;\n            var changed = false;\n            for (var i = 0; i < ports.length; i++) {\n                portElement = this.getWrapper(node.wrapper, ports[i].id);\n                if ((portVisibility & PortVisibility.Hover || portVisibility & PortVisibility.Connect)) {\n                    if (checkPortRestriction(ports[i], portVisibility)) {\n                        portElement.visible = !inverse;\n                        changed = true;\n                    }\n                }\n            }\n            if (changed) {\n                this.updateDiagramObject(node);\n            }\n        }\n    };\n    /**\n     *refreshSvgDiagramLayer method \\\n     *\n     * @returns { void } refreshSvgDiagramLayer method .\\\n     * @param { View } view - provide the object value.\n     *\n     * @private\n     */\n    Diagram.prototype.refreshSvgDiagramLayer = function (view) {\n        var element;\n        var diagramElementsLayer = document.getElementById(view.element.id + '_diagramLayer');\n        var htmlLayer = getHTMLLayer(view.element.id);\n        if (!canVitualize(this)) {\n            for (var i = 0; i < this.basicElements.length; i++) {\n                element = this.basicElements[i];\n                element.measure(new Size(element.width, element.height));\n                element.arrange(element.desiredSize, (!(this.diagramActions & DiagramAction.Render) ? true : false));\n                this.diagramRenderer.renderElement(element, diagramElementsLayer, htmlLayer);\n            }\n            this.renderDiagramElements(diagramElementsLayer, this.diagramRenderer, htmlLayer);\n        }\n        else {\n            this.scroller.virtualizeElements();\n        }\n    };\n    /**\n     *removeVirtualObjects method \\\n     *\n     * @returns { void } removeVirtualObjects method .\\\n     * @param { Object } clearIntervalVal - provide the object value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeVirtualObjects = function (clearIntervalVal) {\n        if (this.deleteVirtualObject) {\n            for (var i = 0; i < this.scroller.removeCollection.length; i++) {\n                var obj = this.nameTable[this.scroller.removeCollection[i]];\n                this.removeElements(obj);\n            }\n            this.deleteVirtualObject = false;\n        }\n        clearInterval(clearIntervalVal);\n    };\n    /**\n     *updateTextElementValue method \\\n     *\n     * @returns { void } updateTextElementValue method .\\\n     * @param {  NodeModel | ConnectorModel } object - provide the object value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateTextElementValue = function (object) {\n        for (var j = 0; j < object.wrapper.children.length; j++) {\n            var element = object.wrapper.children[j];\n            if (element instanceof TextElement) {\n                element.canMeasure = true;\n                element.measure(new Size(object.width, object.height));\n                element.arrange(element.desiredSize);\n            }\n        }\n    };\n    /**\n     *updateVirtualObjects method \\\n     *\n     * @returns { void } updateVirtualObjects method .\\\n     * @param { string[] } collection - provide the collection value.\n     * @param { boolean } remove - provide the remove value.\n     * @param { string[] } tCollection - provide the htmlLayer value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateVirtualObjects = function (collection, remove, tCollection) {\n        var diagramElementsLayer = document.getElementById(this.element.id + '_diagramLayer');\n        var htmlLayer = getHTMLLayer(this.element.id);\n        if (this.mode === 'SVG') {\n            for (var i = 0; i < collection.length; i++) {\n                var index = this.scroller.removeCollection.indexOf(collection[i]);\n                if (index >= 0) {\n                    this.scroller.removeCollection.splice(index, 1);\n                }\n                var object = this.nameTable[collection[i]];\n                this.updateTextElementValue(object);\n                this.diagramRenderer.renderElement(object.wrapper, diagramElementsLayer, htmlLayer, undefined, undefined, undefined, undefined, object.zIndex);\n            }\n            for (var k = 0; k < tCollection.length; k++) {\n                this.scroller.removeCollection.push(tCollection[k]);\n            }\n            if (this.scroller.currentZoom !== 1) {\n                this.eventHandler.updateVirtualization();\n            }\n        }\n        else if (this.diagramActions) {\n            this.refreshDiagramLayer();\n        }\n    };\n    /**\n     *renderDiagramElements method \\\n     *\n     * @returns { void } renderDiagramElements method .\\\n     * @param { HTMLCanvasElement | SVGElement} canvas - provide the canvas value.\n     * @param { DiagramRenderer } renderer - provide the renderer value.\n     * @param { HTMLElement } htmlLayer - provide the htmlLayer value.\n     * @param {boolean } transform - provide the transform value.\n     * @param {boolean } fromExport - provide the fromExport value.\n     * @param { boolean } isOverView - provide the isOverView value.\n     *\n     * @private\n     */\n    Diagram.prototype.renderDiagramElements = function (canvas, renderer, htmlLayer, transform, fromExport, isOverView) {\n        if (transform === void 0) { transform = true; }\n        var pageBounds = this.scroller.getPageBounds();\n        pageBounds.x *= this.scroller.currentZoom;\n        pageBounds.y *= this.scroller.currentZoom;\n        pageBounds.width *= this.scroller.currentZoom;\n        pageBounds.height *= this.scroller.currentZoom;\n        var difX = -this.scroller.horizontalOffset - pageBounds.x;\n        var difY = -this.scroller.verticalOffset - pageBounds.y;\n        var getCenterPoint;\n        for (var _i = 0, _a = Object.keys(this.layerZIndexTable); _i < _a.length; _i++) {\n            var layerId = _a[_i];\n            var layer = this.commandHandler.getLayer(this.layerZIndexTable[layerId]);\n            var left = void 0;\n            var top_1 = void 0;\n            if (this.mode === 'Canvas' && canVitualize(this) && !this.diagramActions) {\n                this.scroller.virtualizeElements();\n            }\n            var id = (this.mode === 'Canvas' && canVitualize(this) &&\n                this.scroller.oldCollectionObjects.length > 0) ?\n                this.scroller.oldCollectionObjects : undefined;\n            for (var _b = 0, _c = Object.keys(id || layer.zIndexTable); _b < _c.length; _b++) {\n                var node = _c[_b];\n                var renderNode = id ? this.nameTable[id[node]] : this.nameTable[layer.zIndexTable[node]];\n                if (renderNode && !(renderNode.parentId) && layer.visible &&\n                    (!(renderNode.processId) || this.refreshing)) {\n                    var transformValue = {\n                        tx: this.scroller.transform.tx,\n                        ty: this.scroller.transform.ty,\n                        scale: this.scroller.transform.scale\n                    };\n                    if (canVitualize(this)) {\n                        if (this.scroller.currentZoom < 1) {\n                            if (pageBounds.x < 0 || this.scroller.horizontalOffset < 0) {\n                                var verticalValue = this.scroller.verticalOffset < 0 ? this.scroller.verticalOffset : 0;\n                                left = (difX > 0 ? difX : 0) + 'px';\n                                top_1 = ((this.realActions & RealAction.vScrollbarMoved) ? 0 : -verticalValue) + 'px';\n                            }\n                            else {\n                                left = 0 + 'px';\n                                top_1 = 0 + 'px';\n                            }\n                            if (this.realActions & RealAction.hScrollbarMoved) {\n                                this.realActions = this.realActions & ~RealAction.hScrollbarMoved;\n                            }\n                            if (this.realActions & RealAction.vScrollbarMoved) {\n                                this.realActions = this.realActions & ~RealAction.vScrollbarMoved;\n                            }\n                        }\n                        else {\n                            left = (pageBounds.x < 0 ? difX : -this.scroller.horizontalOffset) + 'px';\n                            top_1 = (pageBounds.y < 0 ? difY : -this.scroller.verticalOffset) + 'px';\n                        }\n                        this.diagramLayer.style.left = left;\n                        this.diagramLayer.style.top = top_1;\n                        transformValue.tx = this.scroller.horizontalOffset / transformValue.scale;\n                        transformValue.ty = this.scroller.verticalOffset / transformValue.scale;\n                    }\n                    var status_1 = true;\n                    if (fromExport) {\n                        status_1 = false;\n                    }\n                    this.updateTextElementValue(renderNode);\n                    if (this.refreshing) {\n                        if (renderNode.shape.activity && renderNode.shape.activity.subProcess\n                            && renderNode.shape.activity.subProcess.processes) {\n                            for (var i = 0; i < renderNode.shape.activity.subProcess.processes.length; i++) {\n                                var process = renderNode.shape.activity.subProcess.processes[i];\n                                renderNode.wrapper.children.push(this.nameTable[process].wrapper);\n                            }\n                            renderNode.wrapper.measure(new Size(renderNode.wrapper.bounds.width, renderNode.wrapper.bounds.height));\n                            renderNode.wrapper.arrange(renderNode.wrapper.desiredSize);\n                        }\n                    }\n                    if (renderNode instanceof Connector && renderNode.type === 'Bezier') {\n                        getCenterPoint = this.getMidPoint(renderNode);\n                    }\n                    else {\n                        getCenterPoint = null;\n                    }\n                    renderer.renderElement(renderNode.wrapper, canvas, htmlLayer, (!renderer.isSvgMode && transform) ? transformValue : undefined, undefined, undefined, status_1 && (!this.diagramActions || isOverView), undefined, undefined, getCenterPoint);\n                }\n            }\n        }\n    };\n    /**\n     *updateBridging method \\\n     *\n     * @returns { void } updateBridging method .\\\n     * @param {string} isLoad - provide the isLoad value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateBridging = function (isLoad) {\n        if (this.bridgingModule) {\n            for (var i = 0; i < this.connectors.length; i++) {\n                var connector = this.connectors[i];\n                this.bridgingModule.updateBridging(connector, this);\n                var canvas = this.connectors[i].wrapper;\n                if (canvas && canvas.children && canvas.children.length > 0) {\n                    var pathSegment = canvas.children[0];\n                    var data = pathSegment.data;\n                    connector.getSegmentElement(connector, pathSegment, this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree' ?\n                        this.layout.orientation : undefined, undefined, false);\n                    if (pathSegment.data !== data) {\n                        canvas.measure(new Size());\n                        canvas.arrange(canvas.desiredSize);\n                        if (this.mode === 'SVG' && !isLoad) {\n                            this.updateDiagramObject(connector);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *setCursor method \\\n     *\n     * @returns { void } setCursor method .\\\n     * @param {string} cursor - provide the width value.\n     *\n     * @private\n     */\n    Diagram.prototype.setCursor = function (cursor) {\n        this.diagramRenderer.setCursor(this.diagramCanvas, cursor);\n    };\n    /**\n     *clearCanvas method \\\n     *\n     * @returns { void } clearCanvas method .\\\n     * @param {View} view - provide the width value.\n     *\n     * @private\n     */\n    Diagram.prototype.clearCanvas = function (view) {\n        //let width: number;\n        //let height: number;\n        var width = view.contentWidth || view.diagramLayer.width / this.scroller.currentZoom;\n        var height = view.contentHeight || view.diagramLayer.height / this.scroller.currentZoom;\n        if (view.mode !== 'SVG') {\n            var ctx = CanvasRenderer.getContext(view.diagramLayer);\n            ctx.clearRect(0, 0, width, height);\n        }\n    };\n    /**\n     *updateScrollOffset method \\\n     *\n     * @returns { void } updateScrollOffset method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.updateScrollOffset = function () {\n        this.scroller.setScrollOffset(this.diagramCanvas.scrollLeft, this.diagramCanvas.scrollTop);\n        updateRuler(this);\n        if (canVitualize(this)) {\n            this.scroller.virtualizeElements();\n        }\n    };\n    /**\n     *setOffset method \\\n     *\n     * @returns { void } setOffset method .\\\n     * @param {number} offsetX - provide the width value.\n     * @param {number} offsetY - provide the height value.\n     *\n     * @private\n     */\n    Diagram.prototype.setOffset = function (offsetX, offsetY) {\n        var domTable = 'domTable';\n        if (!window[domTable][this.element.id + 'content']) {\n            window[domTable][this.element.id + 'content'] = document.getElementById(this.element.id + 'content');\n        }\n        var container = window[domTable][this.element.id + 'content'];\n        if (container) {\n            container.scrollLeft = offsetX;\n            container.scrollTop = offsetY;\n        }\n    };\n    /**\n     *setSize method \\\n     *\n     * @returns { void } setSize method .\\\n     * @param {number} width - provide the width value.\n     * @param {number} height - provide the height value.\n     *\n     * @private\n     */\n    Diagram.prototype.setSize = function (width, height) {\n        if (this.diagramLayer && !this.preventDiagramUpdate) {\n            var position = getRulerSize(this);\n            width -= position.width;\n            height -= position.height;\n            var bounds = this.spatialSearch.getPageBounds();\n            bounds.x *= this.scroller.currentZoom;\n            bounds.y *= this.scroller.currentZoom;\n            bounds.width *= this.scroller.currentZoom;\n            bounds.height *= this.scroller.currentZoom;\n            var factor = this.mode === 'SVG' ? 1 : 1.5;\n            var diagramLayer = this.mode === 'SVG' ?\n                getDiagramLayerSvg(this.element.id) : this.diagramLayer;\n            var w = (this.mode === 'Canvas' &&\n                (this.constraints & DiagramConstraints.Virtualization)) ? this.scroller.viewPortWidth : width;\n            var h = (this.mode === 'Canvas' &&\n                (this.constraints & DiagramConstraints.Virtualization)) ? this.scroller.viewPortHeight : height;\n            diagramLayer.setAttribute('width', (factor * w).toString());\n            diagramLayer.setAttribute('height', (factor * h).toString());\n            var hiddenUserHandleTemplate = document.getElementById(this.element.id + '_diagramUserHandleLayer');\n            if (hiddenUserHandleTemplate) {\n                hiddenUserHandleTemplate.style.width = width + 'px';\n                hiddenUserHandleTemplate.style.height = height + 'px';\n            }\n            var attr = { 'width': width.toString(), 'height': height.toString() };\n            this.diagramLayerDiv.style.width = width + 'px';\n            this.diagramLayerDiv.style.height = height + 'px';\n            setAttributeSvg(getNativeLayerSvg(this.element.id), attr);\n            setAttributeSvg(getPortLayerSvg(this.element.id), attr);\n            var adornerSVG = getAdornerLayerSvg(this.element.id);\n            setAttributeSvg(adornerSVG, attr);\n            adornerSVG.parentNode.style.width = width + 'px';\n            adornerSVG.parentNode.style.height = height + 'px';\n            var gridLayer = getGridLayerSvg(this.element.id);\n            setAttributeSvg(gridLayer, attr);\n            this.diagramRenderer.updateGrid(this.snapSettings, gridLayer, this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n            setAttributeSvg(getBackgroundLayerSvg(this.element.id), attr);\n            this.htmlLayer.style.width = width + 'px';\n            this.htmlLayer.style.height = height + 'px';\n            if (this.mode !== 'SVG' && !(canVitualize(this))) {\n                this.refreshDiagramLayer();\n            }\n            if (this.mode === 'SVG' && canVitualize(this)) {\n                this.scroller.virtualizeElements();\n            }\n        }\n    };\n    /**\n     *transformLayers method \\\n     *\n     * @returns { void } Defines how to remove the Page breaks .\\\n     *\n     * @private\n     */\n    Diagram.prototype.transformLayers = function () {\n        var bounds = this.spatialSearch.getPageBounds();\n        bounds.x *= this.scroller.currentZoom;\n        bounds.y *= this.scroller.currentZoom;\n        bounds.width *= this.scroller.currentZoom;\n        bounds.height *= this.scroller.currentZoom;\n        this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n        this.diagramRenderer.transformLayers(this.scroller.transform, this.mode === 'SVG');\n        if (!(this.diagramActions & DiagramAction.DragUsingMouse)) {\n            this.updateSelector();\n        }\n        this.renderPageBreaks(bounds);\n    };\n    /**\n     *Defines how to remove the Page breaks \\\n     *\n     * @returns { void } Defines how to remove the Page breaks .\\\n     *\n     * @private\n     */\n    Diagram.prototype.removePageBreaks = function () {\n        if (this.diagramLayer) {\n            var line = getBackgroundLayer(this.element.id);\n            if (line && line.childNodes) {\n                var length_2 = line.childNodes.length;\n                for (var i = 0; i < length_2; i++) {\n                    line.removeChild(line.childNodes[0]);\n                }\n            }\n        }\n    };\n    /**\n     * Defines how the page breaks has been rendered \\\n     *\n     * @returns { void } Defines how the page breaks has been rendered .\\\n     * @param {Rect} bounds - provide the overview value.\n     *\n     * @private\n     */\n    Diagram.prototype.renderPageBreaks = function (bounds) {\n        this.removePageBreaks();\n        var backgroundLayer = getBackgroundLayer(this.element.id);\n        if (backgroundLayer) {\n            var i = 0;\n            bounds = this.scroller.getPageBounds(true);\n            var x = (this.scroller.transform.tx + bounds.x) * this.scroller.currentZoom;\n            var y = (this.scroller.transform.ty + bounds.y) * this.scroller.currentZoom;\n            var height = bounds.height * this.scroller.currentZoom;\n            var width = bounds.width * this.scroller.currentZoom;\n            DiagramRenderer.renderSvgBackGroundImage(this.pageSettings.background, this.element, x, y, width, height);\n            var options = {\n                id: backgroundLayer.id + 'rect', x: x,\n                y: y,\n                height: height,\n                width: width, angle: 0, stroke: '', strokeWidth: 1,\n                fill: this.pageSettings.background.color, opacity: 1,\n                pivotX: 0, pivotY: 0, visible: true, dashArray: '0'\n            };\n            this.diagramRenderer.drawRect(backgroundLayer, options);\n            if (this.pageSettings.showPageBreaks) {\n                var collection = this.scroller.getPageBreak(bounds);\n                for (i = 0; i < collection.length; i++) {\n                    this.diagramRenderer.drawLine(backgroundLayer, {\n                        class: 'e-diagram-page-break',\n                        fill: 'none', stroke: '#aaaaaa', strokeWidth: 1, dashArray: '10 10',\n                        opacity: 2, x: 0, y: 0, width: 0, height: 0, angle: 0, pivotX: 0, pivotY: 0, visible: true,\n                        startPoint: {\n                            x: (collection[i].x1 + this.scroller.transform.tx) * this.scroller.currentZoom,\n                            y: (collection[i].y1 + this.scroller.transform.ty) * this.scroller.currentZoom\n                        },\n                        endPoint: {\n                            x: (collection[i].x2 + this.scroller.transform.tx) * this.scroller.currentZoom,\n                            y: (collection[i].y2 + this.scroller.transform.ty) * this.scroller.currentZoom\n                        }, id: collection[i].y1 === collection[i].y2 ? 'HorizontalLines' : 'VerticalLines'\n                    });\n                }\n            }\n        }\n    };\n    Diagram.prototype.validatePageSize = function () {\n        var temp = 0;\n        if (this.pageSettings.orientation === 'Portrait') {\n            if (this.pageSettings.width > this.pageSettings.height) {\n                temp = this.pageSettings.height;\n                this.pageSettings.height = this.pageSettings.width;\n                this.pageSettings.width = temp;\n            }\n        }\n        else {\n            if (this.pageSettings.height > this.pageSettings.width) {\n                temp = this.pageSettings.width;\n                this.pageSettings.width = this.pageSettings.height;\n                this.pageSettings.height = temp;\n            }\n        }\n    };\n    /**\n     * setOverview method \\\n     *\n     * @returns { void }     setOverview method .\\\n     * @param {View} overview - provide the overview value.\n     * @param {string} id - provide the boolean value.\n     *\n     * @private\n     */\n    Diagram.prototype.setOverview = function (overview, id) {\n        if (overview) {\n            if (overview) {\n                this.views.push(overview.id);\n                this.views[overview.id] = overview;\n                overview.renderDocument(overview);\n                overview.diagramRenderer.setLayers();\n                overview.updateView(overview);\n                this.renderNodes(overview);\n            }\n        }\n        else {\n            for (var i = 0; i < this.views.length; i++) {\n                if (this.views[i] === id) {\n                    overview = (this.views[id]);\n                }\n            }\n            this.views[id] = undefined;\n            var index = this.views.indexOf(id);\n            this.views.splice(index, 1);\n        }\n    };\n    Diagram.prototype.renderNodes = function (overview) {\n        if (overview) {\n            var renderer = new DiagramRenderer(overview.id, new SvgRenderer(), false);\n            var g = document.getElementById(overview.element.id + '_diagramLayer');\n            var htmlLayer = getHTMLLayer(overview.element.id);\n            this.renderDiagramElements(g, overview.diagramRenderer || renderer, htmlLayer, undefined, undefined, true);\n        }\n    };\n    Diagram.prototype.updateThumbConstraints = function (node, selectorModel, canInitialize) {\n        var state = 0;\n        var length = node.length;\n        for (var i = 0; i < length; i++) {\n            var obj = node[i];\n            var hideRotate = false;\n            var hideResize = false;\n            var thumbConstraints = selectorModel.thumbsConstraints;\n            if (obj instanceof Node) {\n                hideRotate = (obj.shape.type === 'Bpmn' && (obj.shape.shape === 'Activity' &&\n                    (obj.shape.activity.subProcess.collapsed === false)) ||\n                    obj.shape.shape === 'TextAnnotation');\n                hideResize = (obj.shape.type === 'Bpmn' && obj.shape.shape === 'TextAnnotation');\n                if (!canRotate(obj) || !(thumbConstraints & ThumbsConstraints.Rotate) || hideRotate) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.Rotate;\n                }\n                if (!canResize(obj, 'SouthEast') || !(thumbConstraints & ThumbsConstraints.ResizeSouthEast) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouthEast;\n                }\n                if (!canResize(obj, 'NorthWest') || !(thumbConstraints & ThumbsConstraints.ResizeNorthWest) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorthWest;\n                }\n                if (!canResize(obj, 'East') || !(thumbConstraints & ThumbsConstraints.ResizeEast) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeEast;\n                }\n                if (!canResize(obj, 'West') || !(thumbConstraints & ThumbsConstraints.ResizeWest) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeWest;\n                }\n                if (!canResize(obj, 'North') || !(thumbConstraints & ThumbsConstraints.ResizeNorth) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorth;\n                }\n                if (!canResize(obj, 'South') || !(thumbConstraints & ThumbsConstraints.ResizeSouth) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouth;\n                }\n                if (!canResize(obj, 'NorthEast') || !(thumbConstraints & ThumbsConstraints.ResizeNorthEast) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorthEast;\n                }\n                if (!canResize(obj, 'SouthWest') || !(thumbConstraints & ThumbsConstraints.ResizeSouthWest) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouthWest;\n                }\n            }\n            else if (obj instanceof Connector) {\n                if (!canInitialize) {\n                    thumbConstraints = thumbConstraints | ThumbsConstraints.Default;\n                }\n                if (canDragSourceEnd(obj)) {\n                    thumbConstraints = thumbConstraints | ThumbsConstraints.ConnectorSource;\n                }\n                else {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ConnectorSource;\n                }\n                if (canDragTargetEnd(obj)) {\n                    thumbConstraints = thumbConstraints | ThumbsConstraints.ConnectorTarget;\n                }\n                else {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ConnectorTarget;\n                }\n            }\n            else {\n                if (!canInitialize) {\n                    thumbConstraints = thumbConstraints | ThumbsConstraints.Default;\n                }\n                if (!canResize(obj)) {\n                    thumbConstraints = thumbConstraints & ~(ThumbsConstraints.ResizeSouthEast | ThumbsConstraints.ResizeSouthWest |\n                        ThumbsConstraints.ResizeSouth | ThumbsConstraints.ResizeEast | ThumbsConstraints.ResizeWest |\n                        ThumbsConstraints.ResizeNorth | ThumbsConstraints.ResizeNorthEast | ThumbsConstraints.ResizeNorthWest);\n                }\n                if (!canRotate(obj)) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.Rotate;\n                }\n            }\n            selectorModel.thumbsConstraints = thumbConstraints;\n        }\n    };\n    /**\n     * renderSelector method \\\n     *\n     * @returns { void }     renderSelector method .\\\n     * @param {boolean} multipleSelection - provide the multipleSelection value.\n     * @param {boolean} isSwimLane - provide the boolean value.\n     *\n     * @private\n     */\n    Diagram.prototype.renderSelector = function (multipleSelection, isSwimLane) {\n        var isProtectedOnChangeValue = this.isProtectedOnChange;\n        if (isBlazor()) {\n            this.isProtectedOnChange = true;\n        }\n        var size = new Size();\n        var selectorModel = this.selectedItems;\n        var selectorConstraints = selectorModel.constraints;\n        var rendererActions = this.diagramRenderer.rendererActions;\n        var innertemplate = document.getElementsByClassName('blazor-inner-template');\n        var i;\n        var div;\n        this.diagramRenderer.rendererActions = this.currentSymbol ?\n            this.addConstraints(rendererActions, RendererAction.DrawSelectorBorder) :\n            this.removeConstraints(rendererActions, RendererAction.DrawSelectorBorder);\n        this.clearSelectorLayer();\n        if (this.commandHandler.hasSelection()) {\n            if (selectorModel.nodes.length === 1 && selectorModel.connectors.length === 0) {\n                selectorModel.rotateAngle = selectorModel.nodes[0].rotateAngle;\n                selectorModel.pivot = selectorModel.nodes[0].pivot;\n            }\n            selectorModel.wrapper.measure(size);\n            selectorModel.wrapper.arrange(selectorModel.wrapper.desiredSize);\n            selectorModel.width = selectorModel.wrapper.actualSize.width;\n            selectorModel.height = selectorModel.wrapper.actualSize.height;\n            selectorModel.offsetX = selectorModel.wrapper.offsetX;\n            selectorModel.offsetY = selectorModel.wrapper.offsetY;\n            if (selectorModel.rotateAngle !== 0) {\n                for (var _i = 0, _a = selectorModel.nodes; _i < _a.length; _i++) {\n                    var obj = _a[_i];\n                    obj.offsetX = obj.wrapper.offsetX;\n                    obj.offsetY = obj.wrapper.offsetY;\n                }\n                for (var _b = 0, _c = selectorModel.connectors; _b < _c.length; _b++) {\n                    var conn = _c[_b];\n                    //update connections\n                }\n            }\n            var bounds = this.spatialSearch.getPageBounds();\n            //let selectorElement: (SVGElement | HTMLCanvasElement);\n            var selectorElement = getSelectorElement(this.element.id);\n            //let diagramUserHandlelayer: (SVGElement | HTMLElement);\n            var diagramUserHandlelayer = getUserHandleLayer(this.element.id);\n            selectorModel.thumbsConstraints = ThumbsConstraints.Default;\n            if (selectorModel.annotation) {\n                this.updateThumbConstraints([selectorModel.annotation], selectorModel);\n            }\n            else {\n                this.updateThumbConstraints(selectorModel.nodes, selectorModel);\n                this.updateThumbConstraints(selectorModel.connectors, selectorModel, true);\n            }\n            if (selectorModel.annotation) {\n                this.renderSelectorForAnnotation(selectorModel, selectorElement);\n            }\n            else if (selectorModel.nodes.length + selectorModel.connectors.length === 1 || this.nameTable[\"helper\"]) {\n                if (selectorModel.nodes[0] instanceof Node) {\n                    var node = selectorModel.nodes[0];\n                    if (checkParentAsContainer(this, node)) {\n                        if (!isSwimLane && (node.shape.type !== 'UmlClassifier' && !(node.parentId &&\n                            this.nameTable[node.parentId]\n                            && this.nameTable[node.parentId].shape.type === 'UmlClassifier'))) {\n                            if (!(node.container && (node.container.type === 'Canvas' || node.container.type === 'Grid'))) {\n                                selectorModel.nodes[0].constraints &= ~(NodeConstraints.Rotate | NodeConstraints.HideThumbs);\n                            }\n                            selectorModel.thumbsConstraints &= ~ThumbsConstraints.Rotate;\n                        }\n                    }\n                    var constraints = isSwimLane ? true : ((node.constraints & NodeConstraints.HideThumbs) ? true : false);\n                    var swimlane = (node.shape.type === 'SwimLane' || node.isLane || node.isPhase || isSwimLane) ? true : false;\n                    this.diagramRenderer.renderResizeHandle(selectorModel.wrapper.children[0], selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(node), constraints, swimlane);\n                }\n                else if (selectorModel.connectors[0] instanceof Connector && canDrawThumbs(this.diagramRenderer.rendererActions)) {\n                    var connector = selectorModel.connectors[0];\n                    this.diagramRenderer.renderEndPointHandle(connector, selectorElement, selectorModel.thumbsConstraints, selectorModel.constraints, this.scroller.transform, connector.sourceWrapper !== undefined, connector.targetWrapper !== undefined, (this.connectorEditingToolModule && canDragSegmentThumb(connector)) ? true : false);\n                }\n            }\n            else {\n                this.diagramRenderer.renderResizeHandle(selectorModel.wrapper, selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(selectorModel));\n            }\n            if (!(selectorModel.annotation) && !this.currentSymbol) {\n                this.diagramRenderer.renderUserHandler(selectorModel, selectorElement, this.scroller.transform, diagramUserHandlelayer);\n                if (isBlazor() && innertemplate.length > 0) {\n                    for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n                        var userHandle = this.selectedItems.userHandles[i];\n                        div = document.getElementById(userHandle.name + '_html_element');\n                        div.style.display = 'block';\n                    }\n                }\n            }\n        }\n        this.isProtectedOnChange = isProtectedOnChangeValue;\n    };\n    /**\n     * updateSelector method \\\n     *\n     * @returns { void }     updateSelector method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.updateSelector = function () {\n        var severDataBind = this.allowServerDataBinding;\n        this.enableServerDataBinding(false);\n        var size = new Size();\n        var selector = this.selectedItems;\n        var selectorConstraints = selector.constraints;\n        var innertemplate = document.getElementsByClassName('blazor-inner-template');\n        var i;\n        var div;\n        if (!(this.diagramActions & DiagramAction.ToolAction) && this.selectedItems.nodes.length === 1) {\n            this.selectedItems.rotateAngle = this.selectedItems.nodes[0].rotateAngle;\n            this.selectedItems.wrapper.rotateAngle = this.selectedItems.nodes[0].rotateAngle;\n        }\n        if (this.selectedItems !== undefined) {\n            this.clearSelectorLayer();\n            if (selector.wrapper !== null && selector.wrapper.children && selector.wrapper.children.length) {\n                var canUpdate = true;\n                var canRender = true;\n                if (selectionHasConnector(this, selector)) {\n                    var eventHandler = 'eventHandler';\n                    var rotate = this[eventHandler].action;\n                    var isRotate = rotate.includes('Rotate');\n                    var isSelect = rotate.includes('None') || rotate.includes('Select') || rotate.includes('Drag');\n                    if (isRotate || isSelect) {\n                        canRender = false;\n                    }\n                    if (!isSelect) {\n                        canUpdate = false;\n                    }\n                }\n                if (canUpdate) {\n                    selector.wrapper.measure(size);\n                    selector.wrapper.arrange(selector.wrapper.desiredSize);\n                }\n                if (selector.rotateAngle !== 0 || selector.rotateAngle !== selector.wrapper.prevRotateAngle) {\n                    for (var _i = 0, _a = selector.nodes; _i < _a.length; _i++) {\n                        var obj = _a[_i];\n                        obj.offsetX = obj.wrapper.offsetX;\n                        obj.offsetY = obj.wrapper.offsetY;\n                    }\n                }\n                selector.width = selector.wrapper.actualSize.width;\n                selector.height = selector.wrapper.actualSize.height;\n                selector.offsetX = selector.wrapper.offsetX;\n                selector.offsetY = selector.wrapper.offsetY;\n                //let selectorEle: (SVGElement | HTMLCanvasElement);\n                var selectorEle = getSelectorElement(this.element.id);\n                //let diagramUserHandlelayer: (SVGElement | HTMLElement);\n                var diagramUserHandlelayer = getUserHandleLayer(this.element.id);\n                var canHideResizers = this.eventHandler.canHideResizers();\n                selector.thumbsConstraints = ThumbsConstraints.Default;\n                if (selector.annotation) {\n                    this.updateThumbConstraints([selector.annotation], selector);\n                }\n                else {\n                    this.updateThumbConstraints(selector.nodes, selector);\n                    this.updateThumbConstraints(selector.connectors, selector, true);\n                }\n                if ((this.selectedItems.constraints & SelectorConstraints.UserHandle) && (!(selector.annotation)) && !this.currentSymbol) {\n                    this.diagramRenderer.renderUserHandler(selector, selectorEle, this.scroller.transform, diagramUserHandlelayer);\n                    if (isBlazor() && innertemplate.length > 0) {\n                        for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n                            var userHandletemplate = this.selectedItems.userHandles[i];\n                            div = document.getElementById(userHandletemplate.name + '_html_element');\n                            div.style.display = 'block';\n                        }\n                    }\n                }\n                if (selector.annotation) {\n                    this.renderSelectorForAnnotation(selector, selectorEle);\n                }\n                else if (selector.nodes.length + selector.connectors.length === 1) {\n                    if (selector.connectors[0] instanceof Connector && canDrawThumbs(this.diagramRenderer.rendererActions)) {\n                        var connector = selector.connectors[0];\n                        this.diagramRenderer.renderEndPointHandle(connector, selectorEle, selector.thumbsConstraints, selectorConstraints, this.scroller.transform, connector.sourceWrapper !== undefined, connector.targetWrapper !== undefined, (this.connectorEditingToolModule && canDragSegmentThumb(connector)) ? true : false);\n                    }\n                    else if (selector.nodes[0] instanceof Node) {\n                        var stackPanel = selector.nodes[0];\n                        if (checkParentAsContainer(this, selector.nodes[0])) {\n                            if (stackPanel.shape.type !== 'UmlClassifier' && !(stackPanel.parentId &&\n                                this.nameTable[stackPanel.parentId]\n                                && this.nameTable[stackPanel.parentId].shape.type === 'UmlClassifier')) {\n                                if (!(stackPanel.container && (stackPanel.container.type === 'Canvas'\n                                    || stackPanel.container.type === 'Grid'))) {\n                                    selector.nodes[0].constraints &= ~(NodeConstraints.HideThumbs | NodeConstraints.Rotate);\n                                }\n                                selector.thumbsConstraints &= ~ThumbsConstraints.Rotate;\n                            }\n                        }\n                        var swimlane = (stackPanel.shape.type === 'SwimLane' || stackPanel.isLane ||\n                            stackPanel.isPhase) ? true : false;\n                        this.diagramRenderer.renderResizeHandle(selector.wrapper.children[0], selectorEle, selector.thumbsConstraints, this.scroller.currentZoom, selector.constraints, this.scroller.transform, canHideResizers, canMove(selector.nodes[0]), (selector.nodes[0].constraints & NodeConstraints.HideThumbs) ? true : false, swimlane);\n                    }\n                }\n                else {\n                    if (this.diagramActions & DiagramAction.Interactions) {\n                        this.diagramRenderer.rendererActions = this.diagramRenderer.rendererActions | RendererAction.PreventRenderSelector;\n                    }\n                    if (!(selectionHasConnector(this, selector) && canRender)) {\n                        this.diagramRenderer.renderResizeHandle(selector.wrapper, selectorEle, selector.thumbsConstraints, this.scroller.currentZoom, selector.constraints, this.scroller.transform, canHideResizers, canMove(selector));\n                    }\n                    this.diagramRenderer.rendererActions = this.diagramRenderer.rendererActions & ~RendererAction.PreventRenderSelector;\n                }\n            }\n        }\n        this.enableServerDataBinding(severDataBind);\n    };\n    /**\n     * renderSelectorForAnnotation method \\\n     *\n     * @returns { void }     renderSelectorForAnnotation method .\\\n     * @param {Selector} selectorModel - provide the x value.\n     * @param {(SVGElement | HTMLCanvasElement)} selectorElement - provide the y value.\n     *\n     * @private\n     */\n    Diagram.prototype.renderSelectorForAnnotation = function (selectorModel, selectorElement) {\n        this.diagramRenderer.renderResizeHandle(selectorModel.wrapper.children[0], selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(selectorModel.annotation));\n    };\n    /**\n     * drawSelectionRectangle method \\\n     *\n     * @returns { void }     drawSelectionRectangle method .\\\n     * @param {number} x - provide the x value.\n     * @param {number} y - provide the y value.\n     * @param {number} width - provide the width value.\n     * @param {number} height - provide the height value.\n     *\n     * @private\n     */\n    Diagram.prototype.drawSelectionRectangle = function (x, y, width, height) {\n        this.clearSelectorLayer();\n        this.diagramRenderer.drawSelectionRectangle(x, y, width, height, this.adornerLayer, this.scroller.transform);\n    };\n    /**\n     * renderHighlighter method \\\n     *\n     * @returns { void }     renderHighlighter method .\\\n     * @param {DiagramElement} element - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.renderHighlighter = function (element) {\n        var adornerSvg = getAdornerLayerSvg(this.element.id);\n        this.diagramRenderer.renderHighlighter(element, adornerSvg, this.scroller.transform);\n    };\n    /**\n     * clearHighlighter method \\\n     *\n     * @returns { void }     clearHighlighter method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.clearHighlighter = function () {\n        var adornerSvg = getAdornerLayerSvg(this.element.id);\n        var highlighter = adornerSvg.getElementById(adornerSvg.id + '_highlighter');\n        if (highlighter) {\n            highlighter.parentNode.removeChild(highlighter);\n        }\n    };\n    /**\n     * getNodesConnectors method \\\n     *\n     * @returns { (NodeModel | ConnectorModel)[] }     getNodesConnectors method .\\\n     * @param {(NodeModel | ConnectorModel)[]} selectedItems - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.getNodesConnectors = function (selectedItems) {\n        for (var i = 0; i < this.nodes.length; i++) {\n            var node = this.nodes[i];\n            selectedItems.push(node);\n        }\n        for (var i = 0; i < this.connectors.length; i++) {\n            var conn = this.connectors[i];\n            selectedItems.push(conn);\n        }\n        return selectedItems;\n    };\n    /**\n     * clearSelectorLayer method \\\n     *\n     * @returns { void }     clearSelectorLayer method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.clearSelectorLayer = function () {\n        var adornerSvg = getAdornerLayerSvg(this.element.id);\n        var innertemplate = document.getElementsByClassName('blazor-inner-template');\n        var i;\n        var div;\n        var j;\n        if (!this.currentSymbol) {\n            var selectionRect = adornerSvg.getElementById(this.adornerLayer.id + '_selected_region');\n            if (selectionRect) {\n                selectionRect.parentNode.removeChild(selectionRect);\n            }\n            this.clearHighlighter();\n            var childNodes = getSelectorElement(this.element.id).childNodes;\n            var child = void 0;\n            for (var i_4 = childNodes.length; i_4 > 0; i_4--) {\n                child = childNodes[i_4 - 1];\n                child.parentNode.removeChild(child);\n            }\n            if (isBlazor() && !(this.diagramActions & DiagramAction.DragUsingMouse) && innertemplate.length > 0) {\n                for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n                    var template = this.selectedItems.userHandles[i];\n                    div = document.getElementById(template.name + '_html_element');\n                    div.style.display = 'none';\n                }\n            }\n            else {\n                if (!isBlazor()) {\n                    var templates = getUserHandleLayer(this.element.id).childNodes;\n                    for (i = templates.length; i > 0; i--) {\n                        templates[i - 1].parentNode.removeChild(templates[i - 1]);\n                    }\n                }\n            }\n        }\n        else {\n            var symbolBorder = adornerSvg.getElementById('borderRect_symbol');\n            if (symbolBorder) {\n                symbolBorder.parentNode.removeChild(symbolBorder);\n            }\n        }\n    };\n    /**\n     * getWrapper method \\\n     *\n     * @returns { void }     getWrapper method .\\\n     * @param {Container} nodes - provide the node value.\n     * @param {string} id - provide the childernCollection value.\n     *\n     * @private\n     */\n    Diagram.prototype.getWrapper = function (nodes, id) {\n        var wrapper;\n        id = nodes.id + '_' + id;\n        var container = nodes instanceof Canvas ? nodes : this.getPortContainer(this.nameTable[nodes.id]);\n        for (var i = 0; i < container.children.length; i++) {\n            if (id === container.children[i].id) {\n                wrapper = container.children[i];\n            }\n        }\n        return wrapper;\n    };\n    /**\n     * DiagramElement method \\\n     *\n     * @returns { void }     getEndNodeWrapper method .\\\n     * @param {NodeModel | ConnectorModel} node - provide the node value.\n     * @param {ConnectorModel} connector - provide the childernCollection value.\n     * @param {boolean} source - provide the childernCollection value.\n     *\n     * @private\n     */\n    Diagram.prototype.getEndNodeWrapper = function (node, connector, source) {\n        if (node.shape.type === 'Bpmn' && node.wrapper.children[0] instanceof Canvas) {\n            if ((!isBlazor() && node.shape.shape === 'Activity') ||\n                (isBlazor() && node.shadow.bpmnShape === 'Activity')) {\n                if (source && node.shape.activity.subProcess.type === 'Transaction'\n                    && connector.sourcePortID) {\n                    var portId = connector.sourcePortID;\n                    var parent_3 = node.wrapper.children[0].children[0].children[2];\n                    if (parent_3.children) {\n                        for (var _i = 0, _a = parent_3.children; _i < _a.length; _i++) {\n                            var child = _a[_i];\n                            if (child.visible && child.id === node.id + '_' + portId) {\n                                return child.children[0];\n                            }\n                        }\n                    }\n                }\n                return node.wrapper.children[0].children[0].children[0];\n            }\n            return node.wrapper.children[0].children[0];\n        }\n        if (!this.containsMargin(node.wrapper.children[0])) {\n            if (!node.children) {\n                return node.wrapper.children[0];\n            }\n        }\n        return node.wrapper;\n    };\n    Diagram.prototype.containsMargin = function (node) {\n        return node.margin && (node.margin.left !== 0 || node.margin.top !== 0 || node.margin.right !== 0 || node.margin.bottom !== 0);\n    };\n    Diagram.prototype.focusOutEdit = function () {\n        this.endEdit();\n    };\n    Diagram.prototype.endEditCommand = function () {\n        this.endEdit();\n        this.textEditing = false;\n    };\n    /**\n     * @private\n     */\n    /* tslint:disable */\n    Diagram.prototype.endEdit = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var blazor, blazorInterop, oldValues, changedvalues, annotations, textArea, text, element, node, annotation, args, bpmnAnnotation, textWrapper, eventObj, annotation_1, index, deleteNode, eventObj, index, changesAnnotation, nodeIndex, oldnodes, newnodes, clonedObject, selectedNode, swimLaneNode, laneHeader, phaseHeader, collection, j;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.diagramActions & DiagramAction.TextEdit)) return [3 /*break*/, 11];\n                        blazor = 'Blazor';\n                        blazorInterop = 'sfBlazor';\n                        oldValues = void 0;\n                        changedvalues = void 0;\n                        annotations = {};\n                        this.enableServerDataBinding(false);\n                        if (isBlazor()) {\n                            this.canEnableBlazorObject = true;\n                        }\n                        textArea = document.getElementById(this.element.id + '_editBox');\n                        if (!((isBlazor() && textArea) || !isBlazor())) return [3 /*break*/, 11];\n                        text = textArea.value;\n                        EventHandler.remove(textArea, 'input', this.eventHandler.inputChange);\n                        EventHandler.remove(textArea, 'focusout', this.focusOutEdit);\n                        element = document.getElementById(this.element.id + '_editTextBoxDiv');\n                        node = void 0;\n                        node = this.nameTable[this.activeLabel.parentId];\n                        annotation = findAnnotation(node, this.activeLabel.id);\n                        args = { oldValue: this.activeLabel.text, newValue: text, cancel: false, element: node, annotation: annotation };\n                        if (isBlazor() && this.textEdit) {\n                            args = this.getBlazorTextEditArgs(args);\n                        }\n                        bpmnAnnotation = false;\n                        element.parentNode.removeChild(element);\n                        textWrapper = void 0;\n                        if (!this.bpmnModule) return [3 /*break*/, 5];\n                        node = this.bpmnModule.isBpmnTextAnnotation(this.activeLabel, this);\n                        textWrapper = this.bpmnModule.getTextAnnotationWrapper(node, this.activeLabel.id);\n                        bpmnAnnotation = node ? true : false;\n                        if (!bpmnAnnotation) return [3 /*break*/, 5];\n                        if (!(element.textContent !== text || text !== this.activeLabel.text)) return [3 /*break*/, 5];\n                        if (!isBlazor()) return [3 /*break*/, 3];\n                        if (!(this.textEdit && window && window[blazor])) return [3 /*break*/, 2];\n                        eventObj = { 'EventName': 'textEdit', args: JSON.stringify(args) };\n                        return [4 /*yield*/, window[blazorInterop].updateBlazorDiagramEvents(eventObj, this)];\n                    case 1:\n                        args = (_a.sent()) || args;\n                        _a.label = 2;\n                    case 2: return [3 /*break*/, 4];\n                    case 3:\n                        this.triggerEvent(DiagramEvent.textEdit, args);\n                        _a.label = 4;\n                    case 4:\n                        if (!args.cancel) {\n                            this.bpmnModule.updateTextAnnotationContent(node, this.activeLabel, text, this);\n                        }\n                        _a.label = 5;\n                    case 5:\n                        if (!!bpmnAnnotation) return [3 /*break*/, 10];\n                        node = this.nameTable[this.activeLabel.parentId];\n                        annotation_1 = findAnnotation(node, this.activeLabel.id);\n                        if (annotation_1 && !(annotation_1 instanceof Text)) {\n                            index = findObjectIndex(node, annotation_1.id, true);\n                            annotations[index] = { content: annotation_1.content };\n                            oldValues = { annotations: annotations };\n                        }\n                        else {\n                            if (isBlazor() && (node.shape).type === 'Text') {\n                                oldValues = { shape: { textContent: node.shape.content } };\n                            }\n                            else {\n                                oldValues = { shape: { content: node.shape.content } };\n                            }\n                        }\n                        deleteNode = this.eventHandler.isAddTextNode(node, true);\n                        if (!(!deleteNode && (element.textContent !== text || text !== this.activeLabel.text))) return [3 /*break*/, 9];\n                        if (!isBlazor()) return [3 /*break*/, 8];\n                        if (!(window && window[blazor] && this.textEdit)) return [3 /*break*/, 7];\n                        eventObj = { 'EventName': 'textEdit', args: JSON.stringify(args) };\n                        return [4 /*yield*/, window[blazorInterop].updateBlazorDiagramEvents(eventObj, this)];\n                    case 6:\n                        args = (_a.sent()) || args;\n                        _a.label = 7;\n                    case 7: return [3 /*break*/, 9];\n                    case 8:\n                        this.triggerEvent(DiagramEvent.textEdit, args);\n                        _a.label = 9;\n                    case 9:\n                        if (!textWrapper) {\n                            textWrapper = this.getWrapper(node.wrapper, this.activeLabel.id);\n                        }\n                        if (annotation_1.content !== text && !args.cancel) {\n                            if (node.parentId && this.nameTable[node.parentId].shape.type === 'UmlClassifier'\n                                && text.indexOf('+') === -1 && text.indexOf('-') === -1 && text.indexOf('#') === -1\n                                && text.indexOf('~') === -1 && node.id.indexOf('_umlClass_header') === -1) {\n                                text = ' + ' + text;\n                            }\n                            if (node.isLane || node.isPhase) {\n                                this.protectPropertyChange(true);\n                            }\n                            if (!(annotation_1 instanceof Text)) {\n                                index = findObjectIndex(node, annotation_1.id, true);\n                                changesAnnotation = {};\n                                changesAnnotation[index] = { content: text };\n                                changedvalues = { annotations: changesAnnotation };\n                            }\n                            else {\n                                if (isBlazor() && (node.shape).type === 'Text') {\n                                    changedvalues = { shape: { textContent: text } };\n                                }\n                                else {\n                                    changedvalues = { shape: { content: text } };\n                                }\n                            }\n                            nodeIndex = this.getIndex(node, node.id);\n                            if (nodeIndex) {\n                                oldnodes = {};\n                                oldnodes[nodeIndex] = oldValues;\n                                newnodes = {};\n                                newnodes[nodeIndex] = changedvalues;\n                                if (getObjectType(node) === Node) {\n                                    this.onPropertyChanged({ nodes: newnodes }, { nodes: oldnodes });\n                                }\n                                else {\n                                    this.onPropertyChanged({ connectors: newnodes }, { connectors: oldnodes });\n                                }\n                            }\n                            this.protectPropertyChange(true);\n                            if (isBlazor() && (node.shape).type === 'Text') {\n                                node.shape.textContent = text;\n                            }\n                            else {\n                                annotation_1.content = text;\n                            }\n                            this.protectPropertyChange(false);\n                            this.updateSelector();\n                            if (node.isLane || node.isPhase) {\n                                this.protectPropertyChange(false);\n                            }\n                        }\n                        if (deleteNode) {\n                            this.removeObjectsFromLayer(node);\n                            this.removeFromAQuad(node);\n                            delete this.nameTable[this.activeLabel.parentId];\n                            if (text !== '') {\n                                this.clearSelection();\n                                clonedObject = cloneObject(node);\n                                node = this.add(clonedObject);\n                                this.updateDiagramObject(node);\n                                this.commandHandler.oldSelectedObjects = cloneSelectedObjects(this);\n                                this.commandHandler.select(this.nameTable[node.id]);\n                                this.commandHandler.updateBlazorSelector();\n                            }\n                        }\n                        _a.label = 10;\n                    case 10:\n                        if (this.selectedItems.nodes.length) {\n                            selectedNode = this.nameTable[this.activeLabel.parentId];\n                            swimLaneNode = this.nameTable[selectedNode.parentId];\n                            if ((swimLaneNode && swimLaneNode.shape.type === 'SwimLane') || (selectedNode.shape.type === 'SwimLane')) {\n                                laneHeader = 'LaneHeaderParent';\n                                phaseHeader = 'PhaseHeaderParent';\n                                if ((selectedNode.shape.type === 'SwimLane')) {\n                                    swimLaneNode = this.nameTable[this.activeLabel.parentId];\n                                    selectedNode = node;\n                                }\n                                if ((selectedNode.isLane || selectedNode.isPhase)) {\n                                    collection = selectedNode.isLane ?\n                                        swimLaneNode.shape.lanes : swimLaneNode.shape.phases;\n                                    for (j = 0; j < collection.length; j++) {\n                                        if (collection[j].id === (selectedNode[laneHeader] || selectedNode[phaseHeader])) {\n                                            collection[j].header.annotation.content = selectedNode.annotations[0].content;\n                                        }\n                                    }\n                                }\n                                else if (selectedNode.isHeader && swimLaneNode.shape.hasHeader) {\n                                    swimLaneNode.shape.header.annotation.content = selectedNode.annotations[0].content;\n                                }\n                            }\n                            this.dataBind();\n                        }\n                        textWrapper.visible = true;\n                        this.updateDiagramObject(node);\n                        this.diagramActions = this.diagramActions & ~DiagramAction.TextEdit;\n                        if (this.activeLabel.isGroup) {\n                            this.endGroupAction();\n                        }\n                        this.activeLabel = { id: '', parentId: '', isGroup: false, text: undefined };\n                        this.commandHandler.getBlazorOldValues();\n                        if (isBlazor()) {\n                            this.canEnableBlazorObject = false;\n                        }\n                        this.enableServerDataBinding(true);\n                        _a.label = 11;\n                    case 11: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * getIndex method \\\n     *\n     * @returns { void }     getIndex method .\\\n     * @param {NodeModel | ConnectorModel} node - provide the node value.\n     * @param {string} id - provide the childernCollection value.\n     *\n     * @private\n     */\n    Diagram.prototype.getIndex = function (node, id) {\n        //let index: number;\n        var collection = (getObjectType(node) === Node) ? this.nodes : this.connectors;\n        for (var i = 0; i < collection.length; i++) {\n            if (collection[i].id.toString() === id.toString()) {\n                return i.toString();\n            }\n        }\n        return null;\n    };\n    /* tslint:enable */\n    Diagram.prototype.getBlazorTextEditArgs = function (args) {\n        var element = getObjectType(args.element) === Connector ? { connectorId: args.element.id }\n            : { nodeId: args.element.id };\n        var annotation = {};\n        if (getObjectType(args.element) === Node) {\n            if (args.element.shape.type === 'Text') {\n                annotation.textNode = args.element.shape;\n            }\n            else {\n                annotation.annotationId = args.element.annotations[0].id;\n            }\n        }\n        else {\n            annotation.annotationId = args.element.annotations[0].id;\n        }\n        args = {\n            oldValue: args.oldValue,\n            newValue: args.newValue,\n            cancel: args.cancel,\n            element: element,\n            annotation: annotation\n        };\n        return args;\n    };\n    /**\n     * canLogChange method \\\n     *\n     * @returns { void }     canLogChange method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.canLogChange = function () {\n        if ((this.diagramActions & DiagramAction.Render) && (!(this.diagramActions & DiagramAction.ToolAction)) &&\n            (!(this.diagramActions & DiagramAction.UndoRedo)) && (!(this.diagramActions & DiagramAction.PublicMethod))) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Diagram.prototype.modelChanged = function (newProp, oldProp) {\n        if (newProp.connectors || oldProp.connectors || newProp.nodes || oldProp.connectors\n            || newProp.pageSettings || oldProp.pageSettings || newProp.bridgeDirection || oldProp.bridgeDirection) {\n            return true;\n        }\n        return false;\n    };\n    Diagram.prototype.resetDiagramActions = function (action) {\n        var isAction = action ? true : false;\n        if (this.diagramActions & DiagramAction.UndoRedo && (!isAction || (action === DiagramAction.UndoRedo))) {\n            this.diagramActions = this.diagramActions & ~DiagramAction.UndoRedo;\n        }\n        if (this.diagramActions & DiagramAction.PublicMethod && (!isAction || action === DiagramAction.PublicMethod)) {\n            this.diagramActions = this.diagramActions & ~DiagramAction.PublicMethod;\n        }\n    };\n    /**\n     * removeNode method \\\n     *\n     * @returns { void }     removeNode method .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {NodeModel} childernCollection - provide the childernCollection value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeNode = function (node, childernCollection) {\n        this.removeObjectsFromLayer(node);\n        this.removeFromAQuad(this.nameTable[node.id]);\n        var groupElement = document.getElementById(node.id + '_groupElement');\n        delete this.nameTable[node.id];\n        if (node.children) {\n            delete this.groupTable[node.id];\n        }\n        if (isBlazor()) {\n            for (var i = 0; i < this.nodes.length; i++) {\n                if (node.id === this.nodes[i].id) {\n                    this.UpdateBlazorDiagramModel(node, 'Node', i);\n                }\n            }\n        }\n        this.nodes.splice(this.nodes.indexOf(node), 1);\n        if (groupElement.children && groupElement.children.length > 0) {\n            var beforeElement = undefined;\n            for (var j = groupElement.children.length - 1; j >= 0; j--) {\n                var childElement = groupElement.children[j];\n                if (childernCollection.length > 0 && childernCollection.indexOf(childElement.id.split('_')[0]) !== -1) {\n                    if (!beforeElement) {\n                        groupElement.parentNode.insertBefore(childElement, groupElement);\n                    }\n                    else {\n                        groupElement.parentNode.insertBefore(childElement, beforeElement);\n                    }\n                    beforeElement = childElement;\n                }\n            }\n        }\n        if (groupElement) {\n            groupElement.parentNode.removeChild(groupElement);\n        }\n    };\n    /**\n     * deleteGroup method \\\n     *\n     * @returns { void }     deleteGroup method .\\\n     * @param {NodeModel} node - provide the source value.\n     *\n     * @private\n     */\n    Diagram.prototype.deleteGroup = function (node) {\n        var elements = [];\n        var tempNode = [];\n        if (node.children) {\n            tempNode = this.commandHandler.getChildren(node, elements);\n        }\n        this.UpdateBlazorDiagramModelCollection(node);\n        for (var _i = 0, tempNode_1 = tempNode; _i < tempNode_1.length; _i++) {\n            var nodes = tempNode_1[_i];\n            if (this.nameTable[nodes.id]) {\n                this.remove(nodes);\n            }\n        }\n    };\n    //helper methods - end region\n    //property changes - start region\n    /** @private */\n    /**\n     * updateObject method \\\n     *\n     * @returns { void }     updateObject method .\\\n     * @param {Node | Connector} actualObject - provide the source value.\n     * @param {Node | Connector} oldObject - provide the target value.\n     * @param {Node | Connector} changedProp - provide the layoutOrientation value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateObject = function (actualObject, oldObject, changedProp) {\n        if (!(this.diagramActions & DiagramAction.ToolAction)) {\n            var bound = actualObject.wrapper.children[0].bounds;\n            var checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, bound);\n            if (!checkBoundaryConstraints) {\n                if (actualObject instanceof Node) {\n                    var oldNode = oldObject;\n                    for (var _i = 0, _a = Object.keys(changedProp); _i < _a.length; _i++) {\n                        var key = _a[_i];\n                        switch (key) {\n                            case 'width':\n                                actualObject.width = oldNode.width;\n                                break;\n                            case 'height':\n                                actualObject.height = oldNode.height;\n                                break;\n                            case 'offsetX':\n                                actualObject.offsetX = oldNode.offsetX;\n                                break;\n                            case 'offsetY':\n                                actualObject.offsetY = oldNode.offsetY;\n                                break;\n                            case 'rotateAngle':\n                                actualObject.rotateAngle = oldNode.rotateAngle;\n                                break;\n                        }\n                    }\n                    this.nodePropertyChange(actualObject, changedProp, oldObject);\n                }\n                else {\n                    for (var _b = 0, _c = Object.keys(changedProp); _b < _c.length; _b++) {\n                        var key = _c[_b];\n                        var oldConnector = oldObject;\n                        var actualSourcePoint = actualObject.sourcePoint;\n                        var actualTargetPoint = actualObject.targetPoint;\n                        switch (key) {\n                            case 'sourcePoint':\n                                actualSourcePoint.x = oldConnector.sourcePoint.x || actualSourcePoint.x;\n                                actualSourcePoint.y = oldConnector.sourcePoint.y || actualSourcePoint.y;\n                                break;\n                            case 'targetPoint':\n                                actualTargetPoint.x = oldConnector.targetPoint.x || actualTargetPoint.x;\n                                actualTargetPoint.y = oldConnector.targetPoint.y || actualTargetPoint.y;\n                        }\n                    }\n                    this.connectorPropertyChange(actualObject, changedProp, oldObject);\n                }\n            }\n        }\n    };\n    Diagram.prototype.nodePropertyChangeExtend = function (actualObject, oldObject, node, update) {\n        if (node.style !== undefined && actualObject.shape.type !== 'Bpmn') {\n            updateStyle(node.style, actualObject.wrapper.children[0]);\n            update = true;\n        }\n        if (node.shadow !== undefined) {\n            this.updateShadow(actualObject.shadow, node.shadow);\n            update = true;\n        }\n        if (node.constraints !== undefined) {\n            if ((oldObject.constraints & NodeConstraints.Select) &&\n                (!(node.constraints & NodeConstraints.Select)) && isSelected(this, actualObject)) {\n                this.clearSelection();\n            }\n            else {\n                this.updateThumbConstraints(this.selectedItems.nodes, this.selectedItems);\n                this.updateSelector();\n                update = true;\n            }\n        }\n        this.swimLaneNodePropertyChange(actualObject, oldObject, node, update);\n        return update;\n    };\n    /* tslint:disable */\n    Diagram.prototype.swimLaneNodePropertyChange = function (actualObject, oldObject, node, update) {\n        if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol) {\n            if (oldObject.shape) {\n                var shape = node.shape;\n                var actualShape = actualObject.shape;\n                var orientation_1 = (actualShape.orientation === 'Horizontal') ? true : false;\n                var padding = actualShape.padding;\n                var oldShape = oldObject.shape;\n                var grid = actualObject.wrapper.children[0];\n                var oldObjects = void 0;\n                var newObjects = void 0;\n                var id = void 0;\n                if (oldShape.lanes || oldShape.phases) {\n                    if (oldShape.lanes) {\n                        for (var _i = 0, _a = Object.keys(shape.lanes); _i < _a.length; _i++) {\n                            var count = _a[_i];\n                            var indexValue = Number(count);\n                            var lane = oldShape.lanes[indexValue];\n                            var laneIndex = void 0;\n                            var newLane = shape.lanes[indexValue];\n                            if (newLane && newLane.header) {\n                                id = actualShape.lanes[indexValue].header.id;\n                                oldObjects = lane.header;\n                                newObjects = newLane.header;\n                                this.nodePropertyChange(this.nameTable[id], oldObjects, newObjects);\n                            }\n                            if (lane.children) {\n                                for (var _b = 0, _c = Object.keys(lane.children); _b < _c.length; _b++) {\n                                    var childNodeIndex = _c[_b];\n                                    id = actualShape.lanes[indexValue].children[Number(childNodeIndex)].id;\n                                    var node_1 = this.nameTable[id];\n                                    oldObjects = lane.children[Number(childNodeIndex)];\n                                    newObjects = newLane.children[Number(childNodeIndex)];\n                                    this.nodePropertyChange(node_1, oldObjects, newObjects);\n                                }\n                            }\n                            if (lane.width && !orientation_1) {\n                                laneIndex = (actualShape.phases && actualShape.phaseSize) ? indexValue + 1 : indexValue;\n                                grid.updateColumnWidth(laneIndex, newLane.width, true, padding);\n                                this.updateDiagramElementQuad();\n                            }\n                            if (lane.height && orientation_1) {\n                                laneIndex = (actualShape.header && actualShape.hasHeader) ? indexValue + 1 : indexValue;\n                                laneIndex += (actualShape.phases && actualShape.phaseSize) ? 1 : 0;\n                                grid.updateRowHeight(laneIndex, newLane.height, true, padding);\n                                this.updateDiagramElementQuad();\n                            }\n                        }\n                    }\n                    if (shape.phases) {\n                        for (var _d = 0, _e = Object.keys(shape.phases); _d < _e.length; _d++) {\n                            var key = _e[_d];\n                            var indexValue = Number(key);\n                            var phase = shape.phases[indexValue];\n                            var size = void 0;\n                            var rowIndex = (actualShape.header && actualShape.hasHeader) ? 1 : 0;\n                            if (phase && phase.header) {\n                                id = actualShape.phases[indexValue].header.id;\n                                oldObjects = oldShape.phases[indexValue].header;\n                                newObjects = phase.header;\n                                this.nodePropertyChange(this.nameTable[id], oldObjects, newObjects);\n                            }\n                            if (phase.offset) {\n                                if (indexValue === 0) {\n                                    size = phase.offset;\n                                }\n                                else {\n                                    var previousPhase = actualShape.phases[indexValue - 1];\n                                    size = phase.offset - previousPhase.offset;\n                                    if (size <= 0) {\n                                        size = phase.offset;\n                                    }\n                                }\n                                if (orientation_1) {\n                                    grid.updateColumnWidth(indexValue, size, true, padding);\n                                    updatePhaseMaxWidth(actualObject, this, grid.rows[rowIndex].cells[indexValue], indexValue);\n                                }\n                                else {\n                                    grid.updateRowHeight(rowIndex + indexValue, size, true, padding);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (shape.phaseSize !== undefined && actualShape.phases.length) {\n                    if (shape.phaseSize === 0 || oldShape.phaseSize === 0) {\n                        if (oldShape.phaseSize) {\n                            if (orientation_1) {\n                                grid.removeRow((actualShape.header && actualShape.hasHeader) ? 1 : 0);\n                                actualObject.height = actualObject.wrapper.height = grid.height;\n                            }\n                            else {\n                                if (actualShape.header && actualShape.hasHeader) {\n                                    grid.rows[0].cells[1].children = grid.rows[0].cells[0].children;\n                                    grid.rows[0].cells[1].columnSpan = grid.rows[0].cells[0].columnSpan - 1;\n                                    grid.rows[0].cells[0].children = [];\n                                }\n                                grid.removeColumn(0);\n                            }\n                        }\n                        else {\n                            if (orientation_1) {\n                                var rowDef = new RowDefinition();\n                                rowDef.height = shape.phaseSize;\n                                grid.addRow((actualShape.header && actualShape.hasHeader) ? 1 : 0, rowDef, true);\n                                actualObject.height = actualObject.wrapper.height += shape.phaseSize;\n                            }\n                            else {\n                                var colDef = new ColumnDefinition();\n                                colDef.width = shape.phaseSize;\n                                grid.addColumn(0, colDef, true);\n                                if (actualShape.header && actualShape.hasHeader) {\n                                    grid.rows[0].cells[0].children = grid.rows[0].cells[1].children;\n                                    grid.rows[0].cells[1].children = [];\n                                    grid.rows[0].cells[1].columnSpan = 1;\n                                    grid.rows[0].cells[1].minWidth = undefined;\n                                    grid.rows[0].cells[0].columnSpan = actualShape.lanes.length + 1;\n                                }\n                            }\n                            for (var k = 0; k < actualShape.phases.length; k++) {\n                                if (actualShape.phases[k].id === '') {\n                                    actualShape.phases[k].id = randomId();\n                                }\n                                phaseDefine(grid, this, actualObject, (actualShape.header && actualShape.hasHeader) ? 1 : 0, orientation_1, k);\n                            }\n                        }\n                    }\n                    else {\n                        if (orientation_1) {\n                            grid.updateRowHeight((actualShape.header && actualShape.hasHeader) ? 1 : 0, shape.phaseSize, false);\n                        }\n                        else {\n                            grid.updateColumnWidth(0, shape.phaseSize, false);\n                        }\n                    }\n                }\n                if (actualShape.header && actualShape.hasHeader && oldShape.header) {\n                    var id_1 = grid.rows[0].cells[0].children[0].id;\n                    var headerNode = this.nameTable[id_1];\n                    this.nodePropertyChange(headerNode, (oldShape.header), shape.header);\n                }\n                actualObject.height = actualObject.wrapper.height = grid.height;\n                actualObject.width = actualObject.wrapper.width = grid.width;\n            }\n            else if (oldObject.constraints) {\n                var oldSelectConstraints = (oldObject.constraints & NodeConstraints.Select);\n                var newSelectConstraints = (node.constraints & NodeConstraints.Select);\n                if (oldSelectConstraints !== newSelectConstraints) {\n                    var shape = actualObject.shape;\n                    // Header - constraints\n                    var headerNode = this.nameTable[actualObject.id + shape.header.id];\n                    headerNode.constraints = (!newSelectConstraints) ? headerNode.constraints & ~NodeConstraints.Select :\n                        headerNode.constraints | NodeConstraints.Select;\n                    // Phase - Constraints\n                    var phaseNode = void 0;\n                    if (shape.phaseSize > 0) {\n                        for (var i = 0; i < shape.phases.length; i++) {\n                            phaseNode = this.nameTable[actualObject.id + shape.phases[i].id + '_header'];\n                            phaseNode.constraints = (!newSelectConstraints) ? phaseNode.constraints & ~NodeConstraints.Select :\n                                phaseNode.constraints | NodeConstraints.Select;\n                        }\n                    }\n                    // Header - Constraints\n                    var laneNode = void 0;\n                    var laneHeader = void 0;\n                    var value = shape.phases.length || 1;\n                    for (var i = 0; i < shape.lanes.length; i++) {\n                        for (var l = 0; l < value; l++) {\n                            laneNode = this.nameTable[actualObject.id + shape.lanes[i].id + l];\n                            laneNode.constraints = (!newSelectConstraints) ? laneNode.constraints & ~NodeConstraints.Select :\n                                laneNode.constraints | NodeConstraints.Select;\n                            if (l === 0) {\n                                laneHeader = this.nameTable[actualObject.id + shape.lanes[i].id + '_' + l + '_header'];\n                                laneHeader.constraints = (!newSelectConstraints) ? laneHeader.constraints & ~NodeConstraints.Select :\n                                    laneHeader.constraints | NodeConstraints.Select;\n                            }\n                        }\n                    }\n                }\n            }\n            update = true;\n        }\n        return update;\n    };\n    /** @private */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Diagram.prototype.insertValue = function (oldNodeObject, isNode) {\n        if (!(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n            var value = void 0;\n            var oldObjects = isNode ? this.oldNodeObjects : this.oldConnectorObjects;\n            for (var i = 0; i < oldObjects.length; i++) {\n                if (oldObjects[i].id === oldNodeObject.id) {\n                    value = true;\n                }\n            }\n            if (!value) {\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                isNode ? (this.oldNodeObjects.push(oldNodeObject)) : this.oldConnectorObjects.push(oldNodeObject);\n            }\n        }\n    };\n    /* tslint:disable */\n    /** @private */\n    // eslint-disable-next-line max-len\n    Diagram.prototype.nodePropertyChange = function (actualObject, oldObject, node, isLayout, rotate, propertyChange) {\n        if (this.canEnableBlazorObject && actualObject.id !== 'helper') {\n            var node_2 = cloneObject(actualObject);\n            this.insertValue(node_2, true);\n        }\n        var existingBounds = actualObject.wrapper.outerBounds;\n        var existingInnerBounds = actualObject.wrapper.bounds;\n        var updateConnector = false;\n        var i;\n        var j;\n        var offsetX;\n        var offsetY;\n        var update;\n        var tx;\n        var ty;\n        if (node.width !== undefined) {\n            if (!actualObject.children) {\n                actualObject.wrapper.children[0].width = node.width;\n                update = true;\n                updateConnector = true;\n            }\n            else if (!actualObject.container) {\n                this.scaleObject(actualObject, node.width, true);\n            }\n            else {\n                actualObject.wrapper.width = node.width;\n            }\n        }\n        if (node.height !== undefined) {\n            if (!actualObject.children) {\n                actualObject.wrapper.children[0].height = node.height;\n                update = true;\n                updateConnector = true;\n            }\n            else if (!actualObject.container) {\n                this.scaleObject(actualObject, node.height, false);\n            }\n            else {\n                actualObject.wrapper.height = node.height;\n            }\n        }\n        update = this.nodePropertyChangeExtend(actualObject, oldObject, node, update);\n        if (node.constraints !== undefined && canShadow(oldObject) !== canShadow(node)) {\n            actualObject.wrapper.children[0].shadow = canShadow(actualObject) ? actualObject.shadow : null;\n        }\n        if (node.offsetX !== undefined) {\n            if (actualObject.wrapper.flip !== 'None') {\n                if (actualObject.offsetX !== actualObject.wrapper.offsetX && oldObject.offsetX !== undefined) {\n                    var offsetX_1 = node.offsetX - oldObject.offsetX;\n                    actualObject.wrapper.offsetX = actualObject.wrapper.offsetX + offsetX_1;\n                    this.updateFlipOffset(actualObject.wrapper, offsetX_1, 0, actualObject.wrapper.flip);\n                }\n            }\n            else {\n                actualObject.wrapper.offsetX = node.offsetX;\n            }\n            update = true;\n            updateConnector = true;\n        }\n        if (node.offsetY !== undefined) {\n            if (actualObject.wrapper.flip !== 'None') {\n                if (actualObject.offsetY !== actualObject.wrapper.offsetY && oldObject.offsetY !== undefined) {\n                    var offsetY_1 = node.offsetY - oldObject.offsetY;\n                    actualObject.wrapper.offsetY = actualObject.wrapper.offsetY + offsetY_1;\n                    this.updateFlipOffset(actualObject.wrapper, 0, offsetY_1, actualObject.wrapper.flip);\n                }\n            }\n            else {\n                actualObject.wrapper.offsetY = node.offsetY;\n            }\n            update = true;\n            updateConnector = true;\n        }\n        if (node.pivot !== undefined) {\n            actualObject.wrapper.pivot = node.pivot;\n            update = true;\n        }\n        if (node.minWidth !== undefined) {\n            actualObject.wrapper.minWidth = actualObject.wrapper.children[0].minWidth = node.minWidth;\n            update = true;\n            updateConnector = true;\n        }\n        if (node.minHeight !== undefined) {\n            actualObject.wrapper.minHeight = actualObject.wrapper.children[0].minHeight = node.minHeight;\n            update = true;\n            updateConnector = true;\n        }\n        if (node.maxWidth !== undefined) {\n            actualObject.wrapper.maxWidth = node.maxWidth;\n            update = true;\n            updateConnector = true;\n        }\n        if (node.maxHeight !== undefined) {\n            actualObject.wrapper.maxHeight = node.maxHeight;\n            update = true;\n            updateConnector = true;\n        }\n        if (node.flip !== undefined) {\n            actualObject.wrapper.flip = node.flip;\n            update = true;\n            updateConnector = true;\n            if (actualObject.wrapper.elementActions & ElementAction.ElementIsGroup) {\n                alignElement(actualObject.wrapper, actualObject.offsetX, actualObject.offsetY, this, node.flip);\n                if (actualObject && actualObject.children) {\n                    for (var _i = 0, _a = actualObject.children; _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        var updateNode = this.nameTable[child];\n                        updateNode.wrapper.flip = node.flip;\n                        this.updatePorts(updateNode, node.flip);\n                    }\n                }\n            }\n            else {\n                if (actualObject.flipMode && (actualObject.flipMode === 'Port' || actualObject.flipMode === 'All'))\n                    this.updatePorts(actualObject, node.flip);\n            }\n        }\n        if (node.rotateAngle !== undefined && (actualObject.constraints & NodeConstraints.Rotate)) {\n            if (actualObject.children && rotate) {\n                // eslint-disable-next-line max-len\n                this.commandHandler.rotateObjects(actualObject, [actualObject], actualObject.rotateAngle - actualObject.wrapper.rotateAngle, { x: actualObject.offsetX, y: actualObject.offsetY }, false);\n            }\n            actualObject.wrapper.rotateAngle = node.rotateAngle;\n            update = true;\n            updateConnector = true;\n        }\n        if (node.backgroundColor !== undefined) {\n            actualObject.wrapper.style.fill = node.backgroundColor;\n        }\n        if (node.visible !== undefined) {\n            this.updateElementVisibility(actualObject.wrapper, actualObject, actualObject.visible);\n        }\n        if (node.shape !== undefined && actualObject.shape.type !== 'Bpmn') {\n            update = true;\n            updateShape(node, actualObject, oldObject, this);\n            updateConnector = true;\n        }\n        if (node.margin) {\n            update = true;\n            this.updateMargin(actualObject, node);\n            updateConnector = true;\n        }\n        if ((((node.shape !== undefined && (node.shape.type === undefined)) || node.width !== undefined\n            || node.height !== undefined || node.style !== undefined) && actualObject.shape.type === 'Bpmn' && this.bpmnModule)\n            || (isBlazor() && node && node.shape && node.shape.type === 'Bpmn')) {\n            update = true;\n            updateConnector = true;\n            this.bpmnModule.updateBPMN(node, oldObject, actualObject, this);\n        }\n        if (actualObject.shape.type === 'UmlActivity' && ((!isBlazor() && actualObject.shape.shape === 'FinalNode') ||\n            (isBlazor() && actualObject.shape.umlActivityShape === 'FinalNode'))) {\n            update = true;\n            updateConnector = true;\n            this.updateUMLActivity(node, oldObject, actualObject, this);\n        }\n        if ((actualObject.shape && actualObject.shape.type === 'UmlClassifier') || (actualObject.parentId &&\n            this.nameTable[actualObject.parentId] && this.nameTable[actualObject.parentId].shape.type === 'UmlClassifier')) {\n            update = true;\n            updateConnector = true;\n        }\n        if (node.ports !== undefined) {\n            for (var _b = 0, _c = Object.keys(node.ports); _b < _c.length; _b++) {\n                var key = _c[_b];\n                var index = Number(key);\n                update = true;\n                var changedObject = node.ports[key];\n                var actualPort = actualObject.ports[index];\n                this.updatePort(changedObject, actualPort, actualObject.wrapper);\n                updateConnector = true;\n            }\n        }\n        if (node.annotation !== undefined || node.annotations !== undefined || node.width !== undefined) {\n            for (var _d = 0, _e = Object.keys(node.annotations || actualObject.annotations); _d < _e.length; _d++) {\n                var key = _e[_d];\n                var index = Number(key);\n                update = true;\n                var changedObject = void 0;\n                if (node.annotation) {\n                    changedObject = node.annotation;\n                }\n                else {\n                    changedObject = node.annotations ? node.annotations[key] : actualObject.annotations;\n                }\n                var actualAnnotation = actualObject.annotations[index];\n                if (actualAnnotation) {\n                    var updateSize = actualObject.width ? true : false;\n                    this.updateAnnotation(changedObject, actualAnnotation, actualObject.wrapper, actualObject, updateSize);\n                    var swimLaneNode = this.nameTable[actualObject.parentId];\n                    if ((swimLaneNode && swimLaneNode.shape.type === 'SwimLane')) {\n                        var laneHeader = 'LaneHeaderParent';\n                        var phaseHeader = 'PhaseHeaderParent';\n                        if ((actualObject.isLane || actualObject.isPhase)) {\n                            var collection = actualObject.isLane ?\n                                swimLaneNode.shape.lanes : swimLaneNode.shape.phases;\n                            for (var j_2 = 0; j_2 < collection.length; j_2++) {\n                                if (collection[j_2].id === (actualObject[laneHeader] || actualObject[phaseHeader])) {\n                                    collection[j_2].header.annotation.content = actualObject.annotations[0].content;\n                                    collection[j_2].header.annotation.style = actualObject.annotations[0].style;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (node.expandIcon !== undefined || node.collapseIcon !== undefined || node.isExpanded !== undefined) {\n            this.updateIcon(actualObject);\n            this.updateDefaultLayoutIcons(actualObject);\n            if (node.isExpanded !== undefined) {\n                this.commandHandler.expandNode(actualObject, this);\n            }\n            update = true;\n        }\n        if (node.fixedUserHandles !== undefined) {\n            var index = void 0;\n            var changedObject = void 0;\n            var actualfixedUserHandle = void 0;\n            for (var _f = 0, _g = Object.keys(node.fixedUserHandles); _f < _g.length; _f++) {\n                var key = _g[_f];\n                index = Number(key);\n                update = true;\n                if (node.fixedUserHandles[index]) {\n                    changedObject = node.fixedUserHandles[index];\n                }\n                actualfixedUserHandle = actualObject.fixedUserHandles[index];\n                if (actualfixedUserHandle) {\n                    this.updateNodefixedUserHandle(changedObject, actualfixedUserHandle, actualObject.wrapper, actualObject);\n                }\n            }\n        }\n        if (node.tooltip !== undefined) {\n            this.updateTooltip(actualObject, node);\n        }\n        if (update) {\n            if (this.bpmnModule !== undefined) {\n                // eslint-disable-next-line max-len\n                this.bpmnModule.updateTextAnnotationProp(actualObject, { offsetX: (oldObject.offsetX || actualObject.offsetX), offsetY: (oldObject.offsetY || actualObject.offsetY) }, this);\n            }\n            if (this.checkSelectedItem(actualObject) && actualObject.wrapper.children[0] instanceof TextElement) {\n                actualObject.wrapper.children[0].refreshTextElement();\n            }\n            actualObject.wrapper.measure(new Size(actualObject.wrapper.bounds.width, actualObject.wrapper.bounds.height), actualObject.id, this.onLoadImageSize.bind(this));\n            actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n            this.updateObject(actualObject, oldObject, node);\n            if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol && !(this.diagramActions & DiagramAction.ToolAction)) {\n                updateHeaderMaxWidth(this, actualObject);\n                var grid = actualObject.wrapper.children[0];\n                var shape = actualObject.shape;\n                var column = grid.columnDefinitions().length;\n                if (shape.orientation === 'Horizontal') {\n                    var index = (shape.header && shape.hasHeader) ? 1 : 0;\n                    updatePhaseMaxWidth(actualObject, this, grid.rows[index].cells[column - 1], column - 1);\n                }\n                actualObject.wrapper.measure(new Size(actualObject.wrapper.bounds.width, actualObject.wrapper.bounds.height));\n                actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n            }\n            if ((!(this.diagramActions & DiagramAction.ToolAction)) || (this.diagramActions & DiagramAction.UndoRedo)) {\n                if (this.checkSelectedItem(actualObject)) {\n                    this.updateSelector();\n                }\n            }\n            if (existingBounds.equals(existingBounds, actualObject.wrapper.outerBounds) === false) {\n                this.updateQuad(actualObject);\n            }\n            if (!isLayout) {\n                // eslint-disable-next-line max-len\n                this.commandHandler.connectorSegmentChange(actualObject, existingInnerBounds, (node.rotateAngle !== undefined) ? true : false);\n                // if (updateConnector) {\n                //     this.updateConnectorEdges(actualObject);\n                // }\n            }\n            else {\n                if (actualObject && actualObject.visible && actualObject.outEdges) {\n                    this.updateIconVisibility(actualObject, (actualObject.outEdges.length === 0 ? false : true));\n                }\n            }\n            if (this.bpmnModule !== undefined) {\n                this.bpmnModule.updateDocks(actualObject, this);\n            }\n            if (!node.annotations || !actualObject.processId) {\n                this.updateGroupOffset(actualObject);\n            }\n            // if (existingBounds.equals(existingBounds, actualObject.wrapper.outerBounds) === false) { this.updateQuad(actualObject); }\n            // EJ2-42005 - The parent of the actualObject is not measured and arranged when a node or connector is selected.\n            // The condition restricts the measure and arrange of the actualObject whenever a node or connector is selected.\n            // Commented @Dheepshiva\n            // let objects: (NodeModel | ConnectorModel)[] = [];\n            // objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n            // if (objects.length === 0) {\n            if (actualObject.parentId && this.nameTable[actualObject.parentId]) {\n                var parent_4 = this.nameTable[actualObject.parentId];\n                parent_4.wrapper.measure(new Size(parent_4.wrapper.width, actualObject.wrapper.height));\n                parent_4.wrapper.arrange(parent_4.wrapper.desiredSize);\n                parent_4.offsetX = parent_4.wrapper.offsetX;\n                parent_4.offsetY = parent_4.wrapper.offsetY;\n            }\n            // }\n            if (existingInnerBounds.equals(existingInnerBounds, actualObject.wrapper.bounds) === false) {\n                this.updateGroupSize(actualObject);\n                if (actualObject.children) {\n                    this.updateGroupOffset(actualObject);\n                }\n            }\n            if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol && (this.diagramActions & DiagramAction.Render)) {\n                var connectors = getConnectors(this, actualObject.wrapper.children[0], undefined, true);\n                updateConnectorsProperties(connectors, this);\n            }\n            if (!this.preventNodesUpdate) {\n                if (!canVitualize(this) || (canVitualize(this) && this.scroller.oldCollectionObjects.indexOf(actualObject.id) > -1)) {\n                    if (this.diagramActions & DiagramAction.PreventZIndexOnDragging) {\n                        this.updateDiagramObject(actualObject, true);\n                    }\n                    else {\n                        this.updateDiagramObject(actualObject);\n                    }\n                }\n                if (!isLayout && updateConnector) {\n                    if (this.lineRoutingModule && this.diagramActions && (this.constraints & DiagramConstraints.LineRouting) && actualObject.id !== 'helper') {\n                        if (!(this.diagramActions & DiagramAction.ToolAction)) {\n                            this.lineRoutingModule.renderVirtualRegion(this, true);\n                        }\n                    }\n                    this.updateConnectorEdges(actualObject);\n                    if (actualObject.id !== 'helper' && !(this.diagramActions & DiagramAction.ToolAction)) {\n                        var objects = this.spatialSearch.findObjects(actualObject.wrapper.outerBounds);\n                        for (var i_5 = 0; i_5 < objects.length; i_5++) {\n                            var object = objects[i_5];\n                            if (object instanceof Connector) {\n                                this.connectorPropertyChange(objects[i_5], {}, {\n                                    sourceID: object.sourceID,\n                                    targetID: object.targetID,\n                                    sourcePortID: object.sourcePortID,\n                                    targetPortID: object.targetPortID,\n                                    sourcePoint: object.sourcePoint,\n                                    targetPoint: object.targetPoint\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n            if (actualObject.status !== 'New' && this.diagramActions) {\n                actualObject.status = 'Update';\n            }\n        }\n        if (!propertyChange) {\n            var element = actualObject;\n            var args = {\n                element: element, cause: this.diagramActions,\n                oldValue: oldObject, newValue: node\n            };\n            if (isBlazor() && this.propertyChange) {\n                args.element = { node: cloneBlazorObject(element) };\n                args.oldValue = { node: cloneBlazorObject(oldObject) };\n                args.newValue = { node: cloneBlazorObject(node) };\n            }\n            this.triggerEvent(DiagramEvent.propertyChange, args);\n        }\n    };\n    Diagram.prototype.updatePorts = function (actualObject, flip) {\n        if (actualObject && actualObject.ports.length > 0) {\n            for (var _i = 0, _a = Object.keys(actualObject.ports); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var index = Number(key);\n                var actualPort = actualObject.ports[index];\n                var portWrapper = this.getWrapper(actualObject.wrapper, actualPort.id);\n                portWrapper = updatePortEdges(portWrapper, flip, actualPort);\n                portWrapper.relativeMode = 'Point';\n                portWrapper.measure(new Size(portWrapper.width, portWrapper.height));\n                portWrapper.arrange(portWrapper.desiredSize);\n            }\n        }\n    };\n    Diagram.prototype.updateFlipOffset = function (element, diffX, diffY, flip) {\n        if (element.hasChildren()) {\n            for (var _i = 0, _a = element.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (flip === 'Horizontal' || flip === 'Both') {\n                    child.flipOffset.x = child.flipOffset.x + diffX;\n                }\n                if (flip === 'Vertical' || flip === 'Both') {\n                    child.flipOffset.y = child.flipOffset.y + diffY;\n                }\n                if (child instanceof Canvas || child instanceof Container) {\n                    this.updateFlipOffset(child, diffX, diffY, flip);\n                }\n            }\n        }\n    };\n    Diagram.prototype.updateUMLActivity = function (changedProp, oldObject, actualObject, diagram) {\n        var sizeChanged = changedProp.width !== undefined || changedProp.height !== undefined;\n        if (sizeChanged) {\n            var innerFinalNode = actualObject.wrapper.children[0].children[0];\n            innerFinalNode.width = changedProp.width;\n            innerFinalNode.height = changedProp.height;\n            var outerFinalNode = actualObject.wrapper.children[0].children[1];\n            outerFinalNode.width = changedProp.width / 1.5;\n            outerFinalNode.height = changedProp.height / 1.5;\n        }\n    };\n    Diagram.prototype.updateConnectorProperties = function (connector) {\n        if (this.preventConnectorsUpdate) {\n            var index = this.selectionConnectorsList.indexOf(connector);\n            if (index === -1) {\n                this.selectionConnectorsList.push(connector);\n            }\n        }\n        else {\n            var conn = {\n                sourcePoint: connector.sourcePoint, targetPoint: connector.targetPoint, sourceID: connector.sourceID,\n                targetID: connector.targetID, sourcePortID: connector.sourcePortID, targetPortID: connector.targetPortID\n            };\n            this.connectorPropertyChange(connector, {}, conn, undefined, true);\n        }\n    };\n    /**\n     * updateConnectorEdges method \\\n     *\n     * @returns { void }     Updates the connectorPropertyChange of the diagram container .\\\n     * @param {Node} actualObject - provide the actualObject value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateConnectorEdges = function (actualObject) {\n        if (actualObject.inEdges.length > 0) {\n            for (var j = 0; j < actualObject.inEdges.length; j++) {\n                this.updateConnectorProperties(this.nameTable[actualObject.inEdges[j]]);\n            }\n        }\n        if (actualObject.outEdges.length > 0) {\n            for (var k = 0; k < actualObject.outEdges.length; k++) {\n                this.updateConnectorProperties(this.nameTable[actualObject.outEdges[k]]);\n            }\n        }\n        if (actualObject.parentId && this.nameTable[actualObject.parentId]) {\n            this.updateConnectorEdges(this.nameTable[actualObject.parentId]);\n        }\n    };\n    /* tslint:enable */\n    Diagram.prototype.connectorProprtyChangeExtend = function (actualObject, oldProp, newProp, updateSelector) {\n        if (newProp.type !== undefined && newProp.type !== oldProp.type) {\n            if (actualObject.segments.length > 0 && newProp.segments === undefined) {\n                actualObject.segments = [];\n            }\n        }\n        if ((newProp.shape !== undefined) && actualObject.shape !== undefined &&\n            actualObject.shape && actualObject.shape.type === 'Bpmn' && this.bpmnModule) {\n            this.bpmnModule.updateBPMNConnector(actualObject, oldProp, newProp, this);\n        }\n        if (actualObject.constraints !== undefined) {\n            this.updateThumbConstraints(this.selectedItems.connectors, this.selectedItems);\n            return updateSelector = true;\n        }\n        return updateSelector;\n    };\n    /* tslint:disable */\n    /**\n     * Updates the connectorPropertyChange of the diagram container \\\n     *\n     * @returns { void }     Updates the connectorPropertyChange of the diagram container .\\\n     * @param {DiagramElement} actualObject - provide the actualObject value.\n     * @param {boolean} oldProp - provide the oldProp value.\n     * @param {boolean} newProp - provide the newProp value.\n     * @param {boolean} disableBridging - provide the disableBridging value.\n     * @param {boolean} propertyChange - provide the propertyChange value.\n     *\n     * @private\n     */\n    Diagram.prototype.connectorPropertyChange = function (actualObject, oldProp, newProp, disableBridging, propertyChange) {\n        if (this.canEnableBlazorObject) {\n            var node = cloneObject(actualObject);\n            this.insertValue(node, false);\n        }\n        var existingBounds = actualObject.wrapper.bounds;\n        var updateSelector = false;\n        var points = [];\n        updateSelector = this.connectorProprtyChangeExtend(actualObject, oldProp, newProp, updateSelector);\n        var inPort;\n        var outPort;\n        var source;\n        var target;\n        if (newProp.visible !== undefined) {\n            this.updateElementVisibility(actualObject.wrapper, actualObject, actualObject.visible);\n        }\n        if (newProp.sourcePoint !== undefined || newProp.targetPoint !== undefined\n            || newProp.sourceID !== undefined || newProp.targetID !== undefined || newProp.targetPadding !== undefined ||\n            newProp.sourcePortID !== undefined || newProp.targetPortID !== undefined || newProp.sourcePadding !== undefined ||\n            newProp.type !== undefined || newProp.segments !== undefined || newProp.flip !== undefined) {\n            if ((newProp.sourceID !== undefined && newProp.sourceID !== oldProp.sourceID) || newProp.sourcePortID) {\n                var sourceNode = this.nameTable[actualObject.sourceID];\n                outPort = this.findInOutConnectPorts(sourceNode, false);\n                if (!sourceNode || (canOutConnect(sourceNode) || (actualObject.sourcePortID !== '' && canPortOutConnect(outPort)))) {\n                    actualObject.sourceWrapper = sourceNode ? this.getEndNodeWrapper(sourceNode, actualObject, true) : undefined;\n                    if (actualObject.sourcePortID && newProp.sourcePortID === undefined) {\n                        actualObject.sourcePortWrapper = sourceNode ? this.getWrapper(sourceNode.wrapper, actualObject.sourcePortID) : undefined;\n                    }\n                    this.removePortEdges(this.nameTable[oldProp.sourceID] || sourceNode, oldProp.sourcePortID || actualObject.sourcePortID, actualObject.id, false);\n                }\n                if (newProp.sourceID !== undefined && oldProp.sourceID !== undefined && oldProp.sourceID !== '') {\n                    var oldSource = this.nameTable[oldProp.sourceID];\n                    if (oldSource !== undefined && oldSource.outEdges && oldSource.outEdges.indexOf(actualObject.id) !== -1) {\n                        removeItem(oldSource.outEdges, actualObject.id);\n                    }\n                }\n                this.updateEdges(actualObject);\n            }\n            if (newProp.targetID !== undefined && newProp.targetID !== oldProp.targetID) {\n                var targetNode = this.nameTable[newProp.targetID];\n                inPort = this.findInOutConnectPorts(targetNode, true);\n                if (!targetNode || (canInConnect(targetNode) || (actualObject.targetPortID !== '' && canPortInConnect(inPort)))) {\n                    actualObject.targetWrapper = targetNode ? this.getEndNodeWrapper(targetNode, actualObject, false) : undefined;\n                    if (actualObject.targetPortID && newProp.targetPortID === undefined) {\n                        actualObject.targetPortWrapper = targetNode ? this.getWrapper(targetNode.wrapper, actualObject.targetPortID) : undefined;\n                    }\n                    this.removePortEdges(this.nameTable[oldProp.targetID] || targetNode, oldProp.targetPortID || actualObject.targetPortID, actualObject.id, true);\n                }\n                if (oldProp !== undefined && oldProp.targetID !== undefined && oldProp.targetID !== '') {\n                    var oldTarget = this.nameTable[oldProp.targetID];\n                    if (oldTarget !== undefined && oldTarget.inEdges && oldTarget.inEdges.indexOf(actualObject.id) !== -1) {\n                        removeItem(oldTarget.inEdges, actualObject.id);\n                    }\n                }\n                this.updateEdges(actualObject);\n            }\n            if (newProp.sourcePortID !== undefined && newProp.sourcePortID !== oldProp.sourcePortID) {\n                if (actualObject.sourceID && this.nameTable[actualObject.sourceID]) {\n                    source = this.nameTable[actualObject.sourceID].wrapper;\n                }\n                var sourceNode = this.nameTable[actualObject.sourceID];\n                if (!sourceNode || (canOutConnect(sourceNode) || (actualObject.sourcePortID !== '' && canPortOutConnect(outPort)))) {\n                    actualObject.sourcePortWrapper = source ? this.getWrapper(source, newProp.sourcePortID) : undefined;\n                }\n                else if (actualObject.sourcePortID === '' && !canOutConnect(sourceNode)) {\n                    actualObject.sourcePortWrapper = undefined;\n                }\n            }\n            if (newProp.targetPortID !== undefined && newProp.targetPortID !== oldProp.targetPortID) {\n                var targetNode = this.nameTable[actualObject.targetID];\n                if (actualObject.targetID && this.nameTable[actualObject.targetID]) {\n                    target = this.nameTable[actualObject.targetID].wrapper;\n                }\n                if (!targetNode || (canInConnect(targetNode) || (actualObject.targetPortID !== '' && canPortInConnect(inPort)))) {\n                    actualObject.targetPortWrapper = target ? this.getWrapper(target, newProp.targetPortID) : undefined;\n                }\n                else if (actualObject.targetPortID === '' && !canInConnect(targetNode)) {\n                    actualObject.targetPortWrapper = undefined;\n                }\n            }\n            if (newProp.flip !== undefined) {\n                actualObject.flip = newProp.flip;\n                flipConnector(actualObject);\n            }\n            if (actualObject.type === 'Orthogonal' && this.lineRoutingModule && this.diagramActions &&\n                (this.constraints & DiagramConstraints.LineRouting) && !(this.diagramActions & DiagramAction.ToolAction)) {\n                this.lineRoutingModule.renderVirtualRegion(this, true);\n                this.lineRoutingModule.refreshConnectorSegments(this, actualObject, false);\n            }\n            points = this.getPoints(actualObject);\n        } //Add prop change for zindex, alignments and margin\n        if (newProp.style !== undefined) {\n            updateStyle(newProp.style, actualObject.wrapper.children[0]);\n        }\n        if (points.length > 0 || newProp.sourceDecorator !== undefined || (newProp.targetDecorator !== undefined\n            && (canMeasureDecoratorPath(Object.keys(newProp.targetDecorator)))) || newProp.cornerRadius !== undefined) {\n            updateConnector(actualObject, points.length > 0 ? points : actualObject.intermediatePoints, this.diagramActions);\n            if (newProp.type !== undefined) {\n                updateSelector = true;\n            }\n            if (points.length > 0) {\n                actualObject.wrapper.measure(new Size(actualObject.wrapper.width, actualObject.wrapper.height));\n                actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n                // eslint-disable-next-line max-len\n                this.updateConnectorAnnotation(actualObject);\n                this.updateConnectorfixedUserHandles(actualObject);\n                this.updateObject(actualObject, oldProp, newProp);\n            } //work-around to update intersected connector bridging\n        }\n        if ((newProp.sourcePoint || newProp.targetPoint || newProp.segments)\n            && this.diagramActions === DiagramAction.Render) {\n            updateSelector = true;\n        }\n        if (actualObject.shape.type === 'Bpmn' && actualObject.shape.sequence === 'Default') {\n            this.commandHandler.updatePathElementOffset(actualObject);\n        }\n        // eslint-disable-next-line max-len\n        if (!disableBridging) {\n            this.updateBridging();\n        }\n        this.updateAnnotations(newProp, actualObject);\n        this.updatefixedUserHandle(newProp, actualObject);\n        actualObject.wrapper.measure(new Size(actualObject.wrapper.width, actualObject.wrapper.height));\n        actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n        if (existingBounds.equals(existingBounds, actualObject.wrapper.bounds) === false) {\n            this.updateQuad(actualObject);\n            this.updateGroupSize(actualObject);\n        }\n        if (updateSelector === true && this.checkSelectedItem(actualObject) && (!(this.diagramActions & DiagramAction.ToolAction)\n            || (this.diagramActions & DiagramAction.UndoRedo))) {\n            this.updateSelector();\n        }\n        if (!this.preventConnectorsUpdate) {\n            if (!canVitualize(this) || (canVitualize(this) && this.scroller.oldCollectionObjects.indexOf(actualObject.id) > -1)) {\n                if (this.diagramActions & DiagramAction.PreventZIndexOnDragging) {\n                    this.updateDiagramObject(actualObject, true);\n                }\n                else {\n                    this.updateDiagramObject(actualObject);\n                }\n            }\n        }\n        if (this.diagramActions && actualObject.status !== 'New') {\n            actualObject.status = 'Update';\n        }\n        this.triggerPropertyChange(propertyChange, actualObject, oldProp, newProp);\n    };\n    /* tslint:enable */\n    /**\n     * getDirection methods \\\n     *\n     * @returns { void }  getDirection methods .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {string} portId - provide the portId value.\n     * @param {string} item - provide the item value.\n     * @param {number} isInEdges - provide the isInEdges value.\n     *\n     * @private\n     */\n    Diagram.prototype.removePortEdges = function (node, portId, item, isInEdges) {\n        if (node) {\n            for (var i = 0; i < node.ports.length; i++) {\n                var port = node.ports[i];\n                if (port.id === portId) {\n                    var portEdge = (isInEdges) ? port.inEdges : port.outEdges;\n                    removeItem(portEdge, item);\n                }\n            }\n        }\n    };\n    Diagram.prototype.getpropertyChangeArgs = function (element, oldProp, newProp, args) {\n        args.element = { connector: cloneBlazorObject(element) };\n        args.oldValue = { connector: cloneBlazorObject(oldProp) };\n        args.newValue = { connector: cloneBlazorObject(newProp) };\n        return args;\n    };\n    Diagram.prototype.triggerPropertyChange = function (propertyChange, actualObject, oldProp, newProp) {\n        if (!propertyChange) {\n            var element = actualObject;\n            var args = {\n                element: cloneBlazorObject(element), cause: this.diagramActions,\n                oldValue: cloneBlazorObject(oldProp), newValue: cloneBlazorObject(newProp)\n            };\n            if (isBlazor()) {\n                args = this.getpropertyChangeArgs(element, oldProp, newProp, args);\n            }\n            this.triggerEvent(DiagramEvent.propertyChange, args);\n        }\n    };\n    Diagram.prototype.findInOutConnectPorts = function (node, isInconnect) {\n        var port = {};\n        if (node) {\n            port = getInOutConnectPorts(node, isInconnect);\n        }\n        return port;\n    };\n    Diagram.prototype.getPoints = function (actualObject, points) {\n        //let pts: PointModel[];\n        var lineDistributionModule = this.lineDistributionModule ? true : false;\n        var pts = actualObject.getConnectorPoints(actualObject.type, points, this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree' ?\n            this.layout.orientation : undefined, lineDistributionModule);\n        return pts;\n    };\n    /**\n     * update the  opacity  and visibility for the node  once the layout animation starts \\\n     *\n     * @returns { void }  update the  opacity  and visibility for the node  once the layout animation starts .\\\n     * @param {Container} element - provide the element value.\n     * @param {boolean} visible - provide the visible value.\n     * @param {number} opacity - provide the opacity value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateNodeProperty = function (element, visible, opacity) {\n        if (visible === undefined) {\n            this.updateElementVisibility(element, this.nameTable[element.id], visible);\n        }\n        else {\n            element.style.opacity = opacity;\n            for (var i = 0; i < element.children.length; i++) {\n                if (element.children[i] instanceof Container) {\n                    this.updateNodeProperty(element.children[i], undefined, opacity);\n                }\n                element.children[i].style.opacity = opacity;\n            }\n        }\n    };\n    /**\n     * checkSelected Item for Connector \\\n     *\n     * @returns { void }  checkSelected Item for Connector .\\\n     * @param {Connector | Node} actualObject - provide the element value.\n     *\n     * @private\n     */\n    Diagram.prototype.checkSelectedItem = function (actualObject) {\n        var selectorModel = this.selectedItems;\n        var isSelected = false;\n        var selItems = [];\n        selItems = selItems.concat(selectorModel.nodes, selectorModel.connectors);\n        if (selItems.length > 0) {\n            if (actualObject.id === selItems[selItems.length - 1].id) {\n                isSelected = true;\n            }\n        }\n        return isSelected;\n    };\n    /**\n     * Updates the visibility of the diagram container \\\n     *\n     * @returns { void }     Updates the visibility of the diagram container .\\\n     * @param {DiagramElement} element - provide the element value.\n     * @param {boolean} visible - provide the target value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateDiagramContainerVisibility = function (element, visible) {\n        if (element instanceof Container) {\n            for (var i = 0; i < element.children.length; i++) {\n                this.updateDiagramContainerVisibility(element.children[i], visible);\n            }\n        }\n        element.visible = visible;\n    };\n    /**\n     * Updates the visibility of the node/connector \\\n     *\n     * @returns { void }  Updates the visibility of the node/connector .\\\n     * @param {Container} element - provide the element value.\n     * @param {Connector | Node} obj - provide the obj value.\n     * @param {boolean} visible - provide the visible value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateElementVisibility = function (element, obj, visible) {\n        if (visible !== undefined) {\n            element.visible = visible;\n            if (obj instanceof Node) {\n                //content\n                if (!obj.children) {\n                    element.children[0].visible = visible;\n                    this.updateDiagramContainerVisibility(element.children[0], visible);\n                    if (obj.shape.type === 'Bpmn' && this.bpmnModule) {\n                        this.bpmnModule.updateElementVisibility(obj, visible, this);\n                    }\n                }\n                else {\n                    for (var _i = 0, _a = obj.children; _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        this.updateElementVisibility(this.nameTable[child].wrapper, this.nameTable[child], visible);\n                    }\n                }\n                //ports\n                if (obj.ports) {\n                    for (var _b = 0, _c = obj.ports; _b < _c.length; _b++) {\n                        var port = _c[_b];\n                        if (port.visibility & PortVisibility.Visible) {\n                            var wrapper = this.getWrapper(element, port.id);\n                            wrapper.visible = visible;\n                        }\n                    }\n                }\n                if (obj.annotations) {\n                    for (var _d = 0, _e = obj.annotations; _d < _e.length; _d++) {\n                        var annotation = _e[_d];\n                        var wrapper = this.getWrapper(element, annotation.id);\n                        wrapper.visible = visible;\n                    }\n                }\n            }\n            else {\n                //path and decorators\n                for (var i = 0; i < 3; i++) {\n                    element.children[i].visible = visible;\n                }\n            }\n            if (obj.annotations) {\n                //annotations\n                for (var _f = 0, _g = obj.annotations; _f < _g.length; _f++) {\n                    var annotation = _g[_f];\n                    var wrapper = this.getWrapper(element, annotation.id);\n                    wrapper.visible = visible;\n                }\n            }\n            if (obj.expandIcon || obj.collapseIcon) {\n                var wrapper = this.getWrapper(element, 'icon_content');\n                if (wrapper) {\n                    for (var i = 0; i < wrapper.children.length; i++) {\n                        wrapper.children[i].visible = visible;\n                    }\n                    wrapper.visible = visible;\n                }\n                if (obj && obj.visible && obj.outEdges) {\n                    this.updateIconVisibility(obj, (obj.outEdges.length === 0 ? false : true));\n                }\n            }\n            if (visible === false) {\n                this.unSelect(this.nameTable[element.id]);\n            }\n            if ((obj instanceof Node && !this.preventNodesUpdate) || (obj instanceof Connector && !this.preventConnectorsUpdate)) {\n                //Avoid calling updateDiagramObject method during rendering\n                if (this.diagramActions) {\n                    this.updateDiagramObject(this.nameTable[element.id], undefined, true);\n                }\n            }\n        }\n    };\n    Diagram.prototype.updateAnnotations = function (newProp, actualObject) {\n        if (newProp.annotations !== undefined) {\n            for (var _i = 0, _a = Object.keys(newProp.annotations); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var index = Number(key);\n                var changedObject = newProp.annotations[key];\n                var actualAnnotation = actualObject.annotations[index];\n                this.updateAnnotation(changedObject, actualAnnotation, actualObject.wrapper, actualObject);\n            }\n        }\n    };\n    Diagram.prototype.updatefixedUserHandle = function (newProp, actualObject) {\n        if (newProp.fixedUserHandles !== undefined) {\n            var index = void 0;\n            var changedObject = void 0;\n            var actualAnnotation = void 0;\n            for (var _i = 0, _a = Object.keys(newProp.fixedUserHandles); _i < _a.length; _i++) {\n                var key = _a[_i];\n                index = Number(key);\n                changedObject = newProp.fixedUserHandles[key];\n                actualAnnotation = actualObject.fixedUserHandles[index];\n                this.updateConnectorfixedUserHandle(changedObject, actualAnnotation, actualObject.wrapper, actualObject);\n            }\n        }\n    };\n    /**\n     * updateConnectorfixedUserHandle method \\\n     *\n     * @returns { void }  updateConnectorfixedUserHandle method .\\\n     * @param {ConnectorFixedUserHandleModel} changedObject - provide the changedObject value.\n     * @param {ConnectorFixedUserHandleModel} actualfixedUserHandle - provide the actualfixedUserHandle value.\n     * @param {Container} nodes - provide the nodes value.\n     * @param {Object} actualObject - provide the actualObject value.\n     * @param {boolean} canUpdateSize - provide the canUpdateSize value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateConnectorfixedUserHandle = function (changedObject, actualfixedUserHandle, nodes, actualObject, canUpdateSize) {\n        var isMeasure = false;\n        var fixedUserHandleWrapper = this.getWrapper(nodes, actualfixedUserHandle.id);\n        if (fixedUserHandleWrapper !== undefined) {\n            if (changedObject.width !== undefined) {\n                fixedUserHandleWrapper.width = changedObject.width;\n                isMeasure = true;\n            }\n            if (changedObject.height !== undefined) {\n                fixedUserHandleWrapper.height = changedObject.height;\n                isMeasure = true;\n            }\n            if (actualfixedUserHandle instanceof ConnectorFixedUserHandle &&\n                (changedObject.offset !== undefined)) {\n                actualObject.updateAnnotation(actualfixedUserHandle, actualObject.intermediatePoints, actualObject.wrapper.bounds, fixedUserHandleWrapper);\n            }\n            if ((actualfixedUserHandle instanceof ConnectorFixedUserHandle) && changedObject.displacement) {\n                if (changedObject.displacement.x !== undefined ||\n                    changedObject.displacement.y !== undefined) {\n                    isMeasure = true;\n                }\n            }\n            if (changedObject.fill !== undefined) {\n                fixedUserHandleWrapper.style.fill = changedObject.fill;\n            }\n            if (changedObject.handleStrokeColor !== undefined) {\n                fixedUserHandleWrapper.style.strokeColor = changedObject.handleStrokeColor;\n            }\n            if (changedObject.handleStrokeWidth !== undefined) {\n                fixedUserHandleWrapper.style.strokeWidth = changedObject.handleStrokeWidth;\n            }\n            if (changedObject.visibility !== undefined) {\n                fixedUserHandleWrapper.visible = changedObject.visibility;\n            }\n            if (changedObject.cornerRadius !== undefined) {\n                fixedUserHandleWrapper.cornerRadius = changedObject.cornerRadius;\n            }\n            this.updatefixedUserHandleContent(changedObject, isMeasure, fixedUserHandleWrapper, actualObject, actualfixedUserHandle, nodes);\n            if (isMeasure === true) {\n                fixedUserHandleWrapper.measure(new Size(fixedUserHandleWrapper.width, fixedUserHandleWrapper.height));\n                fixedUserHandleWrapper.arrange(fixedUserHandleWrapper.desiredSize);\n            }\n        }\n    };\n    /**\n     * updateAnnotation method \\\n     *\n     * @returns { void }  updateAnnotation method .\\\n     * @param {AnnotationModel} changedObject - provide the changedObject value.\n     * @param {ShapeAnnotationModel} actualAnnotation - provide the actualAnnotation value.\n     * @param {Container} nodes - provide the nodes value.\n     * @param {Object} actualObject - provide the actualObject value.\n     * @param {boolean} canUpdateSize - provide the canUpdateSize value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateAnnotation = function (changedObject, actualAnnotation, nodes, actualObject, canUpdateSize) {\n        var isMeasure = false;\n        // eslint-disable-next-line max-len\n        var annotationWrapper = this.getWrapper(nodes, actualAnnotation.id);\n        if (annotationWrapper !== undefined) {\n            if (changedObject.width !== undefined && changedObject.height !== undefined) {\n                annotationWrapper.width = changedObject.width;\n                annotationWrapper.height = changedObject.height;\n                isMeasure = true;\n            }\n            if (changedObject.rotateAngle !== undefined) {\n                annotationWrapper.rotateAngle = changedObject.rotateAngle;\n            }\n            if (canUpdateSize && !(annotationWrapper instanceof DiagramHtmlElement)) {\n                annotationWrapper.refreshTextElement();\n            }\n            if (actualAnnotation instanceof PathAnnotation && changedObject.segmentAngle !== undefined) {\n                annotationWrapper.rotateAngle = actualAnnotation.rotateAngle;\n            }\n            if (actualAnnotation instanceof ShapeAnnotation &&\n                changedObject.offset !== undefined) {\n                var offset = changedObject.offset;\n                isMeasure = true;\n                var offsetX = offset.x !== undefined ? offset.x :\n                    actualAnnotation.offset.x;\n                var offsetY = offset.y !== undefined ? offset.y :\n                    actualAnnotation.offset.y;\n                annotationWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n                annotationWrapper.relativeMode = 'Point';\n            }\n            else if (actualAnnotation instanceof PathAnnotation &&\n                (changedObject.offset !== undefined ||\n                    changedObject.segmentAngle !== undefined)) {\n                actualObject.updateAnnotation(actualAnnotation, actualObject.intermediatePoints, actualObject.wrapper.bounds, annotationWrapper);\n            }\n            if ((actualAnnotation instanceof PathAnnotation) && changedObject.displacement) {\n                if (changedObject.displacement.x !== undefined ||\n                    changedObject.displacement.y !== undefined) {\n                    isMeasure = true;\n                    actualObject.updateAnnotation(actualAnnotation, actualObject.intermediatePoints, actualObject.wrapper.bounds, annotationWrapper);\n                }\n            }\n            if (changedObject.margin !== undefined) {\n                isMeasure = true;\n                if (changedObject.margin.bottom !== undefined) {\n                    annotationWrapper.margin.bottom = changedObject.margin.bottom;\n                }\n                if (changedObject.margin.top !== undefined) {\n                    annotationWrapper.margin.top = changedObject.margin.top;\n                }\n                if (changedObject.margin.left !== undefined) {\n                    annotationWrapper.margin.left = changedObject.margin.left;\n                }\n                if (changedObject.margin.right !== undefined) {\n                    annotationWrapper.margin.right = changedObject.margin.right;\n                }\n            }\n            if (isMeasure || canUpdateSize) {\n                annotationWrapper.width = (actualAnnotation.width || actualObject.width);\n                if (actualAnnotation.template) {\n                    annotationWrapper.width = (annotationWrapper.width || annotationWrapper.actualSize.width);\n                    annotationWrapper.height = (actualAnnotation.height || actualObject.height ||\n                        annotationWrapper.actualSize.height);\n                }\n            }\n            if (changedObject.horizontalAlignment !== undefined) {\n                annotationWrapper.horizontalAlignment = changedObject.horizontalAlignment;\n                isMeasure = true;\n            }\n            if (changedObject.verticalAlignment !== undefined) {\n                annotationWrapper.verticalAlignment = changedObject.verticalAlignment;\n                isMeasure = true;\n            }\n            if (changedObject.visibility !== undefined) {\n                annotationWrapper.visible = (nodes.visible && changedObject.visibility) ? true : false;\n            }\n            if (changedObject.constraints !== undefined) {\n                var updateSelector = false;\n                if ((annotationWrapper.constraints & AnnotationConstraints.Select) &&\n                    (!(changedObject.constraints & AnnotationConstraints.Select)) &&\n                    isSelected(this, actualObject, false, annotationWrapper)) {\n                    //updateSelector = true;\n                }\n                annotationWrapper.constraints = changedObject.constraints;\n                if (updateSelector) {\n                    this.clearSelection();\n                }\n            }\n            if (changedObject.style !== undefined) {\n                updateStyle(changedObject.style, annotationWrapper);\n            }\n            if (changedObject.hyperlink !== undefined) {\n                updateHyperlink(changedObject.hyperlink, annotationWrapper, actualAnnotation);\n            }\n            this.updateAnnotationContent(changedObject, isMeasure, annotationWrapper, actualObject, actualAnnotation, nodes);\n            if (isMeasure === true) {\n                annotationWrapper.measure(new Size(annotationWrapper.width, annotationWrapper.height));\n                annotationWrapper.arrange(annotationWrapper.desiredSize);\n            }\n            if (!(annotationWrapper instanceof DiagramHtmlElement)) {\n                annotationWrapper.refreshTextElement();\n            }\n            // this.refresh(); this.refreshDiagramLayer();\n        }\n    };\n    Diagram.prototype.updatefixedUserHandleContent = function (changedObject, isMeasure, fixedUserHandleWrapper, actualObject, fixedUserHandleAnnotation, nodes) {\n        if (changedObject !== undefined) {\n            this.updateConnectorfixedUserHandleWrapper(fixedUserHandleWrapper, actualObject, fixedUserHandleAnnotation, nodes);\n        }\n    };\n    Diagram.prototype.updateConnectorfixedUserHandleWrapper = function (fixedUserHandleWrapper, actualObject, actualAnnotation, nodes) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var elementId = _a[_i];\n            removeElement(fixedUserHandleWrapper.id + '_groupElement', elementId);\n            removeElement(fixedUserHandleWrapper.id + '_html_element', elementId);\n        }\n        if (actualObject instanceof Connector) {\n            var canvas = actualObject.wrapper;\n            var segment = canvas.children[0];\n            var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n            fixedUserHandleWrapper =\n                actualObject.getfixedUserHandle(actualObject.fixedUserHandles[actualObject.fixedUserHandles.length - 1], actualObject.intermediatePoints, bounds);\n        }\n        for (var i = 0; i < nodes.children.length; i++) {\n            if (fixedUserHandleWrapper.id === nodes.children[i].id) {\n                nodes.children.splice(i, 1, fixedUserHandleWrapper);\n            }\n        }\n    };\n    Diagram.prototype.updateAnnotationContent = function (changedObject, isMeasure, annotationWrapper, actualObject, actualAnnotation, nodes) {\n        if (changedObject.content !== undefined) {\n            if (annotationWrapper) {\n                isMeasure = true;\n                if (actualObject.shape.type === 'UmlActivity' &&\n                    ((isBlazor() && actualObject.shape.umlActivityShape === 'StructuredNode') ||\n                        (!isBlazor() && actualObject.shape.shape === 'StructuredNode'))) {\n                    annotationWrapper.content = '<<' + changedObject.content + '>>';\n                }\n                else {\n                    annotationWrapper.content = changedObject.content;\n                }\n            }\n            if (annotationWrapper instanceof DiagramHtmlElement) {\n                this.updateAnnotationWrapper(annotationWrapper, actualObject, actualAnnotation, nodes);\n            }\n        }\n        if (changedObject.template !== undefined) {\n            annotationWrapper.content = changedObject.template;\n            this.updateAnnotationWrapper(annotationWrapper, actualObject, actualAnnotation, nodes);\n        }\n    };\n    Diagram.prototype.updateAnnotationWrapper = function (annotationWrapper, actualObject, actualAnnotation, nodes) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var elementId = _a[_i];\n            removeElement(annotationWrapper.id + '_groupElement', elementId);\n            removeElement(annotationWrapper.id + '_html_element', elementId);\n        }\n        if (actualObject instanceof Node) {\n            annotationWrapper =\n                actualObject.initAnnotationWrapper(actualAnnotation, this.element.id);\n        }\n        else if (actualObject instanceof Connector) {\n            var canvas = actualObject.wrapper;\n            var segment = canvas.children[0];\n            var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n            annotationWrapper =\n                actualObject.getAnnotationElement(actualObject.annotations[actualObject.annotations.length - 1], actualObject.intermediatePoints, bounds, this.getDescription, this.element.id);\n        }\n        for (var i = 0; i < nodes.children.length; i++) {\n            if (annotationWrapper.id === nodes.children[i].id) {\n                nodes.children.splice(i, 1, annotationWrapper);\n            }\n        }\n    };\n    /**\n     * updateNodefixedUserHandle method \\\n     *\n     * @returns { void }  updateNodefixedUserHandle method .\\\n     * @param {NodeFixedUserHandleModel} changedObject - provide the changedObject value.\n     * @param {NodeFixedUserHandleModel} actualfixedUserHandle - provide the actualfixedUserHandle value.\n     * @param {Container} nodes - provide the changedObject value.\n     * @param {Object} actualObject - provide the changedObject value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateNodefixedUserHandle = function (changedObject, actualfixedUserHandle, nodes, actualObject) {\n        //let fixedUserHandleWrapper: Canvas;\n        var isMeasure = false;\n        var fixedUserHandleWrapper = this.getWrapper(nodes, actualfixedUserHandle.id);\n        if (fixedUserHandleWrapper !== undefined) {\n            if (changedObject.width !== undefined) {\n                fixedUserHandleWrapper.actualSize.width = changedObject.width;\n                isMeasure = true;\n            }\n            if (changedObject.height !== undefined) {\n                fixedUserHandleWrapper.height = changedObject.height;\n                isMeasure = true;\n            }\n            if (actualfixedUserHandle instanceof NodeFixedUserHandle &&\n                changedObject.offset !== undefined) {\n                var offset = changedObject.offset;\n                isMeasure = true;\n                var offsetX = offset.x !== undefined ? offset.x :\n                    actualfixedUserHandle.offset.x;\n                var offsetY = offset.y !== undefined ? offset.y :\n                    actualfixedUserHandle.offset.y;\n                fixedUserHandleWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n                fixedUserHandleWrapper.relativeMode = 'Point';\n            }\n            if (changedObject.margin !== undefined) {\n                isMeasure = true;\n                if (changedObject.margin.bottom !== undefined) {\n                    fixedUserHandleWrapper.margin.bottom = changedObject.margin.bottom;\n                }\n                if (changedObject.margin.top !== undefined) {\n                    fixedUserHandleWrapper.margin.top = changedObject.margin.top;\n                }\n                if (changedObject.margin.left !== undefined) {\n                    fixedUserHandleWrapper.margin.left = changedObject.margin.left;\n                }\n                if (changedObject.margin.right !== undefined) {\n                    fixedUserHandleWrapper.margin.right = changedObject.margin.right;\n                }\n            }\n            if (changedObject.visibility !== undefined) {\n                fixedUserHandleWrapper.visible = changedObject.visibility;\n            }\n            if (changedObject.fill !== undefined) {\n                fixedUserHandleWrapper.style.fill = changedObject.fill;\n            }\n            if (changedObject.handleStrokeColor !== undefined) {\n                fixedUserHandleWrapper.style.strokeColor = changedObject.handleStrokeColor;\n            }\n            if (changedObject.handleStrokeWidth !== undefined) {\n                fixedUserHandleWrapper.style.strokeWidth = changedObject.handleStrokeWidth;\n            }\n            if (changedObject.cornerRadius !== undefined) {\n                fixedUserHandleWrapper.cornerRadius = changedObject.cornerRadius;\n            }\n            this.updatefixedUserHandleWrapper(fixedUserHandleWrapper, actualObject, actualfixedUserHandle, nodes);\n            if (isMeasure === true) {\n                fixedUserHandleWrapper.measure(new Size(fixedUserHandleWrapper.width, fixedUserHandleWrapper.height));\n                fixedUserHandleWrapper.arrange(fixedUserHandleWrapper.desiredSize);\n            }\n        }\n    };\n    Diagram.prototype.updatefixedUserHandleWrapper = function (fixedUserHandleWrapper, actualObject, actualAnnotation, nodes) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var elementId = _a[_i];\n            removeElement(fixedUserHandleWrapper.id + '_groupElement', elementId);\n            removeElement(fixedUserHandleWrapper.id + '_html_element', elementId);\n        }\n        if (actualObject instanceof Node) {\n            fixedUserHandleWrapper = actualObject.initfixedUserHandles(actualAnnotation);\n        }\n        for (var i = 0; i < nodes.children.length; i++) {\n            if (fixedUserHandleWrapper.id === nodes.children[i].id) {\n                nodes.children.splice(i, 1, fixedUserHandleWrapper);\n            }\n        }\n    };\n    /**\n     * updatePort method \\\n     *\n     * @returns { void }  updatePort method .\\\n     * @param {PointPortModel} changedObject - provide the changedObject value.\n     * @param {PointPortModel} actualPort - provide the changedObject value.\n     * @param {Container} nodes - provide the changedObject value.\n     *\n     * @private\n     */\n    Diagram.prototype.updatePort = function (changedObject, actualPort, nodes) {\n        var isMeasure = false;\n        var portWrapper = this.getWrapper(nodes, actualPort.id);\n        if (portWrapper !== undefined) {\n            if (changedObject.offset !== undefined) {\n                isMeasure = true;\n                var offsetX = changedObject.offset.x !== undefined ? changedObject.offset.x :\n                    actualPort.offset.x;\n                var offsetY = changedObject.offset.y !== undefined ? changedObject.offset.y :\n                    actualPort.offset.y;\n                portWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n                portWrapper.relativeMode = 'Point';\n            }\n            if (changedObject.width !== undefined) {\n                isMeasure = true;\n                portWrapper.width = changedObject.width;\n            }\n            if (changedObject.height !== undefined) {\n                isMeasure = true;\n                portWrapper.height = changedObject.height;\n            }\n            if (changedObject.visibility !== undefined) {\n                portWrapper.visible = (nodes.visible && checkPortRestriction(actualPort, PortVisibility.Visible)) ? true : false;\n            }\n            if (changedObject.margin !== undefined) {\n                isMeasure = true;\n                if (changedObject.margin.bottom !== undefined) {\n                    portWrapper.margin.bottom = changedObject.margin.bottom;\n                }\n                if (changedObject.margin.top !== undefined) {\n                    portWrapper.margin.top = changedObject.margin.top;\n                }\n                if (changedObject.margin.right !== undefined) {\n                    portWrapper.margin.right = changedObject.margin.right;\n                }\n                if (changedObject.margin.left !== undefined) {\n                    portWrapper.margin.left = changedObject.margin.left;\n                }\n            }\n            if (changedObject.horizontalAlignment !== undefined) {\n                isMeasure = true;\n                portWrapper.horizontalAlignment = changedObject.horizontalAlignment;\n            }\n            if (changedObject.verticalAlignment !== undefined) {\n                isMeasure = true;\n                portWrapper.verticalAlignment = changedObject.verticalAlignment;\n            }\n            if (changedObject.style !== undefined) {\n                if (changedObject.style.fill !== undefined) {\n                    portWrapper.style.fill = changedObject.style.fill;\n                }\n                if (changedObject.style.opacity !== undefined) {\n                    portWrapper.style.opacity = changedObject.style.opacity;\n                }\n                if (changedObject.style.strokeColor !== undefined) {\n                    portWrapper.style.strokeColor = changedObject.style.strokeColor;\n                }\n                if (changedObject.style.strokeWidth !== undefined) {\n                    portWrapper.style.strokeWidth = changedObject.style.strokeWidth;\n                }\n                if (changedObject.style.strokeDashArray !== undefined) {\n                    portWrapper.style.strokeDashArray = changedObject.style.strokeDashArray;\n                }\n            }\n            if (changedObject.shape !== undefined) {\n                if (portWrapper) {\n                    var pathdata = getPortShape(changedObject.shape);\n                    portWrapper.data = pathdata;\n                    portWrapper.canMeasurePath = true;\n                }\n            }\n            if (changedObject.pathData !== undefined) {\n                portWrapper.data = String(changedObject.pathData);\n                isMeasure = true;\n            }\n            if (isMeasure === true) {\n                portWrapper.measure(new Size(portWrapper.width, portWrapper.height));\n                portWrapper.arrange(portWrapper.desiredSize);\n            }\n            //this.refresh(); this.refreshDiagramLayer();\n        }\n    };\n    /**\n     * updateIcon method \\\n     *\n     * @returns { void }  updateIcon method .\\\n     * @param {Node} actualObject - provide the obj value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateIcon = function (actualObject) {\n        var iconContainer = this.getWrapper(actualObject.wrapper, 'icon_content');\n        var diagramId = (this.diagramActions & DiagramAction.Render) ? this.element.id : undefined;\n        if (iconContainer) {\n            if (this.mode === 'SVG') {\n                var icon = getDiagramElement(actualObject.wrapper.id + '_icon_content', diagramId);\n                if (icon) {\n                    var iconRect = getDiagramElement(icon.id + '_rect', diagramId);\n                    var iconShape = getDiagramElement(icon.id + '_shape', diagramId);\n                    var nativeContent = getDiagramElement(iconShape.id + '_native_element', diagramId);\n                    if (nativeContent) {\n                        nativeContent.parentNode.removeChild(nativeContent);\n                    }\n                    iconShape.parentNode.removeChild(iconShape);\n                    iconRect.parentNode.removeChild(iconRect);\n                    icon.parentNode.removeChild(icon);\n                }\n            }\n            var index = actualObject.wrapper.children.indexOf(iconContainer);\n            actualObject.wrapper.children.splice(index, 1);\n        }\n        var portContainer = this.getPortContainer(actualObject);\n        actualObject.initIcons(this.getDescription, this.layout, portContainer, this.element.id);\n    };\n    Diagram.prototype.getPortContainer = function (actualObject) {\n        if (actualObject.children) {\n            for (var i = 0; i < actualObject.wrapper.children.length; i++) {\n                if (actualObject.wrapper.children[i].id === actualObject.id + 'group_container') {\n                    return actualObject.wrapper.children[i];\n                }\n            }\n        }\n        return actualObject.wrapper;\n    };\n    Diagram.prototype.updateTooltip = function (actualObject, node) {\n        if (node.tooltip.content !== undefined) {\n            actualObject.tooltip.content = node.tooltip.content;\n        }\n        if (node.tooltip.position !== undefined) {\n            actualObject.tooltip.position = node.tooltip.position;\n        }\n        if (node.tooltip.height !== undefined) {\n            actualObject.tooltip.height = node.tooltip.height;\n        }\n        if (node.tooltip.width !== undefined) {\n            actualObject.tooltip.width = node.tooltip.width;\n        }\n        if (node.tooltip.showTipPointer !== undefined) {\n            actualObject.tooltip.showTipPointer = node.tooltip.showTipPointer;\n        }\n        if (node.tooltip.relativeMode !== undefined) {\n            actualObject.tooltip.relativeMode = node.tooltip.relativeMode;\n        }\n    };\n    /**\n     * updateQuad method \\\n     *\n     * @returns { void }  updateQuad method .\\\n     * @param {IElement} obj - provide the obj value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateQuad = function (obj) {\n        var modified = this.spatialSearch.updateQuad(obj.wrapper);\n        if (modified && !this.preventDiagramUpdate) {\n            this.updatePage();\n        }\n    };\n    /**\n     * removeFromAQuad method \\\n     *\n     * @returns { void }  removeFromAQuad method .\\\n     * @param {IElement} obj - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeFromAQuad = function (obj) {\n        if (obj.children) {\n            var child = void 0;\n            var children = obj.children;\n            for (var i = 0; i < children.length; i++) {\n                child = this.nameTable[children[i]];\n                if (child) {\n                    this.removeFromAQuad(child);\n                }\n            }\n        }\n        this.spatialSearch.removeFromAQuad(obj.wrapper);\n        var modified = this.spatialSearch.updateBounds(obj.wrapper);\n        if (modified && !this.preventDiagramUpdate) {\n            this.updatePage();\n        }\n    };\n    /**\n     * updateGroupSize method \\\n     *\n     * @returns { void }  updateGroupSize method .\\\n     * @param {NodeModel | ConnectorModel} node - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateGroupSize = function (node) {\n        var tempNode;\n        if (node.parentId) {\n            tempNode = this.nameTable[node.parentId];\n            if (tempNode) {\n                if (tempNode.parentId) {\n                    this.updateGroupSize(tempNode);\n                }\n                else {\n                    tempNode.wrapper.measure(new Size());\n                    tempNode.wrapper.arrange(tempNode.wrapper.desiredSize);\n                    this.updateGroupOffset(tempNode);\n                    this.updateDiagramObject(tempNode);\n                }\n            }\n        }\n    };\n    Diagram.prototype.updatePage = function () {\n        if ((this.diagramActions & DiagramAction.Render) &&\n            !(this.diagramActions & DiagramAction.DragUsingMouse)) {\n            this.scroller.updateScrollOffsets();\n            this.scroller.setSize();\n            //updating overview\n            for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n                var temp = _a[_i];\n                var view = this.views[temp];\n                if (!(view instanceof Diagram)) {\n                    view.updateView(view);\n                }\n            }\n        }\n        if (this.diagramActions & DiagramAction.DragUsingMouse) {\n            this.renderPageBreaks();\n        }\n    };\n    /**\n     * protectPropertyChange method \\\n     *\n     * @returns { void }  protectPropertyChange method .\\\n     * @param {boolean} enable - provide the enable value.\n     *\n     * @private\n     */\n    Diagram.prototype.protectPropertyChange = function (enable) {\n        this.isProtectedOnChange = enable;\n    };\n    /**\n     * getProtectPropertyChangeValue method \\\n     *\n     * @returns { boolean }  getProtectPropertyChangeValue method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.getProtectPropertyChangeValue = function () {\n        return this.isProtectedOnChange;\n    };\n    /**\n     * enableServerDataBinding method \\\n     *\n     * @returns { void }  enableServerDataBinding method .\\\n     * @param {boolean} enable - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.enableServerDataBinding = function (enable) {\n        if (isBlazor()) {\n            this.allowServerDataBinding = enable;\n            if (enable) {\n                this.bulkChanges = {};\n            }\n        }\n    };\n    /**\n     * updateShadow method \\\n     *\n     * @returns { void }  updateShadow method .\\\n     * @param {ShadowModel} nodeShadow - provide the node value.\n     * @param {ShadowModel} changedShadow - provide the Node value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateShadow = function (nodeShadow, changedShadow) {\n        if (changedShadow.angle !== undefined) {\n            nodeShadow.angle = changedShadow.angle;\n        }\n        if (changedShadow.color !== undefined) {\n            nodeShadow.color = changedShadow.color;\n        }\n        if (changedShadow.distance !== undefined) {\n            nodeShadow.distance = changedShadow.distance;\n        }\n        if (changedShadow.opacity !== undefined) {\n            nodeShadow.opacity = changedShadow.opacity;\n        }\n    };\n    /**\n     * updateMargin method \\\n     *\n     * @returns { void }  updateMargin method .\\\n     * @param {Node} node - provide the node value.\n     * @param {Node} changes - provide the Node value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateMargin = function (node, changes) {\n        if (changes.margin.top !== undefined) {\n            node.margin.top = changes.margin.top;\n        }\n        if (changes.margin.bottom !== undefined) {\n            node.margin.bottom = changes.margin.bottom;\n        }\n        if (changes.margin.left !== undefined) {\n            node.margin.left = changes.margin.left;\n        }\n        if (changes.margin.right !== undefined) {\n            node.margin.right = changes.margin.right;\n        }\n    };\n    Diagram.prototype.removePreviewChildren = function (preview) {\n        if (preview.children && preview.children.length &&\n            preview.shape && preview.shape.type === 'SwimLane') {\n            for (var z = 0; z < preview.children.length; z++) {\n                var previewChildId = preview.children[z];\n                var previewIndex_1 = this.nodes.indexOf(this.nameTable[previewChildId]);\n                if (previewIndex_1 >= 0) {\n                    this.nodes.splice(previewIndex_1, 1);\n                }\n                delete this.nameTable[previewChildId];\n            }\n            var previewIndex = this.nodes.indexOf(this.nameTable[this.currentSymbol.id]);\n            if (previewIndex >= 0) {\n                this.nodes.splice(previewIndex, 1);\n            }\n        }\n    };\n    Diagram.prototype.selectDragedNode = function (newObj, args, selectedSymbol) {\n        this.currentSymbol = newObj;\n        if (this.mode !== 'SVG') {\n            this.refreshDiagramLayer();\n        }\n        this.commandHandler.oldSelectedObjects = cloneSelectedObjects(this);\n        this.commandHandler.select(newObj);\n        this.commandHandler.updateBlazorSelector();\n        this.eventHandler.mouseDown(args.event);\n        this.eventHandler.mouseMove(args.event, args);\n        this.preventDiagramUpdate = false;\n        this.updatePage();\n        selectedSymbol.style.opacity = '0';\n    };\n    //property changes - end region\n    /* tslint:disable */\n    Diagram.prototype.initDroppables = function () {\n        var _this = this;\n        // initiates droppable event\n        var childTable = {};\n        var entryTable = {};\n        var header;\n        var lane;\n        var selectedSymbols = 'selectedSymbols';\n        this.droppable = new Droppable(this.element);\n        // this.droppable.accept = '.e-dragclone';\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.droppable.over = function (args) {\n            if (!_this.currentSymbol) {\n                var dragDataHelper = null;\n                if (!args.dragData && args.name === 'drag') {\n                    var helper = document.getElementsByClassName('e-dragclone')[0];\n                    if (helper) {\n                        dragDataHelper = helper;\n                    }\n                }\n                if (args.dragData || dragDataHelper) {\n                    var newObj = void 0;\n                    var isHorizontal = void 0;\n                    document.getElementById(_this.element.id + 'content').focus();\n                    var position = _this.eventHandler.getMousePosition(args.event);\n                    var clonedObject = void 0;\n                    var selectedSymbol = dragDataHelper || args.dragData.helper;\n                    var paletteId = selectedSymbol.getAttribute('paletteId');\n                    var nodeDragSize = void 0;\n                    var nodePreviewSize = void 0;\n                    var paletteDragSize = void 0;\n                    var preview = void 0;\n                    if (!paletteId && args.dragData) {\n                        var arg = {\n                            source: null, element: newObj, cancel: false,\n                            diagram: _this,\n                            dragData: args.dragData.draggedElement.ej2_instances[0].dragData,\n                            dragItem: newObj\n                        };\n                        _this.triggerEvent(DiagramEvent.dragEnter, arg);\n                        var newNode = void 0;\n                        var newConnector = void 0;\n                        if (arg.dragItem && arg.dragItem.sourcePoint && arg.dragItem.targetPoint) {\n                            newConnector = new Connector(_this, 'connectors', arg.dragItem, true);\n                        }\n                        else if (arg.dragItem) {\n                            newNode = new Node(_this, 'nodes', arg.dragItem, true);\n                        }\n                        newObj = newNode ? newNode : newConnector;\n                        _this.initObject(newObj, undefined, undefined, true);\n                        _this['enterObject'] = newObj;\n                        _this['enterTable'] = entryTable;\n                        if (newObj instanceof Node) {\n                            newNode.offsetX = position.x + 5 + (newNode.width) * newNode.pivot.x;\n                            newNode.offsetY = position.y + (newNode.height) * newNode.pivot.y;\n                        }\n                        else if (newObj instanceof Connector) {\n                            var newObjBounds = Rect.toBounds([newObj.sourcePoint, newObj.targetPoint]);\n                            var diffx = position.x - newObjBounds.left;\n                            var diffy = position.y - newObjBounds.top;\n                            newObj.sourcePoint.x += diffx;\n                            newObj.sourcePoint.y += diffy;\n                            newObj.targetPoint.x += diffx;\n                            newObj.targetPoint.y += diffy;\n                        }\n                        _this.preventDiagramUpdate = true;\n                        _this.currentSymbol = newObj;\n                        if (_this.mode !== 'SVG') {\n                            _this.refreshDiagramLayer();\n                        }\n                        _this.selectDragedNode(newObj, args, selectedSymbol);\n                        delete _this['enterObject'];\n                        delete _this['enterTable'];\n                        _this.droppable[selectedSymbols] = selectedSymbol;\n                        _this.allowServerDataBinding = true;\n                    }\n                    if (paletteId) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        var sourceElement = document.getElementById(paletteId).ej2_instances[0];\n                        var source = 'sourceElement';\n                        _this.droppable[source] = sourceElement;\n                        var childtable = 'childTable';\n                        if (sourceElement) {\n                            var obj = sourceElement[selectedSymbols];\n                            _this.allowServerDataBinding = false;\n                            clonedObject = cloneObject(sourceElement[selectedSymbols]);\n                            childTable = sourceElement[childtable];\n                            var wrapper = obj.wrapper.children[0].children[0];\n                            preview = getPreviewSize(sourceElement, clonedObject, wrapper);\n                            if (sourceElement[selectedSymbols] instanceof Node) {\n                                if (obj.shape.shape === 'TextAnnotation') {\n                                    // eslint-disable-next-line max-len\n                                    clonedObject.offsetX = position.x + 11 + (preview.width) * clonedObject.pivot.x;\n                                    // eslint-disable-next-line max-len\n                                    clonedObject.offsetY = position.y + 11 + (preview.height) * clonedObject.pivot.y;\n                                }\n                                else {\n                                    // eslint-disable-next-line max-len\n                                    clonedObject.offsetX = position.x + 5 + (preview.width) * clonedObject.pivot.x;\n                                    // eslint-disable-next-line max-len\n                                    clonedObject.offsetY = position.y + (preview.height) * clonedObject.pivot.y;\n                                }\n                                var newNode = new Node(_this, 'nodes', clonedObject, true);\n                                if (newNode.shape.type === 'Bpmn' && newNode.shape.activity.subProcess.processes\n                                    && newNode.shape.activity.subProcess.processes.length) {\n                                    newNode.shape.activity.subProcess.processes = [];\n                                }\n                                nodeDragSize = newNode.dragSize;\n                                nodePreviewSize = newNode.previewSize;\n                                paletteDragSize = sourceElement['symbolDragSize'];\n                                var palettePreview = sourceElement['symbolPreview'];\n                                // eslint-disable-next-line max-len\n                                newNode.width = nodeDragSize.width || paletteDragSize.width || nodePreviewSize.width || palettePreview.width || newNode.width;\n                                // eslint-disable-next-line max-len\n                                newNode.height = nodeDragSize.height || paletteDragSize.height || nodePreviewSize.height || palettePreview.height || newNode.height;\n                                if (newNode.shape.type === 'SwimLane') {\n                                    _this.diagramActions |= DiagramAction.PreventHistory;\n                                    if (newNode.shape.isLane) {\n                                        newNode.children = [];\n                                        header = {\n                                            id: 'header' + randomId()\n                                        };\n                                        if (newNode.shape.orientation === 'Horizontal') {\n                                            header.width = newNode.shape.lanes[0].header.width;\n                                            header.height = newNode.shape.lanes[0].height;\n                                        }\n                                        else {\n                                            header.width = newNode.shape.lanes[0].width;\n                                            header.height = newNode.shape.lanes[0].header.height;\n                                        }\n                                        header.style = newNode.shape.lanes[0].header.style;\n                                        header.offsetX = position.x + 5 + header.width / 2;\n                                        header.offsetY = position.y + header.height / 2;\n                                        _this.diagramActions |= DiagramAction.PreventCollectionChangeOnDragOver;\n                                        header = _this.add(header);\n                                        lane = {\n                                            id: 'body' + randomId()\n                                        };\n                                        if (newNode.shape.orientation === 'Horizontal') {\n                                            lane.width = newNode.shape.lanes[0].width - header.width;\n                                            lane.height = newNode.shape.lanes[0].height;\n                                            // eslint-disable-next-line max-len\n                                            lane.offsetX = position.x + 5 + (newNode.shape.lanes[0].header.width + (lane.width / 2));\n                                            lane.offsetY = position.y + lane.height / 2;\n                                        }\n                                        else {\n                                            lane.width = newNode.shape.lanes[0].width;\n                                            lane.height = newNode.shape.lanes[0].height - header.height;\n                                            lane.offsetX = position.x + 5 + lane.width / 2;\n                                            // eslint-disable-next-line max-len\n                                            lane.offsetY = position.y + (newNode.shape.lanes[0].header.height + (lane.height / 2));\n                                        }\n                                        lane.style = newNode.shape.lanes[0].style;\n                                        lane = _this.add(lane);\n                                        var group = {\n                                            id: 'group' + randomId(),\n                                            children: [header.id, lane.id]\n                                        };\n                                        group.shape = newNode.shape;\n                                        group.width = newNode.shape.lanes[0].width;\n                                        group.height = newNode.shape.lanes[0].height;\n                                        group.previewSize = newNode.previewSize;\n                                        group.dragSize = newNode.dragSize;\n                                        group.addInfo = newNode.addInfo;\n                                        newNode = _this.add(group);\n                                        _this.diagramActions &= ~DiagramAction.PreventCollectionChangeOnDragOver;\n                                    }\n                                    _this.diagramActions &= ~DiagramAction.PreventHistory;\n                                }\n                                if (newNode.shape.isPhase) {\n                                    isHorizontal = (newNode.shape.orientation === 'Horizontal') ? true : false;\n                                    if (isHorizontal) {\n                                        newNode.offsetX = position.x + 5 + (newNode.width || wrapper.actualSize.width) / 2;\n                                        newNode.offsetY = position.y;\n                                        newNode.shape.data =\n                                            'M' + 20 + ',' + (newNode.height / 2) + ' L' + (newNode.width - 20) + ',' +\n                                                (newNode.height / 2) + 'z';\n                                        newNode.height = 1;\n                                    }\n                                    else {\n                                        newNode.offsetX = position.x + 5;\n                                        newNode.offsetY = position.y + (newNode.height || wrapper.actualSize.height) / 2;\n                                        newNode.shape.data =\n                                            'M' + (newNode.width / 2) + ',' + 20 + ' L' + (newNode.width / 2) +\n                                                ',' + (newNode.height - 20) + 'z';\n                                        newNode.width = 1;\n                                    }\n                                }\n                                newObj = newNode;\n                                if (clonedObject.children) {\n                                    var parentNode = clonedObject;\n                                    var tempTable = {};\n                                    entryTable = _this.getChildren(parentNode, tempTable, childTable);\n                                    arrangeChild(parentNode, -parentNode.offsetX, -parentNode.offsetY, entryTable, true, _this);\n                                }\n                            }\n                            else if (sourceElement[selectedSymbols] instanceof Connector) {\n                                newObj = new Connector(_this, 'connectors', clonedObject, true);\n                                var bounds = Rect.toBounds([newObj.sourcePoint, newObj.targetPoint]);\n                                var tx = position.x - bounds.left;\n                                var ty = position.y - bounds.top;\n                                newObj.sourcePoint.x += tx;\n                                newObj.sourcePoint.y += ty;\n                                newObj.targetPoint.x += tx;\n                                newObj.targetPoint.y += ty;\n                            }\n                            if (!newObj.shape.isLane) {\n                                newObj.id += randomId();\n                            }\n                            var arg = {\n                                source: sourceElement, element: newObj, cancel: false,\n                                diagram: _this, dragData: null, dragItem: newObj\n                            };\n                            if (isBlazor()) {\n                                arg = _this.getBlazorDragEventArgs(arg);\n                            }\n                            _this['enterObject'] = newObj;\n                            _this['enterTable'] = entryTable;\n                            _this.triggerEvent(DiagramEvent.dragEnter, arg);\n                            if ((newObj instanceof Node) && newObj.shape.type === 'SwimLane' && newObj.shape.isLane) {\n                                var swimLaneObj = arg.element;\n                                var laneObj = swimLaneObj.shape.lanes[0];\n                                //let child1: NodeModel; let child2: NodeModel;\n                                isHorizontal = (swimLaneObj.shape.orientation === 'Horizontal') ? true : false;\n                                var child1 = _this.nameTable[newObj.children[0]];\n                                var child2 = _this.nameTable[newObj.children[1]];\n                                nodeDragSize = newObj.dragSize;\n                                nodePreviewSize = newObj.previewSize;\n                                paletteDragSize = sourceElement['symbolDragSize'];\n                                laneObj.width = nodeDragSize.width || paletteDragSize.width || nodePreviewSize.width || laneObj.width;\n                                laneObj.height = nodeDragSize.height || paletteDragSize.height || nodePreviewSize.height || laneObj.height;\n                                if (isHorizontal) {\n                                    header.width = laneObj.header.width;\n                                    header.height = laneObj.height;\n                                    lane.width = laneObj.width - header.width;\n                                    lane.height = laneObj.height;\n                                    lane.offsetX = position.x + 5 + (laneObj.header.width + (child2.width / 2));\n                                    lane.offsetY = position.y + child2.height / 2;\n                                }\n                                else {\n                                    header.width = laneObj.width;\n                                    header.height = laneObj.header.height;\n                                    lane.width = laneObj.width;\n                                    lane.height = laneObj.height - header.height;\n                                    lane.offsetX = position.x + 5 + child2.width / 2;\n                                    lane.offsetY = position.y + (laneObj.header.height + (child2.height / 2));\n                                }\n                                header.offsetX = position.x + 5 + child1.width / 2;\n                                header.offsetY = position.y + child1.height / 2;\n                                newObj.width = laneObj.width;\n                                newObj.height = laneObj.height;\n                            }\n                            if ((newObj instanceof Node) && newObj.shape.isPhase) {\n                                if (isHorizontal) {\n                                    newObj.height = 1;\n                                }\n                                else {\n                                    newObj.width = 1;\n                                }\n                            }\n                            if (!_this.activeLayer.lock && !arg.cancel) {\n                                _this.preventDiagramUpdate = true;\n                                if (newObj.children) {\n                                    _this.findChild(newObj, entryTable);\n                                }\n                                _this.preventDiagramUpdate = true;\n                                if (newObj.zIndex !== -1) {\n                                    newObj.zIndex = -1;\n                                }\n                                _this.initObject(newObj, undefined, undefined, true);\n                                _this.selectDragedNode(newObj, args, selectedSymbol);\n                            }\n                            delete _this['enterObject'];\n                            delete _this['enterTable'];\n                        }\n                        _this.droppable[selectedSymbols] = selectedSymbol;\n                        _this.allowServerDataBinding = true;\n                    }\n                }\n            }\n            else {\n                if (args.event.touches && args.event.touches.length) {\n                    _this.eventHandler.mouseMove(args.event, args.event.touches);\n                }\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.droppable.drop = function (args) { return __awaiter(_this, void 0, void 0, function () {\n            var source, value, isPhase, orientation_2, isConnector, arg, id, clonedObject, nodeId, newObj, arg, clonedObject, id, selectedSymbols, draggableElement, i;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.allowServerDataBinding = false;\n                        source = 'sourceElement';\n                        if (!this.currentSymbol) return [3 /*break*/, 4];\n                        isPhase = false;\n                        isConnector = (this.currentSymbol instanceof Connector) ? true : false;\n                        if (args.event.touches) {\n                            this.eventHandler.mouseUp(args.event);\n                        }\n                        arg = void 0;\n                        arg = {\n                            source: this.droppable[source],\n                            element: this.currentSymbol,\n                            target: this.eventHandler['hoverNode'] || this.eventHandler['lastObjectUnderMouse'] || this, cancel: false,\n                            position: { x: this.currentSymbol.wrapper.offsetX, y: this.currentSymbol.wrapper.offsetY }\n                        };\n                        if (!isBlazor()) return [3 /*break*/, 2];\n                        arg = {\n                            source: cloneBlazorObject(this.droppable[source]),\n                            // eslint-disable-next-line max-len\n                            element: getObjectType(this.currentSymbol) === Connector ? { connector: cloneBlazorObject(this.currentSymbol) } : { node: cloneBlazorObject(this.currentSymbol) },\n                            cancel: false, target: {},\n                            position: { x: this.currentSymbol.wrapper.offsetX, y: this.currentSymbol.wrapper.offsetY }\n                        };\n                        // eslint-disable-next-line max-len\n                        this.getDropEventArgs(arg);\n                        return [4 /*yield*/, this.triggerEvent(DiagramEvent.drop, arg)];\n                    case 1:\n                        arg = (_a.sent()) || arg;\n                        return [3 /*break*/, 3];\n                    case 2:\n                        this.triggerEvent(DiagramEvent.drop, arg);\n                        _a.label = 3;\n                    case 3:\n                        id = 'id';\n                        clonedObject = cloneObject(this.currentSymbol);\n                        clonedObject['hasTarget'] = this.currentSymbol['hasTarget'];\n                        this.removeFromAQuad(this.currentSymbol);\n                        this.removeObjectsFromLayer(this.nameTable[this.currentSymbol.id]);\n                        this.removeElements(this.currentSymbol);\n                        if (this.currentSymbol.shape.isLane ||\n                            this.currentSymbol.shape.isPhase) {\n                            this.removeChildInNodes(this.currentSymbol);\n                        }\n                        if (arg.cancel) {\n                            removeChildNodes(this.currentSymbol, this);\n                        }\n                        if (this.currentSymbol.shape.isPhase) {\n                            isPhase = true;\n                            orientation_2 = this.currentSymbol.shape.orientation;\n                        }\n                        this.removePreviewChildren(this.currentSymbol);\n                        delete this.nameTable[this.currentSymbol.id];\n                        this.currentSymbol = null;\n                        this.protectPropertyChange(true);\n                        if (!arg.cancel) {\n                            this.startGroupAction();\n                            if (clonedObject && (clonedObject.shape.isLane || isPhase)) {\n                                if (isPhase) {\n                                    clonedObject.shape.isPhase = isPhase;\n                                    clonedObject.shape.orientation = orientation_2;\n                                }\n                                this.eventHandler.addSwimLaneObject(clonedObject);\n                            }\n                            if (clonedObject.shape.type === 'Bpmn' && clonedObject.shape.annotation\n                                && clonedObject['hasTarget']) {\n                                nodeId = clonedObject.shape.annotation.nodeId;\n                                clonedObject.shape.annotation.id = clonedObject.id;\n                                this.addTextAnnotation(clonedObject.shape.annotation, this.nameTable[nodeId]);\n                                clonedObject.nodeId = '';\n                            }\n                            if (!clonedObject.shape.isLane && !isPhase) {\n                                if (clonedObject.children) {\n                                    this.addChildNodes(clonedObject);\n                                }\n                                if (arg.target && (arg.target instanceof Node) && !isConnector && checkParentAsContainer(this, arg.target)\n                                    && canAllowDrop(arg.target)) {\n                                    addChildToContainer(this, arg.target, clonedObject);\n                                }\n                                else {\n                                    value = this.add(clonedObject, true);\n                                }\n                                if ((clonedObject || value) && canSingleSelect(this)) {\n                                    this.select([this.nameTable[clonedObject[id]]]);\n                                }\n                            }\n                        }\n                        else {\n                            this.clearSelectorLayer();\n                        }\n                        this.protectPropertyChange(false);\n                        newObj = this.nameTable[clonedObject[id]];\n                        if (clonedObject['hasTarget']) {\n                            clonedObject.nodeId = clonedObject['hasTarget'];\n                            this.remove(clonedObject);\n                        }\n                        if (this.bpmnModule && newObj instanceof Node && clonedObject.processId) {\n                            newObj.processId = clonedObject.processId;\n                            this.bpmnModule.dropBPMNchild(this.nameTable[newObj.processId], newObj, this);\n                        }\n                        if (!arg.cancel) {\n                            this.endGroupAction();\n                        }\n                        if (this.mode !== 'SVG') {\n                            this.refreshDiagramLayer();\n                        }\n                        delete this.droppable[source];\n                        return [3 /*break*/, 5];\n                    case 4:\n                        arg = {\n                            source: cloneBlazorObject(args.droppedElement),\n                            element: undefined,\n                            target: cloneBlazorObject(this.eventHandler['hoverNode'] || (this.eventHandler['lastObjectUnderMouse']) || this), cancel: false,\n                            position: undefined\n                        };\n                        if (isBlazor()) {\n                            arg = {\n                                source: cloneBlazorObject(args.droppedElement),\n                                element: undefined,\n                                cancel: false,\n                                position: undefined,\n                                target: {}\n                            };\n                            this.getDropEventArgs(arg);\n                        }\n                        this.triggerEvent(DiagramEvent.drop, arg);\n                        clonedObject = void 0;\n                        id = 'id';\n                        _a.label = 5;\n                    case 5:\n                        selectedSymbols = 'selectedSymbols';\n                        // eslint-disable-next-line max-len\n                        if (this.droppable[selectedSymbols] && this.droppable[selectedSymbols].parentNode) {\n                            remove(this.droppable[selectedSymbols]);\n                        }\n                        else {\n                            draggableElement = document.getElementsByClassName('e-dragclone');\n                            for (i = 0; i < draggableElement.length; i++) {\n                                draggableElement[i].remove();\n                            }\n                        }\n                        this.allowServerDataBinding = true;\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        this.droppable.out = function (args) {\n            if (_this.currentSymbol && (!_this.eventHandler.focus || args.evt.type === \"touchmove\")) {\n                _this.unSelect(_this.currentSymbol);\n                _this.removeFromAQuad(_this.currentSymbol);\n                if (_this.mode !== 'SVG' && _this.currentSymbol.shape.type === 'Native') {\n                    _this.removeElements(_this.currentSymbol);\n                }\n                _this.removeObjectsFromLayer(_this.nameTable[_this.currentSymbol.id]);\n                _this.removePreviewChildren(_this.currentSymbol);\n                delete _this.nameTable[_this.currentSymbol.id];\n                var args_1 = {\n                    element: cloneBlazorObject(_this.currentSymbol),\n                    diagram: _this\n                };\n                if (isBlazor()) {\n                    args_1 = _this.getBlazorDragLeaveEventArgs(args_1);\n                }\n                _this.triggerEvent(DiagramEvent.dragLeave, args_1);\n                if (_this.mode !== 'SVG') {\n                    _this.refreshDiagramLayer();\n                }\n                else {\n                    _this.removeElements(_this.currentSymbol);\n                }\n                _this.currentSymbol = null;\n                var selectedSymbols_1 = 'selectedSymbols';\n                _this.droppable[selectedSymbols_1].style.opacity = '1';\n                var source = 'sourceElement';\n                delete _this.droppable[source];\n                _this.diagramRenderer.rendererActions =\n                    _this.removeConstraints(_this.diagramRenderer.rendererActions, RendererAction.DrawSelectorBorder);\n                if (_this.previousSelectedObject) {\n                    _this.select(_this.previousSelectedObject, _this.previousSelectedObject.length > 1 ? true : false);\n                }\n                _this.previousSelectedObject = null;\n            }\n        };\n    };\n    Diagram.prototype.getBlazorDragLeaveEventArgs = function (args) {\n        args = {\n            diagramId: this.element.id,\n            element: getObjectType(args.element) === Connector ? { connector: cloneBlazorObject(args.element) }\n                : { node: cloneBlazorObject(args.element) }\n        };\n        return args;\n    };\n    Diagram.prototype.getDropEventArgs = function (arg) {\n        if ((this.eventHandler['lastObjectUnderMouse'] || this.eventHandler['hoverNode'])) {\n            var object = this.eventHandler['lastObjectUnderMouse'] || this.eventHandler['hoverNode'];\n            // eslint-disable-next-line max-len\n            arg.target = getObjectType(object) === Connector ? { connector: cloneBlazorObject(object) } : { node: cloneBlazorObject(object) };\n        }\n        else {\n            arg.target.diagramId = this.element.id;\n        }\n    };\n    Diagram.prototype.removeChildInNodes = function (node) {\n        if (node) {\n            if (node.children) {\n                for (var i = 0; i < node.children.length; i++) {\n                    this.removeChildInNodes(this.nameTable[node.children[i]]);\n                }\n            }\n            var index = this.nodes.indexOf(node);\n            if (index !== -1) {\n                this.nodes.splice(index, 1);\n            }\n        }\n    };\n    Diagram.prototype.getBlazorDragEventArgs = function (args) {\n        args = {\n            // eslint-disable-next-line max-len\n            source: cloneBlazorObject(args.source), element: getObjectType(args.element) === Connector ? { connector: cloneBlazorObject(args.element) }\n                : { node: cloneBlazorObject(args.element) },\n            cancel: args.cancel, diagramId: this.element.id\n        };\n        return args;\n    };\n    Diagram.prototype.findChild = function (node, childTable) {\n        var group;\n        var newNode;\n        for (var i = 0; i < node.children.length; i++) {\n            group = childTable[node.children[i]];\n            if (group) {\n                if (group.children) {\n                    this.findChild(group, childTable);\n                }\n                group.id = group.id + randomId();\n                childTable[group.id] = group;\n                node.children[i] = group.id;\n                newNode = new Node(this, 'nodes', group, true);\n                this.initObject(newNode, undefined, undefined, true);\n                //this.add(group, true);\n            }\n        }\n    };\n    Diagram.prototype.getChildren = function (node, entryTable, childTable) {\n        var temp;\n        for (var i = 0; i < node.children.length; i++) {\n            temp = (childTable[node.children[i]]);\n            if (temp) {\n                if (temp.children) {\n                    entryTable = this.getChildren(temp, entryTable, childTable);\n                }\n                entryTable[temp.id] = cloneObject(temp);\n            }\n        }\n        return entryTable;\n    };\n    Diagram.prototype.addChildNodes = function (node) {\n        var temp;\n        for (var i = 0; i < node.children.length; i++) {\n            temp = (this.nameTable[node.children[i]]);\n            if (temp) {\n                if (temp.children) {\n                    this.addChildNodes(temp);\n                }\n                this.add(temp, true);\n            }\n        }\n    };\n    Diagram.prototype.moveNode = function (node) {\n        var currentLayer = this.commandHandler.getObjectLayer(node.id);\n        var index = currentLayer.zIndex;\n        var length = currentLayer.objects.length;\n        var targetLayer;\n        for (var i = 0; i < this.layers.length; i++) {\n            if (index === this.layers[i].zIndex) {\n                targetLayer = this.layers[i + 1];\n            }\n        }\n        if (length > 1) {\n            this.commandHandler.moveSvgNode(node.id, currentLayer.objects[length - 2]);\n            this.commandHandler.moveSvgNode(currentLayer.objects[length - 2], node.id);\n        }\n        else {\n            if (targetLayer) {\n                var targetObject = this.commandHandler.getLayer(this.layerZIndexTable[targetLayer.zIndex]).objects[0];\n                if (targetObject) {\n                    this.commandHandler.moveSvgNode(node.id, targetObject);\n                    this.commandHandler.updateNativeNodeIndex(node.id, targetObject);\n                }\n                else {\n                    this.moveObjectsUp(node, currentLayer);\n                }\n            }\n            else {\n                this.moveObjectsUp(node, currentLayer);\n            }\n        }\n    };\n    /**\n     * moves the node or connector forward within given layer \\\n     *\n     * @returns { void }  moves the node or connector forward within given layer .\\\n     * @param {Node | Connector} node - provide the source value.\n     * @param {LayerModel} currentLayer - provide the source value.\n     *\n     */\n    Diagram.prototype.moveObjectsUp = function (node, currentLayer) {\n        var targetLayer;\n        for (var i = this.layers.length - 1; i >= 0; i--) {\n            targetLayer = this.layers[i];\n            if (currentLayer.id !== targetLayer.id) {\n                // eslint-disable-next-line max-len\n                var targetObject = this.commandHandler.getLayer(this.layerZIndexTable[targetLayer.zIndex]).objects[targetLayer.objects.length - 1];\n                if (targetObject) {\n                    this.commandHandler.moveSvgNode(node.id, targetObject);\n                    this.commandHandler.moveSvgNode(targetObject, node.id);\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * Inserts newly added element into the database \\\n     *\n     * @returns { void }  Inserts newly added element into the database .\\\n     * @param {Node | Connector} node - provide the source value.\n     *\n     */\n    Diagram.prototype.insertData = function (node) {\n        return this.crudOperation(node, 'create', this.getNewUpdateNodes('New'));\n    };\n    /**\n     * updates the user defined element properties into the existing database \\\n     *\n     * @returns { void }     Removes the user deleted element from the existing database .\\\n     * @param {Node | Connector} node - provide the source value.\n     *\n     */\n    Diagram.prototype.updateData = function (node) {\n        return this.crudOperation(node, 'update', this.getNewUpdateNodes('Update'));\n    };\n    /**\n     * Removes the user deleted element from the existing database \\\n     *\n     * @returns { void }     Removes the user deleted element from the existing database .\\\n     * @param {Node | Connector} node - provide the source value.\n     *\n     */\n    Diagram.prototype.removeData = function (node) {\n        return this.crudOperation(node, 'destroy', this.getDeletedNodes());\n    };\n    Diagram.prototype.crudOperation = function (node, crud, getNodesCollection) {\n        if (node) {\n            var data = this.parameterMap(node, node instanceof Connector ? false : true);\n            if (data) {\n                // eslint-disable-next-line max-len\n                var url = node instanceof Connector ? this.dataSourceSettings.connectionDataSource.crudAction[crud] : this.dataSourceSettings.crudAction[crud];\n                this.raiseAjaxPost(JSON.stringify(data), url);\n            }\n            return data;\n        }\n        else {\n            var newObjects = getNodesCollection;\n            // eslint-disable-next-line max-len\n            this.processCrudCollection(newObjects, this.dataSourceSettings.crudAction[crud], this.dataSourceSettings.connectionDataSource.crudAction[crud]);\n            return newObjects;\n        }\n    };\n    Diagram.prototype.processCrudCollection = function (newObjects, nodeCrudAction, connectorCrudAction) {\n        if (newObjects.nodes) {\n            var data = [];\n            var i = void 0;\n            for (i = 0; i < newObjects.nodes.length; i++) {\n                data.push(this.parameterMap(newObjects.nodes[i], true));\n            }\n            if (data && data.length > 0) {\n                this.raiseAjaxPost(JSON.stringify(data), nodeCrudAction);\n            }\n        }\n        if (newObjects.connectors) {\n            var data = [];\n            var i = void 0;\n            for (i = 0; i < newObjects.connectors.length; i++) {\n                data.push(this.parameterMap(newObjects.connectors[i], false));\n            }\n            if (data && data.length > 0) {\n                this.raiseAjaxPost(JSON.stringify(data), connectorCrudAction);\n            }\n        }\n    };\n    Diagram.prototype.parameterMap = function (object, isNode) {\n        var mappingObj = {};\n        var i;\n        var fields = isNode ? this.dataSourceSettings : this.dataSourceSettings.connectionDataSource;\n        if (fields.id) {\n            mappingObj[fields.id] = object.id;\n        }\n        if (fields.sourcePointX && fields.sourcePointY) {\n            mappingObj[fields.sourcePointX] = object.sourcePoint.x;\n            mappingObj[fields.sourcePointY] = object.sourcePoint.y;\n        }\n        if (fields.targetPointX && fields.targetPointY) {\n            mappingObj[fields.targetPointX] = object.targetPoint.x;\n            mappingObj[fields.targetPointY] = object.targetPoint.y;\n        }\n        if (fields.sourceID) {\n            mappingObj[fields.sourceID] = object.sourceID;\n        }\n        if (fields.targetID) {\n            mappingObj[fields.targetID] = object.targetID;\n        }\n        if (fields.crudAction && fields.crudAction.customFields && fields.crudAction.customFields.length > 0) {\n            for (i = 0; i < fields.crudAction.customFields.length; i++) {\n                mappingObj[fields.crudAction.customFields[i]] = object[fields.crudAction.customFields[i]];\n            }\n        }\n        return mappingObj;\n    };\n    Diagram.prototype.getNewUpdateNodes = function (status) {\n        var nodes = [];\n        var connectors = [];\n        // eslint-disable-next-line guard-for-in\n        for (var name_1 in this.nameTable) {\n            var node = this.nameTable[name_1];\n            if (node.status === status) {\n                if (node && node instanceof Connector) {\n                    node.status = 'None';\n                    connectors.push(node);\n                }\n                else {\n                    node.status = 'None';\n                    nodes.push(node);\n                }\n            }\n        }\n        return { nodes: nodes, connectors: connectors };\n    };\n    Diagram.prototype.getDeletedNodes = function () {\n        var nodes = [];\n        var connectors = [];\n        var i;\n        for (i = 0; i < this.crudDeleteNodes.length; i++) {\n            var node = this.crudDeleteNodes[i];\n            if (node && node.segments) {\n                connectors.push(node);\n            }\n            else if (node) {\n                nodes.push(node);\n            }\n        }\n        this.crudDeleteNodes = [];\n        return { nodes: nodes, connectors: connectors };\n    };\n    Diagram.prototype.raiseAjaxPost = function (value, url) {\n        var callback = new Ajax(url, 'POST', true, 'application/json');\n        var data = JSON.stringify(JSON.parse(value));\n        callback.send(data).then();\n        /* eslint-disable */\n        callback.onSuccess = function (data) {\n        };\n        /* eslint-enable */\n    };\n    Diagram.prototype.getHiddenItems = function (args) {\n        var hiddenItems = [];\n        if (this.contextMenuModule) {\n            this.contextMenuModule.hiddenItems = [];\n            for (var _i = 0, _a = args.items; _i < _a.length; _i++) {\n                var item = _a[_i];\n                this.contextMenuModule.ensureItems(item, args.event);\n                if (item.items && item.items.length) {\n                    for (var _b = 0, _c = item.items; _b < _c.length; _b++) {\n                        var newItem = _c[_b];\n                        this.contextMenuModule.ensureItems(newItem, args.event);\n                    }\n                }\n            }\n            return this.contextMenuModule.hiddenItems;\n        }\n        return hiddenItems;\n    };\n    __decorate([\n        Property('100%')\n    ], Diagram.prototype, \"width\", void 0);\n    __decorate([\n        Property('SVG')\n    ], Diagram.prototype, \"mode\", void 0);\n    __decorate([\n        Property('100%')\n    ], Diagram.prototype, \"height\", void 0);\n    __decorate([\n        Complex({}, ContextMenuSettings)\n    ], Diagram.prototype, \"contextMenuSettings\", void 0);\n    __decorate([\n        Property(DiagramConstraints.Default)\n    ], Diagram.prototype, \"constraints\", void 0);\n    __decorate([\n        Property(DiagramTools.Default)\n    ], Diagram.prototype, \"tool\", void 0);\n    __decorate([\n        Property('Top')\n    ], Diagram.prototype, \"bridgeDirection\", void 0);\n    __decorate([\n        Property('transparent')\n    ], Diagram.prototype, \"backgroundColor\", void 0);\n    __decorate([\n        Complex({}, SnapSettings)\n    ], Diagram.prototype, \"snapSettings\", void 0);\n    __decorate([\n        Complex({}, RulerSettings)\n    ], Diagram.prototype, \"rulerSettings\", void 0);\n    __decorate([\n        Complex({}, PageSettings)\n    ], Diagram.prototype, \"pageSettings\", void 0);\n    __decorate([\n        Complex({}, SerializationSettings)\n    ], Diagram.prototype, \"serializationSettings\", void 0);\n    __decorate([\n        Collection([], Node)\n    ], Diagram.prototype, \"nodes\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"drawingObject\", void 0);\n    __decorate([\n        Collection([], Connector)\n    ], Diagram.prototype, \"connectors\", void 0);\n    __decorate([\n        Property([])\n    ], Diagram.prototype, \"basicElements\", void 0);\n    __decorate([\n        Complex({}, DiagramTooltip)\n    ], Diagram.prototype, \"tooltip\", void 0);\n    __decorate([\n        Complex({}, DataSource)\n    ], Diagram.prototype, \"dataSourceSettings\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"addInfo\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"historyManager\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"nodeTemplate\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"annotationTemplate\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"userHandleTemplate\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getNodeDefaults\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"nodeDefaults\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getConnectorDefaults\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"connectorDefaults\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"setNodeTemplate\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getDescription\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getCustomProperty\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getCustomTool\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getCustomCursor\", void 0);\n    __decorate([\n        Collection([], CustomCursorAction)\n    ], Diagram.prototype, \"customCursor\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"updateSelection\", void 0);\n    __decorate([\n        Complex({}, DiagramSettings)\n    ], Diagram.prototype, \"diagramSettings\", void 0);\n    __decorate([\n        Complex({}, Selector)\n    ], Diagram.prototype, \"selectedItems\", void 0);\n    __decorate([\n        Complex({}, ScrollSettings)\n    ], Diagram.prototype, \"scrollSettings\", void 0);\n    __decorate([\n        Complex({}, Layout)\n    ], Diagram.prototype, \"layout\", void 0);\n    __decorate([\n        Complex({}, CommandManager)\n    ], Diagram.prototype, \"commandManager\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"dataLoaded\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"dragEnter\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"dragLeave\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"dragOver\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"click\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"historyChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"historyStateChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"doubleClick\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"textEdit\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"scrollChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"selectionChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"sizeChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"connectionChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"sourcePointChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"targetPointChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"propertyChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"positionChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"keyUp\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"keyDown\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"animationComplete\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"rotateChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"collectionChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"fixedUserHandleClick\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"onUserHandleMouseDown\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"onUserHandleMouseUp\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"onUserHandleMouseEnter\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"onUserHandleMouseLeave\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"segmentCollectionChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"onImageLoad\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"expandStateChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"mouseEnter\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"mouseLeave\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"mouseOver\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"contextMenuOpen\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"contextMenuBeforeItemRender\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"contextMenuClick\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"commandExecute\", void 0);\n    __decorate([\n        Collection([], Layer)\n    ], Diagram.prototype, \"layers\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"drop\", void 0);\n    return Diagram;\n}(Component));\nexport { Diagram };\n"]},"metadata":{},"sourceType":"module"}