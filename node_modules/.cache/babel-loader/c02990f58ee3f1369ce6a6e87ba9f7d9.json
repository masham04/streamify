{"ast":null,"code":"import { Node } from './../objects/node';\nimport { NodeConstraints, ConnectorConstraints, DiagramConstraints, DiagramTools, DiagramAction, RendererAction } from '../enum/enum';\nimport { AnnotationConstraints, PortConstraints } from '../enum/enum';\nimport { Connector } from './../objects/connector';\nimport { Selector } from './../objects/node';\nimport { ShapeAnnotation, PathAnnotation } from '../objects/annotation';\n/**\n * constraints-util module contains the common constraints \\\n *\n * @returns { number }   constraints-util module contains the common constraints  .\\\n *\n * @param {ConnectorModel | NodeModel | PathAnnotationModel | ShapeAnnotationModel} node - Provide the DiagramElement value.\n * @private\n */\n\nexport function canSelect(node) {\n  if (node) {\n    var state = 0;\n\n    if (node instanceof ShapeAnnotation || node instanceof PathAnnotation) {\n      state = node.constraints & AnnotationConstraints.Select;\n    } else if (node instanceof Connector) {\n      state = node.constraints & ConnectorConstraints.Select;\n    } else {\n      state = node.constraints & NodeConstraints.Select;\n    }\n\n    return state;\n  }\n\n  return 1;\n}\n/**\n * Used to check whether we can move the objects ot not\\\n *\n * @returns { number }   Used to check whether we can move the objects ot not  .\\\n *\n * @param {ConnectorModel | NodeModel | PathAnnotationModel | ShapeAnnotationModel} node - Used to check whether we can move the objects ot not.\n * @private\n */\n\nexport function canMove(node) {\n  if (node) {\n    var state = 0;\n\n    if (node instanceof ShapeAnnotation || node instanceof PathAnnotation) {\n      state = node.constraints & AnnotationConstraints.Drag;\n    } else if (node instanceof Connector) {\n      state = node.constraints & ConnectorConstraints.Drag;\n    } else if (node instanceof Selector) {\n      state = 1;\n    } else {\n      state = node.constraints & NodeConstraints.Drag;\n    }\n\n    return state;\n  }\n\n  return 1;\n}\n/**\n * Used to check the canEnablePointerEvents\\\n *\n * @returns { number }   Used to check whether we can move the objects ot not  .\\\n *\n * @param {ConnectorModel | NodeModel} node - Used to check whether we can move the objects ot not.\n * @param {Diagram} diagram - Used to check whether we can move the objects ot not.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function canEnablePointerEvents(node, diagram) {\n  var state = 0;\n\n  if (node instanceof Connector) {\n    state = node.constraints & ConnectorConstraints.PointerEvents;\n  } else {\n    state = node.constraints & NodeConstraints.PointerEvents;\n  }\n\n  return state;\n}\n/**\n * Used to check the canDelete of the element \\\n *\n * @returns { number }   Used to check the canDelete of the element   .\\\n *\n * @param {ConnectorModel | NodeModel} node - Used to check whether we can move the objects ot not.\n * @private\n */\n\nexport function canDelete(node) {\n  var state = 0;\n\n  if (node instanceof Connector) {\n    state = node.constraints & ConnectorConstraints.Delete;\n  } else {\n    state = node.constraints & NodeConstraints.Delete;\n  }\n\n  return state;\n}\n/**\n * Used to check the bridging of the element \\\n *\n * @returns { number }   Used to check the bridging of the element   .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @param {ConnectorModel | NodeModel} diagram - provide the diagram value.\n * @private\n */\n\nexport function canBridge(connector, diagram) {\n  var state = 0;\n\n  if (connector.constraints & ConnectorConstraints.Bridging) {\n    state = connector.constraints & ConnectorConstraints.Bridging;\n  } else if (connector.constraints & ConnectorConstraints.InheritBridging) {\n    state = diagram.constraints & DiagramConstraints.Bridging;\n  } else {\n    state = 0;\n  }\n\n  return state;\n}\n/**\n * Used to check the routing  of the element \\\n *\n * @returns { number }   Used to check the routing  of the element .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @param {ConnectorModel | NodeModel} diagram - provide the diagram value.\n * @private\n */\n\nexport function canEnableRouting(connector, diagram) {\n  var state = 0;\n\n  if (connector.constraints & ConnectorConstraints.LineRouting) {\n    state = connector.constraints & ConnectorConstraints.LineRouting;\n  } else if (connector.constraints & ConnectorConstraints.InheritLineRouting) {\n    state = diagram.constraints & DiagramConstraints.LineRouting;\n  }\n\n  return state;\n}\n/**\n * Used to check the  source end dragof the element \\\n *\n * @returns { number }   Used to check the  source end dragof the element. \\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @private\n */\n\nexport function canDragSourceEnd(connector) {\n  return connector.constraints & ConnectorConstraints.DragSourceEnd;\n}\n/**\n * Used to check the target end drag   of the element \\\n *\n * @returns { number }   Used to check the target end drag   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @private\n */\n\nexport function canDragTargetEnd(connector) {\n  return connector.constraints & ConnectorConstraints.DragTargetEnd;\n}\n/**\n * Used to check the segment  drag   of the element \\\n *\n * @returns { number }   Used to check the segment  drag   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @private\n */\n\nexport function canDragSegmentThumb(connector) {\n  return connector.constraints & ConnectorConstraints.DragSegmentThumb;\n}\n/**\n * Used to check the routing  drag   of the element \\\n *\n * @returns { number }   Used to check the segment  drag   of the element .\\\n *\n * @param {NodeModel | ShapeAnnotationModel | PathAnnotationModel} node - provide the connector value.\n * @private\n */\n\nexport function canRotate(node) {\n  if (node instanceof ShapeAnnotation || node instanceof PathAnnotation) {\n    return node.constraints & AnnotationConstraints.Rotate;\n  } else {\n    return node.constraints & NodeConstraints.Rotate;\n  }\n}\n/**\n * Used to check shadown constraints   of the element \\\n *\n * @returns { number }   Used to check shadown constraints   of the element .\\\n *\n * @param {NodeModel} node - provide the connector value.\n * @private\n */\n\nexport function canShadow(node) {\n  return node.constraints & NodeConstraints.Shadow;\n}\n/**\n * Used to check canInConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {NodeModel} node - provide the node value.\n * @private\n */\n\nexport function canInConnect(node) {\n  if (node instanceof Node && node.constraints & NodeConstraints.InConnect) {\n    return node.constraints & NodeConstraints.InConnect;\n  }\n\n  return 0;\n}\n/**\n * Used to check canPortInConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel} port - provide the PointPortModel value.\n * @private\n */\n\nexport function canPortInConnect(port) {\n  if (port && port.constraints) {\n    if (!(port.constraints & PortConstraints.None) && port.constraints & PortConstraints.InConnect) {\n      return port.constraints & PortConstraints.InConnect;\n    }\n  }\n\n  return 0;\n}\n/**\n * Used to check canOutConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {NodeModel} node - provide the node value.\n * @private\n */\n\nexport function canOutConnect(node) {\n  if (node instanceof Node && node.constraints & NodeConstraints.OutConnect) {\n    return node.constraints & NodeConstraints.OutConnect;\n  }\n\n  return 0;\n}\n/**\n * Used to check canPortOutConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel} port - provide the node value.\n * @private\n */\n\nexport function canPortOutConnect(port) {\n  if (port && port.constraints) {\n    if (!(port.constraints & PortConstraints.None) && port.constraints & PortConstraints.OutConnect) {\n      return port.constraints & PortConstraints.OutConnect;\n    }\n  }\n\n  return 0;\n}\n/**\n * Used to check canResize constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {NodeModel | ShapeAnnotationModel | PathAnnotationModel} node - provide the node value.\n * @param {NodeModel | ShapeAnnotationModel | PathAnnotationModel} direction - provide the node value.\n * @private\n */\n\nexport function canResize(node, direction) {\n  var returnValue = 0;\n\n  if (node instanceof ShapeAnnotation || node instanceof PathAnnotation) {\n    returnValue = node.constraints & AnnotationConstraints.Resize;\n  } else if (node) {\n    if (direction === 'SouthEast') {\n      returnValue = node.constraints & NodeConstraints.ResizeSouthEast;\n    } else if (direction === 'East') {\n      returnValue = node.constraints & NodeConstraints.ResizeEast;\n    } else if (direction === 'NorthEast') {\n      returnValue = node.constraints & NodeConstraints.ResizeNorthEast;\n    } else if (direction === 'South') {\n      returnValue = node.constraints & NodeConstraints.ResizeSouth;\n    } else if (direction === 'North') {\n      returnValue = node.constraints & NodeConstraints.ResizeNorth;\n    } else if (direction === 'SouthWest') {\n      returnValue = node.constraints & NodeConstraints.ResizeSouthWest;\n    } else if (direction === 'West') {\n      returnValue = node.constraints & NodeConstraints.ResizeWest;\n    } else if (direction === 'NorthWest') {\n      returnValue = node.constraints & NodeConstraints.ResizeNorthWest;\n    }\n  }\n\n  return returnValue;\n}\n/**\n * Used to check canAllowDrop constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} node - provide the node value.\n * @private\n */\n\nexport function canAllowDrop(node) {\n  var state = 0;\n\n  if (node instanceof Connector) {\n    state = node.constraints & ConnectorConstraints.AllowDrop;\n  } else {\n    state = node.constraints & NodeConstraints.AllowDrop;\n  }\n\n  return state;\n}\n/**\n * Used to check canVitualize constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\n\nexport function canVitualize(diagram) {\n  return diagram.constraints & DiagramConstraints.Virtualization;\n}\n/**\n * Used to check canEnableToolTip constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} node - provide the node value.\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\n\nexport function canEnableToolTip(node, diagram) {\n  var state = 0;\n\n  if (node instanceof Connector) {\n    if (node.constraints & ConnectorConstraints.Tooltip) {\n      state = node.constraints & ConnectorConstraints.Tooltip;\n    } else if (node.constraints & ConnectorConstraints.InheritTooltip) {\n      state = diagram.constraints & DiagramConstraints.Tooltip;\n    }\n  } else {\n    if (node.constraints & NodeConstraints.Tooltip) {\n      state = node.constraints & NodeConstraints.Tooltip;\n    } else if (node.constraints & NodeConstraints.InheritTooltip) {\n      state = diagram.constraints & DiagramConstraints.Tooltip;\n    }\n  }\n\n  return state;\n}\n/**\n * Used to check canSingleSelect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canSingleSelect(model) {\n  return model.tool & DiagramTools.SingleSelect;\n}\n/**\n * Used to check canMultiSelect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canMultiSelect(model) {\n  return model.tool & DiagramTools.MultipleSelect;\n}\n/**\n * Used to check canZoomPan constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canZoomPan(model) {\n  return model.tool & DiagramTools.ZoomPan;\n}\n/**\n * Used to check canContinuousDraw constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canContinuousDraw(model) {\n  return model.tool & DiagramTools.ContinuousDraw;\n}\n/**\n * Used to check canDrawOnce constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canDrawOnce(model) {\n  return model.tool & DiagramTools.DrawOnce;\n}\n/**\n * Used to check defaultTool constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function defaultTool(model) {\n  return model.tool & DiagramTools.SingleSelect || model.tool & DiagramTools.MultipleSelect;\n}\n/**\n * Used to check canZoom constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canZoom(model) {\n  return model.constraints & DiagramConstraints.Zoom;\n}\n/**\n * Used to check canPan constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canPan(model) {\n  return model.constraints & DiagramConstraints.Pan;\n}\n/**\n * Used to check canUserInteract constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canUserInteract(model) {\n  return model.constraints & DiagramConstraints.UserInteraction;\n}\n/**\n * Used to check canApiInteract constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canApiInteract(model) {\n  return model.constraints & DiagramConstraints.ApiUpdate;\n}\n/**\n * Used to check canPanX constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canPanX(model) {\n  return model.constraints & DiagramConstraints.PanX;\n}\n/**\n * Used to check canPanY constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canPanY(model) {\n  return model.constraints & DiagramConstraints.PanY;\n}\n/**\n * Used to check canZoomTextEdit constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\n\nexport function canZoomTextEdit(diagram) {\n  return diagram.constraints & DiagramConstraints.ZoomTextEdit;\n}\n/**\n * Used to check canPageEditable constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\n\nexport function canPageEditable(model) {\n  return canApiInteract(model) || model.diagramActions & DiagramAction.ToolAction;\n}\n/**\n * Used to check enableReadOnly constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} annotation - provide the annotation value.\n * @param {Diagram} node - provide the node value.\n * @private\n */\n\nexport function enableReadOnly(annotation, node) {\n  var enumValue = 0;\n  enumValue = node instanceof Connector ? ConnectorConstraints.ReadOnly : NodeConstraints.ReadOnly;\n\n  if (node.shape.type === 'Text') {\n    return node.constraints & NodeConstraints.ReadOnly;\n  } else if (node.constraints & enumValue) {\n    if (annotation.constraints & AnnotationConstraints.InheritReadOnly) {\n      return 1;\n    } else {\n      return 0;\n    }\n  } else if (annotation.constraints & AnnotationConstraints.ReadOnly) {\n    return 1;\n  }\n\n  return 0;\n}\n/**\n * Used to check canDraw constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel | NodeModel} port - provide the Diagram value.\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function canDraw(port, diagram) {\n  return port.constraints & PortConstraints.Draw;\n}\n/**\n * Used to check canDrag constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel | NodeModel} port - provide the Diagram value.\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function canDrag(port, diagram) {\n  return port.constraints & PortConstraints.Drag;\n}\n/**\n * Used to check canPreventClearSelection constraints   of the element \\\n *\n * @returns { boolean }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel | NodeModel} diagramActions - provide the diagramActions value.\n * @private\n */\n\nexport function canPreventClearSelection(diagramActions) {\n  if (diagramActions & DiagramAction.PreventClearSelection) {\n    return true;\n  } else {\n    return false;\n  }\n}\n/**\n * Used to check canDrawThumbs \\\n *\n * @returns { boolean }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {RendererAction} rendererActions - provide the RendererAction value.\n * @private\n */\n\nexport function canDrawThumbs(rendererActions) {\n  if (!(rendererActions & RendererAction.DrawSelectorBorder)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n/**\n * Used to check avoidDrawSelector \\\n *\n * @returns { boolean }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {RendererAction} rendererActions - provide the RendererAction value.\n * @private\n */\n\nexport function avoidDrawSelector(rendererActions) {\n  if (rendererActions & RendererAction.PreventRenderSelector) {\n    return true;\n  } else {\n    return false;\n  }\n}","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/constraints-util.js"],"names":["Node","NodeConstraints","ConnectorConstraints","DiagramConstraints","DiagramTools","DiagramAction","RendererAction","AnnotationConstraints","PortConstraints","Connector","Selector","ShapeAnnotation","PathAnnotation","canSelect","node","state","constraints","Select","canMove","Drag","canEnablePointerEvents","diagram","PointerEvents","canDelete","Delete","canBridge","connector","Bridging","InheritBridging","canEnableRouting","LineRouting","InheritLineRouting","canDragSourceEnd","DragSourceEnd","canDragTargetEnd","DragTargetEnd","canDragSegmentThumb","DragSegmentThumb","canRotate","Rotate","canShadow","Shadow","canInConnect","InConnect","canPortInConnect","port","None","canOutConnect","OutConnect","canPortOutConnect","canResize","direction","returnValue","Resize","ResizeSouthEast","ResizeEast","ResizeNorthEast","ResizeSouth","ResizeNorth","ResizeSouthWest","ResizeWest","ResizeNorthWest","canAllowDrop","AllowDrop","canVitualize","Virtualization","canEnableToolTip","Tooltip","InheritTooltip","canSingleSelect","model","tool","SingleSelect","canMultiSelect","MultipleSelect","canZoomPan","ZoomPan","canContinuousDraw","ContinuousDraw","canDrawOnce","DrawOnce","defaultTool","canZoom","Zoom","canPan","Pan","canUserInteract","UserInteraction","canApiInteract","ApiUpdate","canPanX","PanX","canPanY","PanY","canZoomTextEdit","ZoomTextEdit","canPageEditable","diagramActions","ToolAction","enableReadOnly","annotation","enumValue","ReadOnly","shape","type","InheritReadOnly","canDraw","Draw","canDrag","canPreventClearSelection","PreventClearSelection","canDrawThumbs","rendererActions","DrawSelectorBorder","avoidDrawSelector","PreventRenderSelector"],"mappings":"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E,OAAjD;AACH;AACJ;;AACD,SAAOpD,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsD,eAAT,CAAyBC,KAAzB,EAAgC;AACnC,SAAOA,KAAK,CAACC,IAAN,GAAanE,YAAY,CAACoE,YAAjC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBH,KAAxB,EAA+B;AAClC,SAAOA,KAAK,CAACC,IAAN,GAAanE,YAAY,CAACsE,cAAjC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBL,KAApB,EAA2B;AAC9B,SAAOA,KAAK,CAACC,IAAN,GAAanE,YAAY,CAACwE,OAAjC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BP,KAA3B,EAAkC;AACrC,SAAOA,KAAK,CAACC,IAAN,GAAanE,YAAY,CAAC0E,cAAjC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBT,KAArB,EAA4B;AAC/B,SAAOA,KAAK,CAACC,IAAN,GAAanE,YAAY,CAAC4E,QAAjC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBX,KAArB,EAA4B;AAC/B,SAAQA,KAAK,CAACC,IAAN,GAAanE,YAAY,CAACoE,YAA3B,IAA6CF,KAAK,CAACC,IAAN,GAAanE,YAAY,CAACsE,cAA9E;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,OAAT,CAAiBZ,KAAjB,EAAwB;AAC3B,SAAOA,KAAK,CAACtD,WAAN,GAAoBb,kBAAkB,CAACgF,IAA9C;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBd,KAAhB,EAAuB;AAC1B,SAAOA,KAAK,CAACtD,WAAN,GAAoBb,kBAAkB,CAACkF,GA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","sourcesContent":["import { Node } from './../objects/node';\nimport { NodeConstraints, ConnectorConstraints, DiagramConstraints, DiagramTools, DiagramAction, RendererAction } from '../enum/enum';\nimport { AnnotationConstraints, PortConstraints } from '../enum/enum';\nimport { Connector } from './../objects/connector';\nimport { Selector } from './../objects/node';\nimport { ShapeAnnotation, PathAnnotation } from '../objects/annotation';\n/**\n * constraints-util module contains the common constraints \\\n *\n * @returns { number }   constraints-util module contains the common constraints  .\\\n *\n * @param {ConnectorModel | NodeModel | PathAnnotationModel | ShapeAnnotationModel} node - Provide the DiagramElement value.\n * @private\n */\nexport function canSelect(node) {\n    if (node) {\n        var state = 0;\n        if ((node instanceof ShapeAnnotation) || (node instanceof PathAnnotation)) {\n            state = node.constraints & AnnotationConstraints.Select;\n        }\n        else if (node instanceof Connector) {\n            state = node.constraints & ConnectorConstraints.Select;\n        }\n        else {\n            state = node.constraints & NodeConstraints.Select;\n        }\n        return state;\n    }\n    return 1;\n}\n/**\n * Used to check whether we can move the objects ot not\\\n *\n * @returns { number }   Used to check whether we can move the objects ot not  .\\\n *\n * @param {ConnectorModel | NodeModel | PathAnnotationModel | ShapeAnnotationModel} node - Used to check whether we can move the objects ot not.\n * @private\n */\nexport function canMove(node) {\n    if (node) {\n        var state = 0;\n        if ((node instanceof ShapeAnnotation) || (node instanceof PathAnnotation)) {\n            state = node.constraints & AnnotationConstraints.Drag;\n        }\n        else if (node instanceof Connector) {\n            state = node.constraints & ConnectorConstraints.Drag;\n        }\n        else if (node instanceof Selector) {\n            state = 1;\n        }\n        else {\n            state = node.constraints & NodeConstraints.Drag;\n        }\n        return state;\n    }\n    return 1;\n}\n/**\n * Used to check the canEnablePointerEvents\\\n *\n * @returns { number }   Used to check whether we can move the objects ot not  .\\\n *\n * @param {ConnectorModel | NodeModel} node - Used to check whether we can move the objects ot not.\n * @param {Diagram} diagram - Used to check whether we can move the objects ot not.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function canEnablePointerEvents(node, diagram) {\n    var state = 0;\n    if (node instanceof Connector) {\n        state = node.constraints & ConnectorConstraints.PointerEvents;\n    }\n    else {\n        state = node.constraints & NodeConstraints.PointerEvents;\n    }\n    return state;\n}\n/**\n * Used to check the canDelete of the element \\\n *\n * @returns { number }   Used to check the canDelete of the element   .\\\n *\n * @param {ConnectorModel | NodeModel} node - Used to check whether we can move the objects ot not.\n * @private\n */\nexport function canDelete(node) {\n    var state = 0;\n    if (node instanceof Connector) {\n        state = node.constraints & ConnectorConstraints.Delete;\n    }\n    else {\n        state = node.constraints & NodeConstraints.Delete;\n    }\n    return state;\n}\n/**\n * Used to check the bridging of the element \\\n *\n * @returns { number }   Used to check the bridging of the element   .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @param {ConnectorModel | NodeModel} diagram - provide the diagram value.\n * @private\n */\nexport function canBridge(connector, diagram) {\n    var state = 0;\n    if (connector.constraints & ConnectorConstraints.Bridging) {\n        state = connector.constraints & ConnectorConstraints.Bridging;\n    }\n    else if (connector.constraints & ConnectorConstraints.InheritBridging) {\n        state = diagram.constraints & DiagramConstraints.Bridging;\n    }\n    else {\n        state = 0;\n    }\n    return state;\n}\n/**\n * Used to check the routing  of the element \\\n *\n * @returns { number }   Used to check the routing  of the element .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @param {ConnectorModel | NodeModel} diagram - provide the diagram value.\n * @private\n */\nexport function canEnableRouting(connector, diagram) {\n    var state = 0;\n    if (connector.constraints & ConnectorConstraints.LineRouting) {\n        state = connector.constraints & ConnectorConstraints.LineRouting;\n    }\n    else if (connector.constraints & ConnectorConstraints.InheritLineRouting) {\n        state = diagram.constraints & DiagramConstraints.LineRouting;\n    }\n    return state;\n}\n/**\n * Used to check the  source end dragof the element \\\n *\n * @returns { number }   Used to check the  source end dragof the element. \\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @private\n */\nexport function canDragSourceEnd(connector) {\n    return connector.constraints & ConnectorConstraints.DragSourceEnd;\n}\n/**\n * Used to check the target end drag   of the element \\\n *\n * @returns { number }   Used to check the target end drag   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @private\n */\nexport function canDragTargetEnd(connector) {\n    return connector.constraints & ConnectorConstraints.DragTargetEnd;\n}\n/**\n * Used to check the segment  drag   of the element \\\n *\n * @returns { number }   Used to check the segment  drag   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} connector - provide the connector value.\n * @private\n */\nexport function canDragSegmentThumb(connector) {\n    return connector.constraints & ConnectorConstraints.DragSegmentThumb;\n}\n/**\n * Used to check the routing  drag   of the element \\\n *\n * @returns { number }   Used to check the segment  drag   of the element .\\\n *\n * @param {NodeModel | ShapeAnnotationModel | PathAnnotationModel} node - provide the connector value.\n * @private\n */\nexport function canRotate(node) {\n    if ((node instanceof ShapeAnnotation) || (node instanceof PathAnnotation)) {\n        return node.constraints & AnnotationConstraints.Rotate;\n    }\n    else {\n        return node.constraints & NodeConstraints.Rotate;\n    }\n}\n/**\n * Used to check shadown constraints   of the element \\\n *\n * @returns { number }   Used to check shadown constraints   of the element .\\\n *\n * @param {NodeModel} node - provide the connector value.\n * @private\n */\nexport function canShadow(node) {\n    return node.constraints & NodeConstraints.Shadow;\n}\n/**\n * Used to check canInConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {NodeModel} node - provide the node value.\n * @private\n */\nexport function canInConnect(node) {\n    if ((node instanceof Node) && (node.constraints & NodeConstraints.InConnect)) {\n        return node.constraints & NodeConstraints.InConnect;\n    }\n    return 0;\n}\n/**\n * Used to check canPortInConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel} port - provide the PointPortModel value.\n * @private\n */\nexport function canPortInConnect(port) {\n    if (port && port.constraints) {\n        if (!(port.constraints & PortConstraints.None) && (port.constraints & PortConstraints.InConnect)) {\n            return port.constraints & PortConstraints.InConnect;\n        }\n    }\n    return 0;\n}\n/**\n * Used to check canOutConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {NodeModel} node - provide the node value.\n * @private\n */\nexport function canOutConnect(node) {\n    if ((node instanceof Node) && (node.constraints & NodeConstraints.OutConnect)) {\n        return node.constraints & NodeConstraints.OutConnect;\n    }\n    return 0;\n}\n/**\n * Used to check canPortOutConnect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel} port - provide the node value.\n * @private\n */\nexport function canPortOutConnect(port) {\n    if (port && port.constraints) {\n        if (!(port.constraints & PortConstraints.None) && (port.constraints & PortConstraints.OutConnect)) {\n            return port.constraints & PortConstraints.OutConnect;\n        }\n    }\n    return 0;\n}\n/**\n * Used to check canResize constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {NodeModel | ShapeAnnotationModel | PathAnnotationModel} node - provide the node value.\n * @param {NodeModel | ShapeAnnotationModel | PathAnnotationModel} direction - provide the node value.\n * @private\n */\nexport function canResize(node, direction) {\n    var returnValue = 0;\n    if (node instanceof ShapeAnnotation || node instanceof PathAnnotation) {\n        returnValue = node.constraints & AnnotationConstraints.Resize;\n    }\n    else if (node) {\n        if (direction === 'SouthEast') {\n            returnValue = node.constraints & NodeConstraints.ResizeSouthEast;\n        }\n        else if (direction === 'East') {\n            returnValue = node.constraints & NodeConstraints.ResizeEast;\n        }\n        else if (direction === 'NorthEast') {\n            returnValue = node.constraints & NodeConstraints.ResizeNorthEast;\n        }\n        else if (direction === 'South') {\n            returnValue = node.constraints & NodeConstraints.ResizeSouth;\n        }\n        else if (direction === 'North') {\n            returnValue = node.constraints & NodeConstraints.ResizeNorth;\n        }\n        else if (direction === 'SouthWest') {\n            returnValue = node.constraints & NodeConstraints.ResizeSouthWest;\n        }\n        else if (direction === 'West') {\n            returnValue = node.constraints & NodeConstraints.ResizeWest;\n        }\n        else if (direction === 'NorthWest') {\n            returnValue = node.constraints & NodeConstraints.ResizeNorthWest;\n        }\n    }\n    return returnValue;\n}\n/**\n * Used to check canAllowDrop constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} node - provide the node value.\n * @private\n */\nexport function canAllowDrop(node) {\n    var state = 0;\n    if (node instanceof Connector) {\n        state = node.constraints & ConnectorConstraints.AllowDrop;\n    }\n    else {\n        state = node.constraints & NodeConstraints.AllowDrop;\n    }\n    return state;\n}\n/**\n * Used to check canVitualize constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\nexport function canVitualize(diagram) {\n    return diagram.constraints & DiagramConstraints.Virtualization;\n}\n/**\n * Used to check canEnableToolTip constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {ConnectorModel | NodeModel} node - provide the node value.\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\nexport function canEnableToolTip(node, diagram) {\n    var state = 0;\n    if (node instanceof Connector) {\n        if (node.constraints & ConnectorConstraints.Tooltip) {\n            state = node.constraints & ConnectorConstraints.Tooltip;\n        }\n        else if (node.constraints & ConnectorConstraints.InheritTooltip) {\n            state = diagram.constraints & DiagramConstraints.Tooltip;\n        }\n    }\n    else {\n        if (node.constraints & NodeConstraints.Tooltip) {\n            state = node.constraints & NodeConstraints.Tooltip;\n        }\n        else if (node.constraints & NodeConstraints.InheritTooltip) {\n            state = diagram.constraints & DiagramConstraints.Tooltip;\n        }\n    }\n    return state;\n}\n/**\n * Used to check canSingleSelect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canSingleSelect(model) {\n    return model.tool & DiagramTools.SingleSelect;\n}\n/**\n * Used to check canMultiSelect constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canMultiSelect(model) {\n    return model.tool & DiagramTools.MultipleSelect;\n}\n/**\n * Used to check canZoomPan constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canZoomPan(model) {\n    return model.tool & DiagramTools.ZoomPan;\n}\n/**\n * Used to check canContinuousDraw constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canContinuousDraw(model) {\n    return model.tool & DiagramTools.ContinuousDraw;\n}\n/**\n * Used to check canDrawOnce constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canDrawOnce(model) {\n    return model.tool & DiagramTools.DrawOnce;\n}\n/**\n * Used to check defaultTool constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function defaultTool(model) {\n    return (model.tool & DiagramTools.SingleSelect) || (model.tool & DiagramTools.MultipleSelect);\n}\n/**\n * Used to check canZoom constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canZoom(model) {\n    return model.constraints & DiagramConstraints.Zoom;\n}\n/**\n * Used to check canPan constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canPan(model) {\n    return model.constraints & DiagramConstraints.Pan;\n}\n/**\n * Used to check canUserInteract constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canUserInteract(model) {\n    return model.constraints & DiagramConstraints.UserInteraction;\n}\n/**\n * Used to check canApiInteract constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canApiInteract(model) {\n    return model.constraints & DiagramConstraints.ApiUpdate;\n}\n/**\n * Used to check canPanX constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canPanX(model) {\n    return ((model.constraints & DiagramConstraints.PanX));\n}\n/**\n * Used to check canPanY constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canPanY(model) {\n    return ((model.constraints & DiagramConstraints.PanY));\n}\n/**\n * Used to check canZoomTextEdit constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\nexport function canZoomTextEdit(diagram) {\n    return ((diagram.constraints & DiagramConstraints.ZoomTextEdit));\n}\n/**\n * Used to check canPageEditable constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} model - provide the Diagram value.\n * @private\n */\nexport function canPageEditable(model) {\n    return canApiInteract(model) || (model.diagramActions & DiagramAction.ToolAction);\n}\n/**\n * Used to check enableReadOnly constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {Diagram} annotation - provide the annotation value.\n * @param {Diagram} node - provide the node value.\n * @private\n */\nexport function enableReadOnly(annotation, node) {\n    var enumValue = 0;\n    enumValue = (node instanceof Connector) ? ConnectorConstraints.ReadOnly : NodeConstraints.ReadOnly;\n    if (node.shape.type === 'Text') {\n        return node.constraints & NodeConstraints.ReadOnly;\n    }\n    else if (node.constraints & enumValue) {\n        if (annotation.constraints & AnnotationConstraints.InheritReadOnly) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    else if (annotation.constraints & AnnotationConstraints.ReadOnly) {\n        return 1;\n    }\n    return 0;\n}\n/**\n * Used to check canDraw constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel | NodeModel} port - provide the Diagram value.\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function canDraw(port, diagram) {\n    return port.constraints & PortConstraints.Draw;\n}\n/**\n * Used to check canDrag constraints   of the element \\\n *\n * @returns { number }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel | NodeModel} port - provide the Diagram value.\n * @param {Diagram} diagram - provide the Diagram value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function canDrag(port, diagram) {\n    return port.constraints & PortConstraints.Drag;\n}\n/**\n * Used to check canPreventClearSelection constraints   of the element \\\n *\n * @returns { boolean }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {PointPortModel | NodeModel} diagramActions - provide the diagramActions value.\n * @private\n */\nexport function canPreventClearSelection(diagramActions) {\n    if (diagramActions & DiagramAction.PreventClearSelection) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/**\n * Used to check canDrawThumbs \\\n *\n * @returns { boolean }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {RendererAction} rendererActions - provide the RendererAction value.\n * @private\n */\nexport function canDrawThumbs(rendererActions) {\n    if (!(rendererActions & RendererAction.DrawSelectorBorder)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/**\n * Used to check avoidDrawSelector \\\n *\n * @returns { boolean }   Used to check canInConnect constraints   of the element .\\\n *\n * @param {RendererAction} rendererActions - provide the RendererAction value.\n * @private\n */\nexport function avoidDrawSelector(rendererActions) {\n    if ((rendererActions & RendererAction.PreventRenderSelector)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}