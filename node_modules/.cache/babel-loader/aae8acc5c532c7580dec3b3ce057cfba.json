{"ast":null,"code":"import { Rect } from '../primitives/rect';\nimport { getFunction } from '../utility/base-util';\nimport { HierarchicalTree } from './hierarchical-tree';\n/**\n * Layout for mind-map tree\n */\n\nvar MindMap =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the organizational chart module.\n   *\n   * @private\n   */\n  function MindMap() {\n    /**\n     * Defines the layout animation\n     *\n     */\n    this.isAnimation = false; //constructs the layout module\n  }\n  /**\n   * To destroy the organizational chart\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  MindMap.prototype.destroy = function () {\n    /**\n     * Destroy method performed here\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  MindMap.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the layout\n     */\n    return 'MindMapChart';\n  };\n  /**\n   * @param nodes\n   * @param nameTable\n   * @param layoutProp\n   * @param viewPort\n   * @param uniqueId\n   * @param root\n   * @private\n   */\n\n\n  MindMap.prototype.updateLayout = function (nodes, nameTable, layoutProp, viewPort, uniqueId, root) {\n    var isRoot = this.checkRoot(nodes, layoutProp, uniqueId, root, nameTable);\n\n    if (isRoot) {\n      layoutProp.fixedNode = isRoot;\n    } else {\n      for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n        var node = nodes_1[_i];\n\n        if (!node.excludeFromLayout) {\n          if (!node.inEdges || !node.inEdges.length) {\n            layoutProp.fixedNode = node.id;\n            break;\n          }\n        }\n      }\n    }\n\n    var rootNode = nameTable[layoutProp.fixedNode];\n    var fistLevelNodes = this.findFirstLevelNodes(rootNode, layoutProp, nameTable);\n    var leftNodes = [];\n    var rightNodes = [];\n    var getMindmapBranch = getFunction(layoutProp.getBranch);\n    getMindmapBranch = getMindmapBranch || getFunction(this.getBranch);\n\n    for (var _a = 0, fistLevelNodes_1 = fistLevelNodes; _a < fistLevelNodes_1.length; _a++) {\n      var node = fistLevelNodes_1[_a];\n      var align = getMindmapBranch(node, fistLevelNodes);\n      align = node && node.branch ? node.branch : align; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n      align === 'Left' ? leftNodes.push(node) : rightNodes.push(node);\n    }\n\n    var viewPortBounds = new Rect(0, 0, viewPort.x, viewPort.y);\n    nameTable[layoutProp.fixedNode].offsetX = viewPortBounds.x + viewPortBounds.width / 2;\n    nameTable[layoutProp.fixedNode].offsetY = viewPortBounds.y + viewPortBounds.height / 2;\n\n    if (leftNodes.length) {\n      this.updateMindMapBranch(nodes, rightNodes, nameTable, layoutProp, viewPort, uniqueId, 'Left');\n    }\n\n    if (rightNodes.length) {\n      this.updateMindMapBranch(nodes, leftNodes, nameTable, layoutProp, viewPort, uniqueId, 'Right');\n    }\n  };\n\n  MindMap.prototype.checkRoot = function (nodes, layoutProp, uniqueId, root, nameTable) {\n    for (var _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {\n      var node = nodes_2[_i];\n\n      if (!node.excludeFromLayout) {\n        if (node.data && (node.data[uniqueId].toString() === root || node.data[uniqueId].toString() === layoutProp.root)) {\n          return node.id;\n        } else if (!node.data && node.id === layoutProp.root) {\n          return node.id;\n        }\n      }\n    }\n\n    return '';\n  };\n\n  MindMap.prototype.updateMindMapBranch = function (nodes, excludeNodes, nameTable, layoutProp, viewPort, uniqueId, side) {\n    var layout = {\n      type: 'HierarchicalTree',\n      horizontalSpacing: layoutProp.verticalSpacing,\n      verticalSpacing: layoutProp.horizontalSpacing,\n      verticalAlignment: layoutProp.verticalAlignment,\n      horizontalAlignment: layoutProp.horizontalAlignment,\n      fixedNode: layoutProp.fixedNode,\n      getLayoutInfo: getFunction(layoutProp.getLayoutInfo),\n      layoutInfo: layoutProp.layoutInfo,\n      margin: layoutProp.margin,\n      root: layoutProp.fixedNode\n    };\n    layout.orientation = side === 'Left' ? 'LeftToRight' : 'RightToLeft';\n    this.excludeFromLayout(excludeNodes, nameTable, true);\n    var mapLayout = new HierarchicalTree();\n    mapLayout.updateLayout(nodes, nameTable, layout, viewPort, uniqueId);\n    this.excludeFromLayout(excludeNodes, nameTable, false);\n  };\n\n  MindMap.prototype.getBranch = function (obj, firstLevelNodes) {\n    var side;\n    var i = firstLevelNodes.indexOf(obj);\n\n    if (i % 2 === 0) {\n      side = 'Left';\n    } else {\n      side = 'Right';\n    }\n\n    return side;\n  };\n\n  MindMap.prototype.excludeFromLayout = function (newCollection, nameTable, exclude) {\n    for (var _i = 0, newCollection_1 = newCollection; _i < newCollection_1.length; _i++) {\n      var newcol = newCollection_1[_i];\n      var node = nameTable[newcol.id];\n      node.excludeFromLayout = exclude;\n    }\n  };\n\n  MindMap.prototype.findFirstLevelNodes = function (node, layout, nameTable) {\n    var parentNode;\n    var fistLevelNodes = [];\n\n    if (node && node.outEdges.length) {\n      for (var _i = 0, _a = node.outEdges; _i < _a.length; _i++) {\n        var outEdge = _a[_i];\n        fistLevelNodes.push(nameTable[nameTable[outEdge].targetID]);\n      }\n    }\n\n    return fistLevelNodes;\n  };\n\n  return MindMap;\n}();\n\nexport { MindMap };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/layout/mind-map.js"],"names":["Rect","getFunction","HierarchicalTree","MindMap","isAnimation","prototype","destroy","getModuleName","updateLayout","nodes","nameTable","layoutProp","viewPort","uniqueId","root","isRoot","checkRoot","fixedNode","_i","nodes_1","length","node","excludeFromLayout","inEdges","id","rootNode","fistLevelNodes","findFirstLevelNodes","leftNodes","rightNodes","getMindmapBranch","getBranch","_a","fistLevelNodes_1","align","branch","push","viewPortBounds","x","y","offsetX","width","offsetY","height","updateMindMapBranch","nodes_2","data","toString","excludeNodes","side","layout","type","horizontalSpacing","verticalSpacing","verticalAlignment","horizontalAlignment","getLayoutInfo","layoutInfo","margin","orientation","mapLayout","obj","firstLevelNodes","i","indexOf","newCollection","exclude","newCollection_1","newcol","parentNode","outEdges","outEdge","targetID"],"mappings":"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","sourcesContent":["import { Rect } from '../primitives/rect';\nimport { getFunction } from '../utility/base-util';\nimport { HierarchicalTree } from './hierarchical-tree';\n/**\n * Layout for mind-map tree\n */\nvar MindMap = /** @class */ (function () {\n    /**\n     * Constructor for the organizational chart module.\n     *\n     * @private\n     */\n    function MindMap() {\n        /**\n         * Defines the layout animation\n         *\n         */\n        this.isAnimation = false;\n        //constructs the layout module\n    }\n    /**\n     * To destroy the organizational chart\n     *\n     * @returns {void}\n     * @private\n     */\n    MindMap.prototype.destroy = function () {\n        /**\n         * Destroy method performed here\n         */\n    };\n    /**\n     * Get module name.\n     */\n    MindMap.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the layout\n         */\n        return 'MindMapChart';\n    };\n    /**\n     * @param nodes\n     * @param nameTable\n     * @param layoutProp\n     * @param viewPort\n     * @param uniqueId\n     * @param root\n     * @private\n     */\n    MindMap.prototype.updateLayout = function (nodes, nameTable, layoutProp, viewPort, uniqueId, root) {\n        var isRoot = this.checkRoot(nodes, layoutProp, uniqueId, root, nameTable);\n        if (isRoot) {\n            layoutProp.fixedNode = isRoot;\n        }\n        else {\n            for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n                var node = nodes_1[_i];\n                if (!node.excludeFromLayout) {\n                    if (!node.inEdges || !node.inEdges.length) {\n                        layoutProp.fixedNode = node.id;\n                        break;\n                    }\n                }\n            }\n        }\n        var rootNode = nameTable[layoutProp.fixedNode];\n        var fistLevelNodes = this.findFirstLevelNodes(rootNode, layoutProp, nameTable);\n        var leftNodes = [];\n        var rightNodes = [];\n        var getMindmapBranch = getFunction(layoutProp.getBranch);\n        getMindmapBranch = getMindmapBranch || getFunction(this.getBranch);\n        for (var _a = 0, fistLevelNodes_1 = fistLevelNodes; _a < fistLevelNodes_1.length; _a++) {\n            var node = fistLevelNodes_1[_a];\n            var align = getMindmapBranch(node, fistLevelNodes);\n            align = node && node.branch ? node.branch : align;\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            (align === 'Left') ? leftNodes.push(node) : rightNodes.push(node);\n        }\n        var viewPortBounds = new Rect(0, 0, viewPort.x, viewPort.y);\n        nameTable[layoutProp.fixedNode].offsetX = viewPortBounds.x + viewPortBounds.width / 2;\n        nameTable[layoutProp.fixedNode].offsetY = viewPortBounds.y + viewPortBounds.height / 2;\n        if (leftNodes.length) {\n            this.updateMindMapBranch(nodes, rightNodes, nameTable, layoutProp, viewPort, uniqueId, 'Left');\n        }\n        if (rightNodes.length) {\n            this.updateMindMapBranch(nodes, leftNodes, nameTable, layoutProp, viewPort, uniqueId, 'Right');\n        }\n    };\n    MindMap.prototype.checkRoot = function (nodes, layoutProp, uniqueId, root, nameTable) {\n        for (var _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {\n            var node = nodes_2[_i];\n            if (!node.excludeFromLayout) {\n                if (node.data && (node.data[uniqueId].toString() === root || node.data[uniqueId].toString()\n                    === layoutProp.root)) {\n                    return node.id;\n                }\n                else if (!node.data && node.id === layoutProp.root) {\n                    return node.id;\n                }\n            }\n        }\n        return '';\n    };\n    MindMap.prototype.updateMindMapBranch = function (nodes, excludeNodes, nameTable, layoutProp, viewPort, uniqueId, side) {\n        var layout = {\n            type: 'HierarchicalTree',\n            horizontalSpacing: layoutProp.verticalSpacing, verticalSpacing: layoutProp.horizontalSpacing,\n            verticalAlignment: layoutProp.verticalAlignment, horizontalAlignment: layoutProp.horizontalAlignment,\n            fixedNode: layoutProp.fixedNode, getLayoutInfo: getFunction(layoutProp.getLayoutInfo),\n            layoutInfo: layoutProp.layoutInfo, margin: layoutProp.margin,\n            root: layoutProp.fixedNode\n        };\n        layout.orientation = (side === 'Left') ? 'LeftToRight' : 'RightToLeft';\n        this.excludeFromLayout(excludeNodes, nameTable, true);\n        var mapLayout = new HierarchicalTree();\n        mapLayout.updateLayout(nodes, nameTable, layout, viewPort, uniqueId);\n        this.excludeFromLayout(excludeNodes, nameTable, false);\n    };\n    MindMap.prototype.getBranch = function (obj, firstLevelNodes) {\n        var side;\n        var i = firstLevelNodes.indexOf(obj);\n        if (i % 2 === 0) {\n            side = 'Left';\n        }\n        else {\n            side = 'Right';\n        }\n        return side;\n    };\n    MindMap.prototype.excludeFromLayout = function (newCollection, nameTable, exclude) {\n        for (var _i = 0, newCollection_1 = newCollection; _i < newCollection_1.length; _i++) {\n            var newcol = newCollection_1[_i];\n            var node = nameTable[newcol.id];\n            node.excludeFromLayout = exclude;\n        }\n    };\n    MindMap.prototype.findFirstLevelNodes = function (node, layout, nameTable) {\n        var parentNode;\n        var fistLevelNodes = [];\n        if (node && node.outEdges.length) {\n            for (var _i = 0, _a = node.outEdges; _i < _a.length; _i++) {\n                var outEdge = _a[_i];\n                fistLevelNodes.push(nameTable[nameTable[outEdge].targetID]);\n            }\n        }\n        return fistLevelNodes;\n    };\n    return MindMap;\n}());\nexport { MindMap };\n"]},"metadata":{},"sourceType":"module"}