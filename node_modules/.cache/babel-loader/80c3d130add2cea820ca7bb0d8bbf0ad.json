{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/ban-types */\n\n\nimport { Component, Property } from '@syncfusion/ej2-base';\nimport { createSvgElement, createHtmlElement, setAttributeSvg } from '../diagram/utility/dom-util';\nimport { Size } from '../diagram/primitives/size';\nimport { getFunction } from '../diagram/utility/base-util';\n/**\n * Represents the Ruler component that measures the Diagram objects, indicate positions, and align Diagram elements.\n * ```html\n * <div id='ruler'>Show Ruler</div>\n * ```\n * ```typescript\n * <script>\n *   var rulerObj = new Ruler({ showRuler: true });\n *   rulerObj.appendTo('#ruler');\n * </script>\n * ```\n */\n\nvar Ruler =\n/** @class */\nfunction (_super) {\n  __extends(Ruler, _super);\n  /**\n   *  Constructor for creating the Ruler Component\n   *\n   * @param {RulerModel} options The ruler model.\n   * @param {string | HTMLElement} element The ruler element.\n   */\n\n\n  function Ruler(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    /**   @private  */\n\n\n    _this.offset = 0;\n    /**   @private  */\n\n    _this.scale = 1;\n    return _this;\n  }\n  /**\n   * Initializes the values of private members.\n   *\n   * @returns {void}  Initializes the values of private members.\n   * @private\n   */\n\n\n  Ruler.prototype.preRender = function () {\n    this.unWireEvents();\n    this.wireEvents();\n  };\n  /**\n   * Renders the rulers.\n   *\n   * @returns {void}  Renders the rulers.\n   * @private\n   */\n\n\n  Ruler.prototype.render = function () {\n    this.updateRulerGeometry();\n    this.renderComplete();\n  };\n  /**\n   * Core method to return the component name.\n   *\n   * @returns {string}  Core method to return the component name.\n   * @private\n   */\n\n\n  Ruler.prototype.getModuleName = function () {\n    return 'Ruler';\n  };\n  /**\n   *To destroy the ruler\n   *\n   * @returns {void} To destroy the ruler\n   */\n\n\n  Ruler.prototype.destroy = function () {\n    this.unWireEvents();\n    this.notify('destroy', {});\n\n    _super.prototype.destroy.call(this);\n\n    this.element.classList.remove('e-ruler');\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string}  Get the properties to be maintained in the persisted state.\n   */\n\n\n  Ruler.prototype.getPersistData = function () {\n    var keyEntity = ['loaded'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * Refreshes the ruler when the Ruler properties are updated\\\n   *\n   * @returns {  void}    Refreshes the ruler when the Ruler properties are updated .\\\n   * @param {RulerModel} newProp - provide the newProp value.\n   * @param {RulerModel} oldProp - provide the oldProp value.\n   * @private\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Ruler.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'length':\n        case 'interval':\n        case 'segmentWidth':\n        case 'tickAlignment':\n        case 'markerColor':\n        case 'thickness':\n          this.updateRuler();\n          break;\n      }\n    }\n  };\n\n  Ruler.prototype.updateRulerGeometry = function () {\n    this.element.style.textAlign = 'left';\n    this.renderRulerSpace();\n    this.updateRuler();\n  };\n\n  Ruler.prototype.renderRulerSpace = function () {\n    var rulerGeometry = this.getRulerGeometry();\n    var div = document.getElementById(this.element.id + '_ruler_space');\n\n    if (!div) {\n      div = createHtmlElement('div', {\n        'id': this.element.id + '_ruler_space',\n        'style': 'height:' + rulerGeometry.height + 'px;width:' + rulerGeometry.width + 'px;cssFloat:' + 'left;'\n      });\n      this.element.appendChild(div);\n    }\n\n    return div;\n  };\n\n  Ruler.prototype.updateRuler = function () {\n    var rulerSize = this.getRulerSize();\n    var rulerGeometry = this.getRulerGeometry();\n    var length = 0;\n    var offset = 0;\n    var availableSize = new Size();\n    var svg = this.getRulerSVG(rulerGeometry);\n\n    if (svg) {\n      length = this.length;\n      availableSize.height = rulerSize;\n      offset = this.offset;\n\n      if (length && length !== Infinity) {\n        var unitLength = length + this.segmentWidth;\n        var unitOffset = offset;\n        this.updateSegments(unitOffset, unitLength + Math.abs(unitOffset), svg, rulerSize);\n      }\n    }\n  };\n\n  Ruler.prototype.updateSegments = function (start, end, svg, rulerSize) {\n    var run = start;\n    var trans = {\n      trans: 0\n    };\n\n    while (run < end) {\n      var rulerSegment = this.getNewSegment(run, svg);\n\n      if (rulerSegment) {\n        svg.appendChild(rulerSegment.segment);\n        run = this.updateSegment(start, end, rulerSegment, run, trans, rulerSize);\n      }\n    }\n  };\n\n  Ruler.prototype.updateSegment = function (start, end, rulerSegment, run, trans, rulerSize) {\n    var segWidth = this.updateSegmentWidth(this.scale);\n\n    if (run === start) {\n      this.startValue = Math.floor(start / segWidth) * segWidth / this.scale;\n      this.startValue = this.startValue % 1 !== 0 ? Number(this.startValue.toFixed(1)) : this.startValue;\n      rulerSegment.label.textContent = this.startValue.toString();\n      this.defStartValue = run = this.startValue * this.scale;\n\n      if (this.orientation === 'Horizontal') {\n        this.hRulerOffset = start - run;\n      } else {\n        this.vRulerOffset = start - run;\n      }\n    } else {\n      this.startValue = run / this.scale;\n      this.startValue = this.startValue % 1 !== 0 ? Number(this.startValue.toFixed(1)) : this.startValue;\n      rulerSegment.label.textContent = this.startValue.toString();\n    }\n\n    this.updateTickLabel(rulerSegment, rulerSize);\n    var translate = this.orientation === 'Horizontal' ? trans.trans + 0.5 + ',0.5' : '0.5,' + (trans.trans + 0.5);\n    rulerSegment.segment.setAttribute('transform', 'translate(' + translate + ')');\n    trans.trans += segWidth;\n    run += segWidth;\n    return run;\n  };\n\n  Ruler.prototype.updateTickLabel = function (rulerSegment, rulerSize) {\n    var bBox = rulerSegment.segment.lastChild.getBBox();\n    var isHorizontal = this.orientation === 'Horizontal' ? true : false;\n    var isRightOrBottom = this.tickAlignment === 'RightOrBottom' ? true : false;\n    var x = isHorizontal ? 2 : 0;\n    var y = isHorizontal ? isRightOrBottom ? rulerSize / 2 + 11 / 2 - 11 / 2 : rulerSize / 2 + 11 / 2 : bBox.height;\n    var translate = isRightOrBottom ? -(bBox.width + 2) + ',' + (rulerSize / 2 - bBox.height) : -(bBox.width + 2) + ',' + (rulerSize / 2 - bBox.height / 2);\n    var attr = isHorizontal ? {\n      'x': x,\n      'y': y\n    } : {\n      'x': x,\n      'y': y,\n      'transform': 'rotate(270)' + 'translate(' + translate + ')'\n    };\n    setAttributeSvg(rulerSegment.segment.lastChild, attr);\n  };\n\n  Ruler.prototype.getNewSegment = function (run, svg) {\n    var segment = this.createNewTicks(run, svg);\n    var label = this.createTickLabel(svg, segment);\n    return {\n      segment: segment,\n      label: label\n    };\n  };\n\n  Ruler.prototype.createNewTicks = function (run, svg) {\n    var tick;\n    var tickInterval;\n    var segmentWidth = this.updateSegmentWidth(this.scale); //let g: SVGElement;\n\n    var attr = {\n      'class': 'e-ruler-segment'\n    };\n    var g = createSvgElement('g', attr);\n\n    for (var i = 0; i < this.interval; i++) {\n      tickInterval = segmentWidth / this.interval;\n      tick = this.createTick(svg, tickInterval, i + 1, run);\n      g.appendChild(tick);\n    }\n\n    return g;\n  };\n\n  Ruler.prototype.getLinePoint = function (svg, tickInterval, length) {\n    var segmentWidth = this.updateSegmentWidth(this.scale);\n    var rulerSize = this.getRulerSize();\n    tickInterval = tickInterval * (length - 1);\n    length = tickInterval % segmentWidth === 0 ? rulerSize : rulerSize * 0.3;\n    return length;\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Ruler.prototype.createTick = function (svg, tickInterval, length, run) {\n    var ruler; //let line: SVGElement;\n\n    var linePoint = this.getLinePoint(svg, tickInterval, length);\n    var rulerSize = this.getRulerSize(); //let args: IArrangeTickOptions;\n    //let attr: Object;\n\n    var isHorizontal = this.orientation === 'Horizontal' ? true : false;\n    var isRightOrBottom = this.tickAlignment === 'RightOrBottom' ? true : false;\n    var arrangeTick = getFunction(this.arrangeTick); // eslint-disable-next-line\n\n    var args = {\n      ruler: ruler,\n      tickLength: linePoint,\n      tickInterval: this.segmentWidth / this.interval * (length - 1)\n    };\n\n    if (arrangeTick) {\n      arrangeTick(args);\n    }\n\n    linePoint = args.tickLength;\n    var point = tickInterval * (length - 1);\n    var x1 = isHorizontal ? point : isRightOrBottom ? rulerSize : 0;\n    var x2 = isHorizontal ? point : isRightOrBottom ? rulerSize - linePoint : rulerSize - (rulerSize - linePoint);\n    var y1 = isHorizontal ? isRightOrBottom ? rulerSize : rulerSize - (rulerSize - linePoint) : point;\n    var y2 = isHorizontal ? isRightOrBottom ? rulerSize - linePoint : 0 : point;\n    var attr = {\n      'x1': x1,\n      'y1': y1,\n      'x2': x2,\n      'y2': y2,\n      'stroke-width': '1',\n      'stroke': 'black'\n    };\n    var line = createSvgElement('line', attr);\n    line.setAttribute('class', 'e-ruler-tick');\n    return line;\n  };\n\n  Ruler.prototype.createTickLabel = function (svg, segment) {\n    var text;\n\n    if (segment) {\n      var attr = {\n        'class': 'e-ruler-tick-label'\n      };\n      text = createSvgElement('text', attr);\n      segment.appendChild(text);\n    }\n\n    return text;\n  };\n  /**\n   * @private\n   * @param {number} scale\n   */\n\n  /**\n   * updateSegmentWidth method\\\n   *\n   * @returns {number}    updateSegmentWidth method .\\\n   * @param {string} scale - provide the scale value.\n   *\n   * @private\n   */\n\n\n  Ruler.prototype.updateSegmentWidth = function (scale) {\n    if (this.segmentWidth !== 100) {\n      return this.segmentWidth;\n    }\n\n    var five = 25;\n    var multiples = 1;\n    var div; //let scaleRound: number;\n\n    var fifty = 100;\n    var scaleRound = Math.pow(2, Math.round(Math.log(scale) / Math.log(2)));\n    div = fifty;\n    div = fifty / scaleRound;\n\n    while (div > 100) {\n      multiples /= 10;\n      div /= 10;\n    }\n\n    while (div < 25) {\n      multiples *= 10;\n      div *= 10;\n    }\n\n    if (div >= five && div % five !== 0) {\n      div = Math.round(div / five) * five;\n    }\n\n    return div * scale / multiples;\n  };\n\n  Ruler.prototype.createMarkerLine = function (rulerSvg, rulerObj, attr) {\n    var line;\n\n    if (rulerObj) {\n      line = rulerSvg.getElementById(rulerObj.id + '_marker');\n\n      if (line) {\n        line.parentNode.removeChild(line);\n      }\n\n      line = createSvgElement('line', attr);\n    }\n\n    return line;\n  };\n  /**\n   * updateSegmentWidth method\\\n   *\n   * @returns {void}    updateSegmentWidth method .\\\n   * @param {HTMLElement} rulerObj - Defines the ruler Object\n   * @param {PointModel} currentPoint - Defines the current point for ruler Object\n   * @param {number} offset - Defines the offset ruler Object\n   *\n   * @private\n   */\n\n\n  Ruler.prototype.drawRulerMarker = function (rulerObj, currentPoint, offset) {\n    var rulerSvg;\n    var rulerSize;\n    var scale;\n    var diff;\n    var i;\n    var attr;\n    var line;\n    var isHorizontal = this.orientation === 'Horizontal' ? true : false; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var rulerSvgElements = rulerObj.getElementsByTagName('svg');\n\n    for (i = 0; i < rulerSvgElements.length; i++) {\n      if (rulerSvgElements[i]) {\n        rulerSvg = rulerSvgElements[i];\n      }\n\n      break;\n    }\n\n    if (rulerSvg) {\n      rulerSize = this.getRulerSize();\n      attr = {\n        'id': rulerObj.id + '_marker',\n        'x1': 0,\n        'y1': 0,\n        'x2': isHorizontal ? 0 : rulerSize,\n        'y2': isHorizontal ? rulerSize : 0,\n        'stroke': this.markerColor,\n        'stroke-width': 1.5,\n        'class': 'e-d-ruler-marker'\n      };\n      line = this.createMarkerLine(rulerSvg, rulerObj, attr);\n      scale = this.scale;\n      diff = this.offset - this.defStartValue;\n      var point = isHorizontal ? currentPoint.x : currentPoint.y;\n      var move = point * scale + offset + diff;\n      line.setAttribute('transform', 'translate(' + (isHorizontal ? move + 0.5 + ' 0.5' : '0.5 ' + (move + 0.5)) + ')');\n      rulerSvg.appendChild(line);\n    }\n  };\n\n  Ruler.prototype.getRulerGeometry = function () {\n    return new Size(this.element ? this.element.getBoundingClientRect().width : 0, this.element ? this.element.getBoundingClientRect().height : 0);\n  };\n\n  Ruler.prototype.getRulerSize = function () {\n    return this.thickness;\n  };\n\n  Ruler.prototype.getRulerSVG = function (rulerGeometry) {\n    var rulerSpace;\n    var rulerSize = this.getRulerSize();\n    var svg;\n\n    if (this.element) {\n      rulerSpace = document.getElementById(this.element.id + '_ruler_space');\n\n      if (rulerSpace) {\n        var attr = {\n          'id': this.element.id + '_Ruler_svg',\n          width: this.orientation === 'Horizontal' ? rulerGeometry.width + 200 : rulerSize + 'px',\n          height: this.orientation === 'Horizontal' ? rulerSize : rulerGeometry.height + 200 + 'px',\n          style: 'position:inherit;'\n        };\n        svg = createSvgElement('svg', attr);\n\n        if (rulerSpace.childNodes.length > 0) {\n          for (var i = rulerSpace.childNodes.length - 1; i >= 0; i--) {\n            rulerSpace.childNodes[i].parentNode.removeChild(rulerSpace.childNodes[i]);\n          }\n        }\n\n        rulerSpace.appendChild(svg);\n      }\n    }\n\n    return svg;\n  };\n  /**\n   * Method to bind events for the ruler \\\n   *\n   * @returns {void}    Method to bind events for the ruler .\\\n   * @private\n   */\n\n\n  Ruler.prototype.wireEvents = function () {//wire Events\n  };\n  /**\n   *  Method to unbind events for the ruler \\\n   *\n   * @returns {void}     Method to unbind events for the ruler .\\\n   * @private\n   */\n\n\n  Ruler.prototype.unWireEvents = function () {//unWire Events\n  };\n\n  __decorate([Property(5)], Ruler.prototype, \"interval\", void 0);\n\n  __decorate([Property(100)], Ruler.prototype, \"segmentWidth\", void 0);\n\n  __decorate([Property('Horizontal')], Ruler.prototype, \"orientation\", void 0);\n\n  __decorate([Property('RightOrBottom')], Ruler.prototype, \"tickAlignment\", void 0);\n\n  __decorate([Property('red')], Ruler.prototype, \"markerColor\", void 0);\n\n  __decorate([Property(25)], Ruler.prototype, \"thickness\", void 0);\n\n  __decorate([Property(null)], Ruler.prototype, \"arrangeTick\", void 0);\n\n  __decorate([Property(400)], Ruler.prototype, \"length\", void 0);\n\n  return Ruler;\n}(Component);\n\nexport { Ruler };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/ruler/ruler.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Component","Property","createSvgElement","createHtmlElement","setAttributeSvg","Size","getFunction","Ruler","_super","options","element","_this","call","offset","scale","preRender","unWireEvents","wireEvents","render","updateRulerGeometry","renderComplete","getModuleName","destroy","notify","classList","remove","getPersistData","keyEntity","addOnPersist","onPropertyChanged","newProp","oldProp","_i","_a","keys","prop","updateRuler","style","textAlign","renderRulerSpace","rulerGeometry","getRulerGeometry","div","document","getElementById","id","height","width","appendChild","rulerSize","getRulerSize","availableSize","svg","getRulerSVG","Infinity","unitLength","segmentWidth","unitOffset","updateSegments","Math","abs","start","end","run","trans","rulerSegment","getNewSegment","segment","updateSegment","segWidth","updateSegmentWidth","startValue","floor","Number","toFixed","label","textContent","toString","defStartValue","orientation","hRulerOffset","vRulerOffset","updateTickLabel","translate","setAttribute","bBox","lastChild","getBBox","isHorizontal","isRightOrBottom","tickAlignment","x","y","attr","createNewTicks","createTickLabel","tick","tickInterval","g","interval","createTick","getLinePoint","ruler","linePoint","arrangeTick","args","tickLength","point","x1","x2","y1","y2","line","text","five","multiples","fifty","scaleRound","pow","round","log","createMarkerLine","rulerSvg","rulerObj","parentNode","removeChild","drawRulerMarker","currentPoint","diff","rulerSvgElements","getElementsByTagName","markerColor","move","getBoundingClientRect","thickness","rulerSpace","childNodes"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/ban-types */\nimport { Component, Property } from '@syncfusion/ej2-base';\nimport { createSvgElement, createHtmlElement, setAttributeSvg } from '../diagram/utility/dom-util';\nimport { Size } from '../diagram/primitives/size';\nimport { getFunction } from '../diagram/utility/base-util';\n/**\n * Represents the Ruler component that measures the Diagram objects, indicate positions, and align Diagram elements.\n * ```html\n * <div id='ruler'>Show Ruler</div>\n * ```\n * ```typescript\n * <script>\n *   var rulerObj = new Ruler({ showRuler: true });\n *   rulerObj.appendTo('#ruler');\n * </script>\n * ```\n */\nvar Ruler = /** @class */ (function (_super) {\n    __extends(Ruler, _super);\n    /**\n     *  Constructor for creating the Ruler Component\n     *\n     * @param {RulerModel} options The ruler model.\n     * @param {string | HTMLElement} element The ruler element.\n     */\n    function Ruler(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        /**   @private  */\n        _this.offset = 0;\n        /**   @private  */\n        _this.scale = 1;\n        return _this;\n    }\n    /**\n     * Initializes the values of private members.\n     *\n     * @returns {void}  Initializes the values of private members.\n     * @private\n     */\n    Ruler.prototype.preRender = function () {\n        this.unWireEvents();\n        this.wireEvents();\n    };\n    /**\n     * Renders the rulers.\n     *\n     * @returns {void}  Renders the rulers.\n     * @private\n     */\n    Ruler.prototype.render = function () {\n        this.updateRulerGeometry();\n        this.renderComplete();\n    };\n    /**\n     * Core method to return the component name.\n     *\n     * @returns {string}  Core method to return the component name.\n     * @private\n     */\n    Ruler.prototype.getModuleName = function () {\n        return 'Ruler';\n    };\n    /**\n     *To destroy the ruler\n     *\n     * @returns {void} To destroy the ruler\n     */\n    Ruler.prototype.destroy = function () {\n        this.unWireEvents();\n        this.notify('destroy', {});\n        _super.prototype.destroy.call(this);\n        this.element.classList.remove('e-ruler');\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string}  Get the properties to be maintained in the persisted state.\n     */\n    Ruler.prototype.getPersistData = function () {\n        var keyEntity = ['loaded'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * Refreshes the ruler when the Ruler properties are updated\\\n     *\n     * @returns {  void}    Refreshes the ruler when the Ruler properties are updated .\\\n     * @param {RulerModel} newProp - provide the newProp value.\n     * @param {RulerModel} oldProp - provide the oldProp value.\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Ruler.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'length':\n                case 'interval':\n                case 'segmentWidth':\n                case 'tickAlignment':\n                case 'markerColor':\n                case 'thickness':\n                    this.updateRuler();\n                    break;\n            }\n        }\n    };\n    Ruler.prototype.updateRulerGeometry = function () {\n        this.element.style.textAlign = 'left';\n        this.renderRulerSpace();\n        this.updateRuler();\n    };\n    Ruler.prototype.renderRulerSpace = function () {\n        var rulerGeometry = this.getRulerGeometry();\n        var div = document.getElementById(this.element.id + '_ruler_space');\n        if (!div) {\n            div = createHtmlElement('div', {\n                'id': this.element.id + '_ruler_space',\n                'style': 'height:' + rulerGeometry.height + 'px;width:' + rulerGeometry.width + 'px;cssFloat:' + 'left;'\n            });\n            this.element.appendChild(div);\n        }\n        return div;\n    };\n    Ruler.prototype.updateRuler = function () {\n        var rulerSize = this.getRulerSize();\n        var rulerGeometry = this.getRulerGeometry();\n        var length = 0;\n        var offset = 0;\n        var availableSize = new Size();\n        var svg = this.getRulerSVG(rulerGeometry);\n        if (svg) {\n            length = this.length;\n            availableSize.height = rulerSize;\n            offset = this.offset;\n            if (length && length !== Infinity) {\n                var unitLength = length + this.segmentWidth;\n                var unitOffset = offset;\n                this.updateSegments(unitOffset, (unitLength + Math.abs(unitOffset)), svg, rulerSize);\n            }\n        }\n    };\n    Ruler.prototype.updateSegments = function (start, end, svg, rulerSize) {\n        var run = start;\n        var trans = { trans: 0 };\n        while (run < end) {\n            var rulerSegment = this.getNewSegment(run, svg);\n            if (rulerSegment) {\n                svg.appendChild(rulerSegment.segment);\n                run = this.updateSegment(start, end, rulerSegment, run, trans, rulerSize);\n            }\n        }\n    };\n    Ruler.prototype.updateSegment = function (start, end, rulerSegment, run, trans, rulerSize) {\n        var segWidth = this.updateSegmentWidth(this.scale);\n        if (run === start) {\n            this.startValue = Math.floor(start / segWidth) * segWidth / this.scale;\n            this.startValue = (this.startValue % 1) !== 0 ? Number((this.startValue).toFixed(1)) : this.startValue;\n            rulerSegment.label.textContent = this.startValue.toString();\n            this.defStartValue = run = this.startValue * this.scale;\n            if (this.orientation === 'Horizontal') {\n                this.hRulerOffset = start - run;\n            }\n            else {\n                this.vRulerOffset = start - run;\n            }\n        }\n        else {\n            this.startValue = (run / this.scale);\n            this.startValue = (this.startValue % 1) !== 0 ? Number((this.startValue).toFixed(1)) : this.startValue;\n            rulerSegment.label.textContent = this.startValue.toString();\n        }\n        this.updateTickLabel(rulerSegment, rulerSize);\n        var translate = (this.orientation === 'Horizontal') ? ((trans.trans + 0.5) + ',0.5') : ('0.5,' + (trans.trans + 0.5));\n        rulerSegment.segment.setAttribute('transform', 'translate(' + translate + ')');\n        trans.trans += segWidth;\n        run += segWidth;\n        return run;\n    };\n    Ruler.prototype.updateTickLabel = function (rulerSegment, rulerSize) {\n        var bBox = rulerSegment.segment.lastChild.getBBox();\n        var isHorizontal = (this.orientation === 'Horizontal') ? true : false;\n        var isRightOrBottom = (this.tickAlignment === 'RightOrBottom') ? true : false;\n        var x = isHorizontal ? 2 : 0;\n        var y = isHorizontal ? (isRightOrBottom ? (rulerSize / 2 + (11 / 2) - (11 / 2)) :\n            (rulerSize / 2 + (11 / 2))) : bBox.height;\n        var translate = isRightOrBottom ? (-(bBox.width + 2) + ',' + ((rulerSize / 2) - bBox.height)) :\n            (-(bBox.width + 2) + ',' + ((rulerSize / 2) - bBox.height / 2));\n        var attr = isHorizontal ? { 'x': x, 'y': y } :\n            { 'x': x, 'y': y, 'transform': 'rotate(270)' + 'translate(' + translate + ')' };\n        setAttributeSvg(rulerSegment.segment.lastChild, attr);\n    };\n    Ruler.prototype.getNewSegment = function (run, svg) {\n        var segment = this.createNewTicks(run, svg);\n        var label = this.createTickLabel(svg, segment);\n        return { segment: segment, label: label };\n    };\n    Ruler.prototype.createNewTicks = function (run, svg) {\n        var tick;\n        var tickInterval;\n        var segmentWidth = this.updateSegmentWidth(this.scale);\n        //let g: SVGElement;\n        var attr = { 'class': 'e-ruler-segment' };\n        var g = createSvgElement('g', attr);\n        for (var i = 0; i < this.interval; i++) {\n            tickInterval = segmentWidth / this.interval;\n            tick = this.createTick(svg, tickInterval, i + 1, run);\n            g.appendChild(tick);\n        }\n        return g;\n    };\n    Ruler.prototype.getLinePoint = function (svg, tickInterval, length) {\n        var segmentWidth = this.updateSegmentWidth(this.scale);\n        var rulerSize = this.getRulerSize();\n        tickInterval = tickInterval * (length - 1);\n        length = ((tickInterval % segmentWidth) === 0) ? rulerSize : rulerSize * 0.3;\n        return length;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Ruler.prototype.createTick = function (svg, tickInterval, length, run) {\n        var ruler;\n        //let line: SVGElement;\n        var linePoint = this.getLinePoint(svg, tickInterval, length);\n        var rulerSize = this.getRulerSize();\n        //let args: IArrangeTickOptions;\n        //let attr: Object;\n        var isHorizontal = (this.orientation === 'Horizontal') ? true : false;\n        var isRightOrBottom = (this.tickAlignment === 'RightOrBottom') ? true : false;\n        var arrangeTick = getFunction(this.arrangeTick);\n        // eslint-disable-next-line\n        var args = { ruler: ruler, tickLength: linePoint, tickInterval: ((this.segmentWidth / this.interval) * (length - 1)) };\n        if (arrangeTick) {\n            arrangeTick(args);\n        }\n        linePoint = args.tickLength;\n        var point = tickInterval * (length - 1);\n        var x1 = isHorizontal ? point : (isRightOrBottom ? rulerSize : 0);\n        var x2 = isHorizontal ? point : (isRightOrBottom ? (rulerSize - linePoint) : (rulerSize - (rulerSize - linePoint)));\n        var y1 = isHorizontal ? (isRightOrBottom ? rulerSize : (rulerSize - (rulerSize - linePoint))) : point;\n        var y2 = isHorizontal ? (isRightOrBottom ? (rulerSize - linePoint) : 0) : point;\n        var attr = { 'x1': x1, 'y1': y1, 'x2': x2, 'y2': y2, 'stroke-width': '1', 'stroke': 'black' };\n        var line = createSvgElement('line', attr);\n        line.setAttribute('class', 'e-ruler-tick');\n        return line;\n    };\n    Ruler.prototype.createTickLabel = function (svg, segment) {\n        var text;\n        if (segment) {\n            var attr = { 'class': 'e-ruler-tick-label' };\n            text = createSvgElement('text', attr);\n            segment.appendChild(text);\n        }\n        return text;\n    };\n    /**\n     * @private\n     * @param {number} scale\n     */\n    /**\n     * updateSegmentWidth method\\\n     *\n     * @returns {number}    updateSegmentWidth method .\\\n     * @param {string} scale - provide the scale value.\n     *\n     * @private\n     */\n    Ruler.prototype.updateSegmentWidth = function (scale) {\n        if (this.segmentWidth !== 100) {\n            return this.segmentWidth;\n        }\n        var five = 25;\n        var multiples = 1;\n        var div;\n        //let scaleRound: number;\n        var fifty = 100;\n        var scaleRound = Math.pow(2, Math.round(Math.log(scale) / Math.log(2)));\n        div = fifty;\n        div = (fifty / scaleRound);\n        while (div > 100) {\n            multiples /= 10;\n            div /= 10;\n        }\n        while (div < 25) {\n            multiples *= 10;\n            div *= 10;\n        }\n        if (div >= five && div % five !== 0) {\n            div = Math.round(div / five) * five;\n        }\n        return div * scale / multiples;\n    };\n    Ruler.prototype.createMarkerLine = function (rulerSvg, rulerObj, attr) {\n        var line;\n        if (rulerObj) {\n            line = rulerSvg.getElementById(rulerObj.id + '_marker');\n            if (line) {\n                line.parentNode.removeChild(line);\n            }\n            line = createSvgElement('line', attr);\n        }\n        return line;\n    };\n    /**\n     * updateSegmentWidth method\\\n     *\n     * @returns {void}    updateSegmentWidth method .\\\n     * @param {HTMLElement} rulerObj - Defines the ruler Object\n     * @param {PointModel} currentPoint - Defines the current point for ruler Object\n     * @param {number} offset - Defines the offset ruler Object\n     *\n     * @private\n     */\n    Ruler.prototype.drawRulerMarker = function (rulerObj, currentPoint, offset) {\n        var rulerSvg;\n        var rulerSize;\n        var scale;\n        var diff;\n        var i;\n        var attr;\n        var line;\n        var isHorizontal = this.orientation === 'Horizontal' ? true : false;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var rulerSvgElements = rulerObj.getElementsByTagName('svg');\n        for (i = 0; i < rulerSvgElements.length; i++) {\n            if (rulerSvgElements[i]) {\n                rulerSvg = rulerSvgElements[i];\n            }\n            break;\n        }\n        if (rulerSvg) {\n            rulerSize = this.getRulerSize();\n            attr = {\n                'id': rulerObj.id + '_marker', 'x1': 0, 'y1': 0, 'x2': (isHorizontal ? 0 : rulerSize),\n                'y2': (isHorizontal ? rulerSize : 0), 'stroke': this.markerColor, 'stroke-width': 1.5,\n                'class': 'e-d-ruler-marker'\n            };\n            line = this.createMarkerLine(rulerSvg, rulerObj, attr);\n            scale = this.scale;\n            diff = this.offset - this.defStartValue;\n            var point = isHorizontal ? currentPoint.x : currentPoint.y;\n            var move = (point * scale) + offset + diff;\n            line.setAttribute('transform', 'translate(' + (isHorizontal ? ((move + 0.5) + ' 0.5') : ('0.5 ' + (move + 0.5))) + ')');\n            rulerSvg.appendChild(line);\n        }\n    };\n    Ruler.prototype.getRulerGeometry = function () {\n        return new Size(this.element ? this.element.getBoundingClientRect().width : 0, this.element ? this.element.getBoundingClientRect().height : 0);\n    };\n    Ruler.prototype.getRulerSize = function () {\n        return this.thickness;\n    };\n    Ruler.prototype.getRulerSVG = function (rulerGeometry) {\n        var rulerSpace;\n        var rulerSize = this.getRulerSize();\n        var svg;\n        if (this.element) {\n            rulerSpace = document.getElementById(this.element.id + '_ruler_space');\n            if (rulerSpace) {\n                var attr = {\n                    'id': this.element.id + '_Ruler_svg',\n                    width: this.orientation === 'Horizontal' ? (rulerGeometry.width + 200) : rulerSize + 'px',\n                    height: this.orientation === 'Horizontal' ? rulerSize : (rulerGeometry.height + 200) + 'px',\n                    style: 'position:inherit;'\n                };\n                svg = createSvgElement('svg', attr);\n                if (rulerSpace.childNodes.length > 0) {\n                    for (var i = rulerSpace.childNodes.length - 1; i >= 0; i--) {\n                        rulerSpace.childNodes[i].parentNode.removeChild(rulerSpace.childNodes[i]);\n                    }\n                }\n                rulerSpace.appendChild(svg);\n            }\n        }\n        return svg;\n    };\n    /**\n     * Method to bind events for the ruler \\\n     *\n     * @returns {void}    Method to bind events for the ruler .\\\n     * @private\n     */\n    Ruler.prototype.wireEvents = function () {\n        //wire Events\n    };\n    /**\n     *  Method to unbind events for the ruler \\\n     *\n     * @returns {void}     Method to unbind events for the ruler .\\\n     * @private\n     */\n    Ruler.prototype.unWireEvents = function () {\n        //unWire Events\n    };\n    __decorate([\n        Property(5)\n    ], Ruler.prototype, \"interval\", void 0);\n    __decorate([\n        Property(100)\n    ], Ruler.prototype, \"segmentWidth\", void 0);\n    __decorate([\n        Property('Horizontal')\n    ], Ruler.prototype, \"orientation\", void 0);\n    __decorate([\n        Property('RightOrBottom')\n    ], Ruler.prototype, \"tickAlignment\", void 0);\n    __decorate([\n        Property('red')\n    ], Ruler.prototype, \"markerColor\", void 0);\n    __decorate([\n        Property(25)\n    ], Ruler.prototype, \"thickness\", void 0);\n    __decorate([\n        Property(null)\n    ], Ruler.prototype, \"arrangeTick\", void 0);\n    __decorate([\n        Property(400)\n    ], Ruler.prototype, \"length\", void 0);\n    return Ruler;\n}(Component));\nexport { Ruler };\n"]},"metadata":{},"sourceType":"module"}