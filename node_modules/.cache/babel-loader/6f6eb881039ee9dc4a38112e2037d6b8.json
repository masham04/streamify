{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Size } from '../../primitives/size';\nimport { DiagramElement } from './diagram-element';\nimport { measureText } from './../../utility/dom-util';\n/**\n * TextElement is used to display text/annotations\n */\n\nvar TextElement =\n/** @class */\nfunction (_super) {\n  __extends(TextElement, _super);\n  /**\n   * set the id for each element\n   */\n\n\n  function TextElement() {\n    var _this = _super.call(this) || this;\n    /**\n     * sets or gets the image source\n     */\n\n\n    _this.textContent = '';\n    /** @private */\n\n    _this.canMeasure = true;\n    /** @private */\n\n    _this.isLaneOrientation = false;\n    /** @private */\n\n    _this.canConsiderBounds = true;\n    /**\n     * sets the hyperlink color to blue\n     */\n\n    _this.hyperlink = {\n      color: 'blue'\n    };\n    /** @private */\n\n    _this.doWrap = true;\n    _this.textNodes = [];\n    /**\n     * Defines the appearance of the text element\n     */\n\n    _this.style = {\n      color: 'black',\n      fill: 'transparent',\n      strokeColor: 'black',\n      strokeWidth: 1,\n      fontFamily: 'Arial',\n      fontSize: 12,\n      whiteSpace: 'CollapseSpace',\n      textWrapping: 'WrapWithOverflow',\n      textAlign: 'Center',\n      italic: false,\n      bold: false,\n      textDecoration: 'None',\n      strokeDashArray: '',\n      opacity: 5,\n      gradient: null,\n      textOverflow: 'Wrap'\n    };\n    _this.style.fill = 'transparent';\n    _this.style.strokeColor = 'transparent';\n    return _this;\n  }\n\n  Object.defineProperty(TextElement.prototype, \"content\", {\n    /**\n     *   gets the content for the text element \\\n     *\n     * @returns { string | SVGElement }  gets the content for the text element.\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.textContent;\n    },\n\n    /**\n     *   sets the content for the text element \\\n     *\n     * @returns { void }  sets the content for the text element.\\\n     * @param {string} value - provide the id value.\n     *\n     * @private\n     */\n    set: function (value) {\n      if (this.textContent !== value) {\n        this.textContent = value;\n        this.isDirt = true;\n        this.doWrap = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextElement.prototype, \"childNodes\", {\n    /**\n     *   gets the content for the text element \\\n     *\n     * @returns { string | SVGElement }  gets the content for the text element.\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.textNodes;\n    },\n\n    /**\n     *   sets the content for the text element \\\n     *\n     * @returns { void }  sets the content for the text element.\\\n     * @param {SubTextElement[]} value - provide the id value.\n     *\n     * @private\n     */\n    set: function (value) {\n      this.textNodes = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextElement.prototype, \"wrapBounds\", {\n    /**\n     *   gets the wrapBounds for the text \\\n     *\n     * @returns { string | SVGElement }  gets the wrapBounds for the text.\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.textWrapBounds;\n    },\n\n    /**\n     *    sets the wrapBounds for the text \\\n     *\n     * @returns { void }   sets the wrapBounds for the text.\\\n     * @param {TextBounds} value - provide the id value.\n     *\n     * @private\n     */\n    set: function (value) {\n      this.textWrapBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   *    sets the wrapBounds for the text \\\n   *\n   * @returns { void }   sets the wrapBounds for the text.\\\n   *\n   * @private\n   */\n\n  TextElement.prototype.refreshTextElement = function () {\n    this.isDirt = true;\n  };\n  /**\n   *Measures the minimum size that is required for the text element\\\n   *\n   * @returns { Size }  Measures the minimum size that is required for the text element.\\\n   * @param {Size} availableSize - provide the id value.\n   *\n   * @private\n   */\n\n\n  TextElement.prototype.measure = function (availableSize) {\n    var size;\n\n    if (this.isDirt && this.canMeasure) {\n      size = measureText(this, this.style, this.content, this.isLaneOrientation ? availableSize.height : this.width || availableSize.width);\n    } else {\n      size = this.desiredSize;\n    }\n\n    if (this.width === undefined || this.height === undefined) {\n      this.desiredSize = new Size(size.width, size.height);\n    } else {\n      this.desiredSize = new Size(this.width, this.height);\n    }\n\n    this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n    return this.desiredSize;\n  };\n  /**\n   * Arranges the text element\\\n   *\n   * @returns { Size }   Arranges the text element.\\\n   * @param {Size} desiredSize - provide the id value.\n   *\n   * @private\n   */\n\n\n  TextElement.prototype.arrange = function (desiredSize) {\n    if (desiredSize.width !== this.actualSize.width || desiredSize.height !== this.actualSize.height || this.isDirt) {\n      this.doWrap = true;\n    }\n\n    this.actualSize = desiredSize;\n    this.updateBounds();\n    this.isDirt = false;\n    return this.actualSize;\n  };\n\n  return TextElement;\n}(DiagramElement);\n\nexport { TextElement };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/text-element.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Size","DiagramElement","measureText","TextElement","_super","_this","call","textContent","canMeasure","isLaneOrientation","canConsiderBounds","hyperlink","color","doWrap","textNodes","style","fill","strokeColor","strokeWidth","fontFamily","fontSize","whiteSpace","textWrapping","textAlign","italic","bold","textDecoration","strokeDashArray","opacity","gradient","textOverflow","defineProperty","get","set","value","isDirt","enumerable","configurable","textWrapBounds","refreshTextElement","measure","availableSize","size","content","height","width","desiredSize","undefined","validateDesiredSize","arrange","actualSize","updateBounds"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Size } from '../../primitives/size';\nimport { DiagramElement } from './diagram-element';\nimport { measureText } from './../../utility/dom-util';\n/**\n * TextElement is used to display text/annotations\n */\nvar TextElement = /** @class */ (function (_super) {\n    __extends(TextElement, _super);\n    /**\n     * set the id for each element\n     */\n    function TextElement() {\n        var _this = _super.call(this) || this;\n        /**\n         * sets or gets the image source\n         */\n        _this.textContent = '';\n        /** @private */\n        _this.canMeasure = true;\n        /** @private */\n        _this.isLaneOrientation = false;\n        /** @private */\n        _this.canConsiderBounds = true;\n        /**\n         * sets the hyperlink color to blue\n         */\n        _this.hyperlink = {\n            color: 'blue'\n        };\n        /** @private */\n        _this.doWrap = true;\n        _this.textNodes = [];\n        /**\n         * Defines the appearance of the text element\n         */\n        _this.style = {\n            color: 'black', fill: 'transparent', strokeColor: 'black',\n            strokeWidth: 1, fontFamily: 'Arial', fontSize: 12, whiteSpace: 'CollapseSpace',\n            textWrapping: 'WrapWithOverflow', textAlign: 'Center', italic: false, bold: false,\n            textDecoration: 'None', strokeDashArray: '', opacity: 5, gradient: null,\n            textOverflow: 'Wrap'\n        };\n        _this.style.fill = 'transparent';\n        _this.style.strokeColor = 'transparent';\n        return _this;\n    }\n    Object.defineProperty(TextElement.prototype, \"content\", {\n        /**\n         *   gets the content for the text element \\\n         *\n         * @returns { string | SVGElement }  gets the content for the text element.\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.textContent;\n        },\n        /**\n         *   sets the content for the text element \\\n         *\n         * @returns { void }  sets the content for the text element.\\\n         * @param {string} value - provide the id value.\n         *\n         * @private\n         */\n        set: function (value) {\n            if (this.textContent !== value) {\n                this.textContent = value;\n                this.isDirt = true;\n                this.doWrap = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextElement.prototype, \"childNodes\", {\n        /**\n         *   gets the content for the text element \\\n         *\n         * @returns { string | SVGElement }  gets the content for the text element.\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.textNodes;\n        },\n        /**\n         *   sets the content for the text element \\\n         *\n         * @returns { void }  sets the content for the text element.\\\n         * @param {SubTextElement[]} value - provide the id value.\n         *\n         * @private\n         */\n        set: function (value) {\n            this.textNodes = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextElement.prototype, \"wrapBounds\", {\n        /**\n         *   gets the wrapBounds for the text \\\n         *\n         * @returns { string | SVGElement }  gets the wrapBounds for the text.\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.textWrapBounds;\n        },\n        /**\n         *    sets the wrapBounds for the text \\\n         *\n         * @returns { void }   sets the wrapBounds for the text.\\\n         * @param {TextBounds} value - provide the id value.\n         *\n         * @private\n         */\n        set: function (value) {\n            this.textWrapBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *    sets the wrapBounds for the text \\\n     *\n     * @returns { void }   sets the wrapBounds for the text.\\\n     *\n     * @private\n     */\n    TextElement.prototype.refreshTextElement = function () {\n        this.isDirt = true;\n    };\n    /**\n     *Measures the minimum size that is required for the text element\\\n     *\n     * @returns { Size }  Measures the minimum size that is required for the text element.\\\n     * @param {Size} availableSize - provide the id value.\n     *\n     * @private\n     */\n    TextElement.prototype.measure = function (availableSize) {\n        var size;\n        if (this.isDirt && this.canMeasure) {\n            size = measureText(this, this.style, this.content, this.isLaneOrientation ?\n                availableSize.height : (this.width || availableSize.width));\n        }\n        else {\n            size = this.desiredSize;\n        }\n        if (this.width === undefined || this.height === undefined) {\n            this.desiredSize = new Size(size.width, size.height);\n        }\n        else {\n            this.desiredSize = new Size(this.width, this.height);\n        }\n        this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n        return this.desiredSize;\n    };\n    /**\n     * Arranges the text element\\\n     *\n     * @returns { Size }   Arranges the text element.\\\n     * @param {Size} desiredSize - provide the id value.\n     *\n     * @private\n     */\n    TextElement.prototype.arrange = function (desiredSize) {\n        if (desiredSize.width !== this.actualSize.width || desiredSize.height !== this.actualSize.height || this.isDirt) {\n            this.doWrap = true;\n        }\n        this.actualSize = desiredSize;\n        this.updateBounds();\n        this.isDirt = false;\n        return this.actualSize;\n    };\n    return TextElement;\n}(DiagramElement));\nexport { TextElement };\n"]},"metadata":{},"sourceType":"module"}