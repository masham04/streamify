{"ast":null,"code":"/**\n * Radial Tree\n */\nvar RadialTree =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the organizational chart module.\n   *\n   * @private\n   */\n  function RadialTree() {//constructs the layout module\n  }\n  /**\n   * To destroy the organizational chart\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  RadialTree.prototype.destroy = function () {\n    /**\n     * Destroy method performed here\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  RadialTree.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the layout\n     */\n    return 'RadialTree';\n  };\n  /**\n   * @param nodes\n   * @param nameTable\n   * @param layoutProp\n   * @param viewport\n   * @private\n   */\n\n\n  RadialTree.prototype.updateLayout = function (nodes, nameTable, layoutProp, viewport) {\n    var layout = {\n      type: layoutProp.type,\n      nameTable: nameTable,\n      anchorX: 0,\n      anchorY: 0,\n      firstLevelNodes: [],\n      centerNode: null,\n      levels: [],\n      maxLevel: 0,\n      graphNodes: {},\n      layoutNodes: [],\n      orientation: layoutProp.orientation,\n      horizontalSpacing: layoutProp.horizontalSpacing,\n      verticalSpacing: layoutProp.verticalSpacing,\n      verticalAlignment: layoutProp.verticalAlignment,\n      horizontalAlignment: layoutProp.horizontalAlignment,\n      fixedNode: layoutProp.fixedNode,\n      margin: layoutProp.margin,\n      bounds: layoutProp.bounds,\n      objects: [],\n      root: layoutProp.root\n    };\n    this.doLayout(layout, nodes, nameTable, viewport);\n  };\n\n  RadialTree.prototype.doLayout = function (layout, nodes, nameTable, viewport) {\n    var node;\n\n    for (var i = 0; i < nodes.length; i++) {\n      node = nodes[i];\n\n      if (!node.excludeFromLayout) {\n        layout.graphNodes[node.id] = this.setUpLayoutInfo(layout, node);\n\n        if (!node.inEdges || !node.inEdges.length) {\n          layout.firstLevelNodes.push(node);\n        }\n      }\n    }\n\n    if (layout.root && nameTable[layout.root]) {\n      layout.centerNode = nameTable[layout.root];\n    } else if (layout.firstLevelNodes.length) {\n      layout.centerNode = layout.firstLevelNodes[0];\n      layout.root = layout.centerNode.id;\n    }\n\n    if (layout.centerNode) {\n      this.updateEdges(layout, layout.centerNode, 0, nameTable);\n      this.depthFirstAllignment(layout, layout.centerNode, 0, 0);\n      this.populateLevels(layout);\n      this.transformToCircleLayout(layout);\n      this.updateAnchor(layout, viewport);\n      this.updateNodes(layout, layout.centerNode, nameTable);\n    }\n  };\n\n  RadialTree.prototype.updateEdges = function (layout, node, depth, nameTable) {\n    var nodeInfo = layout.graphNodes[node.id];\n    layout.layoutNodes.push(nodeInfo);\n    nodeInfo.level = depth;\n    nodeInfo.visited = true;\n    layout.maxLevel = Math.max(layout.maxLevel, depth);\n\n    for (var j = 0; j < node.outEdges.length; j++) {\n      var edge = nameTable[nameTable[node.outEdges[j]].targetID];\n\n      if (!edge.excludeFromLayout && !edge.visited) {\n        nodeInfo.children.push(edge);\n        this.updateEdges(layout, edge, depth + 1, nameTable);\n      }\n    }\n  };\n\n  RadialTree.prototype.depthFirstAllignment = function (layout, node, x, y) {\n    var newValue;\n    var nodeInfo = layout.graphNodes[node.id];\n\n    if (nodeInfo.children.length) {\n      y += 300;\n\n      for (var i = 0; i < nodeInfo.children.length; i++) {\n        newValue = this.depthFirstAllignment(layout, nodeInfo.children[i], x, y);\n        x = newValue.x;\n        y = newValue.y;\n      }\n\n      nodeInfo.children = nodeInfo.children.sort(function (obj1, obj2) {\n        return layout.graphNodes[obj1.id].x - layout.graphNodes[obj2.id].x;\n      });\n      var min = layout.graphNodes[nodeInfo.children[0].id].min;\n      var max = layout.graphNodes[nodeInfo.children[nodeInfo.children.length - 1].id].max;\n      nodeInfo.x = min + (max - min) / 2;\n      x = max + layout.horizontalSpacing;\n      nodeInfo.segmentOffset = max + layout.horizontalSpacing;\n      nodeInfo.x -= nodeInfo.width / 2;\n      nodeInfo.y -= nodeInfo.height / 2;\n      nodeInfo.min = min;\n      nodeInfo.max = max;\n\n      if (nodeInfo.x < min && nodeInfo.visited) {\n        nodeInfo.x = min;\n        x = nodeInfo.x + nodeInfo.width / 2 - (max - min) / 2;\n        nodeInfo.visited = false;\n\n        for (var i = 0; i < nodeInfo.children.length; i++) {\n          newValue = this.depthFirstAllignment(layout, nodeInfo.children[i], x, y);\n        }\n\n        nodeInfo.visited = true;\n        x = nodeInfo.x + nodeInfo.width + layout.horizontalSpacing;\n      }\n\n      max = layout.graphNodes[nodeInfo.children[nodeInfo.children.length - 1].id].segmentOffset;\n      x = x < max ? max : x;\n      y -= 300;\n      nodeInfo.y = y;\n    } else {\n      nodeInfo.x = x;\n      nodeInfo.y = y;\n      nodeInfo.min = x;\n      nodeInfo.max = x + nodeInfo.width;\n      x += nodeInfo.width + layout.horizontalSpacing;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  RadialTree.prototype.populateLevels = function (layout) {\n    var stages = []; // eslint-disable-next-line prefer-spread\n\n    var min = Math.min.apply(Math, layout.layoutNodes.map(function (nodeInfo) {\n      return nodeInfo.x;\n    })); // eslint-disable-next-line prefer-spread\n\n    var max = Math.max.apply(Math, layout.layoutNodes.map(function (nodeInfo) {\n      return nodeInfo.x + nodeInfo.width + layout.horizontalSpacing;\n    }));\n    var full = max - min;\n    layout.levels = [];\n\n    var _loop_1 = function (i) {\n      stages = layout.layoutNodes.filter(function (nodeInfo) {\n        if (nodeInfo.level === i) {\n          return nodeInfo;\n        } else {\n          return null;\n        }\n      });\n      var newlevel = {};\n      stages = stages.sort(function (nodeInfo1, nodeInfo2) {\n        return nodeInfo1.x - nodeInfo2.x;\n      });\n      newlevel.min = stages[0].x;\n      newlevel.max = stages[stages.length - 1].x + stages[stages.length - 1].width + layout.horizontalSpacing;\n      newlevel.actualCircumference = 0;\n      newlevel.height = 0;\n\n      for (var k = 0; k < stages.length; k++) {\n        if (stages[k].height > newlevel.height) {\n          newlevel.height = stages[k].height;\n        }\n\n        newlevel.actualCircumference += Math.max(stages[k].width, stages[k].height);\n\n        if (k !== stages.length - 1) {\n          newlevel.actualCircumference += layout.horizontalSpacing;\n        }\n      }\n\n      newlevel.circumference = newlevel.max - newlevel.min;\n\n      if (newlevel.actualCircumference < newlevel.circumference) {\n        newlevel.circumference = (newlevel.circumference + newlevel.actualCircumference) / 2;\n      }\n\n      newlevel.radius = newlevel.circumference / (2 * Math.PI) + newlevel.height;\n      newlevel.nodes = [];\n\n      if (i > 1) {\n        if (layout.levels[i - 1].radius + layout.levels[i - 1].height >= newlevel.radius) {\n          newlevel.radius = layout.levels[i - 1].radius + layout.levels[i - 1].height;\n        }\n      }\n\n      for (var j = 0; j < stages.length; j++) {\n        stages[j].ratio = Math.abs(stages[j].x + stages[j].width / 2 - min) / full;\n        newlevel.nodes.push(stages[j]);\n      }\n\n      layout.levels.push(newlevel);\n    };\n\n    for (var i = 0; i <= layout.maxLevel; i++) {\n      _loop_1(i);\n    }\n  };\n\n  RadialTree.prototype.transformToCircleLayout = function (layout) {\n    var root = layout.graphNodes[layout.centerNode.id];\n    root.x = 0;\n    root.y = 0;\n\n    for (var i = 1; i < layout.levels.length; i++) {\n      for (var j = 0; j < layout.levels[i].nodes.length; j++) {\n        var nodeInfo = layout.levels[i].nodes[j];\n        nodeInfo.x = Math.cos(nodeInfo.ratio * 360 * Math.PI / 180) * (layout.levels[i].radius + layout.verticalSpacing * i);\n        nodeInfo.y = Math.sin(nodeInfo.ratio * 360 * Math.PI / 180) * (layout.levels[i].radius + layout.verticalSpacing * i);\n        layout.anchorX = Math.min(layout.anchorX, nodeInfo.x);\n        layout.anchorY = Math.min(layout.anchorY, nodeInfo.y);\n      }\n    }\n  };\n\n  RadialTree.prototype.updateAnchor = function (layout, viewPort) {\n    layout.anchorX = layout.centerNode.offsetX || viewPort.x / 2;\n    layout.anchorY = layout.centerNode.offsetY || viewPort.y / 2;\n  };\n\n  RadialTree.prototype.updateNodes = function (layout, node, nameTable) {\n    var nodeInfo = layout.graphNodes[node.id];\n    var offsetX = nodeInfo.x + layout.anchorX;\n    var offsetY = nodeInfo.y + layout.anchorY;\n    node.offsetX += offsetX;\n    node.offsetY += offsetY;\n\n    for (var i = 0; i < nodeInfo.children.length; i++) {\n      var childInfo = nodeInfo.children[i];\n      this.updateNodes(layout, nameTable[childInfo.id], nameTable);\n    }\n  };\n\n  RadialTree.prototype.setUpLayoutInfo = function (layout, item) {\n    var info = {};\n    info.name = item.id;\n    info.x = 0;\n    info.y = 0;\n    info.min = 0;\n    info.max = 0;\n    info.width = item.actualSize.width;\n    info.height = item.actualSize.height;\n    info.children = [];\n    info.level = 0;\n    info.ratio = 0;\n    info.visited = false;\n    return info;\n  };\n\n  return RadialTree;\n}();\n\nexport { RadialTree };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/layout/radial-tree.js"],"names":["RadialTree","prototype","destroy","getModuleName","updateLayout","nodes","nameTable","layoutProp","viewport","layout","type","anchorX","anchorY","firstLevelNodes","centerNode","levels","maxLevel","graphNodes","layoutNodes","orientation","horizontalSpacing","verticalSpacing","verticalAlignment","horizontalAlignment","fixedNode","margin","bounds","objects","root","doLayout","node","i","length","excludeFromLayout","id","setUpLayoutInfo","inEdges","push","updateEdges","depthFirstAllignment","populateLevels","transformToCircleLayout","updateAnchor","updateNodes","depth","nodeInfo","level","visited","Math","max","j","outEdges","edge","targetID","children","x","y","newValue","sort","obj1","obj2","min","segmentOffset","width","height","stages","apply","map","full","_loop_1","filter","newlevel","nodeInfo1","nodeInfo2","actualCircumference","k","circumference","radius","PI","ratio","abs","cos","sin","viewPort","offsetX","offsetY","childInfo","item","info","name","actualSize"],"mappings":"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","sourcesContent":["/**\n * Radial Tree\n */\nvar RadialTree = /** @class */ (function () {\n    /**\n     * Constructor for the organizational chart module.\n     *\n     * @private\n     */\n    function RadialTree() {\n        //constructs the layout module\n    }\n    /**\n     * To destroy the organizational chart\n     *\n     * @returns {void}\n     * @private\n     */\n    RadialTree.prototype.destroy = function () {\n        /**\n         * Destroy method performed here\n         */\n    };\n    /**\n     * Get module name.\n     */\n    RadialTree.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the layout\n         */\n        return 'RadialTree';\n    };\n    /**\n     * @param nodes\n     * @param nameTable\n     * @param layoutProp\n     * @param viewport\n     * @private\n     */\n    RadialTree.prototype.updateLayout = function (nodes, nameTable, layoutProp, viewport) {\n        var layout = {\n            type: layoutProp.type,\n            nameTable: nameTable, anchorX: 0, anchorY: 0,\n            firstLevelNodes: [], centerNode: null, levels: [], maxLevel: 0, graphNodes: {}, layoutNodes: [],\n            orientation: layoutProp.orientation,\n            horizontalSpacing: layoutProp.horizontalSpacing, verticalSpacing: layoutProp.verticalSpacing,\n            verticalAlignment: layoutProp.verticalAlignment, horizontalAlignment: layoutProp.horizontalAlignment,\n            fixedNode: layoutProp.fixedNode, margin: layoutProp.margin,\n            bounds: layoutProp.bounds, objects: [], root: layoutProp.root\n        };\n        this.doLayout(layout, nodes, nameTable, viewport);\n    };\n    RadialTree.prototype.doLayout = function (layout, nodes, nameTable, viewport) {\n        var node;\n        for (var i = 0; i < nodes.length; i++) {\n            node = nodes[i];\n            if (!node.excludeFromLayout) {\n                layout.graphNodes[node.id] = this.setUpLayoutInfo(layout, node);\n                if (!node.inEdges || !node.inEdges.length) {\n                    layout.firstLevelNodes.push(node);\n                }\n            }\n        }\n        if (layout.root && nameTable[layout.root]) {\n            layout.centerNode = nameTable[layout.root];\n        }\n        else if (layout.firstLevelNodes.length) {\n            layout.centerNode = layout.firstLevelNodes[0];\n            layout.root = layout.centerNode.id;\n        }\n        if (layout.centerNode) {\n            this.updateEdges(layout, layout.centerNode, 0, nameTable);\n            this.depthFirstAllignment(layout, layout.centerNode, 0, 0);\n            this.populateLevels(layout);\n            this.transformToCircleLayout(layout);\n            this.updateAnchor(layout, viewport);\n            this.updateNodes(layout, layout.centerNode, nameTable);\n        }\n    };\n    RadialTree.prototype.updateEdges = function (layout, node, depth, nameTable) {\n        var nodeInfo = layout.graphNodes[node.id];\n        layout.layoutNodes.push(nodeInfo);\n        nodeInfo.level = depth;\n        nodeInfo.visited = true;\n        layout.maxLevel = Math.max(layout.maxLevel, depth);\n        for (var j = 0; j < node.outEdges.length; j++) {\n            var edge = nameTable[nameTable[node.outEdges[j]].targetID];\n            if (!edge.excludeFromLayout && !edge.visited) {\n                nodeInfo.children.push(edge);\n                this.updateEdges(layout, edge, depth + 1, nameTable);\n            }\n        }\n    };\n    RadialTree.prototype.depthFirstAllignment = function (layout, node, x, y) {\n        var newValue;\n        var nodeInfo = layout.graphNodes[node.id];\n        if (nodeInfo.children.length) {\n            y += 300;\n            for (var i = 0; i < nodeInfo.children.length; i++) {\n                newValue = this.depthFirstAllignment(layout, nodeInfo.children[i], x, y);\n                x = newValue.x;\n                y = newValue.y;\n            }\n            nodeInfo.children = nodeInfo.children.sort(function (obj1, obj2) {\n                return layout.graphNodes[obj1.id].x - layout.graphNodes[obj2.id].x;\n            });\n            var min = layout.graphNodes[nodeInfo.children[0].id].min;\n            var max = layout.graphNodes[nodeInfo.children[nodeInfo.children.length - 1].id].max;\n            nodeInfo.x = min + (max - min) / 2;\n            x = max + layout.horizontalSpacing;\n            nodeInfo.segmentOffset = max + layout.horizontalSpacing;\n            nodeInfo.x -= nodeInfo.width / 2;\n            nodeInfo.y -= nodeInfo.height / 2;\n            nodeInfo.min = min;\n            nodeInfo.max = max;\n            if (nodeInfo.x < min && nodeInfo.visited) {\n                nodeInfo.x = min;\n                x = nodeInfo.x + nodeInfo.width / 2 - (max - min) / 2;\n                nodeInfo.visited = false;\n                for (var i = 0; i < nodeInfo.children.length; i++) {\n                    newValue = this.depthFirstAllignment(layout, nodeInfo.children[i], x, y);\n                }\n                nodeInfo.visited = true;\n                x = nodeInfo.x + nodeInfo.width + layout.horizontalSpacing;\n            }\n            max = layout.graphNodes[nodeInfo.children[nodeInfo.children.length - 1].id].segmentOffset;\n            x = x < max ? max : x;\n            y -= 300;\n            nodeInfo.y = y;\n        }\n        else {\n            nodeInfo.x = x;\n            nodeInfo.y = y;\n            nodeInfo.min = x;\n            nodeInfo.max = x + nodeInfo.width;\n            x += nodeInfo.width + layout.horizontalSpacing;\n        }\n        return { x: x, y: y };\n    };\n    RadialTree.prototype.populateLevels = function (layout) {\n        var stages = [];\n        // eslint-disable-next-line prefer-spread\n        var min = Math.min.apply(Math, layout.layoutNodes.map(function (nodeInfo) { return nodeInfo.x; }));\n        // eslint-disable-next-line prefer-spread\n        var max = Math.max.apply(Math, layout.layoutNodes.map(function (nodeInfo) {\n            return nodeInfo.x + nodeInfo.width + layout.horizontalSpacing;\n        }));\n        var full = max - min;\n        layout.levels = [];\n        var _loop_1 = function (i) {\n            stages = layout.layoutNodes.filter(function (nodeInfo) {\n                if (nodeInfo.level === i) {\n                    return nodeInfo;\n                }\n                else {\n                    return null;\n                }\n            });\n            var newlevel = {};\n            stages = stages.sort(function (nodeInfo1, nodeInfo2) { return nodeInfo1.x - nodeInfo2.x; });\n            newlevel.min = stages[0].x;\n            newlevel.max = stages[stages.length - 1].x + stages[stages.length - 1].width + layout.horizontalSpacing;\n            newlevel.actualCircumference = 0;\n            newlevel.height = 0;\n            for (var k = 0; k < stages.length; k++) {\n                if (stages[k].height > newlevel.height) {\n                    newlevel.height = stages[k].height;\n                }\n                newlevel.actualCircumference += Math.max(stages[k].width, stages[k].height);\n                if (k !== stages.length - 1) {\n                    newlevel.actualCircumference += layout.horizontalSpacing;\n                }\n            }\n            newlevel.circumference = newlevel.max - newlevel.min;\n            if (newlevel.actualCircumference < newlevel.circumference) {\n                newlevel.circumference = (newlevel.circumference + newlevel.actualCircumference) / 2;\n            }\n            newlevel.radius = newlevel.circumference / (2 * Math.PI) + newlevel.height;\n            newlevel.nodes = [];\n            if (i > 1) {\n                if (layout.levels[i - 1].radius + layout.levels[i - 1].height >= newlevel.radius) {\n                    newlevel.radius = layout.levels[i - 1].radius + layout.levels[i - 1].height;\n                }\n            }\n            for (var j = 0; j < stages.length; j++) {\n                stages[j].ratio = Math.abs(stages[j].x + stages[j].width / 2 - min) / full;\n                newlevel.nodes.push(stages[j]);\n            }\n            layout.levels.push(newlevel);\n        };\n        for (var i = 0; i <= layout.maxLevel; i++) {\n            _loop_1(i);\n        }\n    };\n    RadialTree.prototype.transformToCircleLayout = function (layout) {\n        var root = layout.graphNodes[layout.centerNode.id];\n        root.x = 0;\n        root.y = 0;\n        for (var i = 1; i < layout.levels.length; i++) {\n            for (var j = 0; j < layout.levels[i].nodes.length; j++) {\n                var nodeInfo = layout.levels[i].nodes[j];\n                nodeInfo.x = Math.cos(nodeInfo.ratio * 360 * Math.PI / 180) * (layout.levels[i].radius + layout.verticalSpacing * i);\n                nodeInfo.y = Math.sin(nodeInfo.ratio * 360 * Math.PI / 180) * (layout.levels[i].radius + layout.verticalSpacing * i);\n                layout.anchorX = Math.min(layout.anchorX, nodeInfo.x);\n                layout.anchorY = Math.min(layout.anchorY, nodeInfo.y);\n            }\n        }\n    };\n    RadialTree.prototype.updateAnchor = function (layout, viewPort) {\n        layout.anchorX = layout.centerNode.offsetX || viewPort.x / 2;\n        layout.anchorY = layout.centerNode.offsetY || viewPort.y / 2;\n    };\n    RadialTree.prototype.updateNodes = function (layout, node, nameTable) {\n        var nodeInfo = layout.graphNodes[node.id];\n        var offsetX = nodeInfo.x + layout.anchorX;\n        var offsetY = nodeInfo.y + layout.anchorY;\n        node.offsetX += offsetX;\n        node.offsetY += offsetY;\n        for (var i = 0; i < nodeInfo.children.length; i++) {\n            var childInfo = nodeInfo.children[i];\n            this.updateNodes(layout, nameTable[childInfo.id], nameTable);\n        }\n    };\n    RadialTree.prototype.setUpLayoutInfo = function (layout, item) {\n        var info = {};\n        info.name = item.id;\n        info.x = 0;\n        info.y = 0;\n        info.min = 0;\n        info.max = 0;\n        info.width = item.actualSize.width;\n        info.height = item.actualSize.height;\n        info.children = [];\n        info.level = 0;\n        info.ratio = 0;\n        info.visited = false;\n        return info;\n    };\n    return RadialTree;\n}());\nexport { RadialTree };\n"]},"metadata":{},"sourceType":"module"}