{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable no-self-assign */\n\n\nimport { DiagramElement } from '../elements/diagram-element';\nimport { Canvas } from './canvas';\nimport { Container } from './container';\nimport { Size } from '../../primitives/size';\nimport { randomId } from '../../utility/base-util';\nimport { TextElement } from '../elements/text-element';\n/**\n * Grid panel is used to arrange the children in a table like structure\n */\n\nvar GridPanel =\n/** @class */\nfunction (_super) {\n  __extends(GridPanel, _super);\n\n  function GridPanel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.childTable = [];\n    _this.cellStyle = {};\n    _this.desiredRowHeight = [];\n    _this.desiredCellWidth = [];\n    return _this;\n  }\n  /**\n   * rowDefinitions method \\\n   *\n   * @returns { RowDefinition[] } columnDefinitions method .\\\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.rowDefinitions = function () {\n    return this.rowDefns;\n  };\n  /**\n   * columnDefinitions method \\\n   *\n   * @returns { ColumnDefinition[] } columnDefinitions method .\\\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.columnDefinitions = function () {\n    return this.colDefns;\n  };\n\n  GridPanel.prototype.addObject = function (obj, rowId, columnId, rowSpan, columnSpan) {\n    //check if exists\n    if (this.rows.length >= rowId) {\n      var row = this.rows[rowId];\n\n      if (row.cells.length > columnId) {\n        columnSpan = columnSpan || 1;\n        rowSpan = rowSpan || 1;\n        var cell = row.cells[columnId];\n        cell.columnSpan = Math.max(columnSpan, cell.columnSpan);\n        cell.rowSpan = Math.max(rowSpan, cell.rowSpan);\n        var object = new GridCellItem();\n        object = obj;\n        object.rowId = rowId;\n        object.columnId = columnId;\n        object.columnSpan = columnSpan;\n        this.childTable[object.id] = object;\n        this.addObjectToCell(object, cell);\n      }\n    }\n  }; // public setCellStyle(rowId: number, columnId: number, cellStyle: ShapeStyleModel): void {\n  //     if (this.rows.length > rowId) {\n  //         let row: GridRow = this.rows[rowId];\n  //         if (row.cells.length > columnId) {\n  //             let cell: GridCell = row.cells[columnId];\n  //             cell.style = cellStyle;\n  //         }\n  //     }\n  // }\n  // public getRowId(obj: DiagramElement): number {\n  //     return (this.childTable[obj.id] as GridCellItem).rowId;\n  // }\n  // public getColumnId(obj: DiagramElement): number {\n  //     return (this.childTable[obj.id] as GridCellItem).columnId;\n  // }\n  // public getRowSpan(obj: DiagramElement): number {\n  //     return (this.childTable[obj.id] as GridCellItem).rowSpan;\n  // }\n  // public getColumnSpan(obj: DiagramElement): number {\n  //     return (this.childTable[obj.id] as GridCellItem).columnSpan;\n  // }\n\n\n  GridPanel.prototype.addObjectToCell = function (obj, cell) {\n    if (!cell.children) {\n      cell.children = [];\n    } // obj.minWidth = cell.desiredCellWidth; obj.minHeight = cell.desiredCellHeight;\n\n\n    obj.style.strokeColor = 'black';\n    obj.style.strokeWidth = 1;\n    obj.style.fill = 'white';\n    cell.children.push(obj);\n  };\n  /**\n   * updateProperties method \\\n   *\n   * @returns { void } updateProperties method .\\\n   * @param {number} offsetX - provide the Connector value.\n   * @param {number} offsetY - provide the Connector value.\n   * @param {number} width - provide the Connector value.\n   * @param {number} height - provide the Connector value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.updateProperties = function (offsetX, offsetY, width, height) {\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.width = width;\n    this.height = height;\n  };\n  /**\n   * setDefinitions method \\\n   *\n   * @returns { void } setDefinitions method .\\\n   * @param {RowDefinition[]} rows - provide the rows value.\n   * @param {ColumnDefinition[]} columns - provide the Connector value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.setDefinitions = function (rows, columns) {\n    this.rowDefns = rows;\n    this.colDefns = columns;\n    this.children = [];\n    this.rows = this.rows || [];\n\n    for (var i = 0; i < rows.length; i++) {\n      var rowDefn = rows[i];\n      var row = new GridRow();\n      row.cells = [];\n      var defaultCell = new ColumnDefinition(); //replace this 100 with a proper property\n\n      defaultCell.width = this.width;\n      var columns_1 = this.colDefns;\n\n      if (columns_1 === undefined || columns_1.length < 1) {\n        columns_1 = [defaultCell];\n      }\n\n      this.addCellInRow(columns_1, rowDefn, row);\n      this.rows.push(row);\n    }\n  };\n  /**\n   * addCellInRow method \\\n   *\n   * @returns { void } addCellInRow method .\\\n   * @param {ColumnDefinition[]} columns - provide the rows value.\n   * @param {RowDefinition} rowDefn - provide the Connector value.\n   * @param {GridRow} row - provide the Connector value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.addCellInRow = function (columns, rowDefn, row) {\n    for (var j = 0; j < columns.length; j++) {\n      var colDefn = columns[j];\n      var cell = new GridCell();\n      cell.children = [];\n      this.cellStyle.fill = 'none';\n      this.cellStyle.strokeColor = 'none';\n      cell.id = randomId();\n      cell.style = this.cellStyle;\n      cell.desiredCellWidth = cell.minWidth = colDefn.width;\n      cell.desiredCellHeight = cell.minHeight = rowDefn.height;\n      row.cells.push(cell);\n      this.children.push(cell);\n    }\n  };\n  /**\n   * calculateSize method \\\n   *\n   * @returns { void } calculateSize method .\\\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.calculateSize = function () {\n    var rows = this.rows || [];\n    var calculateHeight = 0;\n    var calculateWidth = 0;\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = this.rows[i];\n      calculateWidth = 0;\n\n      for (var j = 0; j < row.cells.length; j++) {\n        calculateWidth += row.cells[j].desiredCellWidth;\n\n        if (j === row.cells.length - 1) {\n          if (this.width && this.width !== calculateWidth) {\n            row.cells[j].desiredCellWidth += this.width - calculateWidth;\n            row.cells[j].minWidth = row.cells[j].desiredCellWidth;\n\n            if (row.cells[j].children && row.cells[j].children.length) {\n              row.cells[j].children[0].width = row.cells[j].desiredCellWidth;\n            }\n\n            this.colDefns[j].width = row.cells[j].desiredCellWidth;\n          }\n\n          calculateHeight += row.cells[j].desiredCellHeight;\n\n          if (i === rows.length - 1) {\n            if (this.height && this.height !== calculateHeight) {\n              var height = this.height - calculateHeight;\n\n              if (height > 0) {\n                for (var k = 0; k < row.cells.length; k++) {\n                  row.cells[k].desiredCellHeight += height;\n                  row.cells[k].minHeight = row.cells[k].desiredCellHeight = row.cells[k].desiredCellHeight;\n\n                  if (row.cells[k].children && row.cells[k].children.length) {\n                    row.cells[k].children[0].height = row.cells[k].desiredCellHeight;\n                  }\n                }\n\n                this.rowDefns[i].height += height;\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\n   * updateRowHeight method \\\n   *\n   * @returns { void } updateRowHeight method .\\\n   * @param {number} rowId - provide the rows value.\n   * @param {number} height - provide the Connector value.\n   * @param {boolean} isConsiderChild - provide the Connector value.\n   * @param {number} padding - provide the Connector value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.updateRowHeight = function (rowId, height, isConsiderChild, padding) {\n    var row = this.rows[rowId];\n    this.rowDefns[rowId].height = height;\n\n    if (this.height !== undefined) {\n      this.height += height - row.cells[0].desiredCellHeight;\n    }\n\n    for (var i = 0; i < row.cells.length; i++) {\n      row.cells[i].desiredCellHeight = row.cells[i].minHeight = height;\n\n      if (row.cells[i].children && row.cells[i].children.length) {\n        row.cells[i].children[0].height = height;\n        this.setTextRefresh(row.cells[i].children[0]);\n      }\n    }\n\n    this.desiredRowHeight[rowId] = height;\n    this.measure(new Size(this.width, this.height));\n    this.arrange(this.desiredSize);\n\n    if (isConsiderChild) {\n      var minHeight = padding !== undefined ? this.calculateCellHeightBasedOnChildren(rowId, padding) : this.calculateCellHeight(rowId);\n\n      if (minHeight > height) {\n        this.updateRowHeight(rowId, minHeight, false);\n      }\n    }\n  };\n\n  GridPanel.prototype.setTextRefresh = function (canvas) {\n    if (canvas.children && canvas.children.length) {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      var children = canvas.children;\n\n      for (var i = 0; i < children.length; i++) {\n        if (children[i] instanceof TextElement) {\n          children[i].refreshTextElement();\n        }\n\n        if (children[i] instanceof Canvas) {\n          this.setTextRefresh(children[i]);\n        }\n      }\n    }\n  };\n  /**\n   * updateColumnWidth method \\\n   *\n   * @returns { void } updateColumnWidth method .\\\n   * @param {number} colId - provide the rows value.\n   * @param {number} width - provide the Connector value.\n   * @param {boolean} isConsiderChild - provide the Connector value.\n   * @param {number} padding - provide the Connector value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.updateColumnWidth = function (colId, width, isConsiderChild, padding) {\n    this.colDefns[colId].width = width;\n\n    if (this.width !== undefined) {\n      this.width += width - this.rows[this.rows.length - 1].cells[colId].desiredCellWidth;\n    }\n\n    for (var i = 0; i < this.rows.length; i++) {\n      this.setTextRefresh(this.rows[i].cells[0]);\n      this.rows[i].cells[colId].desiredCellWidth = this.rows[i].cells[colId].minWidth = width;\n\n      if (this.rows[i].cells[colId].children && this.rows[i].cells[colId].children.length) {\n        this.rows[i].cells[colId].children[0].width = width;\n      }\n    }\n\n    this.desiredCellWidth[colId] = width;\n    this.measure(new Size(this.width, this.height));\n    this.arrange(this.desiredSize);\n\n    if (isConsiderChild) {\n      var minWidth = padding !== undefined ? this.calculateCellWidthBasedOnChildren(colId, padding) : this.calculateCellWidth(colId);\n\n      if (minWidth > width) {\n        this.updateColumnWidth(colId, minWidth, false);\n      }\n    }\n  };\n\n  GridPanel.prototype.calculateCellWidth = function (colIndex) {\n    var maxWidth;\n    var width;\n    var cell;\n\n    for (var i = 0; i < this.rows.length; i++) {\n      cell = this.rows[i].cells[colIndex];\n\n      if (cell.columnSpan === 1) {\n        width = cell.outerBounds.width > cell.bounds.width && (cell.children.length === 0 || cell.children[0].maxWidth === undefined) ? cell.outerBounds.width : cell.bounds.width;\n\n        if (maxWidth) {\n          maxWidth = maxWidth < width ? width : maxWidth;\n        } else {\n          maxWidth = width;\n        }\n      }\n    }\n\n    return maxWidth;\n  };\n\n  GridPanel.prototype.calculateCellHeight = function (rowIndex) {\n    var maxHeight;\n    var height;\n    var cell;\n    var row = this.rows[rowIndex];\n\n    for (var i = 0; i < row.cells.length; i++) {\n      cell = row.cells[i];\n      height = cell.outerBounds.height > cell.bounds.height ? cell.outerBounds.height : cell.bounds.height;\n\n      if (maxHeight) {\n        maxHeight = maxHeight < height ? height : maxHeight;\n      } else {\n        maxHeight = height;\n      }\n    }\n\n    return maxHeight;\n  };\n\n  GridPanel.prototype.calculateCellSizeBasedOnChildren = function (cell, option, padding, maxSize) {\n    var maxBounds;\n    var canvas = cell && cell.children.length > 0 ? cell.children[0] : undefined;\n\n    if (canvas && cell.columnSpan === 1) {\n      maxBounds = option === 'Width' ? canvas.bounds.right : canvas.bounds.bottom;\n\n      if (!maxSize) {\n        maxSize = option === 'Width' ? canvas.bounds.width : canvas.bounds.height;\n      }\n\n      for (var j = 0; j < canvas.children.length; j++) {\n        var children = canvas.children[j];\n\n        if (children instanceof Canvas) {\n          if (children.id.indexOf('header') === -1) {\n            var bounds = (option === 'Width' ? children.bounds.right : children.bounds.bottom) + padding;\n\n            if (bounds > maxBounds) {\n              var size = bounds - maxBounds + (option === 'Width' ? canvas.bounds.width : canvas.bounds.height);\n\n              if (maxSize) {\n                maxSize = maxSize < size ? size : maxSize;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return maxSize;\n  };\n\n  GridPanel.prototype.calculateCellWidthBasedOnChildren = function (colIndex, padding) {\n    var maxWidth; //let width: number;  let maxBounds: number; let canvas: Canvas;\n\n    var cell;\n\n    for (var i = 0; i < this.rows.length; i++) {\n      cell = this.rows[i].cells[colIndex];\n      maxWidth = this.calculateCellSizeBasedOnChildren(cell, 'Width', padding, maxWidth);\n    }\n\n    return maxWidth;\n  };\n\n  GridPanel.prototype.calculateCellHeightBasedOnChildren = function (rowIndex, padding) {\n    var maxHeight;\n    var cell; // let maxBounds: number; let canvas: Canvas;\n\n    var row = this.rows[rowIndex];\n\n    for (var i = 0; i < row.cells.length; i++) {\n      cell = row.cells[i];\n      maxHeight = this.calculateCellSizeBasedOnChildren(cell, 'Height', padding, maxHeight);\n    }\n\n    return maxHeight;\n  };\n  /**\n   * addRow method \\\n   *\n   * @returns { void } addRow method .\\\n   * @param {number} rowId - provide the rowId value.\n   * @param {number} rowDefn - provide the rowDefn value.\n   * @param {boolean} isMeasure - provide the isMeasure value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.addRow = function (rowId, rowDefn, isMeasure) {\n    if (this.rowDefns.length > 0) {\n      this.rowDefns.splice(rowId, 0, rowDefn);\n    } else {\n      this.rowDefns.push(rowDefn);\n    }\n\n    var row = new GridRow();\n    row.cells = [];\n    var defaultCell = new ColumnDefinition();\n    defaultCell.width = this.width;\n    var columns = this.colDefns;\n    this.addCellInRow(columns, rowDefn, row);\n\n    if (rowId > this.rows.length - 1) {\n      this.rows.push(row);\n    } else {\n      this.rows.splice(rowId, 0, row);\n    }\n\n    if (isMeasure) {\n      this.measure(new Size(this.width, this.height));\n      this.arrange(this.desiredSize);\n    }\n  };\n  /**\n   * addColumn method \\\n   *\n   * @returns { void } addColumn method .\\\n   * @param {number} columnId - provide the rowId value.\n   * @param {number} column - provide the rowDefn value.\n   * @param {boolean} isMeasure - provide the isMeasure value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.addColumn = function (columnId, column, isMeasure) {\n    var row;\n    var rowDefn;\n    var colDefn;\n    var cell;\n    var rows = this.rows;\n\n    if (this.colDefns.length > 0) {\n      this.colDefns.splice(columnId, 0, column);\n    } else {\n      this.colDefns.push(column);\n    }\n\n    if (this.width !== undefined) {\n      this.width += column.width;\n    }\n\n    for (var i = 0; i < rows.length; i++) {\n      row = rows[i];\n      rowDefn = this.rowDefns[i];\n      colDefn = column;\n      cell = new GridCell();\n      cell.style = this.cellStyle;\n      cell.desiredCellWidth = cell.minWidth = colDefn.width;\n      cell.desiredCellHeight = cell.minHeight = rowDefn.height;\n      cell.children = [];\n\n      if (columnId > row.cells.length - 1) {\n        row.cells.push(cell);\n      } else {\n        row.cells.splice(columnId, 0, cell);\n      }\n\n      this.children.push(cell);\n    }\n\n    if (isMeasure) {\n      this.measure(new Size(this.width, this.height));\n      this.arrange(this.desiredSize);\n    }\n  };\n  /**\n   * removeRow method \\\n   *\n   * @returns { void } removeRow method .\\\n   * @param {number} rowId - provide the rowId value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.removeRow = function (rowId) {\n    var cell;\n    var element;\n    var rows = this.rows;\n    var removeRow = rows[rowId];\n    this.height -= this.rowDefns[rowId].height;\n\n    for (var i = 0; i < removeRow.cells.length; i++) {\n      cell = removeRow.cells[i];\n      this.children.splice(this.children.indexOf(cell), 1);\n      element = document.getElementById(cell.id + '_groupElement');\n\n      if (element && element.parentElement) {\n        element.parentElement.removeChild(element);\n      }\n    }\n\n    this.rows.splice(rowId, 1);\n    this.rowDefns.splice(rowId, 1);\n    this.measure(new Size(this.width, this.height));\n    this.arrange(this.desiredSize);\n  };\n  /**\n   * removeColumn method \\\n   *\n   * @returns { void } removeColumn method .\\\n   * @param {number} columnId - provide the rowId value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.removeColumn = function (columnId) {\n    var cell;\n    var element;\n    var rows = this.rows;\n    this.width -= this.colDefns[columnId].width;\n\n    for (var i = 0; i < rows.length; i++) {\n      cell = rows[i].cells[columnId];\n      this.children.splice(this.children.indexOf(cell), 1);\n      element = document.getElementById(cell.id + '_groupElement');\n\n      if (element && element.parentElement) {\n        element.parentElement.removeChild(element);\n      }\n\n      rows[i].cells.splice(columnId, 1);\n    }\n\n    this.colDefns.splice(columnId, 1);\n    this.measure(new Size(this.width, this.height));\n    this.arrange(this.desiredSize);\n  };\n  /**\n   * updateRowIndex method \\\n   *\n   * @returns { void } updateRowIndex method .\\\n   * @param {number} currentIndex - provide the rowId value.\n   * @param {number} newIndex - provide the rowId value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.updateRowIndex = function (currentIndex, newIndex) {\n    //const rows: GridRow[] = this.rows;\n    var temp = this.rows[currentIndex];\n    this.rows.splice(currentIndex, 1);\n    this.rows.splice(newIndex, 0, temp);\n    var tempRow = this.rowDefns[currentIndex];\n    this.rowDefns.splice(currentIndex, 1);\n    this.rowDefns.splice(newIndex, 0, tempRow);\n    this.measure(new Size(this.width, this.height));\n    this.arrange(this.desiredSize);\n  };\n  /**\n   * updateColumnIndex method \\\n   *\n   * @returns { void } updateColumnIndex method .\\\n   * @param {number} startRowIndex - provide the startRowIndex value.\n   * @param {number} currentIndex - provide the currentIndex value.\n   * @param {number} newIndex - provide the newIndex value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.updateColumnIndex = function (startRowIndex, currentIndex, newIndex) {\n    var temp;\n    var cell;\n\n    for (var i = startRowIndex; i < this.rows.length; i++) {\n      temp = this.rows[i];\n      cell = this.rows[i].cells[currentIndex];\n      temp.cells.splice(currentIndex, 1);\n      temp.cells.splice(newIndex, 0, cell);\n    }\n\n    var tempCol = this.colDefns[currentIndex];\n    this.colDefns.splice(currentIndex, 1);\n    this.colDefns.splice(newIndex, 0, tempCol);\n    var tempSize = this.desiredCellWidth[currentIndex];\n    this.desiredCellWidth.splice(currentIndex, 1);\n    this.desiredCellWidth.splice(newIndex, 0, tempSize);\n    this.measure(new Size(this.width, this.height));\n    this.arrange(this.desiredSize);\n  };\n  /**\n   * measure method \\\n   *\n   * @returns { Size } measure method .\\\n   * @param {Size} availableSize - provide the startRowIndex value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.measure = function (availableSize) {\n    var desired = undefined;\n\n    if (this.rows !== undefined && this.rows.length > 0) {\n      var i = 0;\n      var j = 0;\n      desired = new Size(0, 0);\n      this.calculateSize();\n\n      for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\n        var row = _a[_i];\n        j = 0;\n\n        for (var _b = 0, _c = row.cells; _b < _c.length; _b++) {\n          var cell = _c[_b];\n          var size = cell.measure(new Size(cell.desiredCellWidth, cell.desiredCellHeight));\n\n          if (cell.rowSpan === 1) {\n            if (j === 0 || this.desiredRowHeight[i] === undefined) {\n              this.desiredRowHeight[i] = size.height;\n            } else {\n              this.desiredRowHeight[i] = Math.max(size.height, this.desiredRowHeight[i]);\n            }\n          }\n\n          if (cell.columnSpan === 1) {\n            if (i === 0 || this.desiredCellWidth[j] === undefined) {\n              this.desiredCellWidth[j] = size.width;\n            } else {\n              this.desiredCellWidth[j] = Math.max(size.width, this.desiredCellWidth[j]);\n            }\n\n            if (i === this.rows.length - 1) {\n              desired.width += this.desiredCellWidth[j];\n            }\n          }\n\n          j++;\n        }\n\n        desired.height += this.desiredRowHeight[i];\n        i++;\n      } //to-do update definitions\n\n\n      i = j = 0;\n      var rowIndex = 0;\n\n      for (var _d = 0, _e = this.rows; _d < _e.length; _d++) {\n        var row = _e[_d];\n        j = 0;\n        var cellIndex = 0;\n\n        for (var _f = 0, _g = row.cells; _f < _g.length; _f++) {\n          var cell = _g[_f];\n\n          if (cell.columnSpan !== 1) {\n            cell.desiredSize.width = 0;\n\n            for (var start = 0; start < cell.columnSpan; start++) {\n              if (start + j < row.cells.length) {\n                cell.desiredSize.width += this.desiredCellWidth[start + j];\n                cell.minWidth = cell.desiredSize.width;\n                cell.measure(cell.desiredSize);\n              }\n            }\n\n            j++;\n          } else {\n            cell.desiredSize.width = this.desiredCellWidth[cellIndex];\n            cell.measure(cell.desiredSize);\n          }\n\n          if (cell.rowSpan !== 1) {\n            cell.desiredSize.height = 0;\n\n            for (var start = 0; start < cell.rowSpan; start++) {\n              if (start + rowIndex < this.rows.length) {\n                cell.desiredSize.height += this.desiredRowHeight[start + rowIndex];\n                cell.minHeight = cell.desiredSize.height;\n                cell.measure(cell.desiredSize);\n              }\n            }\n          } else {\n            cell.desiredSize.height = this.desiredRowHeight[rowIndex];\n            cell.measure(cell.desiredSize);\n          }\n\n          i++;\n          cellIndex++;\n        }\n\n        rowIndex++;\n      }\n    }\n\n    if (desired === undefined) {\n      desired = _super.prototype.validateDesiredSize.call(this, desired, availableSize);\n    }\n\n    _super.prototype.stretchChildren.call(this, desired);\n\n    this.desiredSize = desired;\n    return desired;\n  };\n  /**\n   * arrange method \\\n   *\n   * @returns { Size } arrange method .\\\n   * @param {Size} desiredSize - provide the startRowIndex value.\n   * @param {boolean} isChange - provide the startRowIndex value.\n   *\n   * @private\n   */\n\n\n  GridPanel.prototype.arrange = function (desiredSize, isChange) {\n    var j = 0;\n    var i = 0;\n\n    if (this.rows !== undefined && this.rows.length > 0) {\n      var x = this.offsetX - desiredSize.width * this.pivot.x;\n      var y = this.offsetY - desiredSize.height * this.pivot.y;\n      var cellX = x;\n\n      for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\n        var row = _a[_i];\n        cellX = x;\n        j = 0;\n\n        for (var _b = 0, _c = row.cells; _b < _c.length; _b++) {\n          var cell = _c[_b];\n          var cellWidth = Math.max(this.desiredCellWidth[j], cell.desiredSize.width);\n          var cellHeight = Math.max(this.desiredRowHeight[i], cell.desiredSize.height);\n          cell.offsetX = cellX + cellWidth * cell.pivot.x;\n          cell.offsetY = y + cellHeight * cell.pivot.y;\n          cellX += this.desiredCellWidth[j];\n          cell.arrange(new Size(cellWidth, cellHeight));\n          j++;\n        }\n\n        y += this.desiredRowHeight[i];\n        i++;\n      }\n\n      if (isChange) {\n        // Need to remove the unwanted the child elements in the grid\n        // Used for row span and column span.\n        var cell = void 0;\n        var row = void 0;\n        var k = void 0;\n        var z = void 0;\n        var removeCell = void 0;\n\n        for (i = 0; i < this.rows.length; i++) {\n          row = this.rows[i];\n\n          for (j = 0; j < row.cells.length; j++) {\n            cell = row.cells[j];\n\n            if (cell.columnSpan > 1) {\n              // remove a child element when a column span is greater than 1\n              this.children.splice(this.children.indexOf(cell) + 1, cell.columnSpan - 1);\n            }\n\n            if (cell.rowSpan > 1) {\n              for (k = i, z = 0; k + cell.rowSpan - 1 < this.rows.length && z < cell.rowSpan - 1; k++, z++) {\n                removeCell = this.rows[k + 1].cells[j]; // remove a child element when a row span is greater than 1\n\n                this.children.splice(this.children.indexOf(removeCell), 1);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this.actualSize = desiredSize;\n    this.updateBounds();\n    return desiredSize;\n  };\n\n  return GridPanel;\n}(Container);\n\nexport { GridPanel };\n/**\n * Defines the behavior of the RowDefinition of node\n */\n\nvar RowDefinition =\n/** @class */\nfunction () {\n  function RowDefinition() {\n    /** returns the height of node */\n    this.height = undefined;\n  }\n\n  return RowDefinition;\n}();\n\nexport { RowDefinition };\n/**\n * Defines the behavior of the ColumnDefinition of node\n */\n\nvar ColumnDefinition =\n/** @class */\nfunction () {\n  function ColumnDefinition() {\n    /** returns the width of node */\n    this.width = undefined;\n  }\n\n  return ColumnDefinition;\n}();\n\nexport { ColumnDefinition };\n/** @private */\n\nvar GridRow =\n/** @class */\nfunction () {\n  function GridRow() {\n    this.cells = null;\n  }\n\n  return GridRow;\n}();\n\nexport { GridRow };\n/** @private */\n\nvar GridCell =\n/** @class */\nfunction (_super) {\n  __extends(GridCell, _super);\n\n  function GridCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.columnSpan = 1;\n    _this.rowSpan = 1;\n    return _this;\n  }\n\n  return GridCell;\n}(Canvas);\n\nexport { GridCell };\n\nvar GridCellItem =\n/** @class */\nfunction (_super) {\n  __extends(GridCellItem, _super);\n\n  function GridCellItem() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rowId = 0;\n    _this.columnId = 0;\n    _this.rowSpan = 1;\n    _this.columnSpan = 1;\n    return _this;\n  }\n\n  return GridCellItem;\n}(DiagramElement);","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/grid.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","DiagramElement","Canvas","Container","Size","randomId","TextElement","GridPanel","_super","_this","apply","arguments","childTable","cellStyle","desiredRowHeight","desiredCellWidth","rowDefinitions","rowDefns","columnDefinitions","colDefns","addObject","obj","rowId","columnId","rowSpan","columnSpan","rows","length","row","cells","cell","Math","max","object","GridCellItem","id","addObjectToCell","children","style","strokeColor","strokeWidth","fill","push","updateProperties","offsetX","offsetY","width","height","setDefinitions","columns","i","rowDefn","GridRow","defaultCell","ColumnDefinition","columns_1","undefined","addCellInRow","j","colDefn","GridCell","minWidth","desiredCellHeight","minHeight","calculateSize","calculateHeight","calculateWidth","k","updateRowHeight","isConsiderChild","padding","setTextRefresh","measure","arrange","desiredSize","calculateCellHeightBasedOnChildren","calculateCellHeight","canvas","refreshTextElement","updateColumnWidth","colId","calculateCellWidthBasedOnChildren","calculateCellWidth","colIndex","maxWidth","outerBounds","bounds","rowIndex","maxHeight","calculateCellSizeBasedOnChildren","option","maxSize","maxBounds","right","bottom","indexOf","size","addRow","isMeasure","splice","addColumn","column","removeRow","element","document","getElementById","parentElement","removeChild","removeColumn","updateRowIndex","currentIndex","newIndex","temp","tempRow","updateColumnIndex","startRowIndex","tempCol","tempSize","availableSize","desired","_i","_a","_b","_c","_d","_e","cellIndex","_f","_g","start","validateDesiredSize","call","stretchChildren","isChange","x","pivot","y","cellX","cellWidth","cellHeight","z","removeCell","actualSize","updateBounds","RowDefinition"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable no-self-assign */\nimport { DiagramElement } from '../elements/diagram-element';\nimport { Canvas } from './canvas';\nimport { Container } from './container';\nimport { Size } from '../../primitives/size';\nimport { randomId } from '../../utility/base-util';\nimport { TextElement } from '../elements/text-element';\n/**\n * Grid panel is used to arrange the children in a table like structure\n */\nvar GridPanel = /** @class */ (function (_super) {\n    __extends(GridPanel, _super);\n    function GridPanel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.childTable = [];\n        _this.cellStyle = {};\n        _this.desiredRowHeight = [];\n        _this.desiredCellWidth = [];\n        return _this;\n    }\n    /**\n     * rowDefinitions method \\\n     *\n     * @returns { RowDefinition[] } columnDefinitions method .\\\n     *\n     * @private\n     */\n    GridPanel.prototype.rowDefinitions = function () {\n        return this.rowDefns;\n    };\n    /**\n     * columnDefinitions method \\\n     *\n     * @returns { ColumnDefinition[] } columnDefinitions method .\\\n     *\n     * @private\n     */\n    GridPanel.prototype.columnDefinitions = function () {\n        return this.colDefns;\n    };\n    GridPanel.prototype.addObject = function (obj, rowId, columnId, rowSpan, columnSpan) {\n        //check if exists\n        if (this.rows.length >= rowId) {\n            var row = this.rows[rowId];\n            if (row.cells.length > columnId) {\n                columnSpan = columnSpan || 1;\n                rowSpan = rowSpan || 1;\n                var cell = row.cells[columnId];\n                cell.columnSpan = Math.max(columnSpan, cell.columnSpan);\n                cell.rowSpan = Math.max(rowSpan, cell.rowSpan);\n                var object = new GridCellItem();\n                object = obj;\n                object.rowId = rowId;\n                object.columnId = columnId;\n                object.columnSpan = columnSpan;\n                this.childTable[object.id] = object;\n                this.addObjectToCell(object, cell);\n            }\n        }\n    };\n    // public setCellStyle(rowId: number, columnId: number, cellStyle: ShapeStyleModel): void {\n    //     if (this.rows.length > rowId) {\n    //         let row: GridRow = this.rows[rowId];\n    //         if (row.cells.length > columnId) {\n    //             let cell: GridCell = row.cells[columnId];\n    //             cell.style = cellStyle;\n    //         }\n    //     }\n    // }\n    // public getRowId(obj: DiagramElement): number {\n    //     return (this.childTable[obj.id] as GridCellItem).rowId;\n    // }\n    // public getColumnId(obj: DiagramElement): number {\n    //     return (this.childTable[obj.id] as GridCellItem).columnId;\n    // }\n    // public getRowSpan(obj: DiagramElement): number {\n    //     return (this.childTable[obj.id] as GridCellItem).rowSpan;\n    // }\n    // public getColumnSpan(obj: DiagramElement): number {\n    //     return (this.childTable[obj.id] as GridCellItem).columnSpan;\n    // }\n    GridPanel.prototype.addObjectToCell = function (obj, cell) {\n        if (!cell.children) {\n            cell.children = [];\n        }\n        // obj.minWidth = cell.desiredCellWidth; obj.minHeight = cell.desiredCellHeight;\n        obj.style.strokeColor = 'black';\n        obj.style.strokeWidth = 1;\n        obj.style.fill = 'white';\n        cell.children.push(obj);\n    };\n    /**\n     * updateProperties method \\\n     *\n     * @returns { void } updateProperties method .\\\n     * @param {number} offsetX - provide the Connector value.\n     * @param {number} offsetY - provide the Connector value.\n     * @param {number} width - provide the Connector value.\n     * @param {number} height - provide the Connector value.\n     *\n     * @private\n     */\n    GridPanel.prototype.updateProperties = function (offsetX, offsetY, width, height) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.width = width;\n        this.height = height;\n    };\n    /**\n     * setDefinitions method \\\n     *\n     * @returns { void } setDefinitions method .\\\n     * @param {RowDefinition[]} rows - provide the rows value.\n     * @param {ColumnDefinition[]} columns - provide the Connector value.\n     *\n     * @private\n     */\n    GridPanel.prototype.setDefinitions = function (rows, columns) {\n        this.rowDefns = rows;\n        this.colDefns = columns;\n        this.children = [];\n        this.rows = this.rows || [];\n        for (var i = 0; i < rows.length; i++) {\n            var rowDefn = rows[i];\n            var row = new GridRow();\n            row.cells = [];\n            var defaultCell = new ColumnDefinition();\n            //replace this 100 with a proper property\n            defaultCell.width = this.width;\n            var columns_1 = this.colDefns;\n            if (columns_1 === undefined || columns_1.length < 1) {\n                columns_1 = [defaultCell];\n            }\n            this.addCellInRow(columns_1, rowDefn, row);\n            this.rows.push(row);\n        }\n    };\n    /**\n     * addCellInRow method \\\n     *\n     * @returns { void } addCellInRow method .\\\n     * @param {ColumnDefinition[]} columns - provide the rows value.\n     * @param {RowDefinition} rowDefn - provide the Connector value.\n     * @param {GridRow} row - provide the Connector value.\n     *\n     * @private\n     */\n    GridPanel.prototype.addCellInRow = function (columns, rowDefn, row) {\n        for (var j = 0; j < columns.length; j++) {\n            var colDefn = columns[j];\n            var cell = new GridCell();\n            cell.children = [];\n            this.cellStyle.fill = 'none';\n            this.cellStyle.strokeColor = 'none';\n            cell.id = randomId();\n            cell.style = this.cellStyle;\n            cell.desiredCellWidth = cell.minWidth = colDefn.width;\n            cell.desiredCellHeight = cell.minHeight = rowDefn.height;\n            row.cells.push(cell);\n            this.children.push(cell);\n        }\n    };\n    /**\n     * calculateSize method \\\n     *\n     * @returns { void } calculateSize method .\\\n     *\n     * @private\n     */\n    GridPanel.prototype.calculateSize = function () {\n        var rows = this.rows || [];\n        var calculateHeight = 0;\n        var calculateWidth = 0;\n        for (var i = 0; i < rows.length; i++) {\n            var row = this.rows[i];\n            calculateWidth = 0;\n            for (var j = 0; j < row.cells.length; j++) {\n                calculateWidth += row.cells[j].desiredCellWidth;\n                if (j === row.cells.length - 1) {\n                    if (this.width && this.width !== calculateWidth) {\n                        row.cells[j].desiredCellWidth += (this.width - calculateWidth);\n                        row.cells[j].minWidth = row.cells[j].desiredCellWidth;\n                        if (row.cells[j].children && row.cells[j].children.length) {\n                            row.cells[j].children[0].width = row.cells[j].desiredCellWidth;\n                        }\n                        this.colDefns[j].width = row.cells[j].desiredCellWidth;\n                    }\n                    calculateHeight += row.cells[j].desiredCellHeight;\n                    if (i === rows.length - 1) {\n                        if (this.height && this.height !== calculateHeight) {\n                            var height = (this.height - calculateHeight);\n                            if (height > 0) {\n                                for (var k = 0; k < row.cells.length; k++) {\n                                    row.cells[k].desiredCellHeight += height;\n                                    row.cells[k].minHeight = row.cells[k].desiredCellHeight = row.cells[k].desiredCellHeight;\n                                    if (row.cells[k].children && row.cells[k].children.length) {\n                                        row.cells[k].children[0].height = row.cells[k].desiredCellHeight;\n                                    }\n                                }\n                                this.rowDefns[i].height += height;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * updateRowHeight method \\\n     *\n     * @returns { void } updateRowHeight method .\\\n     * @param {number} rowId - provide the rows value.\n     * @param {number} height - provide the Connector value.\n     * @param {boolean} isConsiderChild - provide the Connector value.\n     * @param {number} padding - provide the Connector value.\n     *\n     * @private\n     */\n    GridPanel.prototype.updateRowHeight = function (rowId, height, isConsiderChild, padding) {\n        var row = this.rows[rowId];\n        this.rowDefns[rowId].height = height;\n        if (this.height !== undefined) {\n            this.height += height - row.cells[0].desiredCellHeight;\n        }\n        for (var i = 0; i < row.cells.length; i++) {\n            row.cells[i].desiredCellHeight = row.cells[i].minHeight = height;\n            if (row.cells[i].children && row.cells[i].children.length) {\n                row.cells[i].children[0].height = height;\n                this.setTextRefresh(row.cells[i].children[0]);\n            }\n        }\n        this.desiredRowHeight[rowId] = height;\n        this.measure(new Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n        if (isConsiderChild) {\n            var minHeight = (padding !== undefined) ? this.calculateCellHeightBasedOnChildren(rowId, padding) :\n                this.calculateCellHeight(rowId);\n            if (minHeight > height) {\n                this.updateRowHeight(rowId, minHeight, false);\n            }\n        }\n    };\n    GridPanel.prototype.setTextRefresh = function (canvas) {\n        if (canvas.children && canvas.children.length) {\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            var children = canvas.children;\n            for (var i = 0; i < children.length; i++) {\n                if (children[i] instanceof TextElement) {\n                    children[i].refreshTextElement();\n                }\n                if (children[i] instanceof Canvas) {\n                    this.setTextRefresh(children[i]);\n                }\n            }\n        }\n    };\n    /**\n     * updateColumnWidth method \\\n     *\n     * @returns { void } updateColumnWidth method .\\\n     * @param {number} colId - provide the rows value.\n     * @param {number} width - provide the Connector value.\n     * @param {boolean} isConsiderChild - provide the Connector value.\n     * @param {number} padding - provide the Connector value.\n     *\n     * @private\n     */\n    GridPanel.prototype.updateColumnWidth = function (colId, width, isConsiderChild, padding) {\n        this.colDefns[colId].width = width;\n        if (this.width !== undefined) {\n            this.width += width - this.rows[this.rows.length - 1].cells[colId].desiredCellWidth;\n        }\n        for (var i = 0; i < this.rows.length; i++) {\n            this.setTextRefresh(this.rows[i].cells[0]);\n            this.rows[i].cells[colId].desiredCellWidth = this.rows[i].cells[colId].minWidth = width;\n            if (this.rows[i].cells[colId].children && this.rows[i].cells[colId].children.length) {\n                this.rows[i].cells[colId].children[0].width = width;\n            }\n        }\n        this.desiredCellWidth[colId] = width;\n        this.measure(new Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n        if (isConsiderChild) {\n            var minWidth = (padding !== undefined) ? this.calculateCellWidthBasedOnChildren(colId, padding) :\n                this.calculateCellWidth(colId);\n            if (minWidth > width) {\n                this.updateColumnWidth(colId, minWidth, false);\n            }\n        }\n    };\n    GridPanel.prototype.calculateCellWidth = function (colIndex) {\n        var maxWidth;\n        var width;\n        var cell;\n        for (var i = 0; i < this.rows.length; i++) {\n            cell = this.rows[i].cells[colIndex];\n            if (cell.columnSpan === 1) {\n                width = (cell.outerBounds.width > cell.bounds.width &&\n                    (cell.children.length === 0 || cell.children[0].maxWidth === undefined)) ? cell.outerBounds.width : cell.bounds.width;\n                if (maxWidth) {\n                    maxWidth = (maxWidth < width) ? width : maxWidth;\n                }\n                else {\n                    maxWidth = width;\n                }\n            }\n        }\n        return maxWidth;\n    };\n    GridPanel.prototype.calculateCellHeight = function (rowIndex) {\n        var maxHeight;\n        var height;\n        var cell;\n        var row = this.rows[rowIndex];\n        for (var i = 0; i < row.cells.length; i++) {\n            cell = row.cells[i];\n            height = (cell.outerBounds.height > cell.bounds.height) ? cell.outerBounds.height : cell.bounds.height;\n            if (maxHeight) {\n                maxHeight = (maxHeight < height) ? height : maxHeight;\n            }\n            else {\n                maxHeight = height;\n            }\n        }\n        return maxHeight;\n    };\n    GridPanel.prototype.calculateCellSizeBasedOnChildren = function (cell, option, padding, maxSize) {\n        var maxBounds;\n        var canvas = (cell && cell.children.length > 0) ? cell.children[0] : undefined;\n        if (canvas && cell.columnSpan === 1) {\n            maxBounds = (option === 'Width') ? canvas.bounds.right : canvas.bounds.bottom;\n            if (!maxSize) {\n                maxSize = (option === 'Width') ? canvas.bounds.width : canvas.bounds.height;\n            }\n            for (var j = 0; j < canvas.children.length; j++) {\n                var children = canvas.children[j];\n                if (children instanceof Canvas) {\n                    if (children.id.indexOf('header') === -1) {\n                        var bounds = ((option === 'Width') ? children.bounds.right : children.bounds.bottom) + padding;\n                        if (bounds > maxBounds) {\n                            var size = (bounds - maxBounds) + ((option === 'Width') ? canvas.bounds.width : canvas.bounds.height);\n                            if (maxSize) {\n                                maxSize = (maxSize < size) ? size : maxSize;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return maxSize;\n    };\n    GridPanel.prototype.calculateCellWidthBasedOnChildren = function (colIndex, padding) {\n        var maxWidth; //let width: number;  let maxBounds: number; let canvas: Canvas;\n        var cell;\n        for (var i = 0; i < this.rows.length; i++) {\n            cell = this.rows[i].cells[colIndex];\n            maxWidth = this.calculateCellSizeBasedOnChildren(cell, 'Width', padding, maxWidth);\n        }\n        return maxWidth;\n    };\n    GridPanel.prototype.calculateCellHeightBasedOnChildren = function (rowIndex, padding) {\n        var maxHeight;\n        var cell;\n        // let maxBounds: number; let canvas: Canvas;\n        var row = this.rows[rowIndex];\n        for (var i = 0; i < row.cells.length; i++) {\n            cell = row.cells[i];\n            maxHeight = this.calculateCellSizeBasedOnChildren(cell, 'Height', padding, maxHeight);\n        }\n        return maxHeight;\n    };\n    /**\n     * addRow method \\\n     *\n     * @returns { void } addRow method .\\\n     * @param {number} rowId - provide the rowId value.\n     * @param {number} rowDefn - provide the rowDefn value.\n     * @param {boolean} isMeasure - provide the isMeasure value.\n     *\n     * @private\n     */\n    GridPanel.prototype.addRow = function (rowId, rowDefn, isMeasure) {\n        if (this.rowDefns.length > 0) {\n            this.rowDefns.splice(rowId, 0, rowDefn);\n        }\n        else {\n            this.rowDefns.push(rowDefn);\n        }\n        var row = new GridRow();\n        row.cells = [];\n        var defaultCell = new ColumnDefinition();\n        defaultCell.width = this.width;\n        var columns = this.colDefns;\n        this.addCellInRow(columns, rowDefn, row);\n        if (rowId > this.rows.length - 1) {\n            this.rows.push(row);\n        }\n        else {\n            this.rows.splice(rowId, 0, row);\n        }\n        if (isMeasure) {\n            this.measure(new Size(this.width, this.height));\n            this.arrange(this.desiredSize);\n        }\n    };\n    /**\n     * addColumn method \\\n     *\n     * @returns { void } addColumn method .\\\n     * @param {number} columnId - provide the rowId value.\n     * @param {number} column - provide the rowDefn value.\n     * @param {boolean} isMeasure - provide the isMeasure value.\n     *\n     * @private\n     */\n    GridPanel.prototype.addColumn = function (columnId, column, isMeasure) {\n        var row;\n        var rowDefn;\n        var colDefn;\n        var cell;\n        var rows = this.rows;\n        if (this.colDefns.length > 0) {\n            this.colDefns.splice(columnId, 0, column);\n        }\n        else {\n            this.colDefns.push(column);\n        }\n        if (this.width !== undefined) {\n            this.width += column.width;\n        }\n        for (var i = 0; i < rows.length; i++) {\n            row = rows[i];\n            rowDefn = this.rowDefns[i];\n            colDefn = column;\n            cell = new GridCell();\n            cell.style = this.cellStyle;\n            cell.desiredCellWidth = cell.minWidth = colDefn.width;\n            cell.desiredCellHeight = cell.minHeight = rowDefn.height;\n            cell.children = [];\n            if (columnId > row.cells.length - 1) {\n                row.cells.push(cell);\n            }\n            else {\n                row.cells.splice(columnId, 0, cell);\n            }\n            this.children.push(cell);\n        }\n        if (isMeasure) {\n            this.measure(new Size(this.width, this.height));\n            this.arrange(this.desiredSize);\n        }\n    };\n    /**\n     * removeRow method \\\n     *\n     * @returns { void } removeRow method .\\\n     * @param {number} rowId - provide the rowId value.\n     *\n     * @private\n     */\n    GridPanel.prototype.removeRow = function (rowId) {\n        var cell;\n        var element;\n        var rows = this.rows;\n        var removeRow = rows[rowId];\n        this.height -= this.rowDefns[rowId].height;\n        for (var i = 0; i < removeRow.cells.length; i++) {\n            cell = removeRow.cells[i];\n            this.children.splice(this.children.indexOf(cell), 1);\n            element = document.getElementById(cell.id + '_groupElement');\n            if (element && element.parentElement) {\n                element.parentElement.removeChild(element);\n            }\n        }\n        this.rows.splice(rowId, 1);\n        this.rowDefns.splice(rowId, 1);\n        this.measure(new Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n    };\n    /**\n     * removeColumn method \\\n     *\n     * @returns { void } removeColumn method .\\\n     * @param {number} columnId - provide the rowId value.\n     *\n     * @private\n     */\n    GridPanel.prototype.removeColumn = function (columnId) {\n        var cell;\n        var element;\n        var rows = this.rows;\n        this.width -= this.colDefns[columnId].width;\n        for (var i = 0; i < rows.length; i++) {\n            cell = rows[i].cells[columnId];\n            this.children.splice(this.children.indexOf(cell), 1);\n            element = document.getElementById(cell.id + '_groupElement');\n            if (element && element.parentElement) {\n                element.parentElement.removeChild(element);\n            }\n            rows[i].cells.splice(columnId, 1);\n        }\n        this.colDefns.splice(columnId, 1);\n        this.measure(new Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n    };\n    /**\n     * updateRowIndex method \\\n     *\n     * @returns { void } updateRowIndex method .\\\n     * @param {number} currentIndex - provide the rowId value.\n     * @param {number} newIndex - provide the rowId value.\n     *\n     * @private\n     */\n    GridPanel.prototype.updateRowIndex = function (currentIndex, newIndex) {\n        //const rows: GridRow[] = this.rows;\n        var temp = this.rows[currentIndex];\n        this.rows.splice(currentIndex, 1);\n        this.rows.splice(newIndex, 0, temp);\n        var tempRow = this.rowDefns[currentIndex];\n        this.rowDefns.splice(currentIndex, 1);\n        this.rowDefns.splice(newIndex, 0, tempRow);\n        this.measure(new Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n    };\n    /**\n     * updateColumnIndex method \\\n     *\n     * @returns { void } updateColumnIndex method .\\\n     * @param {number} startRowIndex - provide the startRowIndex value.\n     * @param {number} currentIndex - provide the currentIndex value.\n     * @param {number} newIndex - provide the newIndex value.\n     *\n     * @private\n     */\n    GridPanel.prototype.updateColumnIndex = function (startRowIndex, currentIndex, newIndex) {\n        var temp;\n        var cell;\n        for (var i = startRowIndex; i < this.rows.length; i++) {\n            temp = this.rows[i];\n            cell = this.rows[i].cells[currentIndex];\n            temp.cells.splice(currentIndex, 1);\n            temp.cells.splice(newIndex, 0, cell);\n        }\n        var tempCol = this.colDefns[currentIndex];\n        this.colDefns.splice(currentIndex, 1);\n        this.colDefns.splice(newIndex, 0, tempCol);\n        var tempSize = this.desiredCellWidth[currentIndex];\n        this.desiredCellWidth.splice(currentIndex, 1);\n        this.desiredCellWidth.splice(newIndex, 0, tempSize);\n        this.measure(new Size(this.width, this.height));\n        this.arrange(this.desiredSize);\n    };\n    /**\n     * measure method \\\n     *\n     * @returns { Size } measure method .\\\n     * @param {Size} availableSize - provide the startRowIndex value.\n     *\n     * @private\n     */\n    GridPanel.prototype.measure = function (availableSize) {\n        var desired = undefined;\n        if (this.rows !== undefined && this.rows.length > 0) {\n            var i = 0;\n            var j = 0;\n            desired = new Size(0, 0);\n            this.calculateSize();\n            for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\n                var row = _a[_i];\n                j = 0;\n                for (var _b = 0, _c = row.cells; _b < _c.length; _b++) {\n                    var cell = _c[_b];\n                    var size = cell.measure(new Size(cell.desiredCellWidth, cell.desiredCellHeight));\n                    if (cell.rowSpan === 1) {\n                        if (j === 0 || this.desiredRowHeight[i] === undefined) {\n                            this.desiredRowHeight[i] = size.height;\n                        }\n                        else {\n                            this.desiredRowHeight[i] = Math.max(size.height, this.desiredRowHeight[i]);\n                        }\n                    }\n                    if (cell.columnSpan === 1) {\n                        if (i === 0 || this.desiredCellWidth[j] === undefined) {\n                            this.desiredCellWidth[j] = size.width;\n                        }\n                        else {\n                            this.desiredCellWidth[j] = Math.max(size.width, this.desiredCellWidth[j]);\n                        }\n                        if (i === this.rows.length - 1) {\n                            desired.width += this.desiredCellWidth[j];\n                        }\n                    }\n                    j++;\n                }\n                desired.height += this.desiredRowHeight[i];\n                i++;\n            }\n            //to-do update definitions\n            i = j = 0;\n            var rowIndex = 0;\n            for (var _d = 0, _e = this.rows; _d < _e.length; _d++) {\n                var row = _e[_d];\n                j = 0;\n                var cellIndex = 0;\n                for (var _f = 0, _g = row.cells; _f < _g.length; _f++) {\n                    var cell = _g[_f];\n                    if (cell.columnSpan !== 1) {\n                        cell.desiredSize.width = 0;\n                        for (var start = 0; start < cell.columnSpan; start++) {\n                            if ((start + j) < row.cells.length) {\n                                cell.desiredSize.width += this.desiredCellWidth[start + j];\n                                cell.minWidth = cell.desiredSize.width;\n                                cell.measure(cell.desiredSize);\n                            }\n                        }\n                        j++;\n                    }\n                    else {\n                        cell.desiredSize.width = this.desiredCellWidth[cellIndex];\n                        cell.measure(cell.desiredSize);\n                    }\n                    if (cell.rowSpan !== 1) {\n                        cell.desiredSize.height = 0;\n                        for (var start = 0; start < cell.rowSpan; start++) {\n                            if ((start + rowIndex) < this.rows.length) {\n                                cell.desiredSize.height += this.desiredRowHeight[start + rowIndex];\n                                cell.minHeight = cell.desiredSize.height;\n                                cell.measure(cell.desiredSize);\n                            }\n                        }\n                    }\n                    else {\n                        cell.desiredSize.height = this.desiredRowHeight[rowIndex];\n                        cell.measure(cell.desiredSize);\n                    }\n                    i++;\n                    cellIndex++;\n                }\n                rowIndex++;\n            }\n        }\n        if (desired === undefined) {\n            desired = _super.prototype.validateDesiredSize.call(this, desired, availableSize);\n        }\n        _super.prototype.stretchChildren.call(this, desired);\n        this.desiredSize = desired;\n        return desired;\n    };\n    /**\n     * arrange method \\\n     *\n     * @returns { Size } arrange method .\\\n     * @param {Size} desiredSize - provide the startRowIndex value.\n     * @param {boolean} isChange - provide the startRowIndex value.\n     *\n     * @private\n     */\n    GridPanel.prototype.arrange = function (desiredSize, isChange) {\n        var j = 0;\n        var i = 0;\n        if (this.rows !== undefined && this.rows.length > 0) {\n            var x = this.offsetX - desiredSize.width * this.pivot.x;\n            var y = this.offsetY - desiredSize.height * this.pivot.y;\n            var cellX = x;\n            for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\n                var row = _a[_i];\n                cellX = x;\n                j = 0;\n                for (var _b = 0, _c = row.cells; _b < _c.length; _b++) {\n                    var cell = _c[_b];\n                    var cellWidth = Math.max(this.desiredCellWidth[j], cell.desiredSize.width);\n                    var cellHeight = Math.max(this.desiredRowHeight[i], cell.desiredSize.height);\n                    cell.offsetX = cellX + cellWidth * cell.pivot.x;\n                    cell.offsetY = y + cellHeight * cell.pivot.y;\n                    cellX += this.desiredCellWidth[j];\n                    cell.arrange(new Size(cellWidth, cellHeight));\n                    j++;\n                }\n                y += this.desiredRowHeight[i];\n                i++;\n            }\n            if (isChange) {\n                // Need to remove the unwanted the child elements in the grid\n                // Used for row span and column span.\n                var cell = void 0;\n                var row = void 0;\n                var k = void 0;\n                var z = void 0;\n                var removeCell = void 0;\n                for (i = 0; i < this.rows.length; i++) {\n                    row = this.rows[i];\n                    for (j = 0; j < row.cells.length; j++) {\n                        cell = row.cells[j];\n                        if (cell.columnSpan > 1) {\n                            // remove a child element when a column span is greater than 1\n                            this.children.splice((this.children.indexOf(cell)) + 1, cell.columnSpan - 1);\n                        }\n                        if (cell.rowSpan > 1) {\n                            for (k = i, z = 0; ((k + cell.rowSpan - 1) < this.rows.length && z < cell.rowSpan - 1); k++, z++) {\n                                removeCell = this.rows[k + 1].cells[j];\n                                // remove a child element when a row span is greater than 1\n                                this.children.splice(this.children.indexOf(removeCell), 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.actualSize = desiredSize;\n        this.updateBounds();\n        return desiredSize;\n    };\n    return GridPanel;\n}(Container));\nexport { GridPanel };\n/**\n * Defines the behavior of the RowDefinition of node\n */\nvar RowDefinition = /** @class */ (function () {\n    function RowDefinition() {\n        /** returns the height of node */\n        this.height = undefined;\n    }\n    return RowDefinition;\n}());\nexport { RowDefinition };\n/**\n * Defines the behavior of the ColumnDefinition of node\n */\nvar ColumnDefinition = /** @class */ (function () {\n    function ColumnDefinition() {\n        /** returns the width of node */\n        this.width = undefined;\n    }\n    return ColumnDefinition;\n}());\nexport { ColumnDefinition };\n/** @private */\nvar GridRow = /** @class */ (function () {\n    function GridRow() {\n        this.cells = null;\n    }\n    return GridRow;\n}());\nexport { GridRow };\n/** @private */\nvar GridCell = /** @class */ (function (_super) {\n    __extends(GridCell, _super);\n    function GridCell() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.columnSpan = 1;\n        _this.rowSpan = 1;\n        return _this;\n    }\n    return GridCell;\n}(Canvas));\nexport { GridCell };\nvar GridCellItem = /** @class */ (function (_super) {\n    __extends(GridCellItem, _super);\n    function GridCellItem() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rowId = 0;\n        _this.columnId = 0;\n        _this.rowSpan = 1;\n        _this.columnSpan = 1;\n        return _this;\n    }\n    return GridCellItem;\n}(DiagramElement));\n"]},"metadata":{},"sourceType":"module"}