{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Property, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Defines and processes coordinates\n */\n\nvar Point =\n/** @class */\nfunction (_super) {\n  __extends(Point, _super);\n\n  function Point() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * equals method \\\n   *\n   * @returns { boolean } equals method .\\\n   * @param {PointModel} point1 - provide the point1 value.\n   * @param {PointModel} point2 - provide the point1 value.\n   *\n   * @private\n   */\n\n\n  Point.equals = function (point1, point2) {\n    if (point1 === point2) {\n      return true;\n    }\n\n    if (!point1 || !point2) {\n      return false;\n    }\n\n    return !point1 || !point2 || point1.x === point2.x && point1.y === point2.y;\n  };\n  /**\n   * isEmptyPoint method \\\n   *\n   * @returns { boolean } isEmptyPoint method .\\\n   * @param {PointModel} point - provide the points value.\n   *\n   * @private\n   */\n\n\n  Point.isEmptyPoint = function (point) {\n    if (point.x && point.y) {\n      return false;\n    }\n\n    return true;\n  }; // public add(point1: PointModel, point2: PointModel): PointModel {\n  //     return { x: point1.x + point2.x, y: point1.y + point2.y };\n  // }\n  // public subtract(point1: PointModel, point2: PointModel): PointModel {\n  //     return { x: point1.x - point2.x, y: point1.y - point2.y };\n  // }\n  // public multiply(point1: PointModel, point2: PointModel): PointModel {\n  //     return {\n  //         x: point1.x * point2.x, y: point1.y * point2.y\n  //     };\n  // }\n  // public crossProduct(point1: PointModel, point2: PointModel): PointModel {\n  //     return {\n  //         x: point1.x * point2.y, y: point2.x * point1.y\n  //     };\n  // }\n  // public offset(offsetX: number, offsetY: number): void {\n  //     this.x += offsetX;\n  //     this.y += offsetY;\n  // }\n  // public rotate(angle: number): PointModel {\n  //     let c: number = Math.cos(angle);\n  //     let s: number = Math.sin(angle);\n  //     return {\n  //         x: c * this.x - s * this.y, y: s * this.x + c * this.y\n  //     };\n  // }\n  // public distance(point2: PointModel): number {\n  //     return Math.sqrt(Math.pow(this.x - point2.x, 2) + Math.pow(this.y - point2.y, 2));\n  // }\n\n  /**\n   * transform method \\\n   *\n   * @returns { PointModel } transform method .\\\n   * @param {PointModel} point - provide the points value.\n   * @param {number} angle - provide the points value.\n   * @param {number} length - provide the points value.\n   *\n   * @private\n   */\n\n\n  Point.transform = function (point, angle, length) {\n    var pt = {\n      x: 0,\n      y: 0\n    };\n    pt.x = Math.round((point.x + length * Math.cos(angle * Math.PI / 180)) * 100) / 100;\n    pt.y = Math.round((point.y + length * Math.sin(angle * Math.PI / 180)) * 100) / 100;\n    return pt;\n  };\n  /**\n   * findLength method \\\n   *\n   * @returns { number } findLength method .\\\n   * @param {PointModel} s - provide the points value.\n   * @param {PointModel} e - provide the points value.\n   *\n   * @private\n   */\n\n\n  Point.findLength = function (s, e) {\n    var length = Math.sqrt(Math.pow(s.x - e.x, 2) + Math.pow(s.y - e.y, 2));\n    return length;\n  };\n  /**\n   * findAngle method \\\n   *\n   * @returns { number } findAngle method .\\\n   * @param {PointModel} point1 - provide the points value.\n   * @param {PointModel} point2 - provide the points value.\n   *\n   * @private\n   */\n\n\n  Point.findAngle = function (point1, point2) {\n    var angle = Math.atan2(point2.y - point1.y, point2.x - point1.x);\n    angle = 180 * angle / Math.PI;\n    angle %= 360;\n\n    if (angle < 0) {\n      angle += 360;\n    }\n\n    return angle;\n  };\n  /**\n   * distancePoints method \\\n   *\n   * @returns { number } distancePoints method .\\\n   * @param {PointModel} pt1 - provide the points value.\n   * @param {PointModel} pt2 - provide the points value.\n   *\n   * @private\n   */\n\n\n  Point.distancePoints = function (pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n  };\n  /**\n   * getLengthFromListOfPoints method \\\n   *\n   * @returns { number } getLengthFromListOfPoints method .\\\n   * @param {PointModel[]} points - provide the points value.\n   *\n   * @private\n   */\n\n\n  Point.getLengthFromListOfPoints = function (points) {\n    var length = 0;\n\n    for (var j = 0; j < points.length - 1; j++) {\n      length += this.distancePoints(points[j], points[j + 1]);\n    }\n\n    return length;\n  };\n  /**\n   * adjustPoint method \\\n   *\n   * @returns { PointModel } adjustPoint method .\\\n   * @param {PointModel} source - provide the points value.\n   * @param {PointModel} target - provide the points value.\n   * @param {boolean} isStart - provide the isStart value.\n   * @param {number} length - provide the length value.\n   *\n   * @private\n   */\n\n\n  Point.adjustPoint = function (source, target, isStart, length) {\n    var pt = isStart ? {\n      x: source.x,\n      y: source.y\n    } : {\n      x: target.x,\n      y: target.y\n    };\n    var angle;\n\n    if (source.x === target.x) {\n      if (source.y < target.y && isStart || source.y > target.y && !isStart) {\n        pt.y += length;\n      } else {\n        pt.y -= length;\n      }\n    } else if (source.y === target.y) {\n      if (source.x < target.x && isStart || source.x > target.x && !isStart) {\n        pt.x += length;\n      } else {\n        pt.x -= length;\n      }\n    } else {\n      if (isStart) {\n        angle = this.findAngle(source, target);\n        pt = this.transform(source, angle, length);\n      } else {\n        angle = this.findAngle(target, source);\n        pt = this.transform(target, angle, length);\n      }\n    }\n\n    return pt;\n  };\n  /**\n   * direction method \\\n   *\n   * @returns { string } direction method .\\\n   * @param {PointModel} pt1 - provide the points value.\n   * @param {PointModel} pt2 - provide the points value.\n   *\n   * @private\n   */\n\n\n  Point.direction = function (pt1, pt2) {\n    if (Math.abs(pt2.x - pt1.x) > Math.abs(pt2.y - pt1.y)) {\n      return pt1.x < pt2.x ? 'Right' : 'Left';\n    } else {\n      return pt1.y < pt2.y ? 'Bottom' : 'Top';\n    }\n  }; //Move these methods to util\n  //public CompareTo(point: PointModel): number {\n  //    let result: number = this.X.CompareTo(point.X);\n  //    return result != 0 ? result : this.Y.CompareTo(point.Y);\n  //}\n  //public CompareOnYAxis(point: PointModel): number {\n  //    let result: number = this.X.CompareTo(point.X);\n  //    return result != 0 ? result : this.Y.CompareTo(point.Y);\n  //}\n  //public CompareOnXAxis(point: PointModel): number {\n  //    let result: number = this.Y.CompareTo(point.Y);\n  //    return result != 0 ? result : this.X.CompareTo(point.X);\n  //}\n  // public round(): void {\n  //     this.x = Math.round(this.x);\n  //     this.y = Math.round(this.y);\n  // }\n\n  /**\n   * getClassName method \\\n   *\n   * @returns { string } getClassName method .\\\n   *\n   * @private\n   */\n\n\n  Point.prototype.getClassName = function () {\n    return 'Point';\n  };\n\n  __decorate([Property(0)], Point.prototype, \"x\", void 0);\n\n  __decorate([Property(0)], Point.prototype, \"y\", void 0);\n\n  return Point;\n}(ChildProperty);\n\nexport { Point };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/point.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Property","ChildProperty","Point","_super","apply","equals","point1","point2","x","y","isEmptyPoint","point","transform","angle","pt","Math","round","cos","PI","sin","findLength","s","e","sqrt","pow","findAngle","atan2","distancePoints","pt1","pt2","getLengthFromListOfPoints","points","j","adjustPoint","source","isStart","direction","abs","getClassName"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Defines and processes coordinates\n */\nvar Point = /** @class */ (function (_super) {\n    __extends(Point, _super);\n    function Point() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * equals method \\\n     *\n     * @returns { boolean } equals method .\\\n     * @param {PointModel} point1 - provide the point1 value.\n     * @param {PointModel} point2 - provide the point1 value.\n     *\n     * @private\n     */\n    Point.equals = function (point1, point2) {\n        if (point1 === point2) {\n            return true;\n        }\n        if (!point1 || !point2) {\n            return false;\n        }\n        return !point1 || !point2 || point1.x === point2.x && point1.y === point2.y;\n    };\n    /**\n     * isEmptyPoint method \\\n     *\n     * @returns { boolean } isEmptyPoint method .\\\n     * @param {PointModel} point - provide the points value.\n     *\n     * @private\n     */\n    Point.isEmptyPoint = function (point) {\n        if (point.x && point.y) {\n            return false;\n        }\n        return true;\n    };\n    // public add(point1: PointModel, point2: PointModel): PointModel {\n    //     return { x: point1.x + point2.x, y: point1.y + point2.y };\n    // }\n    // public subtract(point1: PointModel, point2: PointModel): PointModel {\n    //     return { x: point1.x - point2.x, y: point1.y - point2.y };\n    // }\n    // public multiply(point1: PointModel, point2: PointModel): PointModel {\n    //     return {\n    //         x: point1.x * point2.x, y: point1.y * point2.y\n    //     };\n    // }\n    // public crossProduct(point1: PointModel, point2: PointModel): PointModel {\n    //     return {\n    //         x: point1.x * point2.y, y: point2.x * point1.y\n    //     };\n    // }\n    // public offset(offsetX: number, offsetY: number): void {\n    //     this.x += offsetX;\n    //     this.y += offsetY;\n    // }\n    // public rotate(angle: number): PointModel {\n    //     let c: number = Math.cos(angle);\n    //     let s: number = Math.sin(angle);\n    //     return {\n    //         x: c * this.x - s * this.y, y: s * this.x + c * this.y\n    //     };\n    // }\n    // public distance(point2: PointModel): number {\n    //     return Math.sqrt(Math.pow(this.x - point2.x, 2) + Math.pow(this.y - point2.y, 2));\n    // }\n    /**\n     * transform method \\\n     *\n     * @returns { PointModel } transform method .\\\n     * @param {PointModel} point - provide the points value.\n     * @param {number} angle - provide the points value.\n     * @param {number} length - provide the points value.\n     *\n     * @private\n     */\n    Point.transform = function (point, angle, length) {\n        var pt = { x: 0, y: 0 };\n        pt.x = Math.round((point.x + length * Math.cos(angle * Math.PI / 180)) * 100) / 100;\n        pt.y = Math.round((point.y + length * Math.sin(angle * Math.PI / 180)) * 100) / 100;\n        return pt;\n    };\n    /**\n     * findLength method \\\n     *\n     * @returns { number } findLength method .\\\n     * @param {PointModel} s - provide the points value.\n     * @param {PointModel} e - provide the points value.\n     *\n     * @private\n     */\n    Point.findLength = function (s, e) {\n        var length = Math.sqrt(Math.pow((s.x - e.x), 2) + Math.pow((s.y - e.y), 2));\n        return length;\n    };\n    /**\n     * findAngle method \\\n     *\n     * @returns { number } findAngle method .\\\n     * @param {PointModel} point1 - provide the points value.\n     * @param {PointModel} point2 - provide the points value.\n     *\n     * @private\n     */\n    Point.findAngle = function (point1, point2) {\n        var angle = Math.atan2(point2.y - point1.y, point2.x - point1.x);\n        angle = (180 * angle / Math.PI);\n        angle %= 360;\n        if (angle < 0) {\n            angle += 360;\n        }\n        return angle;\n    };\n    /**\n     * distancePoints method \\\n     *\n     * @returns { number } distancePoints method .\\\n     * @param {PointModel} pt1 - provide the points value.\n     * @param {PointModel} pt2 - provide the points value.\n     *\n     * @private\n     */\n    Point.distancePoints = function (pt1, pt2) {\n        return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n    };\n    /**\n     * getLengthFromListOfPoints method \\\n     *\n     * @returns { number } getLengthFromListOfPoints method .\\\n     * @param {PointModel[]} points - provide the points value.\n     *\n     * @private\n     */\n    Point.getLengthFromListOfPoints = function (points) {\n        var length = 0;\n        for (var j = 0; j < points.length - 1; j++) {\n            length += this.distancePoints(points[j], points[j + 1]);\n        }\n        return length;\n    };\n    /**\n     * adjustPoint method \\\n     *\n     * @returns { PointModel } adjustPoint method .\\\n     * @param {PointModel} source - provide the points value.\n     * @param {PointModel} target - provide the points value.\n     * @param {boolean} isStart - provide the isStart value.\n     * @param {number} length - provide the length value.\n     *\n     * @private\n     */\n    Point.adjustPoint = function (source, target, isStart, length) {\n        var pt = isStart ? { x: source.x, y: source.y } : { x: target.x, y: target.y };\n        var angle;\n        if (source.x === target.x) {\n            if (source.y < target.y && isStart || source.y > target.y && !isStart) {\n                pt.y += length;\n            }\n            else {\n                pt.y -= length;\n            }\n        }\n        else if (source.y === target.y) {\n            if (source.x < target.x && isStart || source.x > target.x && !isStart) {\n                pt.x += length;\n            }\n            else {\n                pt.x -= length;\n            }\n        }\n        else {\n            if (isStart) {\n                angle = this.findAngle(source, target);\n                pt = this.transform(source, angle, length);\n            }\n            else {\n                angle = this.findAngle(target, source);\n                pt = this.transform(target, angle, length);\n            }\n        }\n        return pt;\n    };\n    /**\n     * direction method \\\n     *\n     * @returns { string } direction method .\\\n     * @param {PointModel} pt1 - provide the points value.\n     * @param {PointModel} pt2 - provide the points value.\n     *\n     * @private\n     */\n    Point.direction = function (pt1, pt2) {\n        if (Math.abs(pt2.x - pt1.x) > Math.abs(pt2.y - pt1.y)) {\n            return pt1.x < pt2.x ? 'Right' : 'Left';\n        }\n        else {\n            return pt1.y < pt2.y ? 'Bottom' : 'Top';\n        }\n    };\n    //Move these methods to util\n    //public CompareTo(point: PointModel): number {\n    //    let result: number = this.X.CompareTo(point.X);\n    //    return result != 0 ? result : this.Y.CompareTo(point.Y);\n    //}\n    //public CompareOnYAxis(point: PointModel): number {\n    //    let result: number = this.X.CompareTo(point.X);\n    //    return result != 0 ? result : this.Y.CompareTo(point.Y);\n    //}\n    //public CompareOnXAxis(point: PointModel): number {\n    //    let result: number = this.Y.CompareTo(point.Y);\n    //    return result != 0 ? result : this.X.CompareTo(point.X);\n    //}\n    // public round(): void {\n    //     this.x = Math.round(this.x);\n    //     this.y = Math.round(this.y);\n    // }\n    /**\n     * getClassName method \\\n     *\n     * @returns { string } getClassName method .\\\n     *\n     * @private\n     */\n    Point.prototype.getClassName = function () {\n        return 'Point';\n    };\n    __decorate([\n        Property(0)\n    ], Point.prototype, \"x\", void 0);\n    __decorate([\n        Property(0)\n    ], Point.prototype, \"y\", void 0);\n    return Point;\n}(ChildProperty));\nexport { Point };\n"]},"metadata":{},"sourceType":"module"}