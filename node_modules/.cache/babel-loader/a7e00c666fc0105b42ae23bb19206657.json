{"ast":null,"code":"import { Container } from '../core/containers/container';\nimport { DiagramEvent, RealAction, DiagramConstraints } from '../enum/enum';\nimport { cloneObject as clone } from '../utility/base-util';\nimport { cloneBlazorObject } from '../utility/diagram-util';\n/**\n * Layout Animation function to enable or disable layout animation\n */\n\nvar LayoutAnimation =\n/** @class */\nfunction () {\n  function LayoutAnimation() {\n    this.protectChange = false;\n  }\n  /**\n   * Layout expand function for animation of expand and collapse \\\n   *\n   * @returns {  void }   Layout expand function for animation of expand and collapse .\\\n   * @param {boolean} animation - provide the angle value.\n   * @param {ILayout} objects - provide the angle value.\n   * @param {Node} node - provide the angle value.\n   * @param {Diagram} diagram - provide the angle value.\n   * @private\n   */\n\n\n  LayoutAnimation.prototype.expand = function (animation, objects, node, diagram) {\n    var _this = this;\n\n    var setIntervalObject = {};\n    var i = 0;\n    var j = 0;\n    diagram.realActions = diagram.realActions | RealAction.AnimationClick;\n    setIntervalObject[i] = setInterval(function () {\n      j++;\n      return _this.layoutAnimation(objects, setIntervalObject, j === 6, diagram, node);\n    }, 20);\n\n    if (node.isExpanded) {\n      var opacity_1 = .2;\n      var protect = 'isProtectedOnChange';\n      this.protectChange = diagram[protect];\n      diagram.protectPropertyChange(false); //let objects: ILayout = diagram.doLayout();\n\n      var setIntervalObjects_1 = {};\n      var x = 0;\n\n      if (animation) {\n        this.updateOpacity(node, opacity_1, diagram); // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n        var current = this;\n        setIntervalObjects_1[x] = setInterval(function () {\n          diagram.allowServerDataBinding = false; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n          opacity_1 <= 1 ? _this.updateOpacity(node, opacity_1, diagram) : clearInterval(setIntervalObjects_1[0]);\n          opacity_1 += .2;\n          diagram.allowServerDataBinding = true;\n        }, 20);\n      }\n    }\n  };\n  /**\n   * Setinterval and Clear interval for layout animation \\\n   *\n   * @returns {  void }   Setinterval and Clear interval for layout animation .\\\n   * @param {ILayout} objValue - provide the angle value.\n   * @param {Object} layoutTimer - provide the angle value.\n   * @param {ILayout} stop - provide the angle value.\n   * @param {Diagram} diagram - provide the angle value.\n   * @param {NodeModel} node - provide the angle value.\n   * @private\n   */\n\n\n  LayoutAnimation.prototype.layoutAnimation = function (objValue, layoutTimer, stop, diagram, node) {\n    if (!stop) {\n      for (var k = 0; k < objValue.objects.length; k++) {\n        var node_1 = diagram.nameTable[objValue.objects[k].id];\n        node_1.offsetX += objValue.objects[k].differenceX / 5;\n        node_1.offsetY += objValue.objects[k].differenceY / 5;\n      }\n    }\n\n    if (stop) {\n      clearInterval(layoutTimer[0]);\n      diagram.realActions = diagram.realActions & ~RealAction.AnimationClick;\n      diagram.refreshCanvasLayers();\n      diagram.protectPropertyChange(true);\n      diagram.triggerEvent(DiagramEvent.animationComplete, undefined);\n      diagram.organizationalChartModule.isAnimation = false;\n      diagram.layout.fixedNode = '';\n      diagram.protectPropertyChange(this.protectChange);\n      var arg = {\n        element: cloneBlazorObject(clone(node)),\n        state: node.isExpanded ? true : false\n      };\n      diagram.triggerEvent(DiagramEvent.expandStateChange, arg);\n\n      if (diagram.lineRoutingModule && diagram.constraints & DiagramConstraints.LineRouting) {\n        diagram.resetSegments();\n      }\n    }\n  };\n  /**\n   *update the node opacity for the node and connector once the layout animation starts \\\n   *\n   * @returns {  void }    update the node opacity for the node and connector once the layout animation starts .\\\n   * @param {Node} source - provide the source value.\n   * @param {number} value - provide the value.\n   * @param {Diagram} diagram - provide the diagram value.\n   * @private\n   */\n\n\n  LayoutAnimation.prototype.updateOpacity = function (source, value, diagram) {\n    for (var i = 0; i < source.outEdges.length; i++) {\n      var connector = diagram.nameTable[source.outEdges[i]];\n      var target = diagram.nameTable[connector.targetID];\n      connector.style.opacity = value;\n\n      for (var j = 0; j < connector.wrapper.children.length; j++) {\n        connector.wrapper.children[j].style.opacity = value;\n        target.style.opacity = value;\n\n        if (target.wrapper instanceof Container) {\n          diagram.updateNodeProperty(target.wrapper, undefined, value);\n        }\n      }\n\n      this.updateOpacity(target, value, diagram);\n    }\n  };\n  /**\n   *To destroy the ruler\n   *\n   * @returns {void} To destroy the ruler\n   */\n\n\n  LayoutAnimation.prototype.destroy = function () {\n    /**\n     * Destroys the LayoutAnimate module\n     */\n  };\n  /**\n   * Core method to return the component name.\n   *\n   * @returns {string}  Core method to return the component name.\n   * @private\n   */\n\n\n  LayoutAnimation.prototype.getModuleName = function () {\n    /**\n     * Returns the module name\n     */\n    return 'LayoutAnimate';\n  };\n\n  return LayoutAnimation;\n}();\n\nexport { LayoutAnimation };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/layout-animation.js"],"names":["Container","DiagramEvent","RealAction","DiagramConstraints","cloneObject","clone","cloneBlazorObject","LayoutAnimation","protectChange","prototype","expand","animation","objects","node","diagram","_this","setIntervalObject","i","j","realActions","AnimationClick","setInterval","layoutAnimation","isExpanded","opacity_1","protect","protectPropertyChange","setIntervalObjects_1","x","updateOpacity","current","allowServerDataBinding","clearInterval","objValue","layoutTimer","stop","k","length","node_1","nameTable","id","offsetX","differenceX","offsetY","differenceY","refreshCanvasLayers","triggerEvent","animationComplete","undefined","organizationalChartModule","isAnimation","layout","fixedNode","arg","element","state","expandStateChange","lineRoutingModule","constraints","LineRouting","resetSegments","source","value","outEdges","connector","target","targetID","style","opacity","wrapper","children","updateNodeProperty","destroy","getModuleName"],"mappings":"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","sourcesContent":["import { Container } from '../core/containers/container';\nimport { DiagramEvent, RealAction, DiagramConstraints } from '../enum/enum';\nimport { cloneObject as clone } from '../utility/base-util';\nimport { cloneBlazorObject } from '../utility/diagram-util';\n/**\n * Layout Animation function to enable or disable layout animation\n */\nvar LayoutAnimation = /** @class */ (function () {\n    function LayoutAnimation() {\n        this.protectChange = false;\n    }\n    /**\n     * Layout expand function for animation of expand and collapse \\\n     *\n     * @returns {  void }   Layout expand function for animation of expand and collapse .\\\n     * @param {boolean} animation - provide the angle value.\n     * @param {ILayout} objects - provide the angle value.\n     * @param {Node} node - provide the angle value.\n     * @param {Diagram} diagram - provide the angle value.\n     * @private\n     */\n    LayoutAnimation.prototype.expand = function (animation, objects, node, diagram) {\n        var _this = this;\n        var setIntervalObject = {};\n        var i = 0;\n        var j = 0;\n        diagram.realActions = diagram.realActions | RealAction.AnimationClick;\n        setIntervalObject[i] = setInterval(function () {\n            j++;\n            return _this.layoutAnimation(objects, setIntervalObject, j === 6, diagram, node);\n        }, 20);\n        if (node.isExpanded) {\n            var opacity_1 = .2;\n            var protect = 'isProtectedOnChange';\n            this.protectChange = diagram[protect];\n            diagram.protectPropertyChange(false);\n            //let objects: ILayout = diagram.doLayout();\n            var setIntervalObjects_1 = {};\n            var x = 0;\n            if (animation) {\n                this.updateOpacity(node, opacity_1, diagram);\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                var current = this;\n                setIntervalObjects_1[x] = setInterval(function () {\n                    diagram.allowServerDataBinding = false;\n                    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                    opacity_1 <= 1 ? _this.updateOpacity(node, opacity_1, diagram) : clearInterval(setIntervalObjects_1[0]);\n                    opacity_1 += .2;\n                    diagram.allowServerDataBinding = true;\n                }, 20);\n            }\n        }\n    };\n    /**\n     * Setinterval and Clear interval for layout animation \\\n     *\n     * @returns {  void }   Setinterval and Clear interval for layout animation .\\\n     * @param {ILayout} objValue - provide the angle value.\n     * @param {Object} layoutTimer - provide the angle value.\n     * @param {ILayout} stop - provide the angle value.\n     * @param {Diagram} diagram - provide the angle value.\n     * @param {NodeModel} node - provide the angle value.\n     * @private\n     */\n    LayoutAnimation.prototype.layoutAnimation = function (objValue, layoutTimer, stop, diagram, node) {\n        if (!stop) {\n            for (var k = 0; k < objValue.objects.length; k++) {\n                var node_1 = diagram.nameTable[objValue.objects[k].id];\n                node_1.offsetX += objValue.objects[k].differenceX / 5;\n                node_1.offsetY += objValue.objects[k].differenceY / 5;\n            }\n        }\n        if (stop) {\n            clearInterval(layoutTimer[0]);\n            diagram.realActions = diagram.realActions & ~RealAction.AnimationClick;\n            diagram.refreshCanvasLayers();\n            diagram.protectPropertyChange(true);\n            diagram.triggerEvent(DiagramEvent.animationComplete, undefined);\n            diagram.organizationalChartModule.isAnimation = false;\n            diagram.layout.fixedNode = '';\n            diagram.protectPropertyChange(this.protectChange);\n            var arg = {\n                element: cloneBlazorObject(clone(node)), state: (node.isExpanded) ? true : false\n            };\n            diagram.triggerEvent(DiagramEvent.expandStateChange, arg);\n            if (diagram.lineRoutingModule && diagram.constraints & DiagramConstraints.LineRouting) {\n                diagram.resetSegments();\n            }\n        }\n    };\n    /**\n     *update the node opacity for the node and connector once the layout animation starts \\\n     *\n     * @returns {  void }    update the node opacity for the node and connector once the layout animation starts .\\\n     * @param {Node} source - provide the source value.\n     * @param {number} value - provide the value.\n     * @param {Diagram} diagram - provide the diagram value.\n     * @private\n     */\n    LayoutAnimation.prototype.updateOpacity = function (source, value, diagram) {\n        for (var i = 0; i < source.outEdges.length; i++) {\n            var connector = diagram.nameTable[source.outEdges[i]];\n            var target = diagram.nameTable[connector.targetID];\n            connector.style.opacity = value;\n            for (var j = 0; j < connector.wrapper.children.length; j++) {\n                connector.wrapper.children[j].style.opacity = value;\n                target.style.opacity = value;\n                if (target.wrapper instanceof Container) {\n                    diagram.updateNodeProperty(target.wrapper, undefined, value);\n                }\n            }\n            this.updateOpacity(target, value, diagram);\n        }\n    };\n    /**\n     *To destroy the ruler\n     *\n     * @returns {void} To destroy the ruler\n     */\n    LayoutAnimation.prototype.destroy = function () {\n        /**\n         * Destroys the LayoutAnimate module\n         */\n    };\n    /**\n     * Core method to return the component name.\n     *\n     * @returns {string}  Core method to return the component name.\n     * @private\n     */\n    LayoutAnimation.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'LayoutAnimate';\n    };\n    return LayoutAnimation;\n}());\nexport { LayoutAnimation };\n"]},"metadata":{},"sourceType":"module"}