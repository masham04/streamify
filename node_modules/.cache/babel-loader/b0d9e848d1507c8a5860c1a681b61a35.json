{"ast":null,"code":"import { createHtmlElement, removeElement } from '../utility/dom-util';\nimport { Ruler } from '../../ruler/index';\nimport { Size } from '../primitives/size';\nimport { getFunction } from '../utility/base-util';\n/**\n * defines the helper methods for the ruler\n */\n\n/**\n * renderOverlapElement method \\\n *\n * @returns {void} renderOverlapElement method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @private\n */\n\nexport function renderOverlapElement(diagram) {\n  var rulerSize = getRulerSize(diagram);\n  var attributes = {\n    'id': diagram.element.id + '_overlapRuler',\n    style: 'height:' + rulerSize.height + 'px;width:' + rulerSize.width + 'px;position:absolute;left:0;top:0',\n    class: 'e-ruler-overlap'\n  };\n  var overlap = createHtmlElement('div', attributes);\n  diagram.element.insertBefore(overlap, diagram.element.firstChild);\n}\n/**\n * renderRuler method \\\n *\n * @returns {void} renderRuler method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @param { boolean} isHorizontal - provide the content  value.\n * @private\n */\n\nexport function renderRuler(diagram, isHorizontal) {\n  var div = document.getElementById(diagram.element.id + (isHorizontal ? '_hRuler' : '_vRuler'));\n  var rulerSize = getRulerSize(diagram);\n  var rulerGeometry = getRulerGeometry(diagram);\n  var margin = isHorizontal ? 'margin-left:' + rulerSize.width + 'px;' : 'margin-top:' + rulerSize.height + 'px;';\n\n  if (!div) {\n    var style = 'height:' + (isHorizontal ? rulerSize.height : rulerGeometry.height + 100) + 'px;overflow:hidden;width:' + (isHorizontal ? rulerGeometry.width + 100 : rulerSize.width) + 'px;position:absolute;font-size:11px;' + margin;\n    var attributes = {\n      'id': diagram.element.id + (isHorizontal ? '_hRuler' : '_vRuler'),\n      style: style\n    };\n    div = createHtmlElement('div', attributes);\n  }\n\n  diagram.element.insertBefore(div, diagram.element.firstChild);\n  var diagramRuler = isHorizontal ? diagram.rulerSettings.horizontalRuler : diagram.rulerSettings.verticalRuler;\n  var ruler = new Ruler(diagramRuler);\n  ruler.orientation = isHorizontal ? 'Horizontal' : 'Vertical';\n  ruler.length = (isHorizontal ? rulerGeometry.width : rulerGeometry.height) + diagramRuler.segmentWidth;\n  ruler.appendTo('#' + diagram.element.id + (isHorizontal ? '_hRuler' : '_vRuler')); // eslint-disable-next-line\n\n  isHorizontal ? diagram.hRuler = ruler : diagram.vRuler = ruler;\n  var rulerObj = document.getElementById(diagram.element.id + (isHorizontal ? '_hRuler' : '_vRuler')); // eslint-disable-next-line\n\n  isHorizontal ? diagram.hRuler.element = rulerObj : diagram.vRuler.element = rulerObj;\n}\n/**\n * updateRuler method \\\n *\n * @returns {void} updateRuler method .\\\n * @param { Diagram} diagram - provide the diagram  value.\n * @private\n */\n\nexport function updateRuler(diagram) {\n  var hOffset = -diagram.scroller.horizontalOffset;\n  var vOffset = -diagram.scroller.verticalOffset;\n\n  if (diagram && diagram.rulerSettings.showRulers) {\n    diagram.hRuler.length = 0;\n    diagram.vRuler.length = 0;\n\n    if (hOffset !== undefined && diagram.hRuler.element) {\n      updateRulerDimension(diagram, diagram.hRuler, hOffset, true);\n    }\n\n    if (vOffset !== undefined && diagram.vRuler.element) {\n      updateRulerDimension(diagram, diagram.vRuler, vOffset, false);\n    }\n  } else {\n    removeRulerElements(diagram);\n  }\n}\n/**\n * removeRulerElements method \\\n *\n * @returns {void} removeRulerElements method .\\\n * @param { Diagram} diagram - provide the diagram  value.\n * @private\n */\n\nexport function removeRulerElements(diagram) {\n  removeElement(diagram.element.id + '_hRuler');\n  removeElement(diagram.element.id + '_vRuler');\n  removeElement(diagram.element.id + '_overlapRuler');\n}\n/**\n * getRulerSize method \\\n *\n * @returns {void} getRulerSize method .\\\n * @param { Diagram} diagram - provide the diagram  value.\n * @private\n */\n\nexport function getRulerSize(diagram) {\n  var top = 0;\n  var left = 0;\n\n  if (diagram.rulerSettings.showRulers) {\n    top = diagram.rulerSettings.horizontalRuler.thickness;\n    left = diagram.rulerSettings.verticalRuler.thickness;\n  }\n\n  return new Size(left, top);\n}\n/**\n * getRulerGeometry method \\\n *\n * @returns {void} getRulerGeometry method .\\\n * @param { Diagram} diagram - provide the diagram  value.\n * @private\n */\n\nexport function getRulerGeometry(diagram) {\n  var rulerSize = getRulerSize(diagram);\n  var height = diagram.scroller.viewPortHeight;\n  var width = diagram.scroller.viewPortWidth;\n\n  if (width < diagram.element.clientWidth - rulerSize.width) {\n    width = diagram.element.clientWidth - rulerSize.width;\n  }\n\n  if (height < diagram.element.clientHeight - rulerSize.height) {\n    height = diagram.element.clientHeight - rulerSize.height;\n  }\n\n  if (diagram.hRuler && diagram.hRuler.length) {\n    width = diagram.hRuler.length;\n  }\n\n  if (diagram.vRuler && diagram.vRuler.length) {\n    height = diagram.vRuler.length;\n  }\n\n  return new Size(width, height);\n}\n/**\n * removeRulerMarkers method \\\n *\n * @returns {void} removeRulerMarkers method .\\\n * @private\n */\n\nexport function removeRulerMarkers() {\n  var markers = document.getElementsByClassName('e-d-ruler-marker');\n  var marker;\n  var i;\n\n  if (markers && markers.length > 0) {\n    for (i = markers.length - 1; i >= 0; i--) {\n      marker = markers[i];\n\n      if (marker) {\n        marker.parentNode.removeChild(marker);\n      }\n    }\n  }\n}\n/**\n * drawRulerMarkers method \\\n *\n * @returns {void} drawRulerMarkers method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @param { PointModel} currentPoint - provide the content  value.\n * @private\n */\n\nexport function drawRulerMarkers(diagram, currentPoint) {\n  if (diagram.rulerSettings.showRulers) {\n    diagram.hRuler.drawRulerMarker(diagram.hRuler.element, currentPoint, diagram.scroller.horizontalOffset);\n    diagram.vRuler.drawRulerMarker(diagram.vRuler.element, currentPoint, diagram.scroller.verticalOffset);\n  }\n}\n/**\n * updateRulerDimension method \\\n *\n * @returns {void} updateRulerDimension method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @param { Ruler} ruler - provide the content  value.\n * @param { number} offset - provide the content  value.\n * @param { boolean} isHorizontal - provide the content  value.\n * @private\n */\n\nfunction updateRulerDimension(diagram, ruler, offset, isHorizontal) {\n  var rulerSize = getRulerSize(diagram);\n  var rulerGeometry = getRulerGeometry(diagram);\n  var diagramRuler = isHorizontal ? diagram.rulerSettings.horizontalRuler : diagram.rulerSettings.verticalRuler;\n  updateRulerDiv(diagram, rulerGeometry, isHorizontal);\n  updateRulerSpace(diagram, rulerGeometry, isHorizontal);\n  ruler.offset = offset;\n  ruler.scale = diagram.scroller.currentZoom;\n  ruler.length = (isHorizontal ? rulerGeometry.width : rulerGeometry.height) + 100;\n  ruler.arrangeTick = getFunction(diagramRuler.arrangeTick);\n  ruler.dataBind();\n  var rulerObj = isHorizontal ? diagram.hRuler.element : diagram.vRuler.element;\n\n  if (isHorizontal) {\n    rulerObj.style.marginLeft = rulerSize.width - ruler.hRulerOffset + 'px';\n  } else {\n    rulerObj.style.marginTop = rulerSize.height - ruler.vRulerOffset + 'px';\n  }\n}\n/**\n * updateRulerSpace method \\\n *\n * @returns {void} updateRulerSpace method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @param { Size} rulerGeometry - provide the content  value.\n * @param { boolean} isHorizontal - provide the content  value.\n * @private\n */\n\n\nfunction updateRulerSpace(diagram, rulerGeometry, isHorizontal) {\n  var div = document.getElementById(diagram.element.id + (isHorizontal ? '_hRuler_ruler_space' : '_vRuler_ruler_space'));\n  var ruler = isHorizontal ? diagram.hRuler : diagram.vRuler;\n\n  if (div && diagram && rulerGeometry) {\n    div.style.width = (isHorizontal ? rulerGeometry.width + ruler.segmentWidth * 2 : ruler.thickness) + 'px';\n    div.style.height = (isHorizontal ? ruler.thickness : rulerGeometry.height + ruler.segmentWidth * 2) + 'px';\n  }\n}\n/**\n * updateRulerDiv method \\\n *\n * @returns {void} updateRulerDiv method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @param { Size} rulerGeometry - provide the content  value.\n * @param { boolean} isHorizontal - provide the content  value.\n * @private\n */\n\n\nfunction updateRulerDiv(diagram, rulerGeometry, isHorizontal) {\n  var div = document.getElementById(diagram.element.id + (isHorizontal ? '_hRuler' : '_vRuler'));\n  var ruler = isHorizontal ? diagram.hRuler : diagram.vRuler;\n\n  if (div && diagram && rulerGeometry) {\n    div.style.width = (isHorizontal ? rulerGeometry.width + ruler.segmentWidth : ruler.thickness) + 'px';\n    div.style.height = (isHorizontal ? ruler.thickness : rulerGeometry.height + ruler.segmentWidth) + 'px'; // eslint-disable-next-line\n\n    div = document.getElementById(diagram.element.id + '_overlapRuler');\n\n    if (div) {\n      // eslint-disable-next-line\n      isHorizontal ? div.style.height = ruler.thickness + 'px' : div.style.width = ruler.thickness + 'px';\n    }\n  }\n}","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/ruler/ruler.js"],"names":["createHtmlElement","removeElement","Ruler","Size","getFunction","renderOverlapElement","diagram","rulerSize","getRulerSize","attributes","element","id","style","height","width","class","overlap","insertBefore","firstChild","renderRuler","isHorizontal","div","document","getElementById","rulerGeometry","getRulerGeometry","margin","diagramRuler","rulerSettings","horizontalRuler","verticalRuler","ruler","orientation","length","segmentWidth","appendTo","hRuler","vRuler","rulerObj","updateRuler","hOffset","scroller","horizontalOffset","vOffset","verticalOffset","showRulers","undefined","updateRulerDimension","removeRulerElements","top","left","thickness","viewPortHeight","viewPortWidth","clientWidth","clientHeight","removeRulerMarkers","markers","getElementsByClassName","marker","i","parentNode","removeChild","drawRulerMarkers","currentPoint","drawRulerMarker","offset","updateRulerDiv","updateRulerSpace","scale","currentZoom","arrangeTick","dataBind","marginLeft","hRulerOffset","marginTop","vRulerOffset"],"mappings":"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","sourcesContent":["import { createHtmlElement, removeElement } from '../utility/dom-util';\nimport { Ruler } from '../../ruler/index';\nimport { Size } from '../primitives/size';\nimport { getFunction } from '../utility/base-util';\n/**\n * defines the helper methods for the ruler\n */\n/**\n * renderOverlapElement method \\\n *\n * @returns {void} renderOverlapElement method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @private\n */\nexport function renderOverlapElement(diagram) {\n    var rulerSize = getRulerSize(diagram);\n    var attributes = {\n        'id': diagram.element.id + '_overlapRuler',\n        style: 'height:' + rulerSize.height + 'px;width:' + rulerSize.width + 'px;position:absolute;left:0;top:0',\n        class: 'e-ruler-overlap'\n    };\n    var overlap = createHtmlElement('div', attributes);\n    diagram.element.insertBefore(overlap, diagram.element.firstChild);\n}\n/**\n * renderRuler method \\\n *\n * @returns {void} renderRuler method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @param { boolean} isHorizontal - provide the content  value.\n * @private\n */\nexport function renderRuler(diagram, isHorizontal) {\n    var div = document.getElementById(diagram.element.id + (isHorizontal ? '_hRuler' : '_vRuler'));\n    var rulerSize = getRulerSize(diagram);\n    var rulerGeometry = getRulerGeometry(diagram);\n    var margin = isHorizontal ? ('margin-left:' + rulerSize.width + 'px;') : ('margin-top:' + rulerSize.height + 'px;');\n    if (!div) {\n        var style = 'height:' + (isHorizontal ? rulerSize.height : (rulerGeometry.height + 100)) + 'px;overflow:hidden;width:' +\n            (isHorizontal ? (rulerGeometry.width + 100) : rulerSize.width) + 'px;position:absolute;font-size:11px;' + margin;\n        var attributes = {\n            'id': diagram.element.id + (isHorizontal ? '_hRuler' : '_vRuler'),\n            style: style\n        };\n        div = createHtmlElement('div', attributes);\n    }\n    diagram.element.insertBefore(div, diagram.element.firstChild);\n    var diagramRuler = isHorizontal ? diagram.rulerSettings.horizontalRuler : diagram.rulerSettings.verticalRuler;\n    var ruler = new Ruler(diagramRuler);\n    ruler.orientation = isHorizontal ? 'Horizontal' : 'Vertical';\n    ruler.length = (isHorizontal ? rulerGeometry.width : rulerGeometry.height) + diagramRuler.segmentWidth;\n    ruler.appendTo('#' + diagram.element.id + (isHorizontal ? '_hRuler' : '_vRuler'));\n    // eslint-disable-next-line\n    isHorizontal ? diagram.hRuler = ruler : diagram.vRuler = ruler;\n    var rulerObj = document.getElementById(diagram.element.id + (isHorizontal ? '_hRuler' : '_vRuler'));\n    // eslint-disable-next-line\n    isHorizontal ? diagram.hRuler.element = rulerObj : diagram.vRuler.element = rulerObj;\n}\n/**\n * updateRuler method \\\n *\n * @returns {void} updateRuler method .\\\n * @param { Diagram} diagram - provide the diagram  value.\n * @private\n */\nexport function updateRuler(diagram) {\n    var hOffset = -diagram.scroller.horizontalOffset;\n    var vOffset = -diagram.scroller.verticalOffset;\n    if (diagram && diagram.rulerSettings.showRulers) {\n        diagram.hRuler.length = 0;\n        diagram.vRuler.length = 0;\n        if (hOffset !== undefined && diagram.hRuler.element) {\n            updateRulerDimension(diagram, diagram.hRuler, hOffset, true);\n        }\n        if (vOffset !== undefined && diagram.vRuler.element) {\n            updateRulerDimension(diagram, diagram.vRuler, vOffset, false);\n        }\n    }\n    else {\n        removeRulerElements(diagram);\n    }\n}\n/**\n * removeRulerElements method \\\n *\n * @returns {void} removeRulerElements method .\\\n * @param { Diagram} diagram - provide the diagram  value.\n * @private\n */\nexport function removeRulerElements(diagram) {\n    removeElement(diagram.element.id + '_hRuler');\n    removeElement(diagram.element.id + '_vRuler');\n    removeElement(diagram.element.id + '_overlapRuler');\n}\n/**\n * getRulerSize method \\\n *\n * @returns {void} getRulerSize method .\\\n * @param { Diagram} diagram - provide the diagram  value.\n * @private\n */\nexport function getRulerSize(diagram) {\n    var top = 0;\n    var left = 0;\n    if (diagram.rulerSettings.showRulers) {\n        top = diagram.rulerSettings.horizontalRuler.thickness;\n        left = diagram.rulerSettings.verticalRuler.thickness;\n    }\n    return new Size(left, top);\n}\n/**\n * getRulerGeometry method \\\n *\n * @returns {void} getRulerGeometry method .\\\n * @param { Diagram} diagram - provide the diagram  value.\n * @private\n */\nexport function getRulerGeometry(diagram) {\n    var rulerSize = getRulerSize(diagram);\n    var height = diagram.scroller.viewPortHeight;\n    var width = diagram.scroller.viewPortWidth;\n    if (width < diagram.element.clientWidth - rulerSize.width) {\n        width = diagram.element.clientWidth - rulerSize.width;\n    }\n    if (height < diagram.element.clientHeight - rulerSize.height) {\n        height = diagram.element.clientHeight - rulerSize.height;\n    }\n    if (diagram.hRuler && diagram.hRuler.length) {\n        width = diagram.hRuler.length;\n    }\n    if (diagram.vRuler && diagram.vRuler.length) {\n        height = diagram.vRuler.length;\n    }\n    return new Size(width, height);\n}\n/**\n * removeRulerMarkers method \\\n *\n * @returns {void} removeRulerMarkers method .\\\n * @private\n */\nexport function removeRulerMarkers() {\n    var markers = document.getElementsByClassName('e-d-ruler-marker');\n    var marker;\n    var i;\n    if (markers && markers.length > 0) {\n        for (i = markers.length - 1; i >= 0; i--) {\n            marker = markers[i];\n            if (marker) {\n                marker.parentNode.removeChild(marker);\n            }\n        }\n    }\n}\n/**\n * drawRulerMarkers method \\\n *\n * @returns {void} drawRulerMarkers method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @param { PointModel} currentPoint - provide the content  value.\n * @private\n */\nexport function drawRulerMarkers(diagram, currentPoint) {\n    if (diagram.rulerSettings.showRulers) {\n        diagram.hRuler.drawRulerMarker(diagram.hRuler.element, currentPoint, diagram.scroller.horizontalOffset);\n        diagram.vRuler.drawRulerMarker(diagram.vRuler.element, currentPoint, diagram.scroller.verticalOffset);\n    }\n}\n/**\n * updateRulerDimension method \\\n *\n * @returns {void} updateRulerDimension method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @param { Ruler} ruler - provide the content  value.\n * @param { number} offset - provide the content  value.\n * @param { boolean} isHorizontal - provide the content  value.\n * @private\n */\nfunction updateRulerDimension(diagram, ruler, offset, isHorizontal) {\n    var rulerSize = getRulerSize(diagram);\n    var rulerGeometry = getRulerGeometry(diagram);\n    var diagramRuler = isHorizontal ? diagram.rulerSettings.horizontalRuler : diagram.rulerSettings.verticalRuler;\n    updateRulerDiv(diagram, rulerGeometry, isHorizontal);\n    updateRulerSpace(diagram, rulerGeometry, isHorizontal);\n    ruler.offset = offset;\n    ruler.scale = diagram.scroller.currentZoom;\n    ruler.length = (isHorizontal ? rulerGeometry.width : rulerGeometry.height) + 100;\n    ruler.arrangeTick = getFunction(diagramRuler.arrangeTick);\n    ruler.dataBind();\n    var rulerObj = isHorizontal ? diagram.hRuler.element : diagram.vRuler.element;\n    if (isHorizontal) {\n        rulerObj.style.marginLeft = (rulerSize.width - ruler.hRulerOffset) + 'px';\n    }\n    else {\n        rulerObj.style.marginTop = (rulerSize.height - ruler.vRulerOffset) + 'px';\n    }\n}\n/**\n * updateRulerSpace method \\\n *\n * @returns {void} updateRulerSpace method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @param { Size} rulerGeometry - provide the content  value.\n * @param { boolean} isHorizontal - provide the content  value.\n * @private\n */\nfunction updateRulerSpace(diagram, rulerGeometry, isHorizontal) {\n    var div = document.getElementById(diagram.element.id + (isHorizontal ? '_hRuler_ruler_space' : '_vRuler_ruler_space'));\n    var ruler = isHorizontal ? diagram.hRuler : diagram.vRuler;\n    if (div && diagram && rulerGeometry) {\n        div.style.width = (isHorizontal ? (rulerGeometry.width + (ruler.segmentWidth * 2)) : ruler.thickness) + 'px';\n        div.style.height = (isHorizontal ? ruler.thickness : (rulerGeometry.height + (ruler.segmentWidth * 2))) + 'px';\n    }\n}\n/**\n * updateRulerDiv method \\\n *\n * @returns {void} updateRulerDiv method .\\\n * @param { Diagram} diagram - provide the content  value.\n * @param { Size} rulerGeometry - provide the content  value.\n * @param { boolean} isHorizontal - provide the content  value.\n * @private\n */\nfunction updateRulerDiv(diagram, rulerGeometry, isHorizontal) {\n    var div = document.getElementById(diagram.element.id + (isHorizontal ? '_hRuler' : '_vRuler'));\n    var ruler = isHorizontal ? diagram.hRuler : diagram.vRuler;\n    if (div && diagram && rulerGeometry) {\n        div.style.width = (isHorizontal ? (rulerGeometry.width + ruler.segmentWidth) : ruler.thickness) + 'px';\n        div.style.height = (isHorizontal ? ruler.thickness : (rulerGeometry.height + ruler.segmentWidth)) + 'px';\n        // eslint-disable-next-line\n        div = document.getElementById(diagram.element.id + '_overlapRuler');\n        if (div) {\n            // eslint-disable-next-line\n            isHorizontal ? (div.style.height = ruler.thickness + 'px') : (div.style.width = ruler.thickness + 'px');\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}