{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Size } from '../../primitives/size';\nimport { DiagramElement } from './diagram-element';\nimport { measureNativeContent, getContent, measureNativeSvg } from './../../utility/dom-util';\n/**\n * NativeElement defines the basic native elements\n */\n\nvar DiagramNativeElement =\n/** @class */\nfunction (_super) {\n  __extends(DiagramNativeElement, _super);\n  /**\n   *  set the id for each element \\\n   *\n   * @returns { void } set the id for each element.\\\n   * @param {string} nodeId - provide the id value.\n   * @param {string} diagramId - provide the id value.\n   *\n   * @private\n   */\n\n\n  function DiagramNativeElement(nodeId, diagramId) {\n    var _this = _super.call(this) || this;\n\n    _this.data = '';\n    /**\n     * set the node id\n     */\n\n    _this.nodeId = '';\n    /**\n     * set the diagram id\n     */\n\n    _this.diagramId = '';\n    /**\n     * sets scaling factor of the Native Element\n     */\n\n    _this.scale = 'Stretch';\n    _this.diagramId = diagramId;\n    _this.nodeId = nodeId;\n    return _this;\n  }\n\n  Object.defineProperty(DiagramNativeElement.prototype, \"content\", {\n    /**\n     *  get the id for each element \\\n     *\n     * @returns { string | SVGElement } get the id for each element.\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.data;\n    },\n\n    /**\n     *  sets the geometry of the native element \\\n     *\n     * @returns { void } sets the geometry of the native element.\\\n     * @param {string | SVGElement} value - provide the id value.\n     *\n     * @private\n     */\n    set: function (value) {\n      this.data = value;\n\n      if (!this.canReset) {\n        this.canReset = true;\n        this.template = getContent(this, false);\n        this.canReset = false;\n        this.isDirt = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   *Measures minimum space that is required to render the Native Element \\\n   *\n   * @returns { Size }Measures minimum space that is required to render the Native Element.\\\n   * @param {Size} availableSize - provide the id value.\n   *\n   * @private\n   */\n\n  DiagramNativeElement.prototype.measure = function (availableSize) {\n    if (this.isDirt) {\n      var rect = measureNativeContent(this.template);\n      this.contentSize = new Size();\n      this.contentSize.width = rect.width;\n      this.contentSize.height = rect.height;\n      var x = rect.x;\n      var y = rect.y;\n      this.templatePosition = {\n        x: x,\n        y: y\n      };\n      this.isDirt = false;\n    }\n\n    if (this.width === undefined || this.height === undefined) {\n      var getAvailableSize = measureNativeSvg(this.template);\n      this.desiredSize = new Size(getAvailableSize.width, getAvailableSize.height);\n    } else {\n      this.desiredSize = new Size(this.width, this.height);\n    }\n\n    this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n    return this.desiredSize;\n  };\n  /**\n   *Arranges the Native Element \\\n   *\n   * @returns { Size }Arranges the Native Element.\\\n   * @param {Size} desiredSize - provide the id value.\n   *\n   * @private\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  DiagramNativeElement.prototype.arrange = function (desiredSize) {\n    this.actualSize = new Size(this.desiredSize.width, this.desiredSize.height);\n    this.updateBounds();\n    return this.actualSize;\n  };\n\n  return DiagramNativeElement;\n}(DiagramElement);\n\nexport { DiagramNativeElement };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/native-element.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Size","DiagramElement","measureNativeContent","getContent","measureNativeSvg","DiagramNativeElement","_super","nodeId","diagramId","_this","call","data","scale","defineProperty","get","set","value","canReset","template","isDirt","enumerable","configurable","measure","availableSize","rect","contentSize","width","height","x","y","templatePosition","undefined","getAvailableSize","desiredSize","validateDesiredSize","arrange","actualSize","updateBounds"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Size } from '../../primitives/size';\nimport { DiagramElement } from './diagram-element';\nimport { measureNativeContent, getContent, measureNativeSvg } from './../../utility/dom-util';\n/**\n * NativeElement defines the basic native elements\n */\nvar DiagramNativeElement = /** @class */ (function (_super) {\n    __extends(DiagramNativeElement, _super);\n    /**\n     *  set the id for each element \\\n     *\n     * @returns { void } set the id for each element.\\\n     * @param {string} nodeId - provide the id value.\n     * @param {string} diagramId - provide the id value.\n     *\n     * @private\n     */\n    function DiagramNativeElement(nodeId, diagramId) {\n        var _this = _super.call(this) || this;\n        _this.data = '';\n        /**\n         * set the node id\n         */\n        _this.nodeId = '';\n        /**\n         * set the diagram id\n         */\n        _this.diagramId = '';\n        /**\n         * sets scaling factor of the Native Element\n         */\n        _this.scale = 'Stretch';\n        _this.diagramId = diagramId;\n        _this.nodeId = nodeId;\n        return _this;\n    }\n    Object.defineProperty(DiagramNativeElement.prototype, \"content\", {\n        /**\n         *  get the id for each element \\\n         *\n         * @returns { string | SVGElement } get the id for each element.\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.data;\n        },\n        /**\n         *  sets the geometry of the native element \\\n         *\n         * @returns { void } sets the geometry of the native element.\\\n         * @param {string | SVGElement} value - provide the id value.\n         *\n         * @private\n         */\n        set: function (value) {\n            this.data = value;\n            if (!this.canReset) {\n                this.canReset = true;\n                this.template = getContent(this, false);\n                this.canReset = false;\n                this.isDirt = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *Measures minimum space that is required to render the Native Element \\\n     *\n     * @returns { Size }Measures minimum space that is required to render the Native Element.\\\n     * @param {Size} availableSize - provide the id value.\n     *\n     * @private\n     */\n    DiagramNativeElement.prototype.measure = function (availableSize) {\n        if (this.isDirt) {\n            var rect = measureNativeContent(this.template);\n            this.contentSize = new Size();\n            this.contentSize.width = rect.width;\n            this.contentSize.height = rect.height;\n            var x = rect.x;\n            var y = rect.y;\n            this.templatePosition = { x: x, y: y };\n            this.isDirt = false;\n        }\n        if (this.width === undefined || this.height === undefined) {\n            var getAvailableSize = measureNativeSvg(this.template);\n            this.desiredSize = new Size(getAvailableSize.width, getAvailableSize.height);\n        }\n        else {\n            this.desiredSize = new Size(this.width, this.height);\n        }\n        this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n        return this.desiredSize;\n    };\n    /**\n     *Arranges the Native Element \\\n     *\n     * @returns { Size }Arranges the Native Element.\\\n     * @param {Size} desiredSize - provide the id value.\n     *\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    DiagramNativeElement.prototype.arrange = function (desiredSize) {\n        this.actualSize = new Size(this.desiredSize.width, this.desiredSize.height);\n        this.updateBounds();\n        return this.actualSize;\n    };\n    return DiagramNativeElement;\n}(DiagramElement));\nexport { DiagramNativeElement };\n"]},"metadata":{},"sourceType":"module"}