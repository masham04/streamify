{"ast":null,"code":"import { Node } from '../objects/node';\nimport { Connector } from '../objects/connector';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { randomId, getFunction } from '../utility/base-util';\nimport { cloneBlazorObject } from '../utility/diagram-util';\nimport { updateDefaultValues } from '../utility/diagram-util';\nimport { isBlazor } from '@syncfusion/ej2-base';\n/**\n * data source defines the basic unit of diagram\n */\n\nvar DataBinding =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the data binding module.\n   * @private\n   */\n  function DataBinding() {\n    /**   @private  */\n    this.dataTable = {}; //constructs the data binding module\n  }\n  /**\n   * To destroy the data binding module\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  DataBinding.prototype.destroy = function () {\n    /**\n     * Destroy method performed here\n     */\n  };\n  /**\n   * Core method to return the component name.\n   *\n   * @returns {string}  Core method to return the component name.\n   * @private\n   */\n\n\n  DataBinding.prototype.getModuleName = function () {\n    /**\n     * Returns the module name\n     */\n    return 'DataBinding';\n  };\n  /**\n   * Initialize nodes and connectors when we have a data as JSON\n   *\n   * @param {DataSourceModel} data\n   * @param {Diagram} diagram\n   * @private\n   */\n\n\n  DataBinding.prototype.initData = function (data, diagram) {\n    var dataSource;\n    var dataProp = 'data';\n    var jsonProp = 'json';\n    var dataManager = data.dataManager || data.dataSource || {};\n    dataSource = dataManager[dataProp] || dataManager[jsonProp] || (dataManager.dataSource ? dataManager.dataSource.json : undefined);\n\n    if (dataSource && dataSource.length === 0 && dataManager.dataSource.data) {\n      dataSource = dataManager.dataSource.data;\n    }\n\n    if (dataSource && dataSource.length) {\n      this.applyDataSource(data, dataSource, diagram);\n      diagram.trigger('dataLoaded', {\n        diagram: isBlazor() ? null : cloneBlazorObject(diagram)\n      });\n    }\n  };\n  /**\n   * Initialize nodes and connector when we have a data as remote url\n   *\n   * @param {DataSourceModel} data\n   * @param {Diagram} diagram\n   * @private\n   */\n\n\n  DataBinding.prototype.initSource = function (data, diagram) {\n    var _this = this;\n\n    var dataSource = data;\n    var result;\n    var mapper = data;\n\n    if (dataSource.dataManager instanceof DataManager || dataSource.dataSource instanceof DataManager) {\n      var tempObj = mapper.dataManager || mapper.dataSource;\n      var query = tempObj.defaultQuery || new Query();\n      var dataManager = data.dataManager || data.dataSource;\n      dataManager.executeQuery(query).then(function (e) {\n        var prop = 'result';\n        result = e[prop];\n\n        if (!diagram.isDestroyed) {\n          diagram.protectPropertyChange(true);\n\n          _this.applyDataSource(data, result, diagram);\n\n          diagram.refreshDiagram();\n          diagram.protectPropertyChange(false);\n          diagram.trigger('dataLoaded', {\n            diagram: isBlazor() ? null : cloneBlazorObject(diagram)\n          });\n        }\n      });\n    }\n  };\n\n  DataBinding.prototype.applyDataSource = function (mapper, data, diagram) {\n    this.dataTable = {};\n    var obj;\n    var firstNode;\n    var node;\n    var rootNodes = [];\n    var firstLevel = [];\n    var item;\n    var nextLevel;\n\n    if (data !== undefined) {\n      for (var r = 0; r < data.length; r++) {\n        obj = data[r];\n\n        if (obj[mapper.parentId] === undefined || obj[mapper.parentId] === null || typeof obj[mapper.parentId] !== 'object') {\n          if (rootNodes[obj[mapper.parentId]] !== undefined) {\n            rootNodes[obj[mapper.parentId]].items.push(obj);\n          } else {\n            rootNodes[obj[mapper.parentId]] = {\n              items: [obj]\n            };\n          }\n        } else {\n          rootNodes = this.updateMultipleRootNodes(obj, rootNodes, mapper, data);\n        }\n\n        if (mapper.root === obj[mapper.id]) {\n          firstNode = {\n            items: [obj]\n          };\n        }\n      }\n\n      if (firstNode) {\n        firstLevel.push(firstNode);\n      } else {\n        for (var _i = 0, _a = Object.keys(rootNodes); _i < _a.length; _i++) {\n          var n = _a[_i];\n\n          if (!n || n === 'undefined' || n === '\\'\\'' || n === 'null') {\n            firstLevel.push(rootNodes[n]);\n          }\n        }\n      }\n\n      for (var i = 0; i < firstLevel.length; i++) {\n        for (var j = 0; j < firstLevel[i].items.length; j++) {\n          item = firstLevel[i].items[j];\n          node = this.applyNodeTemplate(mapper, item, diagram);\n          diagram.nodes.push(node);\n          this.dataTable[item[mapper.id]] = node;\n          nextLevel = rootNodes[node.data[mapper.id]];\n\n          if (nextLevel !== undefined) {\n            this.renderChildNodes(mapper, nextLevel, node.id, rootNodes, diagram);\n          }\n        }\n      }\n    }\n\n    this.dataTable = null;\n  };\n  /**\n   * updateMultipleRootNodes method is used  to update the multiple Root Nodes\n   *\n   * @param {Object} object\n   * @param {Object[]} rootnodes\n   * @param {DataSourceModel} mapper\n   * @param {Object[]} data\n   */\n\n\n  DataBinding.prototype.updateMultipleRootNodes = function (obj, rootNodes, mapper, data) {\n    var parents = obj[mapper.parentId];\n    var parent;\n\n    for (var i = 0; i < parents.length; i++) {\n      parent = parents[i];\n\n      if (rootNodes[parent]) {\n        rootNodes[parent].items.push(obj);\n      } else {\n        rootNodes[parent] = {\n          items: [obj]\n        };\n      }\n    }\n\n    return rootNodes;\n  };\n  /**\n   *  Get the node values\\\n   *\n   * @returns { Node }    Get the node values.\\\n   * @param {DataSourceModel} mapper - provide the id value.\n   * @param {Object} item - provide the id value.\n   * @param {Diagram} diagram - provide the id value.\n   *\n   * @private\n   */\n\n\n  DataBinding.prototype.applyNodeTemplate = function (mapper, item, diagram) {\n    //const root: Object = item;\n    var id = randomId(); //const blazor: string = 'Blazor';\n\n    var nodeModel = {\n      id: id,\n      data: item\n    }; // eslint-disable-next-line @typescript-eslint/ban-types\n\n    var doBinding = getFunction(mapper.doBinding);\n\n    if (doBinding) {\n      doBinding(nodeModel, item, diagram);\n    }\n\n    var obj = new Node(diagram, 'nodes', nodeModel, true);\n    updateDefaultValues(obj, nodeModel, diagram.nodeDefaults);\n\n    if (mapper.dataMapSettings) {\n      var index = void 0;\n      var arrayProperty = [];\n      var innerProperty = [];\n\n      for (var i = 0; i < mapper.dataMapSettings.length; i++) {\n        if (mapper.dataMapSettings[i].property.indexOf('.') !== -1) {\n          innerProperty = this.splitString(mapper.dataMapSettings[i].property);\n\n          for (var p = 0; p < innerProperty.length; p++) {\n            if (innerProperty[p].indexOf('[') !== -1) {\n              index = innerProperty[p].indexOf('[');\n              arrayProperty = innerProperty[p].split('[');\n            }\n          }\n\n          if (index) {\n            if (innerProperty[2]) {\n              obj[arrayProperty[0]][innerProperty[0].charAt(index + 1)][innerProperty[1]][innerProperty[2]] = item[mapper.dataMapSettings[i].field];\n            } else {\n              var value = item[mapper.dataMapSettings[i].field];\n              obj[arrayProperty[0]][innerProperty[0].charAt(index + 1)][innerProperty[1]] = value;\n            }\n          } else {\n            if (innerProperty[2]) {\n              obj[innerProperty[0]][innerProperty[1]][innerProperty[2]] = item[mapper.dataMapSettings[i].field];\n            } else {\n              obj[innerProperty[0]][innerProperty[1]] = item[mapper.dataMapSettings[i].field];\n            }\n          }\n        } else {\n          var property = mapper.dataMapSettings[i].property;\n          property = property.charAt(0).toLowerCase() + property.slice(1);\n          obj[property] = item[mapper.dataMapSettings[i].field];\n        }\n\n        index = 0;\n        arrayProperty = [];\n        innerProperty = [];\n      }\n    }\n\n    if (!this.collectionContains(obj, diagram, mapper.id, mapper.parentId)) {\n      return obj;\n    } else {\n      return this.dataTable[item[mapper.id]];\n    }\n  };\n\n  DataBinding.prototype.splitString = function (property) {\n    var temp = [];\n    temp = property.split('.');\n\n    for (var i = 0; i < temp.length; i++) {\n      temp[i] = temp[i].charAt(0).toLowerCase() + temp[i].slice(1);\n    }\n\n    return temp;\n  };\n\n  DataBinding.prototype.renderChildNodes = function (mapper, parent, value, rtNodes, diagram) {\n    var child;\n    var nextLevel;\n    var node;\n\n    for (var j = 0; j < parent.items.length; j++) {\n      child = parent.items[j];\n      node = this.applyNodeTemplate(mapper, child, diagram);\n      var canBreak = false;\n\n      if (!this.collectionContains(node, diagram, mapper.id, mapper.parentId)) {\n        this.dataTable[child[mapper.id]] = node;\n        diagram.nodes.push(node);\n      } else {\n        canBreak = true;\n      }\n\n      if (!this.containsConnector(diagram, value, node.id)) {\n        diagram.connectors.push(this.applyConnectorTemplate(value, node.id, diagram));\n      }\n\n      if (!canBreak) {\n        nextLevel = rtNodes[node.data[mapper.id]];\n\n        if (nextLevel !== undefined) {\n          this.renderChildNodes(mapper, nextLevel, node.id, rtNodes, diagram);\n        }\n      }\n    }\n  };\n\n  DataBinding.prototype.containsConnector = function (diagram, sourceNode, targetNode) {\n    if (sourceNode !== '' && targetNode !== '') {\n      for (var i = 0; i < diagram.connectors.length; i++) {\n        var connector = diagram.connectors[i];\n\n        if (connector !== undefined && connector.sourceID === sourceNode && connector.targetID === targetNode) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\n   *  collectionContains method is used to  check wthear the node is already present in collection or not\n   *\n   * @param {Node} node\n   * @param {Diagram} diagram\n   * @param {string} id\n   * @param {string} parentId\n   */\n\n\n  DataBinding.prototype.collectionContains = function (node, diagram, id, parentId) {\n    var obj = this.dataTable[node.data[id]];\n\n    if (obj !== undefined && obj.data[id] === node.data[id] && obj.data[parentId] === node.data[parentId]) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Get the Connector values\n   *\n   * @param {string} sNode\n   * @param {string} tNode\n   * @param {Diagram} diagram\n   */\n\n\n  DataBinding.prototype.applyConnectorTemplate = function (sNode, tNode, diagram) {\n    var connModel = {\n      id: randomId(),\n      sourceID: sNode,\n      targetID: tNode\n    };\n    var obj = new Connector(diagram, 'connectors', connModel, true);\n    updateDefaultValues(obj, connModel, diagram.connectorDefaults);\n    return obj;\n  };\n\n  return DataBinding;\n}();\n\nexport { DataBinding };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/data-binding/data-binding.js"],"names":["Node","Connector","DataManager","Query","randomId","getFunction","cloneBlazorObject","updateDefaultValues","isBlazor","DataBinding","dataTable","prototype","destroy","getModuleName","initData","data","diagram","dataSource","dataProp","jsonProp","dataManager","json","undefined","length","applyDataSource","trigger","initSource","_this","result","mapper","tempObj","query","defaultQuery","executeQuery","then","e","prop","isDestroyed","protectPropertyChange","refreshDiagram","obj","firstNode","node","rootNodes","firstLevel","item","nextLevel","r","parentId","items","push","updateMultipleRootNodes","root","id","_i","_a","Object","keys","n","i","j","applyNodeTemplate","nodes","renderChildNodes","parents","parent","nodeModel","doBinding","nodeDefaults","dataMapSettings","index","arrayProperty","innerProperty","property","indexOf","splitString","p","split","charAt","field","value","toLowerCase","slice","collectionContains","temp","rtNodes","child","canBreak","containsConnector","connectors","applyConnectorTemplate","sourceNode","targetNode","connector","sourceID","targetID","sNode","tNode","connModel","connectorDefaults"],"mappings":"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","sourcesContent":["import { Node } from '../objects/node';\nimport { Connector } from '../objects/connector';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { randomId, getFunction } from '../utility/base-util';\nimport { cloneBlazorObject } from '../utility/diagram-util';\nimport { updateDefaultValues } from '../utility/diagram-util';\nimport { isBlazor } from '@syncfusion/ej2-base';\n/**\n * data source defines the basic unit of diagram\n */\nvar DataBinding = /** @class */ (function () {\n    /**\n     * Constructor for the data binding module.\n     * @private\n     */\n    function DataBinding() {\n        /**   @private  */\n        this.dataTable = {};\n        //constructs the data binding module\n    }\n    /**\n     * To destroy the data binding module\n     *\n     * @returns {void}\n     * @private\n     */\n    DataBinding.prototype.destroy = function () {\n        /**\n         * Destroy method performed here\n         */\n    };\n    /**\n     * Core method to return the component name.\n     *\n     * @returns {string}  Core method to return the component name.\n     * @private\n     */\n    DataBinding.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'DataBinding';\n    };\n    /**\n     * Initialize nodes and connectors when we have a data as JSON\n     *\n     * @param {DataSourceModel} data\n     * @param {Diagram} diagram\n     * @private\n     */\n    DataBinding.prototype.initData = function (data, diagram) {\n        var dataSource;\n        var dataProp = 'data';\n        var jsonProp = 'json';\n        var dataManager = data.dataManager || data.dataSource || {};\n        dataSource = dataManager[dataProp] || dataManager[jsonProp] ||\n            (dataManager.dataSource ? dataManager.dataSource.json : undefined);\n        if (dataSource && dataSource.length === 0 && dataManager.dataSource.data) {\n            dataSource = dataManager.dataSource.data;\n        }\n        if (dataSource && dataSource.length) {\n            this.applyDataSource(data, dataSource, diagram);\n            diagram.trigger('dataLoaded', { diagram: (isBlazor()) ? null : cloneBlazorObject(diagram) });\n        }\n    };\n    /**\n     * Initialize nodes and connector when we have a data as remote url\n     *\n     * @param {DataSourceModel} data\n     * @param {Diagram} diagram\n     * @private\n     */\n    DataBinding.prototype.initSource = function (data, diagram) {\n        var _this = this;\n        var dataSource = data;\n        var result;\n        var mapper = data;\n        if (dataSource.dataManager instanceof DataManager || dataSource.dataSource instanceof DataManager) {\n            var tempObj = mapper.dataManager || mapper.dataSource;\n            var query = tempObj.defaultQuery || new Query();\n            var dataManager = data.dataManager || data.dataSource;\n            dataManager.executeQuery(query).then(function (e) {\n                var prop = 'result';\n                result = e[prop];\n                if (!diagram.isDestroyed) {\n                    diagram.protectPropertyChange(true);\n                    _this.applyDataSource(data, result, diagram);\n                    diagram.refreshDiagram();\n                    diagram.protectPropertyChange(false);\n                    diagram.trigger('dataLoaded', { diagram: (isBlazor()) ? null : cloneBlazorObject(diagram) });\n                }\n            });\n        }\n    };\n    DataBinding.prototype.applyDataSource = function (mapper, data, diagram) {\n        this.dataTable = {};\n        var obj;\n        var firstNode;\n        var node;\n        var rootNodes = [];\n        var firstLevel = [];\n        var item;\n        var nextLevel;\n        if (data !== undefined) {\n            for (var r = 0; r < data.length; r++) {\n                obj = data[r];\n                if (obj[mapper.parentId] === undefined || obj[mapper.parentId] === null ||\n                    typeof obj[mapper.parentId] !== 'object') {\n                    if (rootNodes[obj[mapper.parentId]] !== undefined) {\n                        rootNodes[obj[mapper.parentId]].items.push(obj);\n                    }\n                    else {\n                        rootNodes[obj[mapper.parentId]] = { items: [obj] };\n                    }\n                }\n                else {\n                    rootNodes = this.updateMultipleRootNodes(obj, rootNodes, mapper, data);\n                }\n                if (mapper.root === obj[mapper.id]) {\n                    firstNode = { items: [obj] };\n                }\n            }\n            if (firstNode) {\n                firstLevel.push(firstNode);\n            }\n            else {\n                for (var _i = 0, _a = Object.keys(rootNodes); _i < _a.length; _i++) {\n                    var n = _a[_i];\n                    if (!n || n === 'undefined' || n === '\\'\\'' || n === 'null') {\n                        firstLevel.push(rootNodes[n]);\n                    }\n                }\n            }\n            for (var i = 0; i < firstLevel.length; i++) {\n                for (var j = 0; j < firstLevel[i].items.length; j++) {\n                    item = firstLevel[i].items[j];\n                    node = this.applyNodeTemplate(mapper, item, diagram);\n                    diagram.nodes.push(node);\n                    this.dataTable[item[mapper.id]] = node;\n                    nextLevel = rootNodes[node.data[mapper.id]];\n                    if (nextLevel !== undefined) {\n                        this.renderChildNodes(mapper, nextLevel, node.id, rootNodes, diagram);\n                    }\n                }\n            }\n        }\n        this.dataTable = null;\n    };\n    /**\n     * updateMultipleRootNodes method is used  to update the multiple Root Nodes\n     *\n     * @param {Object} object\n     * @param {Object[]} rootnodes\n     * @param {DataSourceModel} mapper\n     * @param {Object[]} data\n     */\n    DataBinding.prototype.updateMultipleRootNodes = function (obj, rootNodes, mapper, data) {\n        var parents = obj[mapper.parentId];\n        var parent;\n        for (var i = 0; i < parents.length; i++) {\n            parent = parents[i];\n            if (rootNodes[parent]) {\n                rootNodes[parent].items.push(obj);\n            }\n            else {\n                rootNodes[parent] = { items: [obj] };\n            }\n        }\n        return rootNodes;\n    };\n    /**\n     *  Get the node values\\\n     *\n     * @returns { Node }    Get the node values.\\\n     * @param {DataSourceModel} mapper - provide the id value.\n     * @param {Object} item - provide the id value.\n     * @param {Diagram} diagram - provide the id value.\n     *\n     * @private\n     */\n    DataBinding.prototype.applyNodeTemplate = function (mapper, item, diagram) {\n        //const root: Object = item;\n        var id = randomId();\n        //const blazor: string = 'Blazor';\n        var nodeModel = { id: id, data: item };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        var doBinding = getFunction(mapper.doBinding);\n        if (doBinding) {\n            doBinding(nodeModel, item, diagram);\n        }\n        var obj = new Node(diagram, 'nodes', nodeModel, true);\n        updateDefaultValues(obj, nodeModel, diagram.nodeDefaults);\n        if (mapper.dataMapSettings) {\n            var index = void 0;\n            var arrayProperty = [];\n            var innerProperty = [];\n            for (var i = 0; i < mapper.dataMapSettings.length; i++) {\n                if (mapper.dataMapSettings[i].property.indexOf('.') !== -1) {\n                    innerProperty = this.splitString(mapper.dataMapSettings[i].property);\n                    for (var p = 0; p < innerProperty.length; p++) {\n                        if (innerProperty[p].indexOf('[') !== -1) {\n                            index = innerProperty[p].indexOf('[');\n                            arrayProperty = innerProperty[p].split('[');\n                        }\n                    }\n                    if (index) {\n                        if (innerProperty[2]) {\n                            obj[arrayProperty[0]][innerProperty[0].charAt(index + 1)][innerProperty[1]][innerProperty[2]] =\n                                item[mapper.dataMapSettings[i].field];\n                        }\n                        else {\n                            var value = item[mapper.dataMapSettings[i].field];\n                            obj[arrayProperty[0]][innerProperty[0].charAt(index + 1)][innerProperty[1]] = value;\n                        }\n                    }\n                    else {\n                        if (innerProperty[2]) {\n                            obj[innerProperty[0]][innerProperty[1]][innerProperty[2]] = item[mapper.dataMapSettings[i].field];\n                        }\n                        else {\n                            obj[innerProperty[0]][innerProperty[1]] = item[mapper.dataMapSettings[i].field];\n                        }\n                    }\n                }\n                else {\n                    var property = mapper.dataMapSettings[i].property;\n                    property = property.charAt(0).toLowerCase() + property.slice(1);\n                    obj[property] = item[mapper.dataMapSettings[i].field];\n                }\n                index = 0;\n                arrayProperty = [];\n                innerProperty = [];\n            }\n        }\n        if (!this.collectionContains(obj, diagram, mapper.id, mapper.parentId)) {\n            return obj;\n        }\n        else {\n            return this.dataTable[item[mapper.id]];\n        }\n    };\n    DataBinding.prototype.splitString = function (property) {\n        var temp = [];\n        temp = property.split('.');\n        for (var i = 0; i < temp.length; i++) {\n            temp[i] = temp[i].charAt(0).toLowerCase() + temp[i].slice(1);\n        }\n        return temp;\n    };\n    DataBinding.prototype.renderChildNodes = function (mapper, parent, value, rtNodes, diagram) {\n        var child;\n        var nextLevel;\n        var node;\n        for (var j = 0; j < parent.items.length; j++) {\n            child = parent.items[j];\n            node = this.applyNodeTemplate(mapper, child, diagram);\n            var canBreak = false;\n            if (!this.collectionContains(node, diagram, mapper.id, mapper.parentId)) {\n                this.dataTable[child[mapper.id]] = node;\n                diagram.nodes.push(node);\n            }\n            else {\n                canBreak = true;\n            }\n            if (!this.containsConnector(diagram, value, node.id)) {\n                diagram.connectors.push(this.applyConnectorTemplate(value, node.id, diagram));\n            }\n            if (!canBreak) {\n                nextLevel = rtNodes[node.data[mapper.id]];\n                if (nextLevel !== undefined) {\n                    this.renderChildNodes(mapper, nextLevel, node.id, rtNodes, diagram);\n                }\n            }\n        }\n    };\n    DataBinding.prototype.containsConnector = function (diagram, sourceNode, targetNode) {\n        if (sourceNode !== '' && targetNode !== '') {\n            for (var i = 0; i < diagram.connectors.length; i++) {\n                var connector = diagram.connectors[i];\n                if (connector !== undefined && (connector.sourceID === sourceNode && connector.targetID === targetNode)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     *  collectionContains method is used to  check wthear the node is already present in collection or not\n     *\n     * @param {Node} node\n     * @param {Diagram} diagram\n     * @param {string} id\n     * @param {string} parentId\n     */\n    DataBinding.prototype.collectionContains = function (node, diagram, id, parentId) {\n        var obj = this.dataTable[node.data[id]];\n        if (obj !== undefined && obj.data[id] === node.data[id] && obj.data[parentId] === node.data[parentId]) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Get the Connector values\n     *\n     * @param {string} sNode\n     * @param {string} tNode\n     * @param {Diagram} diagram\n     */\n    DataBinding.prototype.applyConnectorTemplate = function (sNode, tNode, diagram) {\n        var connModel = {\n            id: randomId(), sourceID: sNode, targetID: tNode\n        };\n        var obj = new Connector(diagram, 'connectors', connModel, true);\n        updateDefaultValues(obj, connModel, diagram.connectorDefaults);\n        return obj;\n    };\n    return DataBinding;\n}());\nexport { DataBinding };\n"]},"metadata":{},"sourceType":"module"}