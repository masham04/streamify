{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable jsdoc/require-param */\n\n/* eslint-disable jsdoc/require-returns */\n\n/* eslint-disable valid-jsdoc */\n\n\nimport { Container } from './container';\nimport { rotateSize } from '../../utility/base-util';\nimport { Transform, ElementAction } from '../../enum/enum';\nimport { Size } from '../../primitives/size';\nimport { Rect } from '../../primitives/rect';\nimport { TextElement } from '../elements/text-element';\n/**\n * Canvas module is used to define a plane(canvas) and to arrange the children based on margin\n */\n\nvar Canvas =\n/** @class */\nfunction (_super) {\n  __extends(Canvas, _super);\n\n  function Canvas() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Not applicable for canvas\n     *\n     *  @private\n     */\n\n\n    _this.measureChildren = undefined;\n    return _this;\n  }\n  /**\n   * Measures the minimum space that the canvas requires \\\n   *\n   * @returns { Size } Measures the minimum space that the canvas requires .\\\n   * @param {string} id - provide the id value.\n   * @param {Function} callback - provide the Connector value.\n   *\n   * @private\n   */\n\n\n  Canvas.prototype.measure = function (availableSize, id, callback) {\n    var desired = undefined;\n    var desiredBounds = undefined;\n\n    if (this.hasChildren()) {\n      //Measuring the children\n      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        if (child instanceof TextElement) {\n          if (child.canMeasure) {\n            availableSize.width = availableSize.width || this.maxWidth || this.minWidth;\n            child.measure(availableSize);\n          }\n        } else if (!(child instanceof TextElement)) {\n          child.measure(availableSize, id, callback);\n        }\n\n        var childSize = child.desiredSize.clone();\n\n        if (child.rotateAngle !== 0) {\n          childSize = rotateSize(childSize, child.rotateAngle);\n        }\n\n        var right = childSize.width + child.margin.right;\n        var bottom = childSize.height + child.margin.bottom;\n        var childBounds = new Rect(child.margin.left, child.margin.top, right, bottom);\n\n        if (child.float) {\n          var position = child.getAbsolutePosition(childSize);\n\n          if (position !== undefined) {\n            continue;\n          }\n        }\n\n        if (!(child instanceof TextElement) || child instanceof TextElement && child.canConsiderBounds) {\n          if (desiredBounds === undefined) {\n            desiredBounds = childBounds;\n          } else {\n            desiredBounds.uniteRect(childBounds);\n          }\n        }\n      }\n\n      if (desiredBounds) {\n        var leftMargin = 0;\n        var topMargin = 0;\n        leftMargin = Math.max(desiredBounds.left, 0);\n        topMargin = Math.max(desiredBounds.top, 0);\n        desired = new Size(desiredBounds.width + leftMargin, desiredBounds.height + topMargin);\n      }\n    }\n\n    desired = _super.prototype.validateDesiredSize.call(this, desired, availableSize);\n\n    _super.prototype.stretchChildren.call(this, desired); //Considering padding values\n\n\n    desired.width += this.padding.left + this.padding.right;\n    desired.height += this.padding.top + this.padding.bottom;\n    this.desiredSize = desired;\n    return desired;\n  };\n  /**\n   * Arranges the child elements of the canvas\n   */\n\n\n  Canvas.prototype.arrange = function (desiredSize, isStack) {\n    this.outerBounds = new Rect();\n\n    if (this.hasChildren()) {\n      //let y: number;\n      //let x: number;\n      var y = this.offsetY - desiredSize.height * this.pivot.y + this.padding.top;\n      var x = this.offsetX - desiredSize.width * this.pivot.x + this.padding.left;\n\n      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        if ((child.transform & Transform.Parent) !== 0) {\n          child.parentTransform = this.parentTransform + this.rotateAngle;\n\n          if (this.flip !== 'None' || this.elementActions & ElementAction.ElementIsGroup) {\n            child.parentTransform = this.flip === 'Horizontal' || this.flip === 'Vertical' ? -child.parentTransform : child.parentTransform;\n          }\n\n          var childSize = child.desiredSize.clone();\n          var topLeft = void 0;\n          var center = {\n            x: 0,\n            y: 0\n          };\n          var childX = x;\n          var childY = y;\n\n          if (child.relativeMode === 'Point') {\n            var position = child.getAbsolutePosition(desiredSize);\n\n            if (position !== undefined) {\n              childX += position.x;\n              childY += position.y;\n            }\n          }\n\n          if (child.relativeMode === 'Object') {\n            topLeft = this.alignChildBasedOnParent(child, childSize, desiredSize, childX, childY);\n          } else {\n            topLeft = this.alignChildBasedOnaPoint(child, childX, childY);\n          }\n\n          center = {\n            x: topLeft.x + childSize.width / 2,\n            y: topLeft.y + childSize.height / 2\n          };\n\n          _super.prototype.findChildOffsetFromCenter.call(this, child, center);\n        }\n\n        if (isStack && (child.horizontalAlignment === 'Stretch' || child.verticalAlignment === 'Stretch')) {\n          child.arrange(desiredSize);\n        } else {\n          if (child instanceof TextElement && child.canMeasure) {\n            child.arrange(child.desiredSize);\n            this.outerBounds.uniteRect(child.outerBounds);\n          } else if (!(child instanceof TextElement)) {\n            child.arrange(child.desiredSize);\n            this.outerBounds.uniteRect(child.outerBounds);\n          }\n        }\n      }\n    }\n\n    this.actualSize = desiredSize;\n    this.updateBounds();\n    this.outerBounds.uniteRect(this.bounds);\n    return desiredSize;\n  }; //Aligns the child element based on its parent\n\n\n  Canvas.prototype.alignChildBasedOnParent = function (child, childSize, parentSize, x, y) {\n    switch (child.horizontalAlignment) {\n      case 'Auto':\n      case 'Left':\n        x += child.margin.left;\n        break;\n\n      case 'Right':\n        x += parentSize.width - childSize.width - child.margin.right;\n        break;\n\n      case 'Stretch':\n      case 'Center':\n        x += parentSize.width / 2 - childSize.width / 2;\n        break;\n    }\n\n    switch (child.verticalAlignment) {\n      case 'Auto':\n      case 'Top':\n        y += child.margin.top;\n        break;\n\n      case 'Bottom':\n        y += parentSize.height - childSize.height - child.margin.bottom;\n        break;\n\n      case 'Stretch':\n      case 'Center':\n        y += parentSize.height / 2 - childSize.height / 2;\n        break;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  }; //Aligns the child elements based on a point\n\n\n  Canvas.prototype.alignChildBasedOnaPoint = function (child, x, y) {\n    x += child.margin.left - child.margin.right;\n    y += child.margin.top - child.margin.bottom;\n\n    switch (child.horizontalAlignment) {\n      case 'Auto':\n      case 'Left':\n        x = child.inversedAlignment ? x : x - child.desiredSize.width;\n        break;\n\n      case 'Stretch':\n      case 'Center':\n        x -= child.desiredSize.width * child.pivot.x;\n        break;\n\n      case 'Right':\n        x = child.inversedAlignment ? x - child.desiredSize.width : x;\n        break;\n    }\n\n    switch (child.verticalAlignment) {\n      case 'Auto':\n      case 'Top':\n        y = child.inversedAlignment ? y : y - child.desiredSize.height;\n        break;\n\n      case 'Stretch':\n      case 'Center':\n        y -= child.desiredSize.height * child.pivot.y;\n        break;\n\n      case 'Bottom':\n        y = child.inversedAlignment ? y - child.desiredSize.height : y;\n        break;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  return Canvas;\n}(Container);\n\nexport { Canvas };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/canvas.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Container","rotateSize","Transform","ElementAction","Size","Rect","TextElement","Canvas","_super","_this","apply","arguments","measureChildren","undefined","measure","availableSize","id","callback","desired","desiredBounds","hasChildren","_i","_a","children","length","child","canMeasure","width","maxWidth","minWidth","childSize","desiredSize","clone","rotateAngle","right","margin","bottom","height","childBounds","left","top","float","position","getAbsolutePosition","canConsiderBounds","uniteRect","leftMargin","topMargin","Math","max","validateDesiredSize","call","stretchChildren","padding","arrange","isStack","outerBounds","y","offsetY","pivot","x","offsetX","transform","Parent","parentTransform","flip","elementActions","ElementIsGroup","topLeft","center","childX","childY","relativeMode","alignChildBasedOnParent","alignChildBasedOnaPoint","findChildOffsetFromCenter","horizontalAlignment","verticalAlignment","actualSize","updateBounds","bounds","parentSize","inversedAlignment"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\nimport { Container } from './container';\nimport { rotateSize } from '../../utility/base-util';\nimport { Transform, ElementAction } from '../../enum/enum';\nimport { Size } from '../../primitives/size';\nimport { Rect } from '../../primitives/rect';\nimport { TextElement } from '../elements/text-element';\n/**\n * Canvas module is used to define a plane(canvas) and to arrange the children based on margin\n */\nvar Canvas = /** @class */ (function (_super) {\n    __extends(Canvas, _super);\n    function Canvas() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Not applicable for canvas\n         *\n         *  @private\n         */\n        _this.measureChildren = undefined;\n        return _this;\n    }\n    /**\n     * Measures the minimum space that the canvas requires \\\n     *\n     * @returns { Size } Measures the minimum space that the canvas requires .\\\n     * @param {string} id - provide the id value.\n     * @param {Function} callback - provide the Connector value.\n     *\n     * @private\n     */\n    Canvas.prototype.measure = function (availableSize, id, callback) {\n        var desired = undefined;\n        var desiredBounds = undefined;\n        if (this.hasChildren()) {\n            //Measuring the children\n            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (child instanceof TextElement) {\n                    if (child.canMeasure) {\n                        availableSize.width = availableSize.width || this.maxWidth || this.minWidth;\n                        child.measure(availableSize);\n                    }\n                }\n                else if (!(child instanceof TextElement)) {\n                    child.measure(availableSize, id, callback);\n                }\n                var childSize = child.desiredSize.clone();\n                if (child.rotateAngle !== 0) {\n                    childSize = rotateSize(childSize, child.rotateAngle);\n                }\n                var right = childSize.width + child.margin.right;\n                var bottom = childSize.height + child.margin.bottom;\n                var childBounds = new Rect(child.margin.left, child.margin.top, right, bottom);\n                if (child.float) {\n                    var position = child.getAbsolutePosition(childSize);\n                    if (position !== undefined) {\n                        continue;\n                    }\n                }\n                if ((!(child instanceof TextElement)) || (child instanceof TextElement && child.canConsiderBounds)) {\n                    if (desiredBounds === undefined) {\n                        desiredBounds = childBounds;\n                    }\n                    else {\n                        desiredBounds.uniteRect(childBounds);\n                    }\n                }\n            }\n            if (desiredBounds) {\n                var leftMargin = 0;\n                var topMargin = 0;\n                leftMargin = Math.max(desiredBounds.left, 0);\n                topMargin = Math.max(desiredBounds.top, 0);\n                desired = new Size(desiredBounds.width + leftMargin, desiredBounds.height + topMargin);\n            }\n        }\n        desired = _super.prototype.validateDesiredSize.call(this, desired, availableSize);\n        _super.prototype.stretchChildren.call(this, desired);\n        //Considering padding values\n        desired.width += this.padding.left + this.padding.right;\n        desired.height += this.padding.top + this.padding.bottom;\n        this.desiredSize = desired;\n        return desired;\n    };\n    /**\n     * Arranges the child elements of the canvas\n     */\n    Canvas.prototype.arrange = function (desiredSize, isStack) {\n        this.outerBounds = new Rect();\n        if (this.hasChildren()) {\n            //let y: number;\n            //let x: number;\n            var y = this.offsetY - desiredSize.height * this.pivot.y + this.padding.top;\n            var x = this.offsetX - desiredSize.width * this.pivot.x + this.padding.left;\n            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if ((child.transform & Transform.Parent) !== 0) {\n                    child.parentTransform = this.parentTransform + this.rotateAngle;\n                    if (this.flip !== 'None' || this.elementActions & ElementAction.ElementIsGroup) {\n                        child.parentTransform = (this.flip === 'Horizontal' || this.flip === 'Vertical') ?\n                            -child.parentTransform : child.parentTransform;\n                    }\n                    var childSize = child.desiredSize.clone();\n                    var topLeft = void 0;\n                    var center = { x: 0, y: 0 };\n                    var childX = x;\n                    var childY = y;\n                    if (child.relativeMode === 'Point') {\n                        var position = child.getAbsolutePosition(desiredSize);\n                        if (position !== undefined) {\n                            childX += position.x;\n                            childY += position.y;\n                        }\n                    }\n                    if (child.relativeMode === 'Object') {\n                        topLeft = this.alignChildBasedOnParent(child, childSize, desiredSize, childX, childY);\n                    }\n                    else {\n                        topLeft = this.alignChildBasedOnaPoint(child, childX, childY);\n                    }\n                    center = { x: topLeft.x + childSize.width / 2, y: topLeft.y + childSize.height / 2 };\n                    _super.prototype.findChildOffsetFromCenter.call(this, child, center);\n                }\n                if (isStack && (child.horizontalAlignment === 'Stretch' || child.verticalAlignment === 'Stretch')) {\n                    child.arrange(desiredSize);\n                }\n                else {\n                    if (child instanceof TextElement && child.canMeasure) {\n                        child.arrange(child.desiredSize);\n                        this.outerBounds.uniteRect(child.outerBounds);\n                    }\n                    else if (!(child instanceof TextElement)) {\n                        child.arrange(child.desiredSize);\n                        this.outerBounds.uniteRect(child.outerBounds);\n                    }\n                }\n            }\n        }\n        this.actualSize = desiredSize;\n        this.updateBounds();\n        this.outerBounds.uniteRect(this.bounds);\n        return desiredSize;\n    };\n    //Aligns the child element based on its parent\n    Canvas.prototype.alignChildBasedOnParent = function (child, childSize, parentSize, x, y) {\n        switch (child.horizontalAlignment) {\n            case 'Auto':\n            case 'Left':\n                x += child.margin.left;\n                break;\n            case 'Right':\n                x += parentSize.width - childSize.width - child.margin.right;\n                break;\n            case 'Stretch':\n            case 'Center':\n                x += parentSize.width / 2 - childSize.width / 2;\n                break;\n        }\n        switch (child.verticalAlignment) {\n            case 'Auto':\n            case 'Top':\n                y += child.margin.top;\n                break;\n            case 'Bottom':\n                y += parentSize.height - childSize.height - child.margin.bottom;\n                break;\n            case 'Stretch':\n            case 'Center':\n                y += parentSize.height / 2 - childSize.height / 2;\n                break;\n        }\n        return { x: x, y: y };\n    };\n    //Aligns the child elements based on a point\n    Canvas.prototype.alignChildBasedOnaPoint = function (child, x, y) {\n        x += child.margin.left - child.margin.right;\n        y += child.margin.top - child.margin.bottom;\n        switch (child.horizontalAlignment) {\n            case 'Auto':\n            case 'Left':\n                x = child.inversedAlignment ? x : (x - child.desiredSize.width);\n                break;\n            case 'Stretch':\n            case 'Center':\n                x -= child.desiredSize.width * child.pivot.x;\n                break;\n            case 'Right':\n                x = child.inversedAlignment ? (x - child.desiredSize.width) : x;\n                break;\n        }\n        switch (child.verticalAlignment) {\n            case 'Auto':\n            case 'Top':\n                y = child.inversedAlignment ? y : (y - child.desiredSize.height);\n                break;\n            case 'Stretch':\n            case 'Center':\n                y -= child.desiredSize.height * child.pivot.y;\n                break;\n            case 'Bottom':\n                y = child.inversedAlignment ? (y - child.desiredSize.height) : y;\n                break;\n        }\n        return { x: x, y: y };\n    };\n    return Canvas;\n}(Container));\nexport { Canvas };\n"]},"metadata":{},"sourceType":"module"}