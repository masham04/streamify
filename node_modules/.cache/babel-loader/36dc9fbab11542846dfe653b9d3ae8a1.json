{"ast":null,"code":"import { Connector } from '../objects/connector';\nimport { Node } from '../objects/node';\nimport { Rect } from '../primitives/rect';\nimport { identityMatrix, transformPointByMatrix, rotateMatrix } from '../primitives/matrix';\nimport { getUserHandlePosition, checkPortRestriction } from '../utility/diagram-util';\nimport { canMove, canDragSourceEnd, canDragTargetEnd, canContinuousDraw, canDragSegmentThumb } from '../utility/constraints-util';\nimport { canZoomPan, defaultTool, canDrawOnce, canDrag, canDraw, canSelect, canRotate } from '../utility/constraints-util';\nimport { canShowCorner, canResizeCorner } from '../utility/diagram-util';\nimport { Point } from '../primitives/point';\nimport { TextElement } from '../core/elements/text-element';\nimport { PortConstraints, DiagramTools, PortVisibility, ThumbsConstraints } from '../enum/enum';\nimport { Selector } from '../objects/node';\nimport { PointPort } from './../objects/port';\nimport { ShapeAnnotation, PathAnnotation } from '../objects/annotation';\nimport { checkParentAsContainer } from '../interaction/container-interaction';\n/**\n * Finds the action to be taken for the object under mouse\n *\n */\n\n/* tslint:disable */\n\n/**\n * findToolToActivate method\\\n *\n * @returns {Actions}    findToolToActivate method .\\\n * @param {Object} obj - provide the options value.\n * @param {DiagramElement} wrapper - provide the options value.\n * @param {PointModel} position - provide the options value.\n * @param {Diagram} diagram - provide the options value.\n * @param {ITouches[] | TouchList} touchStart - provide the options value.\n * @param {ITouches[] | TouchList} touchMove - provide the options value.\n * @param {NodeModel | PointPortModel | ShapeAnnotationModel | PathAnnotationModel} target - provide the options value.\n * @private\n */\n\nexport function findToolToActivate(obj, wrapper, position, diagram, touchStart, touchMove, target) {\n  //let conn: Connector = diagram.selectedItems.connectors[0] as Connector;\n  if (touchMove && touchMove.length > 1 && touchStart && touchStart.length > 1) {\n    return 'PinchZoom';\n  }\n\n  if (diagram.currentSymbol) {\n    return 'Drag';\n  }\n\n  var eventHandler = 'eventHandler';\n\n  if (diagram[eventHandler].action === 'PortDraw') {\n    diagram.tool &= ~DiagramTools.DrawOnce;\n  } //Drawing Tools\n\n\n  if ((canDrawOnce(diagram) || canContinuousDraw(diagram)) && diagram.drawingObject) {\n    return 'Draw';\n  }\n\n  if (hasSelection(diagram)) {\n    var handle = diagram.selectedItems;\n\n    if (handle.wrapper && canShowCorner(handle.constraints, 'UserHandle')) {\n      for (var _i = 0, _a = handle.userHandles; _i < _a.length; _i++) {\n        var obj_1 = _a[_i];\n\n        if (obj_1.visible) {\n          var paddedBounds = getUserHandlePosition(handle, obj_1, diagram.scroller.transform);\n\n          if (contains(position, paddedBounds, obj_1.size / (2 * diagram.scroller.transform.scale))) {\n            return obj_1.name;\n          }\n        }\n      }\n    }\n  }\n\n  if (hasSelection(diagram)) {\n    var element = diagram.selectedItems.annotation ? diagram.selectedItems.wrapper.children[0] : diagram.selectedItems.wrapper;\n    var selectorBnds = element.bounds;\n    var handle = diagram.selectedItems;\n    var paddedBounds = new Rect(selectorBnds.x, selectorBnds.y, selectorBnds.width, selectorBnds.height);\n\n    if (hasSingleConnection(diagram) && !diagram.selectedItems.annotation) {\n      var conn = diagram.selectedItems.connectors[0];\n      var sourcePaddingValue = 10 / diagram.scrollSettings.currentZoom;\n      var targetPaddingValue = 10 / diagram.scrollSettings.currentZoom;\n\n      if (canShowCorner(handle.constraints, 'ResizeAll')) {\n        if (canShowCorner(handle.constraints, 'ConnectorSourceThumb') && canDragSourceEnd(conn) && contains(position, conn.sourcePoint, sourcePaddingValue)) {\n          return 'ConnectorSourceEnd';\n        }\n\n        if (canShowCorner(handle.constraints, 'ConnectorTargetThumb') && canDragTargetEnd(conn) && contains(position, conn.targetPoint, targetPaddingValue)) {\n          return 'ConnectorTargetEnd';\n        }\n\n        var action = checkForConnectorSegment(conn, handle, position, diagram);\n\n        if (action !== 'OrthoThumb') {\n          if (canShowCorner(handle.constraints, 'ConnectorSourceThumb') && canDragSourceEnd(conn)) {\n            if (action) {\n              return action;\n            }\n          }\n\n          if (canShowCorner(handle.constraints, 'ConnectorTargetThumb') && canDragTargetEnd(conn)) {\n            if (action) {\n              return action;\n            }\n          }\n        } else {\n          return action;\n        }\n      }\n    } else {\n      var ten = 10 / diagram.scroller.currentZoom;\n      var matrix = identityMatrix();\n      rotateMatrix(matrix, element.rotateAngle + element.parentTransform, element.offsetX, element.offsetY); //check for resizing tool\n\n      var x = element.offsetX - element.pivot.x * element.actualSize.width;\n      var y = element.offsetY - element.pivot.y * element.actualSize.height;\n      var rotateThumb = {\n        x: x + (element.pivot.x === 0.5 ? element.pivot.x * 2 : element.pivot.x) * element.actualSize.width / 2,\n        y: y - 30 / diagram.scroller.currentZoom\n      };\n      rotateThumb = transformPointByMatrix(matrix, rotateThumb);\n      var labelSelection = diagram.selectedItems.annotation ? true : false;\n      var labelRotate = labelSelection && canRotate(diagram.selectedItems.annotation) ? true : false;\n\n      if (canShowCorner(handle.constraints, 'Rotate') && contains(position, rotateThumb, ten) && diagram.selectedItems.thumbsConstraints & ThumbsConstraints.Rotate) {\n        if (labelSelection && labelRotate) {\n          return 'LabelRotate';\n        } else if (!labelSelection) {\n          return 'Rotate';\n        }\n      }\n\n      paddedBounds.Inflate(ten);\n\n      if (paddedBounds.containsPoint(position)) {\n        var action = checkResizeHandles(diagram, element, position, matrix, x, y);\n\n        if (action) {\n          return action;\n        }\n      }\n    }\n  } //Panning\n\n\n  if (canZoomPan(diagram) && !obj) {\n    return 'Pan';\n  }\n\n  if (target instanceof PointPort && !canZoomPan(diagram)) {\n    var action = findPortToolToActivate(diagram, target);\n\n    if (action !== 'None') {\n      return action;\n    }\n  }\n\n  if ((target instanceof ShapeAnnotation || target instanceof PathAnnotation) && !canZoomPan(diagram) && canSelect(target)) {\n    if (isSelected(diagram, target, undefined, wrapper) && canMove(target)) {\n      return 'LabelDrag';\n    }\n\n    return 'LabelSelect';\n  }\n\n  if (obj !== null) {\n    if (obj instanceof Node || obj instanceof Connector) {\n      if (wrapper && wrapper.id) {\n        var id = wrapper.id.split(obj.id)[1];\n\n        if (id && id.match('^_icon')) {\n          return 'LayoutAnimation';\n        }\n      }\n\n      if (wrapper && wrapper.id) {\n        var userid = void 0;\n\n        for (var i = 0; i < obj.fixedUserHandles.length; i++) {\n          userid = obj.fixedUserHandles[i].id;\n\n          if (wrapper.id && wrapper.id.indexOf(userid) > -1) {\n            return 'FixedUserHandle';\n          }\n        }\n      }\n\n      if (wrapper instanceof TextElement && wrapper.hyperlink.link) {\n        return 'Hyperlink';\n      }\n\n      if (canMove(obj) && isSelected(diagram, obj, false) && diagram.selectedItems.annotation === undefined) {\n        if (obj instanceof Connector && !(contains(position, obj.sourcePoint, obj.hitPadding) || contains(position, obj.targetPoint, obj.hitPadding)) || !(obj instanceof Connector)) {\n          return 'Drag';\n        }\n      } else if (obj && canZoomPan(diagram) && !defaultTool(diagram)) {\n        return 'Pan';\n      } else if (diagram.selectedItems.nodes.length && diagram.selectedItems.nodes[0].isLane && diagram.selectedItems.wrapper && diagram.selectedItems.wrapper.bounds.containsPoint(position)) {\n        return 'Drag';\n      } else {\n        return 'Select';\n      }\n    } else {\n      return 'Select';\n    }\n  }\n\n  return 'Select';\n}\n/* tslint:enable */\n\nfunction checkResizeHandles(diagram, element, position, matrix, x, y) {\n  var action;\n\n  if (diagram.selectedItems.nodes.length === 1 && diagram.selectedItems.connectors.length === 0 && diagram.selectedItems.nodes[0].container) {\n    action = checkResizeHandleForContainer(diagram, element, position, x, y);\n  }\n\n  if (!action && (!diagram.selectedItems.nodes[0] || !diagram.selectedItems.nodes[0].isPhase && !diagram.selectedItems.nodes[0].isLane && diagram.selectedItems.nodes[0].shape.type !== 'SwimLane')) {\n    action = checkForResizeHandles(diagram, element, position, matrix, x, y);\n  }\n\n  if (action) {\n    return action;\n  }\n\n  return null;\n}\n/**\n * checkForConnectorSegment method\\\n *\n * @returns {Actions}    checkForConnectorSegment method .\\\n * @param {Connector} conn - provide the options value.\n * @param {SelectorModel} handle - provide the options value.\n * @param {PointModel} position - provide the options value.\n * @param {Diagram} diagram - provide the options value.\n * @private\n */\n\n\nfunction checkForConnectorSegment(conn, handle, position, diagram) {\n  var targetPaddingValue = 10 / diagram.scrollSettings.currentZoom;\n  var sourcePaddingValue = 10 / diagram.scrollSettings.currentZoom;\n\n  if (conn.type === 'Bezier') {\n    for (var i = 0; i < conn.segments.length; i++) {\n      var segment = conn.segments[i];\n\n      if (contains(position, !Point.isEmptyPoint(segment.point1) ? segment.point1 : segment.bezierPoint1, sourcePaddingValue)) {\n        return 'BezierSourceThumb';\n      }\n\n      if (contains(position, !Point.isEmptyPoint(segment.point2) ? segment.point2 : segment.bezierPoint2, targetPaddingValue)) {\n        return 'BezierTargetThumb';\n      }\n    }\n  }\n\n  if (diagram.connectorEditingToolModule && canDragSegmentThumb(conn)) {\n    if (conn.type === 'Straight' || conn.type === 'Bezier') {\n      for (var i = 0; i < conn.segments.length; i++) {\n        //let segment: StraightSegmentModel | BezierSegmentModel;\n        var segment = conn.segments[i];\n\n        if (contains(position, segment.point, 10)) {\n          return 'SegmentEnd';\n        }\n      }\n    } else {\n      for (var i = 0; i < conn.segments.length; i++) {\n        var segPoint = {\n          x: 0,\n          y: 0\n        };\n        var segment = conn.segments[i];\n\n        if (segment.allowDrag) {\n          for (var j = 0; j < segment.points.length - 1; j++) {\n            var length_1 = Point.distancePoints(segment.points[j], segment.points[j + 1]);\n\n            if (length_1 >= 50) {\n              segPoint.x = (segment.points[j].x + segment.points[j + 1].x) / 2;\n              segPoint.y = (segment.points[j].y + segment.points[j + 1].y) / 2;\n\n              if (contains(position, segPoint, 30)) {\n                return 'OrthoThumb';\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n}\n/**\n * findPortToolToActivate method\\\n *\n * @returns {boolean}    findPortToolToActivate method .\\\n * @param {Diagram} diagram - provide the options value.\n * @param {NodeModel | PointPortModel} target - provide the options value.\n * @param {ITouches[] | TouchList} touchStart - provide the options value.\n * @param {ITouches[] | TouchList} touchMove - provide the options value.\n * @private\n */\n\n\nexport function findPortToolToActivate(diagram, target, // eslint-disable-next-line\ntouchStart, touchMove) {\n  if (canDrag(target, diagram) && (checkPortRestriction(target, PortVisibility.Hover) || checkPortRestriction(target, PortVisibility.Visible))) {\n    if (target.constraints & PortConstraints.Drag) {\n      return 'PortDrag';\n    }\n  } else if (canDraw(target, diagram) && (checkPortRestriction(target, PortVisibility.Hover) || checkPortRestriction(target, PortVisibility.Visible))) {\n    if (target.constraints & PortConstraints.Draw) {\n      diagram.drawingObject = {};\n      var connector = {\n        type: 'Orthogonal',\n        sourcePortID: target.id\n      };\n      diagram.drawingObject = connector;\n      diagram.tool |= DiagramTools.DrawOnce;\n      diagram.currentDrawingObject = connector;\n      return 'PortDraw';\n    }\n  }\n\n  return 'None';\n}\n/**\n * Resize handle for container and also object.\n * @private\n */\n\nfunction checkResizeHandleForContainer(diagram, element, position, x, y) {\n  var ten = 10 / diagram.scroller.currentZoom;\n  var forty = 40 / diagram.scroller.currentZoom;\n  var selectedItems = diagram.selectedItems;\n  var width = element.actualSize.width;\n  var height = element.actualSize.height;\n  var left = new Rect(x, y + 20, element.style.strokeWidth, height - 40);\n  var right = new Rect(x + width, y + 20, element.style.strokeWidth, height - 40);\n  var top = new Rect(x + 20, y, width - 40, element.style.strokeWidth);\n  var bottom = new Rect(x + 20, y + height, width - 40, element.style.strokeWidth);\n  var container = checkParentAsContainer(diagram, diagram.selectedItems.nodes[0], true) ? diagram.nameTable[diagram.selectedItems.nodes[0].parentId] : diagram.selectedItems.nodes[0];\n\n  if (width >= forty && height >= forty) {\n    if (canResizeCorner(selectedItems.constraints, 'ResizeEast', selectedItems.thumbsConstraints, selectedItems) && right.containsPoint(position, ten)) {\n      return 'ResizeEast';\n    }\n\n    if (canResizeCorner(selectedItems.constraints, 'ResizeSouth', selectedItems.thumbsConstraints, selectedItems) && bottom.containsPoint(position, ten)) {\n      return 'ResizeSouth';\n    }\n\n    if (container.container.type !== 'Grid') {\n      if (canResizeCorner(selectedItems.constraints, 'ResizeWest', selectedItems.thumbsConstraints, selectedItems) && left.containsPoint(position, ten)) {\n        return 'ResizeWest';\n      }\n\n      if (canResizeCorner(selectedItems.constraints, 'ResizeNorth', selectedItems.thumbsConstraints, selectedItems) && top.containsPoint(position, ten)) {\n        return 'ResizeNorth';\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction checkForResizeHandles(diagram, element, position, matrix, x, y) {\n  var forty = 40 / diagram.scroller.currentZoom;\n  var ten = 10 / diagram.scroller.currentZoom;\n  var selectedItems = diagram.selectedItems;\n  var labelSelection = selectedItems.annotation ? true : false;\n\n  if (element.actualSize.width >= forty && element.actualSize.height >= forty) {\n    if (canResizeCorner(selectedItems.constraints, 'ResizeSouthEast', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, {\n      x: x + element.actualSize.width,\n      y: y + element.actualSize.height\n    }), ten)) {\n      return labelSelection ? 'LabelResizeSouthEast' : 'ResizeSouthEast';\n    }\n\n    if (canResizeCorner(selectedItems.constraints, 'ResizeSouthWest', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, {\n      x: x,\n      y: y + element.actualSize.height\n    }), ten)) {\n      return labelSelection ? 'LabelResizeSouthWest' : 'ResizeSouthWest';\n    }\n\n    if (canResizeCorner(selectedItems.constraints, 'ResizeNorthEast', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, {\n      x: x + element.actualSize.width,\n      y: y\n    }), ten)) {\n      return labelSelection ? 'LabelResizeNorthEast' : 'ResizeNorthEast';\n    }\n\n    if (canResizeCorner(selectedItems.constraints, 'ResizeNorthWest', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, {\n      x: x,\n      y: y\n    }), ten)) {\n      return labelSelection ? 'LabelResizeNorthWest' : 'ResizeNorthWest';\n    }\n  }\n\n  if (canResizeCorner(selectedItems.constraints, 'ResizeEast', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, {\n    x: x + element.actualSize.width,\n    y: y + element.actualSize.height / 2\n  }), ten)) {\n    return labelSelection ? 'LabelResizeEast' : 'ResizeEast';\n  }\n\n  if (canResizeCorner(selectedItems.constraints, 'ResizeWest', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, {\n    x: x,\n    y: y + element.actualSize.height / 2\n  }), ten)) {\n    return labelSelection ? 'LabelResizeWest' : 'ResizeWest';\n  }\n\n  if (canResizeCorner(selectedItems.constraints, 'ResizeSouth', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, {\n    x: x + element.actualSize.width / 2,\n    y: y + element.actualSize.height\n  }), ten)) {\n    return labelSelection ? 'LabelResizeSouth' : 'ResizeSouth';\n  }\n\n  if (canResizeCorner(selectedItems.constraints, 'ResizeNorth', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, {\n    x: x + element.actualSize.width / 2,\n    y: y\n  }), ten)) {\n    return labelSelection ? 'LabelResizeNorth' : 'ResizeNorth';\n  }\n\n  return null;\n}\n/**\n * contains method\\\n *\n * @returns {boolean}    contains method .\\\n * @param {PointModel} mousePosition - provide the options value.\n * @param {PointModel} corner - provide the corner value.\n * @param {number} padding - provide the padding value.\n * @private\n */\n\n\nexport function contains(mousePosition, corner, padding) {\n  if (mousePosition.x >= corner.x - padding && mousePosition.x <= corner.x + padding) {\n    if (mousePosition.y >= corner.y - padding && mousePosition.y <= corner.y + padding) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * hasSelection method\\\n *\n * @returns {boolean}    hasSelection method .\\\n * @param {Diagram} diagram - provide the options value.\n * @private\n */\n\nexport function hasSelection(diagram) {\n  if (diagram.selectedItems.nodes.length > 0 || diagram.selectedItems.connectors.length > 0) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * hasSingleConnection method\\\n *\n * @returns {boolean}    hasSingleConnection method .\\\n * @param {Diagram} diagram - provide the options value.\n * @private\n */\n\nexport function hasSingleConnection(diagram) {\n  if (diagram.selectedItems.connectors.length === 1 && !diagram.selectedItems.nodes.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * isSelected method\\\n *\n * @returns {boolean}    isSelected method .\\\n * @param {Diagram} diagram - provide the options value.\n * @param {Object} element - provide the options value.\n * @param {boolean} firstLevel - provide the options value.\n * @param {DiagramElement} wrapper - provide the options value.\n * @private\n */\n\nexport function isSelected(diagram, element, firstLevel, wrapper) {\n  if (firstLevel === void 0) {\n    firstLevel = true;\n  }\n\n  if (element instanceof Selector) {\n    return true;\n  }\n\n  if (element instanceof Node) {\n    while (element) {\n      if (diagram.selectedItems.nodes.indexOf(element) !== -1 && diagram.selectedItems.annotation === undefined) {\n        return true;\n      }\n\n      if (!firstLevel) {\n        element = diagram.nameTable[element.parentId];\n      } else {\n        break;\n      }\n    }\n  } else if (element instanceof Connector) {\n    if (diagram.selectedItems.connectors.indexOf(element) !== -1 && diagram.selectedItems.annotation === undefined) {\n      return true;\n    }\n  } else if (element instanceof ShapeAnnotation || element instanceof PathAnnotation) {\n    if (diagram.selectedItems.annotation && diagram.selectedItems.wrapper.children[0].id === wrapper.id) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * getCursor method\\\n *\n * @returns {boolean}    getCursor method .\\\n * @param {Actions} cursor - provide the options value.\n * @param {number} angle - provide the options value.\n * @private\n */\n\nexport function getCursor(cursor, angle) {\n  //to avoid angles less than 0 & angles greater than 360\n  angle += 360;\n  angle %= 360;\n\n  if (cursor.indexOf('Resize') === -1) {\n    return cursors[cursor];\n  } else {\n    var dir = cursors[cursor];\n\n    if (angle >= 0 && angle < 25 || angle >= 160 && angle <= 205 || angle >= 340 && angle <= 360) {\n      return dir;\n    } else if (angle >= 25 && angle <= 70 || angle >= 205 && angle <= 250) {\n      if (dir === 'n-resize' || dir === 's-resize') {\n        return 'ne-resize';\n      } else if (dir === 'nw-resize' || dir === 'se-resize') {\n        return 'n-resize';\n      } else if (dir === 'e-resize' || dir === 'w-resize') {\n        return 'nw-resize';\n      } else {\n        return 'e-resize';\n      }\n    } else if (angle >= 70 && angle <= 115 || angle >= 250 && angle <= 295) {\n      if (dir === 'n-resize' || dir === 's-resize') {\n        return 'e-resize';\n      } else if (dir === 'nw-resize' || dir === 'se-resize') {\n        return 'ne-resize';\n      } else if (dir === 'e-resize' || dir === 'w-resize') {\n        return 'n-resize';\n      } else {\n        return 'nw-resize';\n      }\n    } else if (angle >= 115 && angle <= 155 || angle >= 295 && angle <= 340) {\n      if (dir === 'n-resize' || dir === 's-resize') {\n        return 'nw-resize';\n      } else if (dir === 'nw-resize' || dir === 'se-resize') {\n        return 'e-resize';\n      } else if (dir === 'e-resize' || dir === 'w-resize') {\n        return 'ne-resize';\n      }\n    } else {\n      return 'n-resize';\n    }\n  }\n\n  return cursors[cursor];\n}\nvar cursors = {\n  'None': 'default',\n  'Rotate': 'crosshair',\n  'Select': 'default',\n  'Drag': 'move',\n  'ResizeWest': 'w-resize',\n  'ResizeEast': 'e-resize',\n  'ResizeSouth': 's-resize',\n  'ResizeNorth': 'n-resize',\n  'Draw': 'crosshair',\n  'PortDraw': 'crosshair',\n  'ResizeNorthEast': 'ne-resize',\n  'ResizeNorthWest': 'nw-resize',\n  'ResizeSouthEast': 'se-resize',\n  'ResizeSouthWest': 'sw-resize',\n  'ConnectorSourceEnd': 'move',\n  'ConnectorTargetEnd': 'move',\n  'BezierSourceThumb': 'move',\n  'BezierTargetThumb': 'move',\n  'OrthoThumb': 'move',\n  'SegmentEnd': 'move',\n  'Pan': 'grab',\n  'Hyperlink': 'pointer',\n  'PortDrag': 'pointer',\n  'LabelSelect': 'pointer',\n  'LabelDrag': 'move',\n  'LabelRotate': 'crosshair',\n  'LabelResizeWest': 'w-resize',\n  'LabelResizeEast': 'e-resize',\n  'LabelResizeSouth': 's-resize',\n  'LabelResizeNorth': 'n-resize',\n  'LabelResizeNorthEast': 'ne-resize',\n  'LabelResizeNorthWest': 'nw-resize',\n  'LabelResizeSouthEast': 'se-resize',\n  'LabelResizeSouthWest': 'sw-resize'\n};","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/actions.js"],"names":["Connector","Node","Rect","identityMatrix","transformPointByMatrix","rotateMatrix","getUserHandlePosition","checkPortRestriction","canMove","canDragSourceEnd","canDragTargetEnd","canContinuousDraw","canDragSegmentThumb","canZoomPan","defaultTool","canDrawOnce","canDrag","canDraw","canSelect","canRotate","canShowCorner","canResizeCorner","Point","TextElement","PortConstraints","DiagramTools","PortVisibility","ThumbsConstraints","Selector","PointPort","ShapeAnnotation","PathAnnotation","checkParentAsContainer","findToolToActivate","obj","wrapper","position","diagram","touchStart","touchMove","target","length","currentSymbol","eventHandler","action","tool","DrawOnce","drawingObject","hasSelection","handle","selectedItems","constraints","_i","_a","userHandles","obj_1","visible","paddedBounds","scroller","transform","contains","size","scale","name","element","annotation","children","selectorBnds","bounds","x","y","width","height","hasSingleConnection","conn","connectors","sourcePaddingValue","scrollSettings","currentZoom","targetPaddingValue","sourcePoint","targetPoint","checkForConnectorSegment","ten","matrix","rotateAngle","parentTransform","offsetX","offsetY","pivot","actualSize","rotateThumb","labelSelection","labelRotate","thumbsConstraints","Rotate","Inflate","containsPoint","checkResizeHandles","findPortToolToActivate","isSelected","undefined","id","split","match","userid","i","fixedUserHandles","indexOf","hyperlink","link","hitPadding","nodes","isLane","container","checkResizeHandleForContainer","isPhase","shape","type","checkForResizeHandles","segments","segment","isEmptyPoint","point1","bezierPoint1","point2","bezierPoint2","connectorEditingToolModule","point","segPoint","allowDrag","j","points","length_1","distancePoints","Hover","Visible","Drag","Draw","connector","sourcePortID","currentDrawingObject","forty","left","style","strokeWidth","right","top","bottom","nameTable","parentId","mousePosition","corner","padding","firstLevel","getCursor","cursor","angle","cursors","dir"],"mappings":"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","sourcesContent":["import { Connector } from '../objects/connector';\nimport { Node } from '../objects/node';\nimport { Rect } from '../primitives/rect';\nimport { identityMatrix, transformPointByMatrix, rotateMatrix } from '../primitives/matrix';\nimport { getUserHandlePosition, checkPortRestriction } from '../utility/diagram-util';\nimport { canMove, canDragSourceEnd, canDragTargetEnd, canContinuousDraw, canDragSegmentThumb } from '../utility/constraints-util';\nimport { canZoomPan, defaultTool, canDrawOnce, canDrag, canDraw, canSelect, canRotate } from '../utility/constraints-util';\nimport { canShowCorner, canResizeCorner } from '../utility/diagram-util';\nimport { Point } from '../primitives/point';\nimport { TextElement } from '../core/elements/text-element';\nimport { PortConstraints, DiagramTools, PortVisibility, ThumbsConstraints } from '../enum/enum';\nimport { Selector } from '../objects/node';\nimport { PointPort } from './../objects/port';\nimport { ShapeAnnotation, PathAnnotation } from '../objects/annotation';\nimport { checkParentAsContainer } from '../interaction/container-interaction';\n/**\n * Finds the action to be taken for the object under mouse\n *\n */\n/* tslint:disable */\n/**\n * findToolToActivate method\\\n *\n * @returns {Actions}    findToolToActivate method .\\\n * @param {Object} obj - provide the options value.\n * @param {DiagramElement} wrapper - provide the options value.\n * @param {PointModel} position - provide the options value.\n * @param {Diagram} diagram - provide the options value.\n * @param {ITouches[] | TouchList} touchStart - provide the options value.\n * @param {ITouches[] | TouchList} touchMove - provide the options value.\n * @param {NodeModel | PointPortModel | ShapeAnnotationModel | PathAnnotationModel} target - provide the options value.\n * @private\n */\nexport function findToolToActivate(obj, wrapper, position, diagram, touchStart, touchMove, target) {\n    //let conn: Connector = diagram.selectedItems.connectors[0] as Connector;\n    if (touchMove && touchMove.length > 1 && touchStart && touchStart.length > 1) {\n        return 'PinchZoom';\n    }\n    if (diagram.currentSymbol) {\n        return 'Drag';\n    }\n    var eventHandler = 'eventHandler';\n    if (diagram[eventHandler].action === 'PortDraw') {\n        diagram.tool &= ~DiagramTools.DrawOnce;\n    }\n    //Drawing Tools\n    if ((canDrawOnce(diagram) || canContinuousDraw(diagram)) && diagram.drawingObject) {\n        return 'Draw';\n    }\n    if (hasSelection(diagram)) {\n        var handle = diagram.selectedItems;\n        if (handle.wrapper && canShowCorner(handle.constraints, 'UserHandle')) {\n            for (var _i = 0, _a = handle.userHandles; _i < _a.length; _i++) {\n                var obj_1 = _a[_i];\n                if (obj_1.visible) {\n                    var paddedBounds = getUserHandlePosition(handle, obj_1, diagram.scroller.transform);\n                    if (contains(position, paddedBounds, obj_1.size / (2 * diagram.scroller.transform.scale))) {\n                        return obj_1.name;\n                    }\n                }\n            }\n        }\n    }\n    if (hasSelection(diagram)) {\n        var element = (diagram.selectedItems.annotation) ?\n            diagram.selectedItems.wrapper.children[0] : diagram.selectedItems.wrapper;\n        var selectorBnds = element.bounds;\n        var handle = diagram.selectedItems;\n        var paddedBounds = new Rect(selectorBnds.x, selectorBnds.y, selectorBnds.width, selectorBnds.height);\n        if (hasSingleConnection(diagram) && !diagram.selectedItems.annotation) {\n            var conn = diagram.selectedItems.connectors[0];\n            var sourcePaddingValue = 10 / diagram.scrollSettings.currentZoom;\n            var targetPaddingValue = 10 / diagram.scrollSettings.currentZoom;\n            if (canShowCorner(handle.constraints, 'ResizeAll')) {\n                if ((canShowCorner(handle.constraints, 'ConnectorSourceThumb'))\n                    && canDragSourceEnd(conn) && contains(position, conn.sourcePoint, sourcePaddingValue)) {\n                    return 'ConnectorSourceEnd';\n                }\n                if ((canShowCorner(handle.constraints, 'ConnectorTargetThumb'))\n                    && canDragTargetEnd(conn) && contains(position, conn.targetPoint, targetPaddingValue)) {\n                    return 'ConnectorTargetEnd';\n                }\n                var action = checkForConnectorSegment(conn, handle, position, diagram);\n                if (action !== 'OrthoThumb') {\n                    if ((canShowCorner(handle.constraints, 'ConnectorSourceThumb'))\n                        && canDragSourceEnd(conn)) {\n                        if (action) {\n                            return action;\n                        }\n                    }\n                    if ((canShowCorner(handle.constraints, 'ConnectorTargetThumb'))\n                        && canDragTargetEnd(conn)) {\n                        if (action) {\n                            return action;\n                        }\n                    }\n                }\n                else {\n                    return action;\n                }\n            }\n        }\n        else {\n            var ten = 10 / diagram.scroller.currentZoom;\n            var matrix = identityMatrix();\n            rotateMatrix(matrix, element.rotateAngle + element.parentTransform, element.offsetX, element.offsetY);\n            //check for resizing tool\n            var x = element.offsetX - element.pivot.x * element.actualSize.width;\n            var y = element.offsetY - element.pivot.y * element.actualSize.height;\n            var rotateThumb = {\n                x: x + ((element.pivot.x === 0.5 ? element.pivot.x * 2 : element.pivot.x) * element.actualSize.width / 2),\n                y: y - 30 / diagram.scroller.currentZoom\n            };\n            rotateThumb = transformPointByMatrix(matrix, rotateThumb);\n            var labelSelection = diagram.selectedItems.annotation ? true : false;\n            var labelRotate = (labelSelection && (canRotate(diagram.selectedItems.annotation))) ? true : false;\n            if (canShowCorner(handle.constraints, 'Rotate') && contains(position, rotateThumb, ten) &&\n                (diagram.selectedItems.thumbsConstraints & ThumbsConstraints.Rotate)) {\n                if (labelSelection && labelRotate) {\n                    return 'LabelRotate';\n                }\n                else if (!labelSelection) {\n                    return 'Rotate';\n                }\n            }\n            paddedBounds.Inflate(ten);\n            if (paddedBounds.containsPoint(position)) {\n                var action = checkResizeHandles(diagram, element, position, matrix, x, y);\n                if (action) {\n                    return action;\n                }\n            }\n        }\n    }\n    //Panning\n    if (canZoomPan(diagram) && !obj) {\n        return 'Pan';\n    }\n    if (target instanceof PointPort && (!canZoomPan(diagram))) {\n        var action = findPortToolToActivate(diagram, target);\n        if (action !== 'None') {\n            return action;\n        }\n    }\n    if ((target instanceof ShapeAnnotation || target instanceof PathAnnotation) && (!canZoomPan(diagram) && (canSelect(target)))) {\n        if (isSelected(diagram, target, undefined, wrapper) && canMove(target)) {\n            return 'LabelDrag';\n        }\n        return 'LabelSelect';\n    }\n    if (obj !== null) {\n        if (obj instanceof Node || obj instanceof Connector) {\n            if (wrapper && wrapper.id) {\n                var id = wrapper.id.split(obj.id)[1];\n                if (id && id.match('^_icon')) {\n                    return 'LayoutAnimation';\n                }\n            }\n            if (wrapper && wrapper.id) {\n                var userid = void 0;\n                for (var i = 0; i < obj.fixedUserHandles.length; i++) {\n                    userid = obj.fixedUserHandles[i].id;\n                    if (wrapper.id && (wrapper.id.indexOf(userid) > -1)) {\n                        return 'FixedUserHandle';\n                    }\n                }\n            }\n            if (wrapper instanceof TextElement && wrapper.hyperlink.link) {\n                return 'Hyperlink';\n            }\n            if (canMove(obj) && isSelected(diagram, obj, false) && diagram.selectedItems.annotation === undefined) {\n                if ((obj instanceof Connector && !(contains(position, obj.sourcePoint, obj.hitPadding) ||\n                    contains(position, obj.targetPoint, obj.hitPadding))) ||\n                    !(obj instanceof Connector)) {\n                    return 'Drag';\n                }\n            }\n            else if (obj && canZoomPan(diagram) && !defaultTool(diagram)) {\n                return 'Pan';\n            }\n            else if (diagram.selectedItems.nodes.length && diagram.selectedItems.nodes[0].isLane &&\n                diagram.selectedItems.wrapper && diagram.selectedItems.wrapper.bounds.containsPoint(position)) {\n                return 'Drag';\n            }\n            else {\n                return 'Select';\n            }\n        }\n        else {\n            return 'Select';\n        }\n    }\n    return 'Select';\n}\n/* tslint:enable */\nfunction checkResizeHandles(diagram, element, position, matrix, x, y) {\n    var action;\n    if ((diagram.selectedItems.nodes.length === 1 && diagram.selectedItems.connectors.length === 0)\n        && diagram.selectedItems.nodes[0].container) {\n        action = checkResizeHandleForContainer(diagram, element, position, x, y);\n    }\n    if (!action && (!diagram.selectedItems.nodes[0] || (!diagram.selectedItems.nodes[0].isPhase &&\n        !diagram.selectedItems.nodes[0].isLane && diagram.selectedItems.nodes[0].shape.type !== 'SwimLane'))) {\n        action = checkForResizeHandles(diagram, element, position, matrix, x, y);\n    }\n    if (action) {\n        return action;\n    }\n    return null;\n}\n/**\n * checkForConnectorSegment method\\\n *\n * @returns {Actions}    checkForConnectorSegment method .\\\n * @param {Connector} conn - provide the options value.\n * @param {SelectorModel} handle - provide the options value.\n * @param {PointModel} position - provide the options value.\n * @param {Diagram} diagram - provide the options value.\n * @private\n */\nfunction checkForConnectorSegment(conn, handle, position, diagram) {\n    var targetPaddingValue = 10 / diagram.scrollSettings.currentZoom;\n    var sourcePaddingValue = 10 / diagram.scrollSettings.currentZoom;\n    if (conn.type === 'Bezier') {\n        for (var i = 0; i < conn.segments.length; i++) {\n            var segment = (conn.segments)[i];\n            if (contains(position, !Point.isEmptyPoint(segment.point1) ? segment.point1 : segment.bezierPoint1, sourcePaddingValue)) {\n                return 'BezierSourceThumb';\n            }\n            if (contains(position, !Point.isEmptyPoint(segment.point2) ? segment.point2 : segment.bezierPoint2, targetPaddingValue)) {\n                return 'BezierTargetThumb';\n            }\n        }\n    }\n    if (diagram.connectorEditingToolModule && canDragSegmentThumb(conn)) {\n        if (conn.type === 'Straight' || conn.type === 'Bezier') {\n            for (var i = 0; i < conn.segments.length; i++) {\n                //let segment: StraightSegmentModel | BezierSegmentModel;\n                var segment = (conn.segments)[i];\n                if (contains(position, segment.point, 10)) {\n                    return 'SegmentEnd';\n                }\n            }\n        }\n        else {\n            for (var i = 0; i < conn.segments.length; i++) {\n                var segPoint = { x: 0, y: 0 };\n                var segment = (conn.segments)[i];\n                if (segment.allowDrag) {\n                    for (var j = 0; j < segment.points.length - 1; j++) {\n                        var length_1 = Point.distancePoints(segment.points[j], segment.points[j + 1]);\n                        if (length_1 >= 50) {\n                            segPoint.x = ((segment.points[j].x + segment.points[j + 1].x) / 2);\n                            segPoint.y = ((segment.points[j].y + segment.points[j + 1].y) / 2);\n                            if (contains(position, segPoint, 30)) {\n                                return 'OrthoThumb';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return null;\n}\n/**\n * findPortToolToActivate method\\\n *\n * @returns {boolean}    findPortToolToActivate method .\\\n * @param {Diagram} diagram - provide the options value.\n * @param {NodeModel | PointPortModel} target - provide the options value.\n * @param {ITouches[] | TouchList} touchStart - provide the options value.\n * @param {ITouches[] | TouchList} touchMove - provide the options value.\n * @private\n */\nexport function findPortToolToActivate(diagram, target, \n// eslint-disable-next-line\ntouchStart, touchMove) {\n    if (canDrag(target, diagram) && (checkPortRestriction(target, PortVisibility.Hover)\n        || (checkPortRestriction(target, PortVisibility.Visible)))) {\n        if ((target.constraints & PortConstraints.Drag)) {\n            return 'PortDrag';\n        }\n    }\n    else if (canDraw(target, diagram) && (checkPortRestriction(target, PortVisibility.Hover)\n        || (checkPortRestriction(target, PortVisibility.Visible)))) {\n        if (target.constraints & PortConstraints.Draw) {\n            diagram.drawingObject = {};\n            var connector = { type: 'Orthogonal', sourcePortID: target.id };\n            diagram.drawingObject = connector;\n            diagram.tool |= DiagramTools.DrawOnce;\n            diagram.currentDrawingObject = connector;\n            return 'PortDraw';\n        }\n    }\n    return 'None';\n}\n/**\n * Resize handle for container and also object.\n * @private\n */\nfunction checkResizeHandleForContainer(diagram, element, position, x, y) {\n    var ten = 10 / diagram.scroller.currentZoom;\n    var forty = 40 / diagram.scroller.currentZoom;\n    var selectedItems = diagram.selectedItems;\n    var width = element.actualSize.width;\n    var height = element.actualSize.height;\n    var left = new Rect(x, y + 20, element.style.strokeWidth, height - 40);\n    var right = new Rect(x + width, y + 20, element.style.strokeWidth, height - 40);\n    var top = new Rect(x + 20, y, width - 40, element.style.strokeWidth);\n    var bottom = new Rect(x + 20, y + height, width - 40, element.style.strokeWidth);\n    var container = checkParentAsContainer(diagram, diagram.selectedItems.nodes[0], true) ?\n        diagram.nameTable[diagram.selectedItems.nodes[0].parentId] : diagram.selectedItems.nodes[0];\n    if (width >= forty && height >= forty) {\n        if (canResizeCorner(selectedItems.constraints, 'ResizeEast', selectedItems.thumbsConstraints, selectedItems) &&\n            right.containsPoint(position, ten)) {\n            return 'ResizeEast';\n        }\n        if (canResizeCorner(selectedItems.constraints, 'ResizeSouth', selectedItems.thumbsConstraints, selectedItems) &&\n            bottom.containsPoint(position, ten)) {\n            return 'ResizeSouth';\n        }\n        if (container.container.type !== 'Grid') {\n            if (canResizeCorner(selectedItems.constraints, 'ResizeWest', selectedItems.thumbsConstraints, selectedItems) &&\n                left.containsPoint(position, ten)) {\n                return 'ResizeWest';\n            }\n            if (canResizeCorner(selectedItems.constraints, 'ResizeNorth', selectedItems.thumbsConstraints, selectedItems) &&\n                top.containsPoint(position, ten)) {\n                return 'ResizeNorth';\n            }\n        }\n    }\n    return null;\n}\nfunction checkForResizeHandles(diagram, element, position, matrix, x, y) {\n    var forty = 40 / diagram.scroller.currentZoom;\n    var ten = 10 / diagram.scroller.currentZoom;\n    var selectedItems = diagram.selectedItems;\n    var labelSelection = (selectedItems.annotation) ? true : false;\n    if (element.actualSize.width >= forty && element.actualSize.height >= forty) {\n        if (canResizeCorner(selectedItems.constraints, 'ResizeSouthEast', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, { x: x + element.actualSize.width, y: y + element.actualSize.height }), ten)) {\n            return (labelSelection) ? 'LabelResizeSouthEast' : 'ResizeSouthEast';\n        }\n        if (canResizeCorner(selectedItems.constraints, 'ResizeSouthWest', selectedItems.thumbsConstraints, selectedItems) &&\n            contains(position, transformPointByMatrix(matrix, { x: x, y: y + element.actualSize.height }), ten)) {\n            return (labelSelection) ? 'LabelResizeSouthWest' : 'ResizeSouthWest';\n        }\n        if (canResizeCorner(selectedItems.constraints, 'ResizeNorthEast', selectedItems.thumbsConstraints, selectedItems) &&\n            contains(position, transformPointByMatrix(matrix, { x: x + element.actualSize.width, y: y }), ten)) {\n            return (labelSelection) ? 'LabelResizeNorthEast' : 'ResizeNorthEast';\n        }\n        if (canResizeCorner(selectedItems.constraints, 'ResizeNorthWest', selectedItems.thumbsConstraints, selectedItems) &&\n            contains(position, transformPointByMatrix(matrix, { x: x, y: y }), ten)) {\n            return (labelSelection) ? 'LabelResizeNorthWest' : 'ResizeNorthWest';\n        }\n    }\n    if (canResizeCorner(selectedItems.constraints, 'ResizeEast', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, { x: x + element.actualSize.width, y: y + element.actualSize.height / 2 }), ten)) {\n        return (labelSelection) ? 'LabelResizeEast' : 'ResizeEast';\n    }\n    if (canResizeCorner(selectedItems.constraints, 'ResizeWest', selectedItems.thumbsConstraints, selectedItems) &&\n        contains(position, transformPointByMatrix(matrix, { x: x, y: y + element.actualSize.height / 2 }), ten)) {\n        return (labelSelection) ? 'LabelResizeWest' : 'ResizeWest';\n    }\n    if (canResizeCorner(selectedItems.constraints, 'ResizeSouth', selectedItems.thumbsConstraints, selectedItems) && contains(position, transformPointByMatrix(matrix, { x: x + element.actualSize.width / 2, y: y + element.actualSize.height }), ten)) {\n        return (labelSelection) ? 'LabelResizeSouth' : 'ResizeSouth';\n    }\n    if (canResizeCorner(selectedItems.constraints, 'ResizeNorth', selectedItems.thumbsConstraints, selectedItems) &&\n        contains(position, transformPointByMatrix(matrix, { x: x + element.actualSize.width / 2, y: y }), ten)) {\n        return (labelSelection) ? 'LabelResizeNorth' : 'ResizeNorth';\n    }\n    return null;\n}\n/**\n * contains method\\\n *\n * @returns {boolean}    contains method .\\\n * @param {PointModel} mousePosition - provide the options value.\n * @param {PointModel} corner - provide the corner value.\n * @param {number} padding - provide the padding value.\n * @private\n */\nexport function contains(mousePosition, corner, padding) {\n    if (mousePosition.x >= corner.x - padding && mousePosition.x <= corner.x + padding) {\n        if (mousePosition.y >= corner.y - padding && mousePosition.y <= corner.y + padding) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * hasSelection method\\\n *\n * @returns {boolean}    hasSelection method .\\\n * @param {Diagram} diagram - provide the options value.\n * @private\n */\nexport function hasSelection(diagram) {\n    if (diagram.selectedItems.nodes.length > 0 || diagram.selectedItems.connectors.length > 0) {\n        return true;\n    }\n    return false;\n}\n/**\n * hasSingleConnection method\\\n *\n * @returns {boolean}    hasSingleConnection method .\\\n * @param {Diagram} diagram - provide the options value.\n * @private\n */\nexport function hasSingleConnection(diagram) {\n    if (diagram.selectedItems.connectors.length === 1 && !diagram.selectedItems.nodes.length) {\n        return true;\n    }\n    return false;\n}\n/**\n * isSelected method\\\n *\n * @returns {boolean}    isSelected method .\\\n * @param {Diagram} diagram - provide the options value.\n * @param {Object} element - provide the options value.\n * @param {boolean} firstLevel - provide the options value.\n * @param {DiagramElement} wrapper - provide the options value.\n * @private\n */\nexport function isSelected(diagram, element, firstLevel, wrapper) {\n    if (firstLevel === void 0) { firstLevel = true; }\n    if (element instanceof Selector) {\n        return true;\n    }\n    if (element instanceof Node) {\n        while (element) {\n            if (diagram.selectedItems.nodes.indexOf(element) !== -1 && diagram.selectedItems.annotation === undefined) {\n                return true;\n            }\n            if (!firstLevel) {\n                element = diagram.nameTable[element.parentId];\n            }\n            else {\n                break;\n            }\n        }\n    }\n    else if (element instanceof Connector) {\n        if (diagram.selectedItems.connectors.indexOf(element) !== -1 && diagram.selectedItems.annotation === undefined) {\n            return true;\n        }\n    }\n    else if (element instanceof ShapeAnnotation || element instanceof PathAnnotation) {\n        if (diagram.selectedItems.annotation && diagram.selectedItems.wrapper.children[0].id === wrapper.id) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * getCursor method\\\n *\n * @returns {boolean}    getCursor method .\\\n * @param {Actions} cursor - provide the options value.\n * @param {number} angle - provide the options value.\n * @private\n */\nexport function getCursor(cursor, angle) {\n    //to avoid angles less than 0 & angles greater than 360\n    angle += 360;\n    angle %= 360;\n    if (cursor.indexOf('Resize') === -1) {\n        return cursors[cursor];\n    }\n    else {\n        var dir = cursors[cursor];\n        if ((angle >= 0 && angle < 25) || (angle >= 160 && angle <= 205) || (angle >= 340 && angle <= 360)) {\n            return dir;\n        }\n        else if ((angle >= 25 && angle <= 70) || (angle >= 205 && angle <= 250)) {\n            if (dir === 'n-resize' || dir === 's-resize') {\n                return 'ne-resize';\n            }\n            else if (dir === 'nw-resize' || dir === 'se-resize') {\n                return 'n-resize';\n            }\n            else if (dir === 'e-resize' || dir === 'w-resize') {\n                return 'nw-resize';\n            }\n            else {\n                return 'e-resize';\n            }\n        }\n        else if ((angle >= 70 && angle <= 115) || (angle >= 250 && angle <= 295)) {\n            if (dir === 'n-resize' || dir === 's-resize') {\n                return 'e-resize';\n            }\n            else if (dir === 'nw-resize' || dir === 'se-resize') {\n                return 'ne-resize';\n            }\n            else if (dir === 'e-resize' || dir === 'w-resize') {\n                return 'n-resize';\n            }\n            else {\n                return 'nw-resize';\n            }\n        }\n        else if ((angle >= 115 && angle <= 155) || (angle >= 295 && angle <= 340)) {\n            if (dir === 'n-resize' || dir === 's-resize') {\n                return 'nw-resize';\n            }\n            else if (dir === 'nw-resize' || dir === 'se-resize') {\n                return 'e-resize';\n            }\n            else if (dir === 'e-resize' || dir === 'w-resize') {\n                return 'ne-resize';\n            }\n        }\n        else {\n            return 'n-resize';\n        }\n    }\n    return cursors[cursor];\n}\nvar cursors = {\n    'None': 'default',\n    'Rotate': 'crosshair',\n    'Select': 'default',\n    'Drag': 'move',\n    'ResizeWest': 'w-resize',\n    'ResizeEast': 'e-resize',\n    'ResizeSouth': 's-resize',\n    'ResizeNorth': 'n-resize',\n    'Draw': 'crosshair',\n    'PortDraw': 'crosshair',\n    'ResizeNorthEast': 'ne-resize',\n    'ResizeNorthWest': 'nw-resize',\n    'ResizeSouthEast': 'se-resize',\n    'ResizeSouthWest': 'sw-resize',\n    'ConnectorSourceEnd': 'move',\n    'ConnectorTargetEnd': 'move',\n    'BezierSourceThumb': 'move',\n    'BezierTargetThumb': 'move',\n    'OrthoThumb': 'move',\n    'SegmentEnd': 'move',\n    'Pan': 'grab',\n    'Hyperlink': 'pointer',\n    'PortDrag': 'pointer',\n    'LabelSelect': 'pointer',\n    'LabelDrag': 'move',\n    'LabelRotate': 'crosshair',\n    'LabelResizeWest': 'w-resize',\n    'LabelResizeEast': 'e-resize',\n    'LabelResizeSouth': 's-resize',\n    'LabelResizeNorth': 'n-resize',\n    'LabelResizeNorthEast': 'ne-resize',\n    'LabelResizeNorthWest': 'nw-resize',\n    'LabelResizeSouthEast': 'se-resize',\n    'LabelResizeSouthWest': 'sw-resize'\n};\n"]},"metadata":{},"sourceType":"module"}