{"ast":null,"code":"import { TextElement } from '../core/elements/text-element';\nimport { Node } from '../objects/node';\nimport { getIndex, cloneObject } from './base-util';\nimport { isBlazor } from '@syncfusion/ej2-base';\n/**\n * Defines the behavior of commands\n */\n\n/* eslint-disable */\n\nvar DeepDiffMapper =\n/** @class */\nfunction () {\n  function DeepDiffMapper() {\n    this.valueCreated = 'created';\n    this.valueUpdated = \"updated\";\n    this.valueDeleted = \"deleted\";\n    this.valueUnchanged = \"unchanged\";\n    /** @private */\n\n    this.newNodeObject = [];\n    /** @private */\n\n    this.newConnectorObject = [];\n    /**   @private  */\n\n    this.diagramObject = {};\n    /* eslint-enable */\n  }\n  /** @private */\n\n\n  DeepDiffMapper.prototype.updateObjectCollection = function (layers, diagram) {\n    for (var i = 0; i < layers.length; i++) {\n      if (layers[i]['objects']) {\n        layers[i]['objects'] = diagram.layers[i].objects;\n      } else {\n        layers[i]['objects'] = [];\n        layers[i]['objects'] = diagram.layers[i].objects;\n      }\n    }\n  };\n  /**   @private  */\n\n\n  DeepDiffMapper.prototype.getOldObject = function (id, isNode, diagram) {\n    var oldObject = isNode ? diagram.oldNodeObjects : diagram.oldConnectorObjects;\n\n    for (var i = 0; i < oldObject.length; i++) {\n      if (oldObject[i].id === id) {\n        return oldObject[i];\n      }\n    }\n\n    return undefined;\n  };\n  /** @private */\n\n\n  DeepDiffMapper.prototype.changeSegments = function (diff, newObject) {\n    for (var _i = 0, _a = Object.keys(diff); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      if (prop === 'segments') {\n        var seg = this.removeNullValues(newObject[prop]);\n        diff[prop] = seg;\n      }\n    }\n\n    return diff;\n  };\n\n  DeepDiffMapper.prototype.removeNullValues = function (segments) {\n    var newSegments = [];\n    var seg = {};\n\n    for (var i = 0; i < segments.length; i++) {\n      seg = this.removeNullObjectValues(segments[i]);\n      newSegments.push(seg);\n    }\n\n    return newSegments;\n  };\n\n  ;\n  /** @private */\n\n  DeepDiffMapper.prototype.removeNullObjectValues = function (segment) {\n    var newSegObject = {};\n\n    for (var _i = 0, _a = Object.keys(segment); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      if (segment[prop] !== undefined) {\n        newSegObject[prop] = segment[prop] instanceof Object ? this.removeNullObjectValues(segment[prop]) : segment[prop];\n      }\n    }\n\n    return newSegObject;\n  };\n\n  ;\n  /** @private */\n\n  DeepDiffMapper.prototype.getDifferenceValues = function (selectedObject, args, labelDrag, diagram) {\n    var diffValue;\n    var diff;\n    var result;\n    var isNode = selectedObject instanceof Node;\n    var oldObject;\n\n    if (selectedObject) {\n      oldObject = isNode ? this.getOldObject(selectedObject.id, true, diagram) : this.getOldObject(selectedObject.id, false, diagram);\n\n      if (oldObject) {\n        var newObject = cloneObject(selectedObject);\n        result = this.map(newObject, oldObject);\n        diffValue = this.frameObject({}, result);\n        diff = this.removeEmptyValues(diffValue);\n        diff = this.changeSegments(diff, newObject);\n\n        if (diff.children) {\n          diff.children = cloneObject(selectedObject).children;\n        }\n\n        if (diff.ports && diff.ports.length) {\n          for (var i = 0; i < diff.ports.length; i++) {\n            if (newObject.ports[i].outEdges) {\n              diff.ports[i].outEdges = newObject.ports[i].outEdges;\n            }\n\n            if (newObject.ports[i].inEdges) {\n              diff.ports[i].inEdges = newObject.ports[i].inEdges;\n            }\n          }\n        }\n\n        return this.getDiagramObjects(diff, selectedObject.id, isNode, args, labelDrag, diagram);\n      }\n    }\n  };\n  /** @private */\n\n\n  DeepDiffMapper.prototype.getLayerObject = function (oldDiagram, temp, diagram) {\n    if (isBlazor()) {\n      var diffLayers = {};\n      diffLayers['layers'] = [];\n      var newDiagram = {};\n      newDiagram['layers'] = [];\n\n      for (var i = 0; i < diagram.layers.length; i++) {\n        newDiagram['layers'].push(cloneObject(diagram.layers[i]));\n      }\n\n      var result = void 0;\n\n      for (var i = 0; i < newDiagram['layers'].length; i++) {\n        if (!temp) {\n          result = this.map(cloneObject(newDiagram['layers'][i]), oldDiagram['layers'][i]);\n        } else {\n          result = this.map(oldDiagram['layers'][i], cloneObject(newDiagram['layers'][i]));\n        }\n\n        var diffValue = this.frameObject({}, result);\n        var diff = this.removeEmptyValues(diffValue);\n        diffLayers['layers'][i] = diff;\n      }\n\n      this.updateObjectCollection(diffLayers['layers'], diagram);\n      return diffLayers;\n    }\n  };\n  /** @private */\n\n\n  DeepDiffMapper.prototype.getDiagramObjects = function (diffValue, object, isNode, args, labelDrag, diagram) {\n    var index = 0;\n    index = getIndex(diagram, object);\n    diffValue.sfIndex = index;\n\n    if (isNode) {\n      this.newNodeObject.push(diffValue);\n    } else {\n      this.newConnectorObject.push(diffValue);\n    }\n\n    if (args && (args.sourceWrapper instanceof TextElement && labelDrag || args.portId)) {\n      var tempObject = void 0;\n      var objectValue = void 0;\n\n      if (isNode) {\n        objectValue = args.portId ? this.newNodeObject[0].ports : this.newNodeObject[0].annotations;\n      } else {\n        objectValue = this.newConnectorObject[0].annotations || [];\n      }\n\n      for (var i = 0; i < objectValue.length; i++) {\n        if (Object.keys(objectValue[i]).length > 0) {\n          var selectedObject = diagram.nameTable[object];\n          tempObject = objectValue[i];\n\n          if (args.portId) {\n            this.newNodeObject[0].ports = [tempObject];\n          } else {\n            for (var j = 0; j < selectedObject.annotations.length; j++) {\n              if (args.sourceWrapper.id === selectedObject.id + \"_\" + selectedObject.annotations[j].id) {\n                tempObject.sfIndex = j;\n              }\n            }\n\n            if (isNode) {\n              this.newNodeObject[0].annotations = [tempObject];\n            } else {\n              this.newConnectorObject[0].annotations = [tempObject];\n            }\n          }\n        }\n      }\n    }\n\n    this.diagramObject = {\n      nodes: this.newNodeObject,\n      connectors: this.newConnectorObject\n    }; //return returnValue;\n  };\n\n  DeepDiffMapper.prototype.removeArrayValues = function (obj) {\n    var newObj = [];\n    var value = JSON.stringify(obj);\n\n    if (!(value === JSON.stringify({\n      'data': []\n    }))) {\n      for (var i = 0; i < obj.length; i++) {\n        if (obj[i] instanceof Object) {\n          var newValue = this.removeEmptyValues(obj[i]);\n          newObj.push(newValue);\n        } else {\n          newObj.push(obj[i]);\n        }\n      }\n    }\n\n    return newObj;\n  };\n  /** @private */\n\n\n  DeepDiffMapper.prototype.removeEmptyValues = function (frame) {\n    var newObj = {};\n\n    for (var _i = 0, _a = Object.keys(frame); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      if (prop !== 'wrapper' && (prop !== 'data' || prop === 'data' && !(frame[prop] instanceof Array))) {\n        var obj = frame[prop];\n        var value = JSON.stringify(obj);\n\n        if (obj instanceof Array) {\n          var newValue = this.removeArrayValues(obj);\n\n          if (JSON.stringify(newValue) !== '[]') {\n            newObj[prop] = newValue;\n          }\n        } else {\n          if (obj instanceof Object) {\n            if (!(value === JSON.stringify({\n              'data': []\n            }))) {\n              var newValue = this.removeEmptyValues(obj);\n\n              if (JSON.stringify(newValue) !== '{}') {\n                newObj[prop] = newValue;\n              }\n            }\n          } else {\n            if (!(value === JSON.stringify(['data']) || value === JSON.stringify('data') || value === JSON.stringify({\n              'data': []\n            }))) {\n              if (prop !== 'version' && prop !== 'ejsAction') {\n                newObj[prop] = frame[prop];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return newObj;\n  };\n\n  DeepDiffMapper.prototype.map = function (obj1, obj2, arrayName) {\n    if (this.isFunction(obj1) || this.isFunction(obj2)) {\n      throw 'Invalid argument. Function given, object expected.';\n    }\n\n    if (this.isValue(obj1) || this.isValue(obj2)) {\n      return {\n        type: this.compareValues(obj1, obj2),\n        data: obj1 === undefined ? obj2 : obj1\n      };\n    }\n\n    var diff = {};\n\n    if (this.isArray(obj1)) {\n      for (var i_1 = 0; i_1 < obj1.length; i_1++) {\n        if (!diff[arrayName]) {\n          diff[arrayName] = [];\n        }\n\n        var ss = this.map(obj1[i_1], obj2[i_1]);\n        diff[arrayName].push(ss);\n      }\n    } else {\n      for (var key in obj1) {\n        if (this.isFunction(obj1[key])) {\n          continue;\n        }\n\n        var value2 = undefined;\n\n        if (obj2[key] !== undefined) {\n          value2 = obj2[key];\n        }\n\n        var kk = this.map(obj1[key], value2, this.isArray(value2) ? key : undefined);\n\n        if (this.isArray(value2)) {\n          diff[key] = kk[key];\n        } else {\n          diff[key] = kk;\n        }\n      }\n    }\n\n    if (this.isArray(obj2)) {\n      for (var i = obj2.length - 1; i >= 0; i--) {\n        if (!diff[arrayName]) {\n          diff[arrayName] = [];\n        }\n\n        if (this.isFunction(obj2[i]) || diff[arrayName][i] !== undefined) {\n          if (diff[arrayName][i].type && diff[arrayName][i].type !== this.valueUpdated) {\n            delete diff[arrayName];\n          }\n\n          continue;\n        }\n\n        var ss = this.map(undefined, obj2[i]);\n        diff[arrayName][i] = ss;\n      }\n    } else {\n      for (var key in obj2) {\n        if (this.isFunction(obj2[key]) || diff[key] !== undefined) {\n          if (diff[key].type && diff[key].type !== this.valueUpdated && diff[key].type !== this.valueDeleted) {\n            delete diff[key];\n          }\n\n          continue;\n        }\n\n        var kk = this.map(undefined, obj2[key]);\n        diff[key] = kk;\n      }\n    }\n\n    return diff;\n  };\n\n  DeepDiffMapper.prototype.compareValues = function (value1, value2) {\n    if (value1 === value2) {\n      return this.valueUnchanged;\n    }\n\n    if (this.isDate(value1) && this.isDate(value2) && value1.getTime() === value2.getTime()) {\n      return this.valueUnchanged;\n    }\n\n    if (value1 === undefined) {\n      return this.valueCreated;\n    }\n\n    if (value2 === undefined) {\n      return this.valueDeleted;\n    }\n\n    return this.valueUpdated;\n  };\n\n  DeepDiffMapper.prototype.isFunction = function (x) {\n    return Object.prototype.toString.call(x) === '[object Function]';\n  };\n\n  DeepDiffMapper.prototype.isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n\n  DeepDiffMapper.prototype.isDate = function (x) {\n    return Object.prototype.toString.call(x) === '[object Date]';\n  };\n\n  DeepDiffMapper.prototype.isObject = function (x) {\n    return Object.prototype.toString.call(x) === '[object Object]';\n  };\n\n  DeepDiffMapper.prototype.isValue = function (x) {\n    return !this.isObject(x) && !this.isArray(x);\n  };\n\n  DeepDiffMapper.prototype.frameObject = function (final, obj) {\n    for (var key in obj) {\n      if (this.isArray(obj[key])) {\n        if (!final[key]) {\n          final[key] = [];\n        }\n\n        for (var i = 0; i < obj[key].length; i++) {\n          var kk = this.frameObject({}, obj[key][i]);\n          final[key].push(kk);\n        }\n      } else {\n        if (key != 'type' || key == 'type' && obj[key] !== this.valueUpdated && obj[key] !== this.valueUnchanged && obj[key] !== this.valueDeleted && obj[key] !== this.valueCreated) {\n          if (this.isFunction(obj[key])) {\n            continue;\n          }\n\n          if (this.isValue(obj[key])) {\n            return obj['data'];\n          } else {\n            var kk = this.frameObject({}, obj[key]);\n\n            if (this.isValue(kk) || Object.keys(kk).length > 0) {\n              final[key] = kk;\n            }\n          }\n        }\n      }\n    }\n\n    return final;\n  };\n\n  return DeepDiffMapper;\n}();\n\nexport { DeepDiffMapper };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/diff-map.js"],"names":["TextElement","Node","getIndex","cloneObject","isBlazor","DeepDiffMapper","valueCreated","valueUpdated","valueDeleted","valueUnchanged","newNodeObject","newConnectorObject","diagramObject","prototype","updateObjectCollection","layers","diagram","i","length","objects","getOldObject","id","isNode","oldObject","oldNodeObjects","oldConnectorObjects","undefined","changeSegments","diff","newObject","_i","_a","Object","keys","prop","seg","removeNullValues","segments","newSegments","removeNullObjectValues","push","segment","newSegObject","getDifferenceValues","selectedObject","args","labelDrag","diffValue","result","map","frameObject","removeEmptyValues","children","ports","outEdges","inEdges","getDiagramObjects","getLayerObject","oldDiagram","temp","diffLayers","newDiagram","object","index","sfIndex","sourceWrapper","portId","tempObject","objectValue","annotations","nameTable","j","nodes","connectors","removeArrayValues","obj","newObj","value","JSON","stringify","newValue","frame","Array","obj1","obj2","arrayName","isFunction","isValue","type","compareValues","data","isArray","i_1","ss","key","value2","kk","value1","isDate","getTime","x","toString","call","isObject","final"],"mappings":"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","sourcesContent":["import { TextElement } from '../core/elements/text-element';\nimport { Node } from '../objects/node';\nimport { getIndex, cloneObject } from './base-util';\nimport { isBlazor } from '@syncfusion/ej2-base';\n/**\n * Defines the behavior of commands\n */\n/* eslint-disable */\nvar DeepDiffMapper = /** @class */ (function () {\n    function DeepDiffMapper() {\n        this.valueCreated = 'created';\n        this.valueUpdated = \"updated\";\n        this.valueDeleted = \"deleted\";\n        this.valueUnchanged = \"unchanged\";\n        /** @private */\n        this.newNodeObject = [];\n        /** @private */\n        this.newConnectorObject = [];\n        /**   @private  */\n        this.diagramObject = {};\n        /* eslint-enable */\n    }\n    /** @private */\n    DeepDiffMapper.prototype.updateObjectCollection = function (layers, diagram) {\n        for (var i = 0; i < layers.length; i++) {\n            if (layers[i]['objects']) {\n                layers[i]['objects'] = (diagram.layers[i].objects);\n            }\n            else {\n                layers[i]['objects'] = [];\n                layers[i]['objects'] = diagram.layers[i].objects;\n            }\n        }\n    };\n    /**   @private  */\n    DeepDiffMapper.prototype.getOldObject = function (id, isNode, diagram) {\n        var oldObject = isNode ? diagram.oldNodeObjects : diagram.oldConnectorObjects;\n        for (var i = 0; i < oldObject.length; i++) {\n            if (oldObject[i].id === id) {\n                return oldObject[i];\n            }\n        }\n        return undefined;\n    };\n    /** @private */\n    DeepDiffMapper.prototype.changeSegments = function (diff, newObject) {\n        for (var _i = 0, _a = Object.keys(diff); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            if (prop === 'segments') {\n                var seg = this.removeNullValues(newObject[prop]);\n                diff[prop] = seg;\n            }\n        }\n        return diff;\n    };\n    DeepDiffMapper.prototype.removeNullValues = function (segments) {\n        var newSegments = [];\n        var seg = {};\n        for (var i = 0; i < segments.length; i++) {\n            seg = this.removeNullObjectValues(segments[i]);\n            newSegments.push(seg);\n        }\n        return newSegments;\n    };\n    ;\n    /** @private */\n    DeepDiffMapper.prototype.removeNullObjectValues = function (segment) {\n        var newSegObject = {};\n        for (var _i = 0, _a = Object.keys(segment); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            if (segment[prop] !== undefined) {\n                newSegObject[prop] = (segment[prop] instanceof Object) ? this.removeNullObjectValues(segment[prop]) : segment[prop];\n            }\n        }\n        return newSegObject;\n    };\n    ;\n    /** @private */\n    DeepDiffMapper.prototype.getDifferenceValues = function (selectedObject, args, labelDrag, diagram) {\n        var diffValue;\n        var diff;\n        var result;\n        var isNode = selectedObject instanceof Node;\n        var oldObject;\n        if (selectedObject) {\n            oldObject = isNode ? this.getOldObject(selectedObject.id, true, diagram) : this.getOldObject(selectedObject.id, false, diagram);\n            if (oldObject) {\n                var newObject = cloneObject(selectedObject);\n                result = this.map(newObject, oldObject);\n                diffValue = this.frameObject({}, result);\n                diff = this.removeEmptyValues(diffValue);\n                diff = this.changeSegments(diff, newObject);\n                if (diff.children) {\n                    diff.children = cloneObject(selectedObject).children;\n                }\n                if (diff.ports && diff.ports.length) {\n                    for (var i = 0; i < diff.ports.length; i++) {\n                        if (newObject.ports[i].outEdges) {\n                            diff.ports[i].outEdges = newObject.ports[i].outEdges;\n                        }\n                        if (newObject.ports[i].inEdges) {\n                            diff.ports[i].inEdges = newObject.ports[i].inEdges;\n                        }\n                    }\n                }\n                return this.getDiagramObjects(diff, selectedObject.id, isNode, args, labelDrag, diagram);\n            }\n        }\n    };\n    /** @private */\n    DeepDiffMapper.prototype.getLayerObject = function (oldDiagram, temp, diagram) {\n        if (isBlazor()) {\n            var diffLayers = {};\n            diffLayers['layers'] = [];\n            var newDiagram = {};\n            newDiagram['layers'] = [];\n            for (var i = 0; i < diagram.layers.length; i++) {\n                newDiagram['layers'].push(cloneObject(diagram.layers[i]));\n            }\n            var result = void 0;\n            for (var i = 0; i < newDiagram['layers'].length; i++) {\n                if (!temp) {\n                    result = this.map(cloneObject(newDiagram['layers'][i]), oldDiagram['layers'][i]);\n                }\n                else {\n                    result = this.map(oldDiagram['layers'][i], cloneObject(newDiagram['layers'][i]));\n                }\n                var diffValue = this.frameObject({}, result);\n                var diff = this.removeEmptyValues(diffValue);\n                diffLayers['layers'][i] = diff;\n            }\n            this.updateObjectCollection(diffLayers['layers'], diagram);\n            return diffLayers;\n        }\n    };\n    /** @private */\n    DeepDiffMapper.prototype.getDiagramObjects = function (diffValue, object, isNode, args, labelDrag, diagram) {\n        var index = 0;\n        index = getIndex(diagram, object);\n        diffValue.sfIndex = index;\n        if (isNode) {\n            this.newNodeObject.push(diffValue);\n        }\n        else {\n            this.newConnectorObject.push(diffValue);\n        }\n        if (args && (((args.sourceWrapper instanceof TextElement) && labelDrag) || args.portId)) {\n            var tempObject = void 0;\n            var objectValue = void 0;\n            if (isNode) {\n                objectValue = args.portId ? this.newNodeObject[0].ports : this.newNodeObject[0].annotations;\n            }\n            else {\n                objectValue = this.newConnectorObject[0].annotations || [];\n            }\n            for (var i = 0; i < objectValue.length; i++) {\n                if (Object.keys(objectValue[i]).length > 0) {\n                    var selectedObject = diagram.nameTable[object];\n                    tempObject = objectValue[i];\n                    if (args.portId) {\n                        this.newNodeObject[0].ports = [tempObject];\n                    }\n                    else {\n                        for (var j = 0; j < selectedObject.annotations.length; j++) {\n                            if (args.sourceWrapper.id === selectedObject.id + \"_\" + selectedObject.annotations[j].id) {\n                                tempObject.sfIndex = j;\n                            }\n                        }\n                        if (isNode) {\n                            this.newNodeObject[0].annotations = [tempObject];\n                        }\n                        else {\n                            this.newConnectorObject[0].annotations = [tempObject];\n                        }\n                    }\n                }\n            }\n        }\n        this.diagramObject = { nodes: this.newNodeObject, connectors: this.newConnectorObject };\n        //return returnValue;\n    };\n    DeepDiffMapper.prototype.removeArrayValues = function (obj) {\n        var newObj = [];\n        var value = JSON.stringify(obj);\n        if (!(value === JSON.stringify({ 'data': [] }))) {\n            for (var i = 0; i < obj.length; i++) {\n                if (obj[i] instanceof Object) {\n                    var newValue = this.removeEmptyValues(obj[i]);\n                    newObj.push(newValue);\n                }\n                else {\n                    newObj.push(obj[i]);\n                }\n            }\n        }\n        return newObj;\n    };\n    /** @private */\n    DeepDiffMapper.prototype.removeEmptyValues = function (frame) {\n        var newObj = {};\n        for (var _i = 0, _a = Object.keys(frame); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            if (prop !== 'wrapper' && (prop !== 'data' || (prop === 'data' && !(frame[prop] instanceof Array)))) {\n                var obj = frame[prop];\n                var value = JSON.stringify(obj);\n                if (obj instanceof Array) {\n                    var newValue = this.removeArrayValues(obj);\n                    if (JSON.stringify(newValue) !== '[]') {\n                        newObj[prop] = newValue;\n                    }\n                }\n                else {\n                    if (obj instanceof Object) {\n                        if (!(value === JSON.stringify({ 'data': [] }))) {\n                            var newValue = this.removeEmptyValues(obj);\n                            if (JSON.stringify(newValue) !== '{}') {\n                                newObj[prop] = newValue;\n                            }\n                        }\n                    }\n                    else {\n                        if (!(value === JSON.stringify(['data']) || value === JSON.stringify('data')\n                            || value === JSON.stringify({ 'data': [] }))) {\n                            if (prop !== 'version' && prop !== 'ejsAction') {\n                                newObj[prop] = frame[prop];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newObj;\n    };\n    DeepDiffMapper.prototype.map = function (obj1, obj2, arrayName) {\n        if (this.isFunction(obj1) || this.isFunction(obj2)) {\n            throw 'Invalid argument. Function given, object expected.';\n        }\n        if (this.isValue(obj1) || this.isValue(obj2)) {\n            return {\n                type: this.compareValues(obj1, obj2),\n                data: obj1 === undefined ? obj2 : obj1\n            };\n        }\n        var diff = {};\n        if (this.isArray(obj1)) {\n            for (var i_1 = 0; i_1 < obj1.length; i_1++) {\n                if (!diff[arrayName]) {\n                    diff[arrayName] = [];\n                }\n                var ss = this.map(obj1[i_1], obj2[i_1]);\n                diff[arrayName].push(ss);\n            }\n        }\n        else {\n            for (var key in obj1) {\n                if (this.isFunction(obj1[key])) {\n                    continue;\n                }\n                var value2 = undefined;\n                if (obj2[key] !== undefined) {\n                    value2 = obj2[key];\n                }\n                var kk = this.map(obj1[key], value2, this.isArray(value2) ? key : undefined);\n                if (this.isArray(value2)) {\n                    diff[key] = kk[key];\n                }\n                else {\n                    diff[key] = kk;\n                }\n            }\n        }\n        if (this.isArray(obj2)) {\n            for (var i = obj2.length - 1; i >= 0; i--) {\n                if (!diff[arrayName]) {\n                    diff[arrayName] = [];\n                }\n                if (this.isFunction(obj2[i]) || diff[arrayName][i] !== undefined) {\n                    if (diff[arrayName][i].type && diff[arrayName][i].type !== this.valueUpdated) {\n                        delete diff[arrayName];\n                    }\n                    continue;\n                }\n                var ss = this.map(undefined, obj2[i]);\n                diff[arrayName][i] = ss;\n            }\n        }\n        else {\n            for (var key in obj2) {\n                if (this.isFunction(obj2[key]) || diff[key] !== undefined) {\n                    if (diff[key].type && ((diff[key].type !== this.valueUpdated) && (diff[key].type !== this.valueDeleted))) {\n                        delete diff[key];\n                    }\n                    continue;\n                }\n                var kk = this.map(undefined, obj2[key]);\n                diff[key] = kk;\n            }\n        }\n        return diff;\n    };\n    DeepDiffMapper.prototype.compareValues = function (value1, value2) {\n        if (value1 === value2) {\n            return this.valueUnchanged;\n        }\n        if (this.isDate(value1) && this.isDate(value2) && value1.getTime() === value2.getTime()) {\n            return this.valueUnchanged;\n        }\n        if (value1 === undefined) {\n            return this.valueCreated;\n        }\n        if (value2 === undefined) {\n            return this.valueDeleted;\n        }\n        return this.valueUpdated;\n    };\n    DeepDiffMapper.prototype.isFunction = function (x) {\n        return Object.prototype.toString.call(x) === '[object Function]';\n    };\n    DeepDiffMapper.prototype.isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n    };\n    DeepDiffMapper.prototype.isDate = function (x) {\n        return Object.prototype.toString.call(x) === '[object Date]';\n    };\n    DeepDiffMapper.prototype.isObject = function (x) {\n        return Object.prototype.toString.call(x) === '[object Object]';\n    };\n    DeepDiffMapper.prototype.isValue = function (x) {\n        return !this.isObject(x) && !this.isArray(x);\n    };\n    DeepDiffMapper.prototype.frameObject = function (final, obj) {\n        for (var key in obj) {\n            if (this.isArray(obj[key])) {\n                if (!final[key]) {\n                    final[key] = [];\n                }\n                for (var i = 0; i < obj[key].length; i++) {\n                    var kk = this.frameObject({}, obj[key][i]);\n                    final[key].push(kk);\n                }\n            }\n            else {\n                if ((key != 'type') || (key == 'type' && (obj[key] !== this.valueUpdated && obj[key] !== this.valueUnchanged && obj[key] !== this.valueDeleted && obj[key] !== this.valueCreated))) {\n                    if (this.isFunction(obj[key])) {\n                        continue;\n                    }\n                    if (this.isValue(obj[key])) {\n                        return obj['data'];\n                    }\n                    else {\n                        var kk = this.frameObject({}, obj[key]);\n                        if (this.isValue(kk) || Object.keys(kk).length > 0) {\n                            final[key] = kk;\n                        }\n                    }\n                }\n            }\n        }\n        return final;\n    };\n    return DeepDiffMapper;\n}());\nexport { DeepDiffMapper };\n"]},"metadata":{},"sourceType":"module"}