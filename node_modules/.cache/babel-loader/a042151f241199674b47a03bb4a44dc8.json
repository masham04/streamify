{"ast":null,"code":"import { Rect } from '../primitives/rect';\nimport { RealAction, ScrollActions } from '../enum/enum';\nimport { identityMatrix, scaleMatrix, translateMatrix, transformPointByMatrix, multiplyMatrix } from '../primitives/matrix';\nimport { updateRuler } from '../ruler/ruler';\nimport { canZoom, canPan, canVitualize } from './../utility/constraints-util';\n/**\n */\n\nvar DiagramScroller =\n/** @class */\nfunction () {\n  function DiagramScroller(diagram) {\n    /** @private */\n    this.transform = {\n      tx: 0,\n      ty: 0,\n      scale: 1\n    };\n    /**   @private  */\n\n    this.oldCollectionObjects = [];\n    /**   @private  */\n\n    this.removeCollection = [];\n    this.vPortWidth = 0;\n    this.vPortHeight = 0;\n    this.currentZoomFActor = 1;\n    this.hOffset = 0;\n    this.vOffset = 0;\n    this.scrolled = false;\n    this.hScrollSize = 0;\n    this.vScrollSize = 0;\n    this.diagram = diagram;\n    this.objects = [];\n    this.transform = diagram.scroller ? diagram.scroller.transform : {\n      tx: 0,\n      ty: 0,\n      scale: 1\n    };\n    this.vPortWidth = diagram.scrollSettings.viewPortWidth;\n    this.vPortHeight = diagram.scrollSettings.viewPortHeight;\n    this.currentZoomFActor = diagram.scrollSettings.currentZoom;\n    this.hOffset = diagram.scrollSettings.horizontalOffset;\n    this.vOffset = diagram.scrollSettings.verticalOffset;\n  }\n\n  Object.defineProperty(DiagramScroller.prototype, \"viewPortHeight\", {\n    /**\n     * verticalOffset method \\\n     *\n     * @returns { number }     verticalOffset method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.vPortHeight;\n    },\n\n    /**\n     * verticalOffset method \\\n     *\n     * @returns { void }     verticalOffset method .\\\n     * @param {number} offset - provide the hOffset value.\n     *\n     * @private\n     */\n    set: function (offset) {\n      this.vPortHeight = offset;\n      this.diagram.scrollSettings.viewPortHeight = offset;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DiagramScroller.prototype, \"currentZoom\", {\n    /**\n     * verticalOffset method \\\n     *\n     * @returns { number }     verticalOffset method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.currentZoomFActor;\n    },\n\n    /**\n     * verticalOffset method \\\n     *\n     * @returns { void }     verticalOffset method .\\\n     * @param {number} offset - provide the hOffset value.\n     *\n     * @private\n     */\n    set: function (offset) {\n      this.currentZoomFActor = offset;\n      this.diagram.scrollSettings.currentZoom = offset;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DiagramScroller.prototype, \"viewPortWidth\", {\n    /**\n     * verticalOffset method \\\n     *\n     * @returns { number }     verticalOffset method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.vPortWidth;\n    },\n\n    /**\n     * verticalOffset method \\\n     *\n     * @returns { void }     verticalOffset method .\\\n     * @param {number} offset - provide the hOffset value.\n     *\n     * @private\n     */\n    set: function (offset) {\n      this.vPortWidth = offset;\n      this.diagram.scrollSettings.viewPortWidth = offset;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DiagramScroller.prototype, \"horizontalOffset\", {\n    /**\n     * verticalOffset method \\\n     *\n     * @returns { number }     verticalOffset method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.hOffset;\n    },\n\n    /**\n     * verticalOffset method \\\n     *\n     * @returns { void }     verticalOffset method .\\\n     * @param {number} offset - provide the hOffset value.\n     *\n     * @private\n     */\n    set: function (offset) {\n      this.hOffset = offset;\n\n      if (Math.abs(this.hOffset - this.diagram.scrollSettings.horizontalOffset) > 1) {\n        this.diagram.realActions = this.diagram.realActions | RealAction.hScrollbarMoved;\n        this.scrolled = true;\n      }\n\n      this.diagram.scrollSettings.horizontalOffset = offset;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DiagramScroller.prototype, \"verticalOffset\", {\n    /**\n     * verticalOffset method \\\n     *\n     * @returns { number }     verticalOffset method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.vOffset;\n    },\n\n    /**\n     * verticalOffset method \\\n     *\n     * @returns { void }     verticalOffset method .\\\n     * @param {number} offset - provide the hOffset value.\n     *\n     * @private\n     */\n    set: function (offset) {\n      this.vOffset = offset;\n\n      if (Math.abs(this.vOffset - this.diagram.scrollSettings.verticalOffset) > 1) {\n        this.diagram.realActions = this.diagram.realActions | RealAction.vScrollbarMoved;\n        this.scrolled = true;\n      }\n\n      this.diagram.scrollSettings.verticalOffset = offset;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * updateScrollOffsets method \\\n   *\n   * @returns { void }     updateScrollOffsets method .\\\n   * @param {number} hOffset - provide the hOffset value.\n   * @param {number} vOffset - provide the vOffset value.\n   *\n   * @private\n   */\n\n  DiagramScroller.prototype.updateScrollOffsets = function (hOffset, vOffset) {\n    var offsetX = 0;\n    var offsetY = 0;\n    var pageBounds = this.getPageBounds(undefined, undefined, true);\n    pageBounds.x *= this.currentZoom;\n    pageBounds.y *= this.currentZoom;\n    pageBounds.width *= this.currentZoom;\n    pageBounds.height *= this.currentZoom;\n    offsetX = Math.max(0, hOffset - pageBounds.left);\n    offsetY = Math.max(0, vOffset - pageBounds.top);\n\n    if (hOffset !== undefined && vOffset !== undefined) {\n      this.horizontalOffset = offsetX;\n      this.verticalOffset = offsetY;\n      this.diagram.setOffset(offsetX, offsetY);\n    } else {\n      this.diagram.setOffset(-this.horizontalOffset - pageBounds.x, -this.verticalOffset - pageBounds.y);\n    }\n\n    this.transform = {\n      tx: Math.max(this.horizontalOffset, -pageBounds.left) / this.currentZoom,\n      ty: Math.max(this.verticalOffset, -pageBounds.top) / this.currentZoom,\n      scale: this.currentZoom\n    };\n  };\n  /**\n   * setScrollOffset method \\\n   *\n   * @returns { void }     setScrollOffset method .\\\n   * @param {number} hOffset - provide the hOffset value.\n   * @param {number} vOffset - provide the vOffset value.\n   *\n   * @private\n   */\n\n\n  DiagramScroller.prototype.setScrollOffset = function (hOffset, vOffset) {\n    this.scrolled = false;\n    var pageBounds = this.getPageBounds(undefined, undefined, true);\n    pageBounds.x *= this.currentZoom;\n    pageBounds.y *= this.currentZoom;\n    pageBounds.width *= this.currentZoom;\n    pageBounds.height *= this.currentZoom;\n    var x = -pageBounds.left;\n    var y = -pageBounds.top;\n    var set = false;\n    var viewWidth = this.viewPortWidth * this.currentZoom;\n    var viewHeight = this.viewPortHeight * this.currentZoom;\n    var newX = x - hOffset;\n\n    if (newX !== this.horizontalOffset) {\n      if (x < this.horizontalOffset) {\n        if (this.horizontalOffset > newX) {\n          this.horizontalOffset -= hOffset;\n        } else {\n          this.horizontalOffset = newX;\n        }\n\n        set = true;\n      }\n\n      var right = Math.max(pageBounds.right + this.vScrollSize, viewWidth);\n\n      if (!set && right < -newX + this.viewPortWidth) {\n        var actualRight = -newX + viewWidth - this.vScrollSize;\n        var currentRight = -this.horizontalOffset + viewWidth - this.vScrollSize;\n\n        if (actualRight < currentRight) {\n          //define\n          this.horizontalOffset = newX;\n        } else {\n          if (actualRight - pageBounds.right > actualRight - currentRight) {\n            this.horizontalOffset = newX;\n          } else {\n            this.horizontalOffset = -(pageBounds.right + this.vScrollSize - viewWidth);\n          }\n        }\n\n        set = true;\n      }\n\n      if (!set) {\n        this.horizontalOffset = x - hOffset;\n      }\n    }\n\n    set = false; //vertical offset\n\n    var newY = y - vOffset;\n\n    if (newY !== this.verticalOffset) {\n      if (y < this.verticalOffset) {\n        if (this.verticalOffset > newY) {\n          this.verticalOffset -= vOffset;\n        } else {\n          this.verticalOffset = newY;\n        }\n\n        set = true;\n      }\n\n      var bottom = Math.max(pageBounds.bottom + this.hScrollSize, viewHeight);\n\n      if (!set && bottom < -newY + viewHeight) {\n        var actualBottom = -newY + viewHeight - this.hScrollSize;\n        var currentBottom = -this.verticalOffset + viewHeight - this.hScrollSize;\n\n        if (actualBottom < currentBottom) {\n          //define\n          this.verticalOffset = newY;\n        } else {\n          if (actualBottom - pageBounds.bottom > actualBottom - currentBottom) {\n            this.verticalOffset = newY;\n          } else {\n            this.verticalOffset = -(pageBounds.bottom + this.hScrollSize - viewHeight);\n          }\n        }\n\n        set = true;\n      }\n\n      if (!set) {\n        this.verticalOffset = y - vOffset;\n      }\n    }\n\n    this.transform = {\n      tx: Math.max(this.horizontalOffset, -pageBounds.left) / this.currentZoom,\n      ty: Math.max(this.verticalOffset, -pageBounds.top) / this.currentZoom,\n      scale: this.currentZoom\n    };\n    this.setSize();\n  };\n  /**\n   * getObjects \\\n   *\n   * @returns { string[] }     To get page pageBounds.\\\n   * @param {string[]} coll1 - provide the source value.\n   * @param {string[]} coll2 - provide the source value.\n   * @private\n   */\n\n\n  DiagramScroller.prototype.getObjects = function (coll1, coll2) {\n    var objects = [];\n\n    for (var i = 0; i < coll1.length; i++) {\n      var isExist = false;\n\n      for (var j = 0; j < coll2.length; j++) {\n        if (coll1[i] === coll2[j]) {\n          isExist = true;\n          break;\n        }\n      }\n\n      if (!isExist) {\n        objects.push(coll1[i]);\n      }\n    }\n\n    return objects;\n  };\n  /**\n   * virtualizeElements \\\n   *\n   * @returns { void }     To get page pageBounds.\\\n   *\n   * @private\n   */\n\n\n  DiagramScroller.prototype.virtualizeElements = function () {\n    var viewWidth = this.viewPortWidth / this.currentZoom;\n    var viewHeight = this.viewPortHeight / this.currentZoom;\n    var oObjects = this.diagram.spatialSearch.findObjects(new Rect(-this.horizontalOffset / this.currentZoom, -this.verticalOffset / this.currentZoom, viewWidth, viewHeight));\n    var oObjectsID = [];\n    var renderOrder = [];\n\n    for (var j = 0; j < oObjects.length; j++) {\n      var bpmnShape = oObjects[j].shape;\n\n      if (bpmnShape.type === \"Bpmn\" && bpmnShape && bpmnShape.activity && bpmnShape.activity.subProcess && bpmnShape.activity.subProcess.processes && bpmnShape.activity.subProcess.processes.length > 0) {\n        for (var k = 0; k < bpmnShape.activity.subProcess.processes.length; k++) {\n          renderOrder.push(bpmnShape.activity.subProcess.processes[k]);\n        }\n\n        renderOrder.push(oObjects[j].id);\n      } else if (oObjects[j].processId === \"\" || oObjects[j].processId === undefined) {\n        renderOrder.push(oObjects[j].id);\n      }\n    }\n\n    oObjectsID = renderOrder;\n    var zindexOrder = [];\n\n    for (var j = 0; j < oObjects.length; j++) {\n      var items = oObjects[j].shape;\n\n      if (items.type === \"Bpmn\" && items && items.activity && items.activity.subProcess && items.activity.subProcess.processes && items.activity.subProcess.processes.length > 0) {\n        zindexOrder.push(oObjects[j].id);\n\n        for (var t = 0; t < items.activity.subProcess.processes.length; t++) {\n          zindexOrder.push(items.activity.subProcess.processes[t]);\n        }\n      } else if (oObjects[j].processId === \"\" || oObjects[j].processId === undefined) {\n        zindexOrder.push(oObjects[j].id);\n      }\n    }\n\n    for (var j = 0; j < oObjects.length; j++) {\n      for (var k_1 = 0; k_1 < zindexOrder.length; k_1++) {\n        if (oObjects[j].id === zindexOrder[k_1]) {\n          oObjects[j].zIndex = k_1;\n          break;\n        }\n      }\n    }\n\n    var newObjects = this.getObjects(oObjectsID, this.oldCollectionObjects);\n\n    if (this.oldCollectionObjects.length === 0) {\n      this.oldCollectionObjects = oObjectsID;\n    }\n\n    var removeObjects = this.getObjects(this.oldCollectionObjects, oObjectsID);\n    this.diagram.updateVirtualObjects(newObjects, false, removeObjects);\n    this.oldCollectionObjects = oObjectsID;\n  };\n  /**\n   * setSize \\\n   *\n   * @returns { void }     To get page pageBounds.\\\n   * @param {PointModel} newOffset - provide the newOffset value.\n   *\n   * @private\n   */\n\n\n  DiagramScroller.prototype.setSize = function (newOffset) {\n    var pageBounds = this.getPageBounds(undefined, undefined, true);\n    pageBounds.x *= this.currentZoom;\n    pageBounds.y *= this.currentZoom;\n    pageBounds.width *= this.currentZoom;\n    pageBounds.height *= this.currentZoom;\n    var x = Math.min(pageBounds.x, -this.horizontalOffset);\n    var y = Math.min(pageBounds.y, -this.verticalOffset);\n    var difX = -this.horizontalOffset + this.viewPortWidth - pageBounds.right;\n    var difY = -this.verticalOffset + this.viewPortHeight - pageBounds.bottom;\n    var hScrollSize = this.scrollerWidth;\n    var vScrollSize = this.scrollerWidth;\n\n    if (-this.verticalOffset <= pageBounds.y && -this.verticalOffset + this.viewPortHeight >= pageBounds.bottom) {\n      vScrollSize = 0;\n    }\n\n    if (-this.horizontalOffset <= pageBounds.x && -this.horizontalOffset + this.viewPortWidth >= pageBounds.right) {\n      hScrollSize = 0;\n    }\n\n    this.hScrollSize = hScrollSize;\n    this.vScrollSize = vScrollSize;\n    var oldWidth = this.diagramWidth;\n    var oldHeight = this.diagramHeight;\n    this.diagramWidth = Math.max(pageBounds.right, -this.horizontalOffset + this.viewPortWidth - vScrollSize) - x;\n    this.diagramHeight = Math.max(pageBounds.bottom, -this.verticalOffset + this.viewPortHeight - hScrollSize) - y;\n\n    if ((oldWidth !== this.diagramWidth || oldHeight !== this.diagramHeight) && this.diagram.scrollSettings.scrollLimit !== 'Diagram') {\n      this.diagram.setSize(this.diagramWidth, this.diagramHeight);\n    }\n\n    if (this.diagram.scrollSettings.scrollLimit === 'Diagram') {\n      if ((oldWidth !== this.diagramWidth || oldHeight !== this.diagramHeight || this.currentZoom !== 1) && (!this.diagram.diagramActions || !newOffset || this.diagram.diagramActions && newOffset && (this.verticalOffset !== 0 || this.verticalOffset === newOffset.y) && (this.horizontalOffset !== 0 || this.horizontalOffset === newOffset.x))) {\n        if (this.diagram.scrollActions & ScrollActions.Interaction && newOffset) {\n          this.transform = {\n            tx: Math.max(newOffset.x, -(pageBounds.left / this.currentZoom)) / this.currentZoom,\n            ty: Math.max(newOffset.y, -(pageBounds.top / this.currentZoom)) / this.currentZoom,\n            scale: this.currentZoom\n          };\n          this.horizontalOffset = newOffset.x;\n          this.verticalOffset = newOffset.y;\n        }\n\n        this.diagram.setSize(this.diagramWidth, this.diagramHeight);\n\n        if (!(this.diagram.scrollActions & ScrollActions.PropertyChange) && newOffset) {\n          this.horizontalOffset = newOffset.x;\n          this.verticalOffset = newOffset.y;\n          this.transform = {\n            tx: Math.max(newOffset.x, -pageBounds.left) / this.currentZoom,\n            ty: Math.max(newOffset.y, -pageBounds.top) / this.currentZoom,\n            scale: this.currentZoom\n          };\n        }\n      } else if (newOffset && oldWidth === this.diagramWidth && oldHeight === this.diagramHeight && (this.diagram.diagramCanvas.scrollHeight > this.viewPortHeight && newOffset.y < 0 && this.horizontalOffset === newOffset.x && this.verticalOffset === 0 || this.diagram.diagramCanvas.scrollWidth > this.viewPortWidth && newOffset.x < 0 && this.verticalOffset === newOffset.y && this.horizontalOffset === 0)) {\n        this.verticalOffset = newOffset.y;\n        this.horizontalOffset = newOffset.x;\n        this.transform = {\n          tx: Math.max(newOffset.x, -pageBounds.left) / this.currentZoom,\n          ty: Math.max(newOffset.y, -pageBounds.top) / this.currentZoom,\n          scale: this.currentZoom\n        };\n      }\n    }\n\n    this.diagram.transformLayers();\n    this.diagram.element.style.overflow = 'hidden';\n  };\n  /**\n   * setViewPortSize \\\n   *\n   * @returns { void }     To get page pageBounds.\\\n   * @param {number} width - provide the factor value.\n   * @param {number} height - provide the factor value.\n   *\n   * @private\n   */\n\n\n  DiagramScroller.prototype.setViewPortSize = function (width, height) {\n    this.viewPortWidth = width;\n    this.viewPortHeight = height;\n  };\n  /**\n   * To get page pageBounds \\\n   *\n   * @returns { Rect }     To get page pageBounds.\\\n   * @param {boolean} boundingRect - provide the factor value.\n   * @param {DiagramRegions} region - provide the factor value.\n   * @param {boolean} hasPadding - provide the factor value.\n   *\n   * @private\n   */\n\n\n  DiagramScroller.prototype.getPageBounds = function (boundingRect, region, hasPadding) {\n    var rect = new Rect();\n    var pageBounds;\n    var temp = 0;\n\n    if (region !== 'Content' && this.diagram.pageSettings.width !== null && this.diagram.pageSettings.height !== null) {\n      var width = this.diagram.pageSettings.width;\n      var height = this.diagram.pageSettings.height;\n      var negwidth = 0;\n      var negheight = 0;\n      var diagramPosition = this.diagram.spatialSearch.getPageBounds(0, 0);\n\n      if (this.diagram.pageSettings.multiplePage || diagramPosition.x < 0 || diagramPosition.y < 0) {\n        rect = this.diagram.spatialSearch.getPageBounds(0, 0);\n\n        if (rect.right > width) {\n          var x = Math.ceil(rect.right / width);\n          width = width * x;\n        }\n\n        if (rect.bottom > height) {\n          var x = Math.ceil(rect.bottom / height);\n          height = height * x;\n        }\n\n        if (rect.left < 0 && Math.abs(rect.left) > negwidth) {\n          var x = Math.ceil(Math.abs(rect.left) / this.diagram.pageSettings.width);\n          negwidth = this.diagram.pageSettings.width * x;\n        }\n\n        if (rect.top < 0 && Math.abs(rect.top) > negheight) {\n          var x = Math.ceil(Math.abs(rect.top) / this.diagram.pageSettings.height);\n          negheight = this.diagram.pageSettings.height * x;\n        }\n      }\n\n      pageBounds = new Rect(-negwidth, -negheight, width + negwidth, height + negheight);\n    } else {\n      var origin_1 = boundingRect ? undefined : 0;\n      pageBounds = this.diagram.spatialSearch.getPageBounds(origin_1, origin_1);\n    }\n\n    if (hasPadding) {\n      var scrollpadding = this.diagram.scrollSettings.padding;\n      pageBounds.x -= scrollpadding.left;\n      pageBounds.y -= scrollpadding.top;\n      pageBounds.width += scrollpadding.left + scrollpadding.right;\n      pageBounds.height += scrollpadding.top + scrollpadding.bottom;\n    }\n\n    return pageBounds;\n  };\n  /**\n   * To get page break when PageBreak is set as true \\\n   *\n   * @returns { Segment[] }     To get page break when PageBreak is set as true.\\\n   * @param {Rect} pageBounds - provide the factor value.\n   *\n   * @private\n   */\n\n\n  DiagramScroller.prototype.getPageBreak = function (pageBounds) {\n    var i = 0;\n    var j = 0;\n    var v = -1;\n    var collection = [];\n    var x1 = 0;\n    var x2 = 0;\n    var y1 = 0;\n    var y2 = 0;\n    var left = this.diagram.pageSettings.margin.left;\n    var right = this.diagram.pageSettings.margin.right;\n    var top = this.diagram.pageSettings.margin.top;\n    var bottom = this.diagram.pageSettings.margin.bottom;\n    var widthCount = 1;\n    var heightCount = 1;\n    var segment = {\n      x1: x1,\n      y1: y1,\n      x2: x2,\n      y2: y2\n    };\n\n    while (pageBounds.width > i) {\n      i = i + (this.diagram.pageSettings.width ? this.diagram.pageSettings.width : pageBounds.width);\n\n      if (i === this.diagram.pageSettings.width) {\n        segment = {\n          x1: pageBounds.left + left,\n          y1: pageBounds.top + top,\n          x2: pageBounds.left + left,\n          y2: pageBounds.bottom - bottom\n        };\n        collection[++v] = segment;\n      }\n\n      if (i < pageBounds.width) {\n        x1 = pageBounds.topLeft.x + this.diagram.pageSettings.width * widthCount;\n        y1 = pageBounds.topLeft.y + top;\n        x2 = pageBounds.bottomLeft.x + this.diagram.pageSettings.width * widthCount;\n        y2 = pageBounds.bottomLeft.y - bottom;\n        segment = {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2\n        };\n        collection[++v] = segment;\n        widthCount++;\n      }\n\n      if (pageBounds.width === i) {\n        segment = {\n          x1: pageBounds.right - right,\n          y1: pageBounds.top + top,\n          x2: pageBounds.right - right,\n          y2: pageBounds.bottom - bottom\n        };\n        collection[++v] = segment;\n      }\n    }\n\n    while (pageBounds.height > j) {\n      j = j + (this.diagram.pageSettings.height ? this.diagram.pageSettings.height : pageBounds.height);\n\n      if (j === this.diagram.pageSettings.height) {\n        segment = {\n          x1: pageBounds.left + left,\n          y1: pageBounds.top + top,\n          x2: pageBounds.right - right,\n          y2: pageBounds.top + top\n        };\n        collection[++v] = segment;\n      }\n\n      if (j < pageBounds.height) {\n        x1 = pageBounds.topLeft.x + left;\n        y1 = pageBounds.topLeft.y + this.diagram.pageSettings.height * heightCount;\n        x2 = pageBounds.topRight.x - right;\n        y2 = pageBounds.topRight.y + this.diagram.pageSettings.height * heightCount;\n        segment = {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2\n        };\n        collection[++v] = segment;\n        heightCount++;\n      }\n\n      if (pageBounds.height === j) {\n        segment = {\n          x1: pageBounds.left + left,\n          y1: pageBounds.bottom - bottom,\n          x2: pageBounds.right - right,\n          y2: pageBounds.bottom - bottom\n        };\n        collection[++v] = segment;\n      }\n    }\n\n    return collection;\n  };\n  /**\n   * zoom method \\\n   *\n   * @returns { void }     zoom method .\\\n   * @param {number} factor - provide the factor value.\n   * @param {number} deltaX - provide the bounds value.\n   * @param {number} deltaY - provide the bounds value.\n   * @param {PointModel} focusPoint - provide the bounds value.\n   *\n   * @private\n   */\n\n\n  DiagramScroller.prototype.zoom = function (factor, deltaX, deltaY, focusPoint) {\n    if (canZoom(this.diagram) && factor !== 1 || canPan(this.diagram) && factor === 1) {\n      var matrix = identityMatrix();\n      scaleMatrix(matrix, this.currentZoom, this.currentZoom);\n      translateMatrix(matrix, this.horizontalOffset, this.verticalOffset);\n      focusPoint = focusPoint || {\n        x: (this.viewPortWidth / 2 - this.horizontalOffset) / this.currentZoom,\n        y: (this.viewPortHeight / 2 - this.verticalOffset) / this.currentZoom\n      };\n      focusPoint = transformPointByMatrix(matrix, focusPoint);\n\n      if (this.currentZoom * factor >= this.diagram.scrollSettings.minZoom && this.currentZoom * factor <= this.diagram.scrollSettings.maxZoom) {\n        this.currentZoom *= factor;\n        var pageBounds = this.getPageBounds(undefined, undefined, true);\n        pageBounds.x *= this.currentZoom;\n        pageBounds.y *= this.currentZoom; //target Matrix\n\n        var targetMatrix = identityMatrix();\n        scaleMatrix(targetMatrix, factor, factor, focusPoint.x, focusPoint.y);\n        translateMatrix(targetMatrix, deltaX || 0, deltaY || 0);\n        multiplyMatrix(matrix, targetMatrix);\n        var newOffset = transformPointByMatrix(matrix, {\n          x: 0,\n          y: 0\n        });\n\n        if (factor === 1) {\n          newOffset = this.applyScrollLimit(newOffset.x, newOffset.y);\n        }\n\n        if (this.diagram.scrollActions & ScrollActions.PropertyChange || !(this.diagram.scrollActions & ScrollActions.Interaction) || this.diagram.scrollSettings.scrollLimit !== 'Diagram') {\n          this.transform = {\n            tx: Math.max(newOffset.x, -pageBounds.left) / this.currentZoom,\n            ty: Math.max(newOffset.y, -pageBounds.top) / this.currentZoom,\n            scale: this.currentZoom\n          };\n          this.horizontalOffset = newOffset.x;\n          this.verticalOffset = newOffset.y;\n        }\n\n        this.setSize(newOffset);\n\n        if (this.diagram.mode !== 'SVG' && canVitualize(this.diagram)) {\n          this.diagram.scroller.virtualizeElements();\n        }\n\n        if (this.diagram.mode !== 'SVG' && !canVitualize(this.diagram)) {\n          this.diagram.refreshDiagramLayer();\n        }\n\n        this.diagram.setOffset(-this.horizontalOffset - pageBounds.x, -this.verticalOffset - pageBounds.y);\n        updateRuler(this.diagram);\n      }\n    }\n  };\n  /**\n   * fitToPage method \\\n   *\n   * @returns { void }     fitToPage method .\\\n   * @param {IFitOptions} options - provide the bounds value.\n   *\n   * @private\n   */\n\n\n  DiagramScroller.prototype.fitToPage = function (options) {\n    options = options || {};\n    var mode = options.mode;\n    var region = options.region;\n    var margin = options.margin || {};\n    var canZoomIn = options.canZoomIn;\n    var customBounds = options.customBounds;\n    margin.bottom = margin.bottom || 25;\n    margin.top = margin.top || 25;\n    margin.left = margin.left || 25;\n    margin.right = margin.right || 25;\n    var bounds = customBounds;\n    var factor;\n    var deltaX = -this.horizontalOffset;\n    var deltaY = -this.verticalOffset;\n    region = region ? region : 'PageSettings'; //fit mode\n\n    if (region === 'PageSettings' && this.diagram.pageSettings.width && this.diagram.pageSettings.height || this.diagram.nodes.length > 0 || this.diagram.connectors.length > 0) {\n      mode = mode ? mode : 'Page';\n\n      if (region !== 'CustomBounds') {\n        bounds = this.getPageBounds(true, region, true);\n      }\n\n      var scale = {\n        x: 0,\n        y: 0\n      };\n      scale.x = (this.viewPortWidth - (margin.left + margin.right)) / bounds.width;\n      scale.y = (this.viewPortHeight - (margin.top + margin.bottom)) / bounds.height;\n\n      if (!canZoomIn && bounds.width - this.horizontalOffset < this.viewPortWidth && bounds.height - this.verticalOffset < this.viewPortHeight) {\n        scale.x = Math.min(this.currentZoom, scale.x);\n        scale.y = Math.min(this.currentZoom, scale.y);\n      }\n\n      var zoomFactor = void 0;\n      var centerX = void 0;\n      var centerY = void 0;\n\n      switch (mode) {\n        case 'Width':\n          zoomFactor = scale.x;\n          factor = zoomFactor / this.currentZoom;\n          centerX = (this.viewPortWidth - bounds.width * zoomFactor) / 2 - bounds.x * zoomFactor;\n          deltaX += centerX + (margin.left - margin.right) / 2 * zoomFactor;\n          deltaY -= -this.verticalOffset * factor;\n          deltaY = region !== 'CustomBounds' ? deltaY : deltaY - this.verticalOffset * factor;\n          break;\n\n        case 'Height':\n          zoomFactor = scale.y;\n          factor = zoomFactor / this.currentZoom;\n          centerX = (this.viewPortWidth - bounds.width * zoomFactor) / 2 - bounds.x * zoomFactor;\n          centerY = (this.viewPortHeight - bounds.height * zoomFactor) / 2 - bounds.y * zoomFactor;\n          deltaX += centerX + (margin.left - margin.right) / 2 * zoomFactor;\n          deltaY += centerY + (margin.top - margin.bottom) / 2 * zoomFactor;\n          break;\n\n        case 'Page':\n          zoomFactor = Math.min(scale.x, scale.y);\n          factor = zoomFactor / this.currentZoom;\n          centerX = (this.viewPortWidth - bounds.width * zoomFactor) / 2 - bounds.x * zoomFactor;\n          centerY = (this.viewPortHeight - bounds.height * zoomFactor) / 2 - bounds.y * zoomFactor;\n          deltaX += centerX + (margin.left - margin.right) / 2 * zoomFactor;\n          deltaY += centerY + (margin.top - margin.bottom) / 2 * zoomFactor;\n          break;\n      }\n\n      this.zoom(factor, deltaX, deltaY, {\n        x: 0,\n        y: 0\n      });\n    } else {\n      factor = 1 / this.currentZoom;\n      this.zoom(factor, deltaX, deltaY, {\n        x: 0,\n        y: 0\n      });\n    }\n  };\n  /**\n   * bringIntoView method \\\n   *\n   * @returns { void }     bringIntoView method .\\\n   * @param {Rect} rect - provide the bounds value.\n   *\n   * @private\n   */\n\n\n  DiagramScroller.prototype.bringIntoView = function (rect) {\n    if (rect && rect.width && rect.height) {\n      var bounds = rect;\n\n      if (bounds.x > 0 && bounds.x >= bounds.width) {\n        bounds.width = bounds.x + bounds.x / 3;\n      }\n\n      if (bounds.x > 0 && bounds.y >= bounds.height) {\n        bounds.height = bounds.y + bounds.y / 3;\n      }\n\n      var scale = {\n        x: 0,\n        y: 0\n      };\n      scale.x = (this.viewPortWidth - 50) / bounds.width;\n      scale.y = (this.viewPortHeight - 50) / bounds.height;\n      var zoomFactor = void 0;\n      var centerX = void 0;\n      var centerY = void 0;\n      var factor = void 0;\n      var deltaX = -this.horizontalOffset;\n      var deltaY = -this.verticalOffset;\n      zoomFactor = Math.min(scale.x, scale.y);\n      factor = zoomFactor / this.currentZoom;\n      centerX = (this.viewPortWidth - bounds.width * zoomFactor) / 2 - bounds.x * zoomFactor;\n      centerY = (this.viewPortHeight - bounds.height * zoomFactor) / 2 - bounds.y * zoomFactor;\n      deltaX += centerX;\n      deltaY += centerY;\n      this.zoom(factor, deltaX, deltaY, {\n        x: 0,\n        y: 0\n      });\n    }\n  };\n  /**\n   * bringToCenter method \\\n   *\n   * @returns { void }     bringToCenter method .\\\n   * @param {Rect} bounds - provide the bounds value.\n   *\n   * @private\n   */\n\n\n  DiagramScroller.prototype.bringToCenter = function (bounds) {\n    var scale = this.currentZoom;\n    var actualbounds = new Rect(bounds.x * scale, bounds.y * scale, bounds.width * scale, bounds.height * scale);\n    var hoffset = actualbounds.x + actualbounds.width / 2 - this.viewPortWidth / 2;\n    var voffset = actualbounds.y + actualbounds.height / 2 - this.viewPortHeight / 2;\n    this.zoom(1, -this.horizontalOffset - hoffset, -this.verticalOffset - voffset, null);\n  };\n\n  DiagramScroller.prototype.applyScrollLimit = function (hOffset, vOffset) {\n    if (this.diagram.scrollSettings.scrollLimit !== 'Infinity') {\n      var bounds = void 0;\n\n      if (this.diagram.scrollSettings.scrollLimit === 'Limited') {\n        var scrollableBounds = this.diagram.scrollSettings.scrollableArea;\n        bounds = new Rect(scrollableBounds.x, scrollableBounds.y, scrollableBounds.width, scrollableBounds.height);\n      }\n\n      bounds = bounds || this.getPageBounds(true);\n      bounds.x *= this.currentZoom;\n      bounds.y *= this.currentZoom;\n      bounds.width *= this.currentZoom;\n      bounds.height *= this.currentZoom;\n      hOffset *= -1;\n      vOffset *= -1;\n      var allowedRight = Math.max(bounds.right, this.viewPortWidth);\n\n      if (!(hOffset <= bounds.x && (hOffset + this.viewPortWidth >= bounds.right || hOffset >= bounds.right - this.viewPortWidth) || hOffset >= bounds.x && hOffset + this.viewPortWidth <= allowedRight)) {\n        //not allowed case\n        if (hOffset >= bounds.x) {\n          hOffset = Math.max(bounds.x, Math.min(hOffset, hOffset - (hOffset + this.viewPortWidth - this.vScrollSize - allowedRight)));\n        } else {\n          var allowed = bounds.right - this.viewPortWidth;\n          hOffset = Math.min(allowed, bounds.x);\n        }\n      }\n\n      var allowedBottom = Math.max(bounds.bottom, this.viewPortHeight);\n\n      if (!(vOffset <= bounds.y && vOffset + this.viewPortHeight >= bounds.bottom || vOffset >= bounds.y && vOffset + this.viewPortHeight <= allowedBottom)) {\n        //not allowed case\n        if (vOffset >= bounds.y) {\n          vOffset = Math.max(bounds.y, Math.min(vOffset, vOffset - (vOffset + this.viewPortHeight - this.hScrollSize - allowedBottom)));\n        } else {\n          var allowed = bounds.bottom - this.viewPortHeight;\n          vOffset = Math.min(bounds.y, allowed);\n        }\n      }\n\n      hOffset *= -1;\n      vOffset *= -1;\n    }\n\n    return {\n      x: hOffset,\n      y: vOffset\n    };\n  };\n\n  return DiagramScroller;\n}();\n\nexport { DiagramScroller };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/scroller.js"],"names":["Rect","RealAction","ScrollActions","identityMatrix","scaleMatrix","translateMatrix","transformPointByMatrix","multiplyMatrix","updateRuler","canZoom","canPan","canVitualize","DiagramScroller","diagram","transform","tx","ty","scale","oldCollectionObjects","removeCollection","vPortWidth","vPortHeight","currentZoomFActor","hOffset","vOffset","scrolled","hScrollSize","vScrollSize","objects","scroller","scrollSettings","viewPortWidth","viewPortHeight","currentZoom","horizontalOffset","verticalOffset","Object","defineProperty","prototype","get","set","offset","enumerable","configurable","Math","abs","realActions","hScrollbarMoved","vScrollbarMoved","updateScrollOffsets","offsetX","offsetY","pageBounds","getPageBounds","undefined","x","y","width","height","max","left","top","setOffset","setScrollOffset","viewWidth","viewHeight","newX","right","actualRight","currentRight","newY","bottom","actualBottom","currentBottom","setSize","getObjects","coll1","coll2","i","length","isExist","j","push","virtualizeElements","oObjects","spatialSearch","findObjects","oObjectsID","renderOrder","bpmnShape","shape","type","activity","subProcess","processes","k","id","processId","zindexOrder","items","t","k_1","zIndex","newObjects","removeObjects","updateVirtualObjects","newOffset","min","difX","difY","scrollerWidth","oldWidth","diagramWidth","oldHeight","diagramHeight","scrollLimit","diagramActions","scrollActions","Interaction","PropertyChange","diagramCanvas","scrollHeight","scrollWidth","transformLayers","element","style","overflow","setViewPortSize","boundingRect","region","hasPadding","rect","temp","pageSettings","negwidth","negheight","diagramPosition","multiplePage","ceil","origin_1","scrollpadding","padding","getPageBreak","v","collection","x1","x2","y1","y2","margin","widthCount","heightCount","segment","topLeft","bottomLeft","topRight","zoom","factor","deltaX","deltaY","focusPoint","matrix","minZoom","maxZoom","targetMatrix","applyScrollLimit","mode","refreshDiagramLayer","fitToPage","options","canZoomIn","customBounds","bounds","nodes","connectors","zoomFactor","centerX","centerY","bringIntoView","bringToCenter","actualbounds","hoffset","voffset","scrollableBounds","scrollableArea","allowedRight","allowed","allowedBottom"],"mappings":"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","sourcesContent":["import { Rect } from '../primitives/rect';\nimport { RealAction, ScrollActions } from '../enum/enum';\nimport { identityMatrix, scaleMatrix, translateMatrix, transformPointByMatrix, multiplyMatrix } from '../primitives/matrix';\nimport { updateRuler } from '../ruler/ruler';\nimport { canZoom, canPan, canVitualize } from './../utility/constraints-util';\n/**\n */\nvar DiagramScroller = /** @class */ (function () {\n    function DiagramScroller(diagram) {\n        /** @private */\n        this.transform = { tx: 0, ty: 0, scale: 1 };\n        /**   @private  */\n        this.oldCollectionObjects = [];\n        /**   @private  */\n        this.removeCollection = [];\n        this.vPortWidth = 0;\n        this.vPortHeight = 0;\n        this.currentZoomFActor = 1;\n        this.hOffset = 0;\n        this.vOffset = 0;\n        this.scrolled = false;\n        this.hScrollSize = 0;\n        this.vScrollSize = 0;\n        this.diagram = diagram;\n        this.objects = [];\n        this.transform = diagram.scroller ? diagram.scroller.transform : { tx: 0, ty: 0, scale: 1 };\n        this.vPortWidth = diagram.scrollSettings.viewPortWidth;\n        this.vPortHeight = diagram.scrollSettings.viewPortHeight;\n        this.currentZoomFActor = diagram.scrollSettings.currentZoom;\n        this.hOffset = diagram.scrollSettings.horizontalOffset;\n        this.vOffset = diagram.scrollSettings.verticalOffset;\n    }\n    Object.defineProperty(DiagramScroller.prototype, \"viewPortHeight\", {\n        /**\n         * verticalOffset method \\\n         *\n         * @returns { number }     verticalOffset method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.vPortHeight;\n        },\n        /**\n         * verticalOffset method \\\n         *\n         * @returns { void }     verticalOffset method .\\\n         * @param {number} offset - provide the hOffset value.\n         *\n         * @private\n         */\n        set: function (offset) {\n            this.vPortHeight = offset;\n            this.diagram.scrollSettings.viewPortHeight = offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DiagramScroller.prototype, \"currentZoom\", {\n        /**\n         * verticalOffset method \\\n         *\n         * @returns { number }     verticalOffset method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.currentZoomFActor;\n        },\n        /**\n         * verticalOffset method \\\n         *\n         * @returns { void }     verticalOffset method .\\\n         * @param {number} offset - provide the hOffset value.\n         *\n         * @private\n         */\n        set: function (offset) {\n            this.currentZoomFActor = offset;\n            this.diagram.scrollSettings.currentZoom = offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DiagramScroller.prototype, \"viewPortWidth\", {\n        /**\n         * verticalOffset method \\\n         *\n         * @returns { number }     verticalOffset method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.vPortWidth;\n        },\n        /**\n         * verticalOffset method \\\n         *\n         * @returns { void }     verticalOffset method .\\\n         * @param {number} offset - provide the hOffset value.\n         *\n         * @private\n         */\n        set: function (offset) {\n            this.vPortWidth = offset;\n            this.diagram.scrollSettings.viewPortWidth = offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DiagramScroller.prototype, \"horizontalOffset\", {\n        /**\n         * verticalOffset method \\\n         *\n         * @returns { number }     verticalOffset method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.hOffset;\n        },\n        /**\n         * verticalOffset method \\\n         *\n         * @returns { void }     verticalOffset method .\\\n         * @param {number} offset - provide the hOffset value.\n         *\n         * @private\n         */\n        set: function (offset) {\n            this.hOffset = offset;\n            if (Math.abs(this.hOffset - this.diagram.scrollSettings.horizontalOffset) > 1) {\n                this.diagram.realActions = this.diagram.realActions | RealAction.hScrollbarMoved;\n                this.scrolled = true;\n            }\n            this.diagram.scrollSettings.horizontalOffset = offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DiagramScroller.prototype, \"verticalOffset\", {\n        /**\n         * verticalOffset method \\\n         *\n         * @returns { number }     verticalOffset method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.vOffset;\n        },\n        /**\n         * verticalOffset method \\\n         *\n         * @returns { void }     verticalOffset method .\\\n         * @param {number} offset - provide the hOffset value.\n         *\n         * @private\n         */\n        set: function (offset) {\n            this.vOffset = offset;\n            if (Math.abs(this.vOffset - this.diagram.scrollSettings.verticalOffset) > 1) {\n                this.diagram.realActions = this.diagram.realActions | RealAction.vScrollbarMoved;\n                this.scrolled = true;\n            }\n            this.diagram.scrollSettings.verticalOffset = offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * updateScrollOffsets method \\\n     *\n     * @returns { void }     updateScrollOffsets method .\\\n     * @param {number} hOffset - provide the hOffset value.\n     * @param {number} vOffset - provide the vOffset value.\n     *\n     * @private\n     */\n    DiagramScroller.prototype.updateScrollOffsets = function (hOffset, vOffset) {\n        var offsetX = 0;\n        var offsetY = 0;\n        var pageBounds = this.getPageBounds(undefined, undefined, true);\n        pageBounds.x *= this.currentZoom;\n        pageBounds.y *= this.currentZoom;\n        pageBounds.width *= this.currentZoom;\n        pageBounds.height *= this.currentZoom;\n        offsetX = Math.max(0, hOffset - pageBounds.left);\n        offsetY = Math.max(0, vOffset - pageBounds.top);\n        if (hOffset !== undefined && vOffset !== undefined) {\n            this.horizontalOffset = offsetX;\n            this.verticalOffset = offsetY;\n            this.diagram.setOffset(offsetX, offsetY);\n        }\n        else {\n            this.diagram.setOffset(-this.horizontalOffset - pageBounds.x, -this.verticalOffset - pageBounds.y);\n        }\n        this.transform = {\n            tx: Math.max(this.horizontalOffset, -pageBounds.left) / this.currentZoom, ty: Math.max(this.verticalOffset, -pageBounds.top) / this.currentZoom,\n            scale: this.currentZoom\n        };\n    };\n    /**\n     * setScrollOffset method \\\n     *\n     * @returns { void }     setScrollOffset method .\\\n     * @param {number} hOffset - provide the hOffset value.\n     * @param {number} vOffset - provide the vOffset value.\n     *\n     * @private\n     */\n    DiagramScroller.prototype.setScrollOffset = function (hOffset, vOffset) {\n        this.scrolled = false;\n        var pageBounds = this.getPageBounds(undefined, undefined, true);\n        pageBounds.x *= this.currentZoom;\n        pageBounds.y *= this.currentZoom;\n        pageBounds.width *= this.currentZoom;\n        pageBounds.height *= this.currentZoom;\n        var x = -pageBounds.left;\n        var y = -pageBounds.top;\n        var set = false;\n        var viewWidth = this.viewPortWidth * this.currentZoom;\n        var viewHeight = this.viewPortHeight * this.currentZoom;\n        var newX = x - hOffset;\n        if (newX !== this.horizontalOffset) {\n            if (x < this.horizontalOffset) {\n                if (this.horizontalOffset > newX) {\n                    this.horizontalOffset -= hOffset;\n                }\n                else {\n                    this.horizontalOffset = newX;\n                }\n                set = true;\n            }\n            var right = Math.max(pageBounds.right + this.vScrollSize, viewWidth);\n            if (!set && right < -newX + this.viewPortWidth) {\n                var actualRight = -newX + viewWidth - this.vScrollSize;\n                var currentRight = -this.horizontalOffset + viewWidth - this.vScrollSize;\n                if (actualRight < currentRight) {\n                    //define\n                    this.horizontalOffset = newX;\n                }\n                else {\n                    if (actualRight - pageBounds.right > actualRight - currentRight) {\n                        this.horizontalOffset = newX;\n                    }\n                    else {\n                        this.horizontalOffset = -(pageBounds.right + this.vScrollSize - viewWidth);\n                    }\n                }\n                set = true;\n            }\n            if (!set) {\n                this.horizontalOffset = x - hOffset;\n            }\n        }\n        set = false;\n        //vertical offset\n        var newY = y - vOffset;\n        if (newY !== this.verticalOffset) {\n            if (y < this.verticalOffset) {\n                if (this.verticalOffset > newY) {\n                    this.verticalOffset -= vOffset;\n                }\n                else {\n                    this.verticalOffset = newY;\n                }\n                set = true;\n            }\n            var bottom = Math.max(pageBounds.bottom + this.hScrollSize, viewHeight);\n            if (!set && bottom < -newY + viewHeight) {\n                var actualBottom = -newY + viewHeight - this.hScrollSize;\n                var currentBottom = -this.verticalOffset + viewHeight - this.hScrollSize;\n                if (actualBottom < currentBottom) {\n                    //define\n                    this.verticalOffset = newY;\n                }\n                else {\n                    if (actualBottom - pageBounds.bottom > actualBottom - currentBottom) {\n                        this.verticalOffset = newY;\n                    }\n                    else {\n                        this.verticalOffset = -(pageBounds.bottom + this.hScrollSize - viewHeight);\n                    }\n                }\n                set = true;\n            }\n            if (!set) {\n                this.verticalOffset = y - vOffset;\n            }\n        }\n        this.transform = {\n            tx: Math.max(this.horizontalOffset, -pageBounds.left) / this.currentZoom, ty: Math.max(this.verticalOffset, -pageBounds.top) / this.currentZoom,\n            scale: this.currentZoom\n        };\n        this.setSize();\n    };\n    /**\n     * getObjects \\\n     *\n     * @returns { string[] }     To get page pageBounds.\\\n     * @param {string[]} coll1 - provide the source value.\n     * @param {string[]} coll2 - provide the source value.\n     * @private\n     */\n    DiagramScroller.prototype.getObjects = function (coll1, coll2) {\n        var objects = [];\n        for (var i = 0; i < coll1.length; i++) {\n            var isExist = false;\n            for (var j = 0; j < coll2.length; j++) {\n                if (coll1[i] === coll2[j]) {\n                    isExist = true;\n                    break;\n                }\n            }\n            if (!isExist) {\n                objects.push(coll1[i]);\n            }\n        }\n        return objects;\n    };\n    /**\n     * virtualizeElements \\\n     *\n     * @returns { void }     To get page pageBounds.\\\n     *\n     * @private\n     */\n    DiagramScroller.prototype.virtualizeElements = function () {\n        var viewWidth = this.viewPortWidth / this.currentZoom;\n        var viewHeight = this.viewPortHeight / this.currentZoom;\n        var oObjects = this.diagram.spatialSearch.findObjects(new Rect(-this.horizontalOffset / this.currentZoom, -this.verticalOffset / this.currentZoom, viewWidth, viewHeight));\n        var oObjectsID = [];\n        var renderOrder = [];\n        for (var j = 0; j < oObjects.length; j++) {\n            var bpmnShape = oObjects[j].shape;\n            if (bpmnShape.type === \"Bpmn\" && bpmnShape && bpmnShape.activity && bpmnShape.activity.subProcess && bpmnShape.activity.subProcess.processes && bpmnShape.activity.subProcess.processes.length > 0) {\n                for (var k = 0; k < bpmnShape.activity.subProcess.processes.length; k++) {\n                    renderOrder.push(bpmnShape.activity.subProcess.processes[k]);\n                }\n                renderOrder.push(oObjects[j].id);\n            }\n            else if (oObjects[j].processId === \"\" || oObjects[j].processId === undefined) {\n                renderOrder.push(oObjects[j].id);\n            }\n        }\n        oObjectsID = renderOrder;\n        var zindexOrder = [];\n        for (var j = 0; j < oObjects.length; j++) {\n            var items = oObjects[j].shape;\n            if (items.type === \"Bpmn\" && items && items.activity && items.activity.subProcess && items.activity.subProcess.processes && items.activity.subProcess.processes.length > 0) {\n                zindexOrder.push(oObjects[j].id);\n                for (var t = 0; t < items.activity.subProcess.processes.length; t++) {\n                    zindexOrder.push(items.activity.subProcess.processes[t]);\n                }\n            }\n            else if (oObjects[j].processId === \"\" || oObjects[j].processId === undefined) {\n                zindexOrder.push(oObjects[j].id);\n            }\n        }\n        for (var j = 0; j < oObjects.length; j++) {\n            for (var k_1 = 0; k_1 < zindexOrder.length; k_1++) {\n                if (oObjects[j].id === zindexOrder[k_1]) {\n                    oObjects[j].zIndex = k_1;\n                    break;\n                }\n            }\n        }\n        var newObjects = this.getObjects(oObjectsID, this.oldCollectionObjects);\n        if (this.oldCollectionObjects.length === 0) {\n            this.oldCollectionObjects = oObjectsID;\n        }\n        var removeObjects = this.getObjects(this.oldCollectionObjects, oObjectsID);\n        this.diagram.updateVirtualObjects(newObjects, false, removeObjects);\n        this.oldCollectionObjects = oObjectsID;\n    };\n    /**\n     * setSize \\\n     *\n     * @returns { void }     To get page pageBounds.\\\n     * @param {PointModel} newOffset - provide the newOffset value.\n     *\n     * @private\n     */\n    DiagramScroller.prototype.setSize = function (newOffset) {\n        var pageBounds = this.getPageBounds(undefined, undefined, true);\n        pageBounds.x *= this.currentZoom;\n        pageBounds.y *= this.currentZoom;\n        pageBounds.width *= this.currentZoom;\n        pageBounds.height *= this.currentZoom;\n        var x = Math.min(pageBounds.x, -this.horizontalOffset);\n        var y = Math.min(pageBounds.y, -this.verticalOffset);\n        var difX = -this.horizontalOffset + this.viewPortWidth - pageBounds.right;\n        var difY = -this.verticalOffset + this.viewPortHeight - pageBounds.bottom;\n        var hScrollSize = this.scrollerWidth;\n        var vScrollSize = this.scrollerWidth;\n        if (-this.verticalOffset <= pageBounds.y && -this.verticalOffset + this.viewPortHeight >= pageBounds.bottom) {\n            vScrollSize = 0;\n        }\n        if (-this.horizontalOffset <= pageBounds.x && -this.horizontalOffset + this.viewPortWidth >= pageBounds.right) {\n            hScrollSize = 0;\n        }\n        this.hScrollSize = hScrollSize;\n        this.vScrollSize = vScrollSize;\n        var oldWidth = this.diagramWidth;\n        var oldHeight = this.diagramHeight;\n        this.diagramWidth = Math.max(pageBounds.right, -this.horizontalOffset + this.viewPortWidth - vScrollSize) - x;\n        this.diagramHeight = Math.max(pageBounds.bottom, -this.verticalOffset + this.viewPortHeight - hScrollSize) - y;\n        if ((oldWidth !== this.diagramWidth || oldHeight !== this.diagramHeight) && this.diagram.scrollSettings.scrollLimit !== 'Diagram') {\n            this.diagram.setSize(this.diagramWidth, this.diagramHeight);\n        }\n        if (this.diagram.scrollSettings.scrollLimit === 'Diagram') {\n            if ((oldWidth !== this.diagramWidth || oldHeight !== this.diagramHeight || this.currentZoom !== 1)\n                && ((!this.diagram.diagramActions || !newOffset) || (this.diagram.diagramActions && newOffset &&\n                    ((this.verticalOffset !== 0 || this.verticalOffset === newOffset.y) &&\n                        (this.horizontalOffset !== 0 || this.horizontalOffset === newOffset.x))))) {\n                if ((this.diagram.scrollActions & ScrollActions.Interaction) && newOffset) {\n                    this.transform = {\n                        tx: Math.max(newOffset.x, -(pageBounds.left / this.currentZoom)) / this.currentZoom,\n                        ty: Math.max(newOffset.y, -(pageBounds.top / this.currentZoom)) / this.currentZoom,\n                        scale: this.currentZoom\n                    };\n                    this.horizontalOffset = newOffset.x;\n                    this.verticalOffset = newOffset.y;\n                }\n                this.diagram.setSize(this.diagramWidth, this.diagramHeight);\n                if ((!(this.diagram.scrollActions & ScrollActions.PropertyChange)) && newOffset) {\n                    this.horizontalOffset = newOffset.x;\n                    this.verticalOffset = newOffset.y;\n                    this.transform = {\n                        tx: Math.max(newOffset.x, -pageBounds.left) / this.currentZoom,\n                        ty: Math.max(newOffset.y, -pageBounds.top) / this.currentZoom,\n                        scale: this.currentZoom\n                    };\n                }\n            }\n            else if (newOffset && oldWidth === this.diagramWidth && oldHeight === this.diagramHeight &&\n                ((this.diagram.diagramCanvas.scrollHeight > this.viewPortHeight &&\n                    newOffset.y < 0 && this.horizontalOffset === newOffset.x && this.verticalOffset === 0) ||\n                    (this.diagram.diagramCanvas.scrollWidth > this.viewPortWidth &&\n                        newOffset.x < 0 && this.verticalOffset === newOffset.y && this.horizontalOffset === 0))) {\n                this.verticalOffset = newOffset.y;\n                this.horizontalOffset = newOffset.x;\n                this.transform = {\n                    tx: Math.max(newOffset.x, -pageBounds.left) / this.currentZoom,\n                    ty: Math.max(newOffset.y, -pageBounds.top) / this.currentZoom,\n                    scale: this.currentZoom\n                };\n            }\n        }\n        this.diagram.transformLayers();\n        this.diagram.element.style.overflow = 'hidden';\n    };\n    /**\n     * setViewPortSize \\\n     *\n     * @returns { void }     To get page pageBounds.\\\n     * @param {number} width - provide the factor value.\n     * @param {number} height - provide the factor value.\n     *\n     * @private\n     */\n    DiagramScroller.prototype.setViewPortSize = function (width, height) {\n        this.viewPortWidth = width;\n        this.viewPortHeight = height;\n    };\n    /**\n     * To get page pageBounds \\\n     *\n     * @returns { Rect }     To get page pageBounds.\\\n     * @param {boolean} boundingRect - provide the factor value.\n     * @param {DiagramRegions} region - provide the factor value.\n     * @param {boolean} hasPadding - provide the factor value.\n     *\n     * @private\n     */\n    DiagramScroller.prototype.getPageBounds = function (boundingRect, region, hasPadding) {\n        var rect = new Rect();\n        var pageBounds;\n        var temp = 0;\n        if (region !== 'Content' && this.diagram.pageSettings.width !== null && this.diagram.pageSettings.height !== null) {\n            var width = this.diagram.pageSettings.width;\n            var height = this.diagram.pageSettings.height;\n            var negwidth = 0;\n            var negheight = 0;\n            var diagramPosition = this.diagram.spatialSearch.getPageBounds(0, 0);\n            if (this.diagram.pageSettings.multiplePage || (diagramPosition.x < 0 || diagramPosition.y < 0)) {\n                rect = this.diagram.spatialSearch.getPageBounds(0, 0);\n                if (rect.right > width) {\n                    var x = Math.ceil(rect.right / width);\n                    width = width * x;\n                }\n                if (rect.bottom > height) {\n                    var x = Math.ceil(rect.bottom / height);\n                    height = height * x;\n                }\n                if (rect.left < 0 && Math.abs(rect.left) > negwidth) {\n                    var x = Math.ceil(Math.abs(rect.left) / this.diagram.pageSettings.width);\n                    negwidth = this.diagram.pageSettings.width * x;\n                }\n                if (rect.top < 0 && Math.abs(rect.top) > negheight) {\n                    var x = Math.ceil(Math.abs(rect.top) / this.diagram.pageSettings.height);\n                    negheight = this.diagram.pageSettings.height * x;\n                }\n            }\n            pageBounds = new Rect((-negwidth), (-negheight), width + negwidth, height + negheight);\n        }\n        else {\n            var origin_1 = boundingRect ? undefined : 0;\n            pageBounds = this.diagram.spatialSearch.getPageBounds(origin_1, origin_1);\n        }\n        if (hasPadding) {\n            var scrollpadding = this.diagram.scrollSettings.padding;\n            pageBounds.x -= scrollpadding.left;\n            pageBounds.y -= scrollpadding.top;\n            pageBounds.width += (scrollpadding.left + scrollpadding.right);\n            pageBounds.height += (scrollpadding.top + scrollpadding.bottom);\n        }\n        return pageBounds;\n    };\n    /**\n     * To get page break when PageBreak is set as true \\\n     *\n     * @returns { Segment[] }     To get page break when PageBreak is set as true.\\\n     * @param {Rect} pageBounds - provide the factor value.\n     *\n     * @private\n     */\n    DiagramScroller.prototype.getPageBreak = function (pageBounds) {\n        var i = 0;\n        var j = 0;\n        var v = -1;\n        var collection = [];\n        var x1 = 0;\n        var x2 = 0;\n        var y1 = 0;\n        var y2 = 0;\n        var left = this.diagram.pageSettings.margin.left;\n        var right = this.diagram.pageSettings.margin.right;\n        var top = this.diagram.pageSettings.margin.top;\n        var bottom = this.diagram.pageSettings.margin.bottom;\n        var widthCount = 1;\n        var heightCount = 1;\n        var segment = { x1: x1, y1: y1, x2: x2, y2: y2 };\n        while (pageBounds.width > i) {\n            i = i + (this.diagram.pageSettings.width ? this.diagram.pageSettings.width : pageBounds.width);\n            if (i === this.diagram.pageSettings.width) {\n                segment = {\n                    x1: pageBounds.left + left, y1: pageBounds.top + top,\n                    x2: pageBounds.left + left, y2: pageBounds.bottom - bottom\n                };\n                collection[++v] = segment;\n            }\n            if (i < pageBounds.width) {\n                x1 = pageBounds.topLeft.x + this.diagram.pageSettings.width * widthCount;\n                y1 = pageBounds.topLeft.y + top;\n                x2 = pageBounds.bottomLeft.x + this.diagram.pageSettings.width * widthCount;\n                y2 = pageBounds.bottomLeft.y - bottom;\n                segment = { x1: x1, y1: y1, x2: x2, y2: y2 };\n                collection[++v] = segment;\n                widthCount++;\n            }\n            if (pageBounds.width === i) {\n                segment = {\n                    x1: pageBounds.right - right, y1: pageBounds.top + top,\n                    x2: pageBounds.right - right, y2: pageBounds.bottom - bottom\n                };\n                collection[++v] = segment;\n            }\n        }\n        while (pageBounds.height > j) {\n            j = j + (this.diagram.pageSettings.height ? this.diagram.pageSettings.height : pageBounds.height);\n            if (j === this.diagram.pageSettings.height) {\n                segment = {\n                    x1: pageBounds.left + left, y1: pageBounds.top + top,\n                    x2: pageBounds.right - right, y2: pageBounds.top + top\n                };\n                collection[++v] = segment;\n            }\n            if (j < pageBounds.height) {\n                x1 = pageBounds.topLeft.x + left;\n                y1 = pageBounds.topLeft.y + this.diagram.pageSettings.height * heightCount;\n                x2 = pageBounds.topRight.x - right;\n                y2 = pageBounds.topRight.y + this.diagram.pageSettings.height * heightCount;\n                segment = { x1: x1, y1: y1, x2: x2, y2: y2 };\n                collection[++v] = segment;\n                heightCount++;\n            }\n            if (pageBounds.height === j) {\n                segment = {\n                    x1: pageBounds.left + left, y1: pageBounds.bottom - bottom,\n                    x2: pageBounds.right - right, y2: pageBounds.bottom - bottom\n                };\n                collection[++v] = segment;\n            }\n        }\n        return collection;\n    };\n    /**\n     * zoom method \\\n     *\n     * @returns { void }     zoom method .\\\n     * @param {number} factor - provide the factor value.\n     * @param {number} deltaX - provide the bounds value.\n     * @param {number} deltaY - provide the bounds value.\n     * @param {PointModel} focusPoint - provide the bounds value.\n     *\n     * @private\n     */\n    DiagramScroller.prototype.zoom = function (factor, deltaX, deltaY, focusPoint) {\n        if (canZoom(this.diagram) && factor !== 1 || (canPan(this.diagram) && factor === 1)) {\n            var matrix = identityMatrix();\n            scaleMatrix(matrix, this.currentZoom, this.currentZoom);\n            translateMatrix(matrix, this.horizontalOffset, this.verticalOffset);\n            focusPoint = focusPoint || {\n                x: (this.viewPortWidth / 2 - this.horizontalOffset) / this.currentZoom,\n                y: (this.viewPortHeight / 2 - this.verticalOffset) / this.currentZoom\n            };\n            focusPoint = transformPointByMatrix(matrix, focusPoint);\n            if ((this.currentZoom * factor) >= this.diagram.scrollSettings.minZoom &&\n                (this.currentZoom * factor) <= this.diagram.scrollSettings.maxZoom) {\n                this.currentZoom *= factor;\n                var pageBounds = this.getPageBounds(undefined, undefined, true);\n                pageBounds.x *= this.currentZoom;\n                pageBounds.y *= this.currentZoom;\n                //target Matrix\n                var targetMatrix = identityMatrix();\n                scaleMatrix(targetMatrix, factor, factor, focusPoint.x, focusPoint.y);\n                translateMatrix(targetMatrix, deltaX || 0, deltaY || 0);\n                multiplyMatrix(matrix, targetMatrix);\n                var newOffset = transformPointByMatrix(matrix, { x: 0, y: 0 });\n                if (factor === 1) {\n                    newOffset = this.applyScrollLimit(newOffset.x, newOffset.y);\n                }\n                if ((this.diagram.scrollActions & ScrollActions.PropertyChange ||\n                    !(this.diagram.scrollActions & ScrollActions.Interaction)) ||\n                    this.diagram.scrollSettings.scrollLimit !== 'Diagram') {\n                    this.transform = {\n                        tx: Math.max(newOffset.x, -pageBounds.left) / this.currentZoom,\n                        ty: Math.max(newOffset.y, -pageBounds.top) / this.currentZoom,\n                        scale: this.currentZoom\n                    };\n                    this.horizontalOffset = newOffset.x;\n                    this.verticalOffset = newOffset.y;\n                }\n                this.setSize(newOffset);\n                if (this.diagram.mode !== 'SVG' && canVitualize(this.diagram)) {\n                    this.diagram.scroller.virtualizeElements();\n                }\n                if (this.diagram.mode !== 'SVG' && !canVitualize(this.diagram)) {\n                    this.diagram.refreshDiagramLayer();\n                }\n                this.diagram.setOffset(-this.horizontalOffset - pageBounds.x, -this.verticalOffset - pageBounds.y);\n                updateRuler(this.diagram);\n            }\n        }\n    };\n    /**\n     * fitToPage method \\\n     *\n     * @returns { void }     fitToPage method .\\\n     * @param {IFitOptions} options - provide the bounds value.\n     *\n     * @private\n     */\n    DiagramScroller.prototype.fitToPage = function (options) {\n        options = options || {};\n        var mode = options.mode;\n        var region = options.region;\n        var margin = options.margin || {};\n        var canZoomIn = options.canZoomIn;\n        var customBounds = options.customBounds;\n        margin.bottom = margin.bottom || 25;\n        margin.top = margin.top || 25;\n        margin.left = margin.left || 25;\n        margin.right = margin.right || 25;\n        var bounds = customBounds;\n        var factor;\n        var deltaX = -this.horizontalOffset;\n        var deltaY = -this.verticalOffset;\n        region = region ? region : 'PageSettings';\n        //fit mode\n        if ((region === 'PageSettings' && this.diagram.pageSettings.width && this.diagram.pageSettings.height)\n            || (this.diagram.nodes.length > 0 || this.diagram.connectors.length > 0)) {\n            mode = mode ? mode : 'Page';\n            if (region !== 'CustomBounds') {\n                bounds = this.getPageBounds(true, region, true);\n            }\n            var scale = { x: 0, y: 0 };\n            scale.x = (this.viewPortWidth - (margin.left + margin.right)) / (bounds.width);\n            scale.y = (this.viewPortHeight - (margin.top + margin.bottom)) / (bounds.height);\n            if (!canZoomIn && (((bounds.width - this.horizontalOffset) < this.viewPortWidth) &&\n                (bounds.height - this.verticalOffset) < this.viewPortHeight)) {\n                scale.x = Math.min(this.currentZoom, scale.x);\n                scale.y = Math.min(this.currentZoom, scale.y);\n            }\n            var zoomFactor = void 0;\n            var centerX = void 0;\n            var centerY = void 0;\n            switch (mode) {\n                case 'Width':\n                    zoomFactor = scale.x;\n                    factor = zoomFactor / this.currentZoom;\n                    centerX = (this.viewPortWidth - (bounds.width) * zoomFactor) / 2 - bounds.x * zoomFactor;\n                    deltaX += centerX + (margin.left - margin.right) / 2 * zoomFactor;\n                    deltaY -= -this.verticalOffset * factor;\n                    deltaY = region !== 'CustomBounds' ? deltaY : deltaY - this.verticalOffset * factor;\n                    break;\n                case 'Height':\n                    zoomFactor = scale.y;\n                    factor = (zoomFactor / this.currentZoom);\n                    centerX = ((this.viewPortWidth - (bounds.width) * zoomFactor) / 2) - bounds.x * zoomFactor;\n                    centerY = ((this.viewPortHeight - (bounds.height) * zoomFactor) / 2) - bounds.y * zoomFactor;\n                    deltaX += centerX + (margin.left - margin.right) / 2 * zoomFactor;\n                    deltaY += centerY + (margin.top - margin.bottom) / 2 * zoomFactor;\n                    break;\n                case 'Page':\n                    zoomFactor = Math.min(scale.x, scale.y);\n                    factor = (zoomFactor / this.currentZoom);\n                    centerX = (this.viewPortWidth - (bounds.width) * zoomFactor) / 2 - bounds.x * zoomFactor;\n                    centerY = (this.viewPortHeight - (bounds.height) * zoomFactor) / 2 - bounds.y * zoomFactor;\n                    deltaX += centerX + (margin.left - margin.right) / 2 * zoomFactor;\n                    deltaY += centerY + (margin.top - margin.bottom) / 2 * zoomFactor;\n                    break;\n            }\n            this.zoom(factor, deltaX, deltaY, { x: 0, y: 0 });\n        }\n        else {\n            factor = 1 / this.currentZoom;\n            this.zoom(factor, deltaX, deltaY, { x: 0, y: 0 });\n        }\n    };\n    /**\n     * bringIntoView method \\\n     *\n     * @returns { void }     bringIntoView method .\\\n     * @param {Rect} rect - provide the bounds value.\n     *\n     * @private\n     */\n    DiagramScroller.prototype.bringIntoView = function (rect) {\n        if (rect && rect.width && rect.height) {\n            var bounds = rect;\n            if (bounds.x > 0 && bounds.x >= bounds.width) {\n                bounds.width = bounds.x + bounds.x / 3;\n            }\n            if (bounds.x > 0 && bounds.y >= bounds.height) {\n                bounds.height = bounds.y + bounds.y / 3;\n            }\n            var scale = { x: 0, y: 0 };\n            scale.x = (this.viewPortWidth - 50) / (bounds.width);\n            scale.y = (this.viewPortHeight - 50) / (bounds.height);\n            var zoomFactor = void 0;\n            var centerX = void 0;\n            var centerY = void 0;\n            var factor = void 0;\n            var deltaX = -this.horizontalOffset;\n            var deltaY = -this.verticalOffset;\n            zoomFactor = Math.min(scale.x, scale.y);\n            factor = (zoomFactor / this.currentZoom);\n            centerX = (this.viewPortWidth - (bounds.width) * zoomFactor) / 2 - bounds.x * zoomFactor;\n            centerY = (this.viewPortHeight - (bounds.height) * zoomFactor) / 2 - bounds.y * zoomFactor;\n            deltaX += centerX;\n            deltaY += centerY;\n            this.zoom(factor, deltaX, deltaY, { x: 0, y: 0 });\n        }\n    };\n    /**\n     * bringToCenter method \\\n     *\n     * @returns { void }     bringToCenter method .\\\n     * @param {Rect} bounds - provide the bounds value.\n     *\n     * @private\n     */\n    DiagramScroller.prototype.bringToCenter = function (bounds) {\n        var scale = this.currentZoom;\n        var actualbounds = new Rect(bounds.x * scale, bounds.y * scale, bounds.width * scale, bounds.height * scale);\n        var hoffset = actualbounds.x + actualbounds.width / 2 - this.viewPortWidth / 2;\n        var voffset = actualbounds.y + actualbounds.height / 2 - this.viewPortHeight / 2;\n        this.zoom(1, -this.horizontalOffset - hoffset, -this.verticalOffset - voffset, null);\n    };\n    DiagramScroller.prototype.applyScrollLimit = function (hOffset, vOffset) {\n        if (this.diagram.scrollSettings.scrollLimit !== 'Infinity') {\n            var bounds = void 0;\n            if (this.diagram.scrollSettings.scrollLimit === 'Limited') {\n                var scrollableBounds = this.diagram.scrollSettings.scrollableArea;\n                bounds = new Rect(scrollableBounds.x, scrollableBounds.y, scrollableBounds.width, scrollableBounds.height);\n            }\n            bounds = bounds || this.getPageBounds(true);\n            bounds.x *= this.currentZoom;\n            bounds.y *= this.currentZoom;\n            bounds.width *= this.currentZoom;\n            bounds.height *= this.currentZoom;\n            hOffset *= -1;\n            vOffset *= -1;\n            var allowedRight = Math.max(bounds.right, this.viewPortWidth);\n            if (!(hOffset <= bounds.x && (hOffset + this.viewPortWidth >= bounds.right ||\n                hOffset >= bounds.right - this.viewPortWidth)\n                || hOffset >= bounds.x && (hOffset + this.viewPortWidth <= allowedRight))) {\n                //not allowed case\n                if (hOffset >= bounds.x) {\n                    hOffset = Math.max(bounds.x, Math.min(hOffset, hOffset - (hOffset + this.viewPortWidth - this.vScrollSize - allowedRight)));\n                }\n                else {\n                    var allowed = bounds.right - this.viewPortWidth;\n                    hOffset = Math.min(allowed, bounds.x);\n                }\n            }\n            var allowedBottom = Math.max(bounds.bottom, this.viewPortHeight);\n            if (!(vOffset <= bounds.y && vOffset + this.viewPortHeight >= bounds.bottom\n                || vOffset >= bounds.y && vOffset + this.viewPortHeight <= allowedBottom)) {\n                //not allowed case\n                if (vOffset >= bounds.y) {\n                    vOffset = Math.max(bounds.y, Math.min(vOffset, vOffset - (vOffset + this.viewPortHeight - this.hScrollSize - allowedBottom)));\n                }\n                else {\n                    var allowed = bounds.bottom - this.viewPortHeight;\n                    vOffset = Math.min(bounds.y, allowed);\n                }\n            }\n            hOffset *= -1;\n            vOffset *= -1;\n        }\n        return { x: hOffset, y: vOffset };\n    };\n    return DiagramScroller;\n}());\nexport { DiagramScroller };\n"]},"metadata":{},"sourceType":"module"}