{"ast":null,"code":"/**\n * Rect defines and processes rectangular regions\n */\nvar Rect =\n/** @class */\nfunction () {\n  function Rect(x, y, width, height) {\n    /**\n     * Sets the x-coordinate of the starting point of a rectangular region\n     *\n     * @default 0\n     */\n    this.x = Number.MAX_VALUE;\n    /**\n     * Sets the y-coordinate of the starting point of a rectangular region\n     *\n     * @default 0\n     */\n\n    this.y = Number.MAX_VALUE;\n    /**\n     * Sets the width of a rectangular region\n     *\n     * @default 0\n     */\n\n    this.width = 0;\n    /**\n     * Sets the height of a rectangular region\n     *\n     * @default 0\n     */\n\n    this.height = 0;\n\n    if (x === undefined || y === undefined) {\n      x = y = Number.MAX_VALUE;\n      width = height = 0;\n    } else {\n      if (width === undefined) {\n        width = 0;\n      }\n\n      if (height === undefined) {\n        height = 0;\n      }\n    }\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  Object.defineProperty(Rect.prototype, \"left\", {\n    // eslint-disable-next-line jsdoc/require-returns\n\n    /**   @private  */\n    get: function () {\n      return this.x;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"right\", {\n    /**\n     * right method \\\n     *\n     * @returns { Rect } right method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.x + this.width;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"top\", {\n    /**\n     * toBounds method \\\n     *\n     * @returns { Rect } toBounds method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.y;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"bottom\", {\n    /**\n     * bottom method \\\n     *\n     * @returns { Rect } bottom method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return this.y + this.height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"topLeft\", {\n    /**\n     * topLeft method \\\n     *\n     * @returns { Rect } topLeft method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return {\n        x: this.left,\n        y: this.top\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"topRight\", {\n    /**\n     * topRight method \\\n     *\n     * @returns { Rect } topRight method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return {\n        x: this.right,\n        y: this.top\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"bottomLeft\", {\n    /**\n     * bottomLeft method \\\n     *\n     * @returns { Rect } bottomLeft method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return {\n        x: this.left,\n        y: this.bottom\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"bottomRight\", {\n    /**\n     * bottomRight method \\\n     *\n     * @returns { Rect } bottomRight method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return {\n        x: this.right,\n        y: this.bottom\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"middleLeft\", {\n    /**\n     * middleLeft method \\\n     *\n     * @returns { Rect } middleLeft method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return {\n        x: this.left,\n        y: this.y + this.height / 2\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"middleRight\", {\n    /**\n     * middleRight method \\\n     *\n     * @returns { Rect } middleRight method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return {\n        x: this.right,\n        y: this.y + this.height / 2\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"topCenter\", {\n    /**\n     * topCenter method \\\n     *\n     * @returns { Rect } topCenter method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return {\n        x: this.x + this.width / 2,\n        y: this.top\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"bottomCenter\", {\n    /**\n     * bottomCenter method \\\n     *\n     * @returns { Rect } bottomCenter method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return {\n        x: this.x + this.width / 2,\n        y: this.bottom\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"center\", {\n    /**\n     * center method \\\n     *\n     * @returns { PointModel } center method .\\\n     *\n     * @private\n     */\n    get: function () {\n      return {\n        x: this.x + this.width / 2,\n        y: this.y + this.height / 2\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * equals method \\\n   *\n   * @returns { boolean } equals method .\\\n   * @param {Rect} rect1 - provide the rect1 value.\n   * @param {Rect} rect2 - provide the rect2 value.\n   *\n   * @private\n   */\n\n  Rect.prototype.equals = function (rect1, rect2) {\n    return rect1.x === rect2.x && rect1.y === rect2.y && rect1.width === rect2.width && rect1.height === rect2.height;\n  };\n  /**\n   * uniteRect method \\\n   *\n   * @returns { Rect } uniteRect method .\\\n   * @param {Rect} rect - provide the points value.\n   *\n   * @private\n   */\n\n\n  Rect.prototype.uniteRect = function (rect) {\n    var right = Math.max(Number.NaN === this.right || this.x === Number.MAX_VALUE ? rect.right : this.right, rect.right);\n    var bottom = Math.max(Number.NaN === this.bottom || this.y === Number.MAX_VALUE ? rect.bottom : this.bottom, rect.bottom);\n    this.x = Math.min(this.left, rect.left);\n    this.y = Math.min(this.top, rect.top);\n    this.width = right - this.x;\n    this.height = bottom - this.y;\n    return this;\n  };\n  /**\n   * unitePoint method \\\n   *\n   * @returns { void } unitePoint method .\\\n   * @param {PointModel} point - provide the points value.\n   *\n   * @private\n   */\n\n\n  Rect.prototype.unitePoint = function (point) {\n    if (this.x === Number.MAX_VALUE) {\n      this.x = point.x;\n      this.y = point.y;\n      return;\n    }\n\n    var x = Math.min(this.left, point.x);\n    var y = Math.min(this.top, point.y);\n    var right = Math.max(this.right, point.x);\n    var bottom = Math.max(this.bottom, point.y);\n    this.x = x;\n    this.y = y;\n    this.width = right - this.x;\n    this.height = bottom - this.y;\n  }; // public intersection(rect: Rect): Rect {\n  //     if (this.intersects(rect)) {\n  //         let left: number = Math.max(this.left, rect.left);\n  //         let top: number = Math.max(this.top, rect.top);\n  //         let right: number = Math.min(this.right, rect.right);\n  //         let bottom: number = Math.min(this.bottom, rect.bottom);\n  //         return new Rect(left, top, right - left, bottom - top);\n  //     }\n  //     return Rect.empty;\n  // }\n\n  /**\n   * Inflate method \\\n   *\n   * @returns { Rect } Inflate method .\\\n   * @param {number} padding - provide the points value.\n   *\n   * @private\n   */\n\n\n  Rect.prototype.Inflate = function (padding) {\n    this.x -= padding;\n    this.y -= padding;\n    this.width += padding * 2;\n    this.height += padding * 2;\n    return this;\n  }; //public Inflate(size: Size): Rect {\n  //    this.x -= size.Width;\n  //    this.y -= size.Height;\n  //    this.width += size.Width * 2;\n  //    this.height += size.Height * 2;\n  //    return this;\n  //}\n  // public inflate(width: number, height: number): void {\n  //     this.x -= width;\n  //     this.y -= height;\n  //     this.width += width * 2;\n  //     this.height += height * 2;\n  // }\n\n  /**\n   * intersects method \\\n   *\n   * @returns { boolean } intersects method .\\\n   * @param {Rect} rect - provide the points value.\n   *\n   * @private\n   */\n\n\n  Rect.prototype.intersects = function (rect) {\n    if (this.right < rect.left || this.left > rect.right || this.top > rect.bottom || this.bottom < rect.top) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * containsRect method \\\n   *\n   * @returns { boolean } containsRect method .\\\n   * @param {Rect} rect - provide the points value.\n   *\n   * @private\n   */\n\n\n  Rect.prototype.containsRect = function (rect) {\n    return this.left <= rect.left && this.right >= rect.right && this.top <= rect.top && this.bottom >= rect.bottom;\n  };\n  /**\n   * containsPoint method \\\n   *\n   * @returns { boolean } containsPoint method .\\\n   * @param {PointModel} point - provide the points value.\n   * @param {number} padding - provide the padding value.\n   *\n   * @private\n   */\n\n\n  Rect.prototype.containsPoint = function (point, padding) {\n    if (padding === void 0) {\n      padding = 0;\n    }\n\n    return this.left - padding <= point.x && this.right + padding >= point.x && this.top - padding <= point.y && this.bottom + padding >= point.y;\n  }; // public toPoints(): PointModel[] {\n  //     let points: PointModel[] = [];\n  //     points.push(this.topLeft);\n  //     points.push(this.topRight);\n  //     points.push(this.bottomLeft);\n  //     points.push(this.bottomRight);\n  //     return points;\n  // }\n\n  /**\n   * toBounds method \\\n   *\n   * @returns { Rect } toBounds method .\\\n   * @param {PointModel[]} points - provide the points value.\n   *\n   * @private\n   */\n\n\n  Rect.toBounds = function (points) {\n    var rect = new Rect();\n\n    for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n      var pt = points_1[_i];\n      rect.unitePoint(pt);\n    }\n\n    return rect;\n  };\n  /**   @private  */\n\n\n  Rect.empty = new Rect(Number.MAX_VALUE, Number.MIN_VALUE, 0, 0);\n  return Rect;\n}();\n\nexport { Rect };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/rect.js"],"names":["Rect","x","y","width","height","Number","MAX_VALUE","undefined","Object","defineProperty","prototype","get","enumerable","configurable","left","top","right","bottom","equals","rect1","rect2","uniteRect","rect","Math","max","NaN","min","unitePoint","point","Inflate","padding","intersects","containsRect","containsPoint","toBounds","points","_i","points_1","length","pt","empty","MIN_VALUE"],"mappings":"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","sourcesContent":["/**\n * Rect defines and processes rectangular regions\n */\nvar Rect = /** @class */ (function () {\n    function Rect(x, y, width, height) {\n        /**\n         * Sets the x-coordinate of the starting point of a rectangular region\n         *\n         * @default 0\n         */\n        this.x = Number.MAX_VALUE;\n        /**\n         * Sets the y-coordinate of the starting point of a rectangular region\n         *\n         * @default 0\n         */\n        this.y = Number.MAX_VALUE;\n        /**\n         * Sets the width of a rectangular region\n         *\n         * @default 0\n         */\n        this.width = 0;\n        /**\n         * Sets the height of a rectangular region\n         *\n         * @default 0\n         */\n        this.height = 0;\n        if (x === undefined || y === undefined) {\n            x = y = Number.MAX_VALUE;\n            width = height = 0;\n        }\n        else {\n            if (width === undefined) {\n                width = 0;\n            }\n            if (height === undefined) {\n                height = 0;\n            }\n        }\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    Object.defineProperty(Rect.prototype, \"left\", {\n        // eslint-disable-next-line jsdoc/require-returns\n        /**   @private  */\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"right\", {\n        /**\n         * right method \\\n         *\n         * @returns { Rect } right method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"top\", {\n        /**\n         * toBounds method \\\n         *\n         * @returns { Rect } toBounds method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"bottom\", {\n        /**\n         * bottom method \\\n         *\n         * @returns { Rect } bottom method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"topLeft\", {\n        /**\n         * topLeft method \\\n         *\n         * @returns { Rect } topLeft method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return { x: this.left, y: this.top };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"topRight\", {\n        /**\n         * topRight method \\\n         *\n         * @returns { Rect } topRight method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return { x: this.right, y: this.top };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"bottomLeft\", {\n        /**\n         * bottomLeft method \\\n         *\n         * @returns { Rect } bottomLeft method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return { x: this.left, y: this.bottom };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"bottomRight\", {\n        /**\n         * bottomRight method \\\n         *\n         * @returns { Rect } bottomRight method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return { x: this.right, y: this.bottom };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"middleLeft\", {\n        /**\n         * middleLeft method \\\n         *\n         * @returns { Rect } middleLeft method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return { x: this.left, y: this.y + this.height / 2 };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"middleRight\", {\n        /**\n         * middleRight method \\\n         *\n         * @returns { Rect } middleRight method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return { x: this.right, y: this.y + this.height / 2 };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"topCenter\", {\n        /**\n         * topCenter method \\\n         *\n         * @returns { Rect } topCenter method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return { x: this.x + this.width / 2, y: this.top };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"bottomCenter\", {\n        /**\n         * bottomCenter method \\\n         *\n         * @returns { Rect } bottomCenter method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return { x: this.x + this.width / 2, y: this.bottom };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"center\", {\n        /**\n         * center method \\\n         *\n         * @returns { PointModel } center method .\\\n         *\n         * @private\n         */\n        get: function () {\n            return { x: this.x + this.width / 2, y: this.y + this.height / 2 };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * equals method \\\n     *\n     * @returns { boolean } equals method .\\\n     * @param {Rect} rect1 - provide the rect1 value.\n     * @param {Rect} rect2 - provide the rect2 value.\n     *\n     * @private\n     */\n    Rect.prototype.equals = function (rect1, rect2) {\n        return rect1.x === rect2.x && rect1.y === rect2.y && rect1.width === rect2.width && rect1.height === rect2.height;\n    };\n    /**\n     * uniteRect method \\\n     *\n     * @returns { Rect } uniteRect method .\\\n     * @param {Rect} rect - provide the points value.\n     *\n     * @private\n     */\n    Rect.prototype.uniteRect = function (rect) {\n        var right = Math.max(Number.NaN === this.right || this.x === Number.MAX_VALUE ? rect.right : this.right, rect.right);\n        var bottom = Math.max(Number.NaN === this.bottom || this.y === Number.MAX_VALUE ? rect.bottom : this.bottom, rect.bottom);\n        this.x = Math.min(this.left, rect.left);\n        this.y = Math.min(this.top, rect.top);\n        this.width = right - this.x;\n        this.height = bottom - this.y;\n        return this;\n    };\n    /**\n     * unitePoint method \\\n     *\n     * @returns { void } unitePoint method .\\\n     * @param {PointModel} point - provide the points value.\n     *\n     * @private\n     */\n    Rect.prototype.unitePoint = function (point) {\n        if (this.x === Number.MAX_VALUE) {\n            this.x = point.x;\n            this.y = point.y;\n            return;\n        }\n        var x = Math.min(this.left, point.x);\n        var y = Math.min(this.top, point.y);\n        var right = Math.max(this.right, point.x);\n        var bottom = Math.max(this.bottom, point.y);\n        this.x = x;\n        this.y = y;\n        this.width = right - this.x;\n        this.height = bottom - this.y;\n    };\n    // public intersection(rect: Rect): Rect {\n    //     if (this.intersects(rect)) {\n    //         let left: number = Math.max(this.left, rect.left);\n    //         let top: number = Math.max(this.top, rect.top);\n    //         let right: number = Math.min(this.right, rect.right);\n    //         let bottom: number = Math.min(this.bottom, rect.bottom);\n    //         return new Rect(left, top, right - left, bottom - top);\n    //     }\n    //     return Rect.empty;\n    // }\n    /**\n     * Inflate method \\\n     *\n     * @returns { Rect } Inflate method .\\\n     * @param {number} padding - provide the points value.\n     *\n     * @private\n     */\n    Rect.prototype.Inflate = function (padding) {\n        this.x -= padding;\n        this.y -= padding;\n        this.width += padding * 2;\n        this.height += padding * 2;\n        return this;\n    };\n    //public Inflate(size: Size): Rect {\n    //    this.x -= size.Width;\n    //    this.y -= size.Height;\n    //    this.width += size.Width * 2;\n    //    this.height += size.Height * 2;\n    //    return this;\n    //}\n    // public inflate(width: number, height: number): void {\n    //     this.x -= width;\n    //     this.y -= height;\n    //     this.width += width * 2;\n    //     this.height += height * 2;\n    // }\n    /**\n     * intersects method \\\n     *\n     * @returns { boolean } intersects method .\\\n     * @param {Rect} rect - provide the points value.\n     *\n     * @private\n     */\n    Rect.prototype.intersects = function (rect) {\n        if (this.right < rect.left || this.left > rect.right || this.top > rect.bottom || this.bottom < rect.top) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * containsRect method \\\n     *\n     * @returns { boolean } containsRect method .\\\n     * @param {Rect} rect - provide the points value.\n     *\n     * @private\n     */\n    Rect.prototype.containsRect = function (rect) {\n        return this.left <= rect.left && this.right >= rect.right && this.top <= rect.top && this.bottom >= rect.bottom;\n    };\n    /**\n     * containsPoint method \\\n     *\n     * @returns { boolean } containsPoint method .\\\n     * @param {PointModel} point - provide the points value.\n     * @param {number} padding - provide the padding value.\n     *\n     * @private\n     */\n    Rect.prototype.containsPoint = function (point, padding) {\n        if (padding === void 0) { padding = 0; }\n        return this.left - padding <= point.x && this.right + padding >= point.x\n            && this.top - padding <= point.y && this.bottom + padding >= point.y;\n    };\n    // public toPoints(): PointModel[] {\n    //     let points: PointModel[] = [];\n    //     points.push(this.topLeft);\n    //     points.push(this.topRight);\n    //     points.push(this.bottomLeft);\n    //     points.push(this.bottomRight);\n    //     return points;\n    // }\n    /**\n     * toBounds method \\\n     *\n     * @returns { Rect } toBounds method .\\\n     * @param {PointModel[]} points - provide the points value.\n     *\n     * @private\n     */\n    Rect.toBounds = function (points) {\n        var rect = new Rect();\n        for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n            var pt = points_1[_i];\n            rect.unitePoint(pt);\n        }\n        return rect;\n    };\n    /**   @private  */\n    Rect.empty = new Rect(Number.MAX_VALUE, Number.MIN_VALUE, 0, 0);\n    return Rect;\n}());\nexport { Rect };\n"]},"metadata":{},"sourceType":"module"}