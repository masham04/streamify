{"ast":null,"code":"/* eslint-disable jsdoc/require-returns */\n\n/* eslint-disable jsdoc/require-param */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable no-case-declarations */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { Point } from '../primitives/point';\nimport { Container } from '../core/containers/container';\nimport { Connector } from '../objects/connector';\nimport { NodeDrawingTool, ConnectorDrawingTool, TextDrawingTool } from './tool';\nimport { PolygonDrawingTool, PolyLineDrawingTool, FixedUserHandleTool } from './tool';\nimport { Native, Node } from '../objects/node';\nimport { SelectTool, MoveTool, ResizeTool, RotateTool, ConnectTool, ExpandTool, LabelTool, ZoomPanTool } from './tool';\nimport { LabelDragTool, LabelResizeTool, LabelRotateTool } from './tool';\nimport { ConnectorEditing } from './connector-editing';\nimport { Selector } from '../objects/node';\nimport { findToolToActivate, isSelected, getCursor, contains } from './actions';\nimport { DiagramAction, KeyModifiers, Keys, DiagramEvent, DiagramTools, RendererAction, DiagramConstraints } from '../enum/enum';\nimport { BlazorAction, ScrollActions } from '../enum/enum';\nimport { isPointOverConnector, findObjectType, insertObject, getObjectFromCollection, findParentInSwimlane } from '../utility/diagram-util';\nimport { getObjectType, getInOutConnectPorts, removeChildNodes, cloneBlazorObject, checkPort } from '../utility/diagram-util';\nimport { canZoomPan, canDraw, canDrag, canZoomTextEdit, canVitualize, canPreventClearSelection } from './../utility/constraints-util';\nimport { selectionHasConnector } from '../utility/diagram-util';\nimport { canMove, canEnablePointerEvents, canSelect, canEnableToolTip } from './../utility/constraints-util';\nimport { canOutConnect, canInConnect, canPortInConnect, canPortOutConnect, canAllowDrop, canUserInteract, defaultTool } from './../utility/constraints-util';\nimport { updateTooltip } from '../objects/tooltip';\nimport { PortVisibility, NodeConstraints, ConnectorConstraints, RealAction } from '../enum/enum';\nimport { addTouchPointer, measureHtmlText, getAdornerLayerSvg } from '../utility/dom-util';\nimport { TextElement } from '../core/elements/text-element';\nimport { Size } from '../primitives/size';\nimport { cloneObject as clone, cloneObject } from './../utility/base-util';\nimport { Rect } from '../primitives/rect';\nimport { identityMatrix, rotateMatrix, transformPointByMatrix } from './../primitives/matrix';\nimport { removeRulerMarkers, drawRulerMarkers, getRulerSize, updateRuler } from '../ruler/ruler';\nimport { canContinuousDraw, canDrawOnce } from '../utility/constraints-util';\nimport { getFunction, cornersPointsBeforeRotation } from '../utility/base-util';\nimport { updateCanvasBounds, checkChildNodeInContainer, checkParentAsContainer, removeChildInContainer } from './container-interaction';\nimport { moveChildInStack, renderStackHighlighter } from './container-interaction';\nimport { updateSwimLaneObject } from '../utility/swim-lane-util';\nimport { getConnectors, updateHeaderMaxWidth, laneInterChanged, updateConnectorsProperties } from '../utility/swim-lane-util';\nimport { DiagramHtmlElement } from '../core/elements/html-element';\nimport { randomId } from '../index';\nimport { isBlazor } from '@syncfusion/ej2-base';\n/**\n * This module handles the mouse and touch events\n */\n\nvar DiagramEventHandler =\n/** @class */\nfunction () {\n  /** @private */\n  function DiagramEventHandler(diagram, commandHandler) {\n    this.currentAction = 'None';\n    this.previousAction = 'None';\n    /**   @private  */\n\n    this.focus = false;\n    this.isBlocked = false;\n    this.isMouseDown = false;\n    this.inAction = false;\n    this.doingAutoScroll = false;\n    this.diagram = null;\n    this.objectFinder = null;\n    this.tool = null;\n    this.eventArgs = null;\n    this.keyArgs = {};\n    this.diagram = diagram;\n    this.objectFinder = new ObjectFinder();\n    this.commandHandler = commandHandler;\n  }\n\n  Object.defineProperty(DiagramEventHandler.prototype, \"action\", {\n    get: function () {\n      return this.currentAction;\n    },\n    set: function (action) {\n      if (action !== this.currentAction) {\n        if (this.currentAction === 'PortDraw') {\n          this.diagram.tool &= ~DiagramTools.DrawOnce;\n\n          if (this.tool) {\n            this.tool.mouseUp({\n              position: this.currentPosition\n            });\n          }\n\n          this.tool = null;\n        }\n\n        if (action === 'Rotate' || action === 'LabelRotate') {\n          this.diagram.diagramCanvas.classList.add('e-diagram-rotate');\n        } else if (this.currentAction === 'Rotate' || this.currentAction === 'LabelRotate') {\n          this.diagram.diagramCanvas.classList.remove('e-diagram-rotate');\n        }\n\n        this.currentAction = action;\n\n        if (this.currentAction !== 'None' && this.currentAction !== 'Select' && !(this.diagram.diagramActions & DiagramAction.TextEdit) || this.commandHandler.isUserHandle(this.currentPosition)) {\n          this.diagram.diagramActions = this.diagram.diagramActions | DiagramAction.ToolAction;\n        } else {\n          this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.ToolAction;\n        }\n\n        this.diagram.setCursor(this.diagram.getCursor(action, this.inAction));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DiagramEventHandler.prototype, \"blocked\", {\n    get: function () {\n      return this.isBlocked;\n    },\n    set: function (blocked) {\n      this.isBlocked = blocked;\n\n      if (this.blocked) {\n        this.diagram.setCursor('not-allowed');\n      } else {\n        this.diagram.setCursor(this.diagram.getCursor(this.action, this.inAction));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @private */\n\n  DiagramEventHandler.prototype.getMousePosition = function (e) {\n    var touchArg;\n    var offsetX;\n    var offsetY;\n\n    if (e.type.indexOf('touch') !== -1) {\n      touchArg = e;\n      offsetX = touchArg.changedTouches[0].clientX;\n      offsetY = touchArg.changedTouches[0].clientY;\n    } else {\n      offsetX = e.clientX;\n      offsetY = e.clientY;\n    }\n\n    var position = new Size();\n    position = getRulerSize(this.diagram);\n    var boundingRect = this.diagram.element.getBoundingClientRect();\n    offsetX = offsetX + this.diagram.diagramCanvas.scrollLeft - boundingRect.left - position.width;\n    offsetY = offsetY + this.diagram.diagramCanvas.scrollTop - boundingRect.top - position.height;\n    offsetX /= this.diagram.scroller.transform.scale;\n    offsetY /= this.diagram.scroller.transform.scale;\n    offsetX -= this.diagram.scroller.transform.tx;\n    offsetY -= this.diagram.scroller.transform.ty;\n    return {\n      x: offsetX,\n      y: offsetY\n    };\n  };\n  /**\n   * @private\n   */\n\n\n  DiagramEventHandler.prototype.windowResize = function (evt) {\n    var _this = this;\n\n    if (this.resizeTo) {\n      clearTimeout(this.resizeTo);\n    }\n\n    this.resizeTo = setTimeout(function () {\n      _this.updateViewPortSize(_this.diagram.element);\n    }, 300);\n    return false;\n  };\n  /**\n   * @private\n   */\n\n\n  DiagramEventHandler.prototype.updateViewPortSize = function (element) {\n    var container = document.getElementById(element.id);\n\n    if (container) {\n      var bounds = container.getBoundingClientRect();\n      this.diagram.scroller.setViewPortSize(bounds.width, bounds.height);\n      var position = new Size();\n      position = getRulerSize(this.diagram);\n      var width = this.diagram.getSizeValue(this.diagram.width, position.width);\n      var height = this.diagram.getSizeValue(this.diagram.height, position.height);\n      this.diagram.diagramCanvas.style.width = width;\n      this.diagram.diagramCanvas.style.height = height;\n      this.diagram.scroller.setSize();\n      this.diagram.transformLayers();\n\n      if (this.diagram.rulerSettings.showRulers) {\n        updateRuler(this.diagram);\n      }\n    }\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.canHideResizers = function () {\n    return (this.tool instanceof MoveTool || this.tool instanceof RotateTool) && this.isMouseDown;\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.updateCursor = function () {\n    if (this.diagram.selectedItems.nodes.length === 1 || this.diagram.selectedItems.connectors.length === 1) {\n      var list = [];\n      list = list.concat(this.diagram.selectedItems.nodes, this.diagram.selectedItems.connectors); // Bug fix - EJ2-44495 -Node does not gets selected on slight movement of mouse when drag constraints disabled for node\n\n      this.blocked = this.eventArgs && this.eventArgs.source && !canMove(this.eventArgs.source) ? false : this.isMouseDown && list.length === 1 && this.tool instanceof SelectTool && !canMove(list[0]);\n    }\n  };\n\n  DiagramEventHandler.prototype.isForeignObject = function (target, isTextBox) {\n    var foreignobject = target;\n\n    if (foreignobject) {\n      while (foreignobject.parentNode !== null) {\n        if (typeof foreignobject.className === 'string' && (!isTextBox && foreignobject.className.indexOf('foreign-object') !== -1 || isTextBox && foreignobject.className.indexOf('e-diagram-text-edit') !== -1)) {\n          return foreignobject;\n        } else {\n          foreignobject = foreignobject.parentNode;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  DiagramEventHandler.prototype.isMetaKey = function (evt) {\n    //EJ2-55887 - added the beow code to perform pinch zoom in mac os and windows while pinch zoom all browser return ctrl key as true.\n    //return navigator.platform.match('Mac') ? evt.metaKey : evt.ctrlKey;\n    return evt.ctrlKey;\n  };\n\n  DiagramEventHandler.prototype.renderUmlHighLighter = function (args) {\n    this.diagram.commandHandler.removeStackHighlighter();\n    var node = this.diagram.selectedItems.nodes[0];\n\n    if (node && node.container && node.container.type === 'Stack' && node.shape.type === 'UmlClassifier') {\n      var bound = node.wrapper.bounds;\n\n      if (!bound.containsPoint(this.currentPosition)) {\n        // eslint-disable-next-line max-len\n        var objects = this.diagram.findObjectsUnderMouse({\n          x: this.currentPosition.x - 20,\n          y: this.currentPosition.y\n        });\n        var target = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n\n        if (target && target.parentId && target.parentId === node.id) {\n          // eslint-disable-next-line max-len\n          var isVertical = this.diagram.nameTable[target.parentId].container.orientation === 'Vertical';\n          renderStackHighlighter(target.wrapper, isVertical, args.position, this.diagram, true);\n        }\n      }\n    }\n  };\n\n  DiagramEventHandler.prototype.isDeleteKey = function (key, value) {\n    return navigator.platform.match('Mac') && key === 'Backspace' && value === 'delete';\n  };\n\n  DiagramEventHandler.prototype.isMouseOnScrollBar = function (evt) {\n    var x = evt.offsetX;\n    var y = evt.offsetY;\n    var diagramCanvas = this.diagram.diagramCanvas;\n    var height = diagramCanvas.offsetHeight;\n    var width = diagramCanvas.offsetWidth;\n    var topLeft;\n    var topRight;\n    var bottomLeft;\n    var bottomRight;\n    var bounds;\n\n    if (height < diagramCanvas.scrollHeight) {\n      //default scrollbar width in browser is '17pixels'.\n      topLeft = {\n        x: width - 17,\n        y: 0\n      };\n      topRight = {\n        x: width,\n        y: 0\n      };\n      bottomLeft = {\n        x: width - 17,\n        y: height\n      };\n      bottomRight = {\n        x: width,\n        y: height\n      };\n      bounds = Rect.toBounds([topLeft, topRight, bottomLeft, bottomRight]);\n\n      if (bounds.containsPoint({\n        x: x,\n        y: y\n      })) {\n        return true;\n      }\n    }\n\n    if (width < diagramCanvas.scrollWidth) {\n      topLeft = {\n        x: 0,\n        y: height - 17\n      };\n      topRight = {\n        x: width,\n        y: height - 17\n      };\n      bottomLeft = {\n        x: 0,\n        y: height\n      };\n      bottomRight = {\n        x: width,\n        y: height\n      };\n      bounds = Rect.toBounds([topLeft, topRight, bottomLeft, bottomRight]);\n\n      if (bounds.containsPoint({\n        x: x,\n        y: y\n      })) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**   @private  */\n\n\n  DiagramEventHandler.prototype.updateVirtualization = function () {\n    var _this = this;\n\n    var delay = 50; //let removeObjectInterval: Object;\n\n    var removeObjectInterval = setInterval(function (args) {\n      _this.diagram.removeVirtualObjects(removeObjectInterval);\n    }, delay);\n    setTimeout(function () {\n      _this.diagram.deleteVirtualObject = true;\n    }, delay);\n  };\n\n  DiagramEventHandler.prototype.checkPreviousAction = function () {\n    if (this.action !== this.previousAction && this.diagram.selectedItems.userHandles.length) {\n      for (var i = 0; i < this.diagram.selectedItems.userHandles.length; i++) {\n        if (this.previousAction && this.diagram.selectedItems.userHandles[i]) {\n          this.checkUserHandleEvent(DiagramEvent.onUserHandleMouseLeave);\n          this.previousAction = 'None';\n        }\n      }\n    }\n  };\n\n  DiagramEventHandler.prototype.checkUserHandleEvent = function (eventName) {\n    if (this.diagram.selectedItems && this.diagram.selectedItems.userHandles.length > 0) {\n      var currentAction = eventName === DiagramEvent.onUserHandleMouseLeave ? this.previousAction : this.action;\n      var arg = {\n        element: undefined\n      };\n\n      for (var i = 0; i < this.diagram.selectedItems.userHandles.length; i++) {\n        if (currentAction === this.diagram.selectedItems.userHandles[i].name || eventName === DiagramEvent.onUserHandleMouseUp && currentAction === 'Select') {\n          arg.element = this.diagram.selectedItems.userHandles[i];\n\n          if (eventName === DiagramEvent.onUserHandleMouseEnter) {\n            this.previousAction = this.action;\n          }\n\n          if (eventName === DiagramEvent.onUserHandleMouseDown) {\n            this.userHandleObject = this.diagram.selectedItems.userHandles[i].name;\n          }\n\n          var element = document.getElementById(this.diagram.selectedItems.userHandles[i].name + '_userhandle');\n\n          if (eventName === DiagramEvent.onUserHandleMouseUp) {\n            if (this.commandHandler.isUserHandle(this.currentPosition) && element && element.id === this.userHandleObject + '_userhandle') {\n              this.diagram.triggerEvent(eventName, arg);\n            }\n          } else {\n            this.diagram.triggerEvent(eventName, arg);\n          }\n        }\n      }\n    }\n  };\n\n  DiagramEventHandler.prototype.mouseDown = function (evt) {\n    if (this.inAction === true && this.tool instanceof NodeDrawingTool) {\n      return;\n    }\n\n    this.focus = true; //let touches: TouchList;\n\n    var touches = evt.touches;\n    var isSymblDragging = document.getElementsByClassName('e-dragclone')[0] ? true : false;\n\n    if (this.isMouseOnScrollBar(evt) && !isSymblDragging) {\n      this.isScrolling = true;\n      evt.preventDefault();\n      return;\n    } // commanded by gowtham- unwanted cloning of selectedItems\n    // if (isBlazor()) {\n    //     this.commandHandler.oldSelectedObjects = cloneObject(this.diagram.selectedItems);\n    // }\n\n\n    this.checkUserHandleEvent(DiagramEvent.onUserHandleMouseDown);\n\n    if (!this.checkEditBoxAsTarget(evt) && canUserInteract(this.diagram) || canZoomPan(this.diagram) && !defaultTool(this.diagram)) {\n      if (this.action === 'Select' || this.action === 'Drag') {\n        this.diagram.updatePortVisibility(this.hoverElement, PortVisibility.Hover, true);\n      }\n\n      if ((this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool) && (evt.button === 2 || evt.buttons === 2)) {\n        // eslint-disable-next-line\n        var arg = {\n          element: cloneBlazorObject(this.diagram),\n          position: cloneBlazorObject(this.currentPosition),\n          count: evt.buttons,\n          actualObject: cloneBlazorObject(this.eventArgs.actualObject),\n          button: evt.button === 0 ? 'Left' : evt.button === 1 ? 'Middle' : 'Right'\n        };\n        this.inAction = false;\n        this.tool.mouseUp(this.eventArgs);\n      } else if (this.inAction === true && this.isMouseDown === true && (this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool)) {\n        this.isMouseDown = true;\n        this.eventArgs = {};\n        this.getMouseEventArgs(this.currentPosition, this.eventArgs);\n        this.eventArgs.position = this.currentPosition;\n        this.tool.mouseDown(this.eventArgs);\n      } else {\n        this.isMouseDown = true;\n        this.currentPosition = this.prevPosition = this.getMousePosition(evt);\n        this.eventArgs = {};\n\n        if (this.diagram.textEditing && !this.isMouseOnScrollBar(evt)) {\n          this.diagram.endEdit();\n          this.diagram.textEditing = false;\n        }\n\n        var target = void 0;\n        var objects = this.objectFinder.findObjectsUnderMouse(this.currentPosition, this.diagram, this.eventArgs, null, this.action);\n        var obj = this.objectFinder.findObjectUnderMouse(this.diagram, objects, this.action, this.inAction, this.eventArgs, this.currentPosition);\n        var sourceElement = null;\n\n        if (obj !== null) {\n          sourceElement = this.diagram.findElementUnderMouse(obj, this.currentPosition);\n\n          if (sourceElement) {\n            target = this.commandHandler.findTarget(sourceElement, obj);\n          }\n        }\n\n        this.action = this.diagram.findActionToBeDone(obj, sourceElement, this.currentPosition, target); //work around - correct it\n\n        var ctrlKey = this.isMetaKey(evt);\n\n        if (ctrlKey && evt.shiftKey && this.diagram.connectorEditingToolModule) {\n          this.action = 'SegmentEnd';\n        } else if ((ctrlKey || evt.shiftKey) && !canZoomPan(this.diagram)) {\n          this.action = 'Select';\n        }\n\n        this.tool = this.diagram.getTool(this.action);\n\n        if (!this.tool) {\n          this.action = 'Select';\n          this.tool = this.diagram.getTool(this.action);\n        }\n\n        this.getMouseEventArgs(this.currentPosition, this.eventArgs);\n\n        if (ctrlKey || evt.shiftKey) {\n          var info = ctrlKey && evt.shiftKey ? {\n            ctrlKey: ctrlKey,\n            shiftKey: evt.shiftKey\n          } : {\n            ctrlKey: true\n          };\n          this.eventArgs.info = info;\n        }\n\n        this.eventArgs.position = this.currentPosition;\n        this.tool.mouseDown(this.eventArgs);\n        this.initialEventArgs = {\n          source: this.eventArgs.source,\n          sourceWrapper: this.eventArgs.sourceWrapper\n        };\n        this.initialEventArgs.position = this.currentPosition;\n        this.initialEventArgs.info = this.eventArgs.info;\n        this.inAction = false;\n\n        if (evt.type === 'touchstart') {\n          if (touches && touches.length >= 2) {\n            this.touchStartList = addTouchPointer(this.touchStartList, evt, touches);\n          }\n\n          if (!touches) {\n            evt.preventDefault();\n          }\n        }\n      }\n    }\n\n    if (!this.isForeignObject(evt.target) && !this.isForeignObject(evt.target, true) && !touches) {\n      evt.preventDefault();\n    }\n  };\n  /**   @private  */\n\n\n  DiagramEventHandler.prototype.mouseMoveExtend = function (e, obj) {\n    if (this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool) {\n      this.tool.mouseMove(this.eventArgs);\n    }\n\n    if (this.diagram.scrollSettings.canAutoScroll) {\n      this.checkAutoScroll(e);\n    } else {\n      if (!this.blocked) {\n        this.tool.mouseMove(this.eventArgs);\n      }\n    }\n\n    if (this.eventArgs.target) {\n      this.hoverElement = this.eventArgs.target;\n    }\n\n    var isNode = this.eventArgs.target instanceof Node && obj instanceof Node ? false : true;\n\n    if (this.tool instanceof ConnectTool) {\n      this.diagram.updatePortVisibility(this.hoverElement instanceof Node ? this.hoverElement : this.hoverNode, PortVisibility.Connect | PortVisibility.Hover, isNode);\n    }\n\n    if (this.hoverElement instanceof Node && this.hoverNode instanceof Node && this.hoverNode && this.hoverNode.id !== this.hoverElement.id) {\n      this.diagram.updatePortVisibility(this.hoverNode, PortVisibility.Connect | PortVisibility.Hover, true);\n    }\n\n    this.hoverElement = isNode ? null : obj;\n    this.hoverNode = isNode ? null : obj;\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.checkAction = function (obj) {\n    if (this.action === 'LabelSelect' && this.eventArgs.sourceWrapper && (this.eventArgs.sourceWrapper instanceof TextElement || this.eventArgs.sourceWrapper instanceof DiagramHtmlElement)) {\n      var annotation = this.commandHandler.findTarget(this.eventArgs.sourceWrapper, this.eventArgs.source);\n\n      if (!isSelected(this.diagram, annotation, false, this.eventArgs.sourceWrapper) && canMove(annotation)) {\n        this.action = 'LabelDrag';\n        this.tool = this.getTool(this.action);\n        this.tool.mouseDown(this.initialEventArgs);\n      }\n    } else if (canMove(obj) && canSelect(obj) && this.initialEventArgs && this.initialEventArgs.source && this.action === 'Select') {\n      if (!isSelected(this.diagram, this.eventArgs.source, false) && this.eventArgs.source instanceof Selector) {\n        this.getMouseEventArgs(this.currentPosition, this.eventArgs);\n      }\n\n      if (!(obj instanceof Connector) || obj instanceof Connector && !(contains(this.currentPosition, obj.sourcePoint, obj.hitPadding) || contains(this.currentPosition, obj.targetPoint, obj.hitPadding))) {\n        this.action = 'Drag';\n      }\n\n      this.tool = this.getTool(this.action);\n      this.tool.mouseDown(this.initialEventArgs);\n    }\n  };\n\n  DiagramEventHandler.prototype.isSwimlaneElements = function (obj) {\n    if (obj && (obj.isLane || obj.isPhase || obj.isHeader)) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /* tslint:disable */\n\n  /** @private */\n\n\n  DiagramEventHandler.prototype.mouseMove = function (e, touches) {\n    this.focus = true;\n\n    if (this.isScrolling) {\n      e.preventDefault();\n      return;\n    }\n\n    if (canUserInteract(this.diagram) || canZoomPan(this.diagram) && !defaultTool(this.diagram)) {\n      this.currentPosition = this.getMousePosition(e);\n      var objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n      var obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n      drawRulerMarkers(this.diagram, this.currentPosition);\n      var force = false;\n      var target = void 0;\n\n      if (e.type === 'touchmove') {\n        touches = e.touches;\n\n        if (touches && touches.length > 1) {\n          this.touchMoveList = addTouchPointer(this.touchMoveList, e, touches);\n\n          if (this.action !== 'PinchZoom') {\n            force = true;\n          }\n        }\n      }\n\n      if (Point.equals(this.currentPosition, this.prevPosition) === false || this.inAction) {\n        if (this.isMouseDown === false || force) {\n          this.eventArgs = {};\n          var sourceElement = null;\n\n          if (obj !== null) {\n            sourceElement = this.diagram.findElementUnderMouse(obj, this.currentPosition);\n\n            if (obj !== this.hoverElement) {\n              var content_1 = this.getContent();\n\n              if (this.hoverElement && this.hoverElement.tooltip.openOn === 'Auto' && content_1 !== '') {\n                this.elementLeave();\n              }\n\n              this.diagram.updatePortVisibility(this.hoverElement, PortVisibility.Hover, true);\n\n              if (obj instanceof Node) {\n                this.hoverNode = obj;\n              }\n\n              var canResetElement = true;\n\n              if (!this.isSwimlaneElements(obj) && this.hoverElement && this.isSwimlaneElements(this.hoverElement)) {\n                canResetElement = false;\n              }\n\n              this.hoverElement = canResetElement ? obj : this.hoverElement;\n\n              if (canResetElement) {\n                this.elementEnter(this.currentPosition, false);\n              } else {\n                this.hoverElement = obj;\n              }\n            } else if (!this.hoverElement && this.hoverElement === obj) {\n              this.elementEnter(this.currentPosition, true);\n            }\n\n            if (sourceElement) {\n              target = this.commandHandler.findTarget(sourceElement, obj);\n            }\n          }\n\n          this.action = this.diagram.findActionToBeDone(obj, sourceElement, this.currentPosition, target);\n          this.checkUserHandleEvent(DiagramEvent.onUserHandleMouseEnter);\n          this.checkPreviousAction();\n          this.getMouseEventArgs(this.currentPosition, this.eventArgs);\n          this.tool = this.getTool(this.action);\n          this.mouseEvents();\n\n          if (this.tool instanceof ConnectorDrawingTool || this.tool instanceof PolyLineDrawingTool || this.tool instanceof PolygonDrawingTool) {\n            this.tool.mouseMove(this.eventArgs);\n          } else if (touches && this.tool instanceof ZoomPanTool) {\n            this.tool.mouseDown(this.eventArgs);\n          }\n\n          this.updateCursor();\n          this.renderUmlHighLighter(this.eventArgs);\n          var isNode = false;\n\n          if (!(this.hoverElement && !(this.tool instanceof ZoomPanTool) && obj instanceof Node && this.isSwimlaneElements(obj) && (this.diagram.selectedItems.nodes.length === 0 || !isSelected(this.diagram, this.hoverElement)))) {\n            isNode = true;\n          }\n\n          this.diagram.updatePortVisibility(this.hoverElement, PortVisibility.Hover, isNode);\n          var content = this.getContent();\n\n          if (obj === null && this.hoverElement && this.hoverElement.tooltip.openOn === 'Auto' && content) {\n            this.hoverElement = null;\n            this.elementLeave();\n          }\n\n          force = false;\n        } else {\n          this.eventArgs.position = this.currentPosition;\n\n          if (this.action === 'Drag' && !isSelected(this.diagram, this.eventArgs.source, false) && this.eventArgs.source instanceof Selector) {\n            this.getMouseEventArgs(this.currentPosition, this.eventArgs);\n          }\n\n          this.mouseEvents();\n\n          if (e.ctrlKey || e.shiftKey) {\n            var info = e.ctrlKey && e.shiftKey ? {\n              ctrlKey: e.ctrlKey,\n              shiftKey: e.shiftKey\n            } : {\n              ctrlKey: true\n            };\n            this.eventArgs.info = info;\n          }\n\n          this.checkAction(obj);\n          var padding = this.getConnectorPadding(this.eventArgs);\n          this.getMouseEventArgs(this.currentPosition, this.eventArgs, this.eventArgs.source, padding);\n          this.updateCursor();\n          this.inAction = true;\n          this.initialEventArgs = null;\n\n          if (this.action === 'Drag' || this.action === 'Rotate') {\n            this.diagram.diagramActions = this.diagram.diagramActions | DiagramAction.Interactions;\n          }\n\n          this.mouseMoveExtend(e, obj);\n        }\n\n        this.prevPosition = this.currentPosition;\n\n        if (!this.isForeignObject(e.target, true)) {\n          e.preventDefault();\n        }\n      }\n    }\n  };\n  /* tslint:enable */\n\n\n  DiagramEventHandler.prototype.getContent = function () {\n    var isPrivateTooltip = this.hoverElement instanceof Node && this.hoverElement.constraints & NodeConstraints.Tooltip || this.hoverElement instanceof Connector && this.hoverElement.constraints & ConnectorConstraints.Tooltip;\n    var content = isPrivateTooltip ? this.hoverElement.tooltip.content : this.diagram.tooltip.content;\n    return content;\n  };\n\n  DiagramEventHandler.prototype.checkAutoScroll = function (e) {\n    var autoScrollPosition = this.startAutoScroll(e);\n\n    if (!autoScrollPosition && this.doingAutoScroll) {\n      this.doingAutoScroll = false;\n      clearInterval(this.timeOutValue);\n    } else if (autoScrollPosition) {\n      if ((this.tool instanceof NodeDrawingTool || this.tool instanceof ConnectorDrawingTool || this.tool instanceof MoveTool || this.tool instanceof ResizeTool || this.tool instanceof SelectTool) && this.inAction) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var diagram_1 = this;\n        var delay_1 = 100;\n\n        if (this.diagram.scrollSettings.canAutoScroll && autoScrollPosition && !this.doingAutoScroll) {\n          this.doingAutoScroll = true;\n          this.timeOutValue = setInterval(function (args) {\n            diagram_1.doAutoScroll(autoScrollPosition, e, delay_1);\n          }, delay_1);\n        }\n      }\n    } else {\n      this.blocked = !this.tool.mouseMove(this.eventArgs);\n    }\n  };\n  /* tslint:disable */\n\n  /** @private */\n\n\n  DiagramEventHandler.prototype.mouseUp = function (evt) {\n    this.checkUserHandleEvent(DiagramEvent.onUserHandleMouseUp);\n\n    if (this.diagram.mode === 'SVG' && canVitualize(this.diagram)) {\n      this.updateVirtualization();\n    }\n\n    this.diagram.previousSelectedObject = null;\n    this.diagram.diagramRenderer.rendererActions = this.diagram.removeConstraints(this.diagram.diagramRenderer.rendererActions, RendererAction.DrawSelectorBorder);\n    var touches = evt.touches;\n\n    if (this.isScrolling) {\n      this.isScrolling = false;\n      evt.preventDefault();\n      return;\n    }\n\n    if (!this.checkEditBoxAsTarget(evt) && canUserInteract(this.diagram) || canZoomPan(this.diagram) && !defaultTool(this.diagram)) {\n      if (this.tool && (!(this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool) || (this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool) && evt.detail === 2)) {\n        if (!this.isForeignObject(evt.target) && this.isMouseDown) {\n          document.getElementById(this.diagram.element.id + 'content').focus();\n        }\n\n        if (!this.inAction && evt.which !== 3) {\n          if (this.action === 'Drag') {\n            this.action = 'Select';\n            var oldSelectedValue = this.diagram.selectedItems.nodes.concat(this.diagram.selectedItems.connectors);\n            var objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n            var obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n            var isMultipleSelect = true;\n\n            if (!evt.ctrlKey && this.isMouseDown && this.diagram.selectedItems.nodes.length + this.diagram.selectedItems.connectors.length > 1 && evt.which === 1 && !canPreventClearSelection(this.diagram.diagramActions)) {\n              isMultipleSelect = false;\n              this.commandHandler.clearSelection();\n            }\n\n            if (!isSelected(this.diagram, obj) || !isMultipleSelect) {\n              this.commandHandler.selectObjects([obj], undefined, oldSelectedValue);\n            }\n          }\n        }\n\n        var avoidDropChildren = false;\n        var history_1 = this.updateContainerProperties();\n        var isGroupAction = void 0;\n        this.addUmlNode();\n        this.inAction = false;\n        this.isMouseDown = false;\n        this.currentPosition = this.getMousePosition(evt);\n\n        if (this.diagram.selectedObject.helperObject) {\n          isGroupAction = this.updateContainerBounds();\n        }\n\n        if (this.tool && (this.tool.prevPosition || this.tool instanceof LabelTool)) {\n          this.eventArgs.position = this.currentPosition;\n          var padding = this.getConnectorPadding(this.eventArgs);\n          this.getMouseEventArgs(this.currentPosition, this.eventArgs, this.eventArgs.source, padding);\n          var ctrlKey = this.isMetaKey(evt);\n\n          if (ctrlKey || evt.shiftKey) {\n            var info = ctrlKey && evt.shiftKey ? {\n              ctrlKey: ctrlKey,\n              shiftKey: evt.shiftKey\n            } : {\n              ctrlKey: true\n            };\n            this.eventArgs.info = info;\n          }\n\n          if (this.diagram.diagramActions & DiagramAction.Interactions) {\n            this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.Interactions;\n          }\n\n          this.eventArgs.clickCount = evt.detail;\n\n          if (this.diagram.selectedObject.helperObject && (this.tool instanceof MoveTool || this.tool instanceof ResizeTool)) {\n            if (this.diagram.selectedObject.actualObject && this.diagram.selectedObject.actualObject.parentId !== '') {\n              var parentNode = this.diagram.getObject(this.diagram.selectedObject.actualObject.parentId);\n\n              if (parentNode && parentNode.isLane) {\n                this.commandHandler.isContainer = true;\n              }\n            }\n\n            avoidDropChildren = this.diagram.lineRoutingModule && this.diagram.nameTable[\"helper\"] && this.eventArgs.target && this.eventArgs.target.isLane && (this.eventArgs.source instanceof Selector && this.eventArgs.source.nodes.length > 0 && this.eventArgs.source.nodes[0].parentId === \"\" || this.eventArgs.source.parentId === \"\");\n\n            if (avoidDropChildren) {\n              this.diagram.diagramActions = this.diagram.diagramActions | DiagramAction.PreventLaneContainerUpdate;\n            }\n\n            this.tool.mouseUp(this.eventArgs, history_1.isPreventHistory);\n          } else {\n            this.tool.mouseUp(this.eventArgs);\n\n            if (this.diagram.checkMenu && (window.navigator.userAgent.indexOf('Linux') !== -1 || window.navigator.userAgent.indexOf('X11') !== -1)) {\n              if (!evt.pageY && evt instanceof TouchEvent && evt.changedTouches) {\n                window.getSelection().removeAllRanges();\n                this.diagram.contextMenuModule.contextMenu.open(evt.changedTouches[0].pageY, evt.changedTouches[0].pageX, this.diagram.element);\n                evt.preventDefault();\n              } else {\n                this.diagram.contextMenuModule.contextMenu.open(evt.pageY, evt.pageX, this.diagram.element);\n              }\n\n              this.diagram.checkMenu = false;\n            }\n          }\n\n          if (history_1.hasStack) {\n            this.diagram.endGroupAction();\n          }\n        }\n\n        if (isGroupAction) {\n          this.diagram.endGroupAction();\n        }\n\n        this.updateContainerBounds(true);\n\n        if (this.eventArgs.clickCount !== 2) {\n          this.commandHandler.updateSelectedNodeProperties(this.eventArgs.source);\n\n          if (avoidDropChildren) {\n            this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.PreventLaneContainerUpdate;\n            var nodes = this.eventArgs.source instanceof Selector ? this.eventArgs.source.nodes : [this.eventArgs.source];\n\n            if (nodes) {\n              for (var i = 0; i < nodes.length; i++) {\n                if (!nodes[i].container) {\n                  this.commandHandler.dropChildToContainer(this.eventArgs.target, nodes[i]);\n                  this.commandHandler.renderContainerHelper(nodes[i]);\n                }\n              }\n            }\n          }\n        }\n\n        if (this.diagram.selectedObject && this.diagram.selectedObject.helperObject) {\n          this.diagram.remove(this.diagram.selectedObject.helperObject);\n          this.diagram.selectedObject = {\n            helperObject: undefined,\n            actualObject: undefined\n          }; // EJ2-42605 - Annotation undo redo not working properly if the line routing is enabled committed by sivakumar sekar\n          // committed to remove the diagram actions public method when line routing is enabled\n          // eslint-disable-next-line\n\n          if (this.diagram.diagramActions & DiagramAction.PublicMethod && this.diagram.constraints & DiagramConstraints.LineRouting) {\n            this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.PublicMethod;\n          }\n        }\n\n        this.blocked = false;\n\n        if (this.hoverElement) {\n          var portVisibility = PortVisibility.Connect;\n\n          if (isSelected(this.diagram, this.hoverElement)) {\n            portVisibility |= PortVisibility.Hover;\n          }\n\n          this.diagram.updatePortVisibility(this.hoverElement, portVisibility, true);\n          this.hoverElement = null;\n        }\n\n        this.touchStartList = null;\n        this.touchMoveList = null;\n\n        if (!(this.tool instanceof TextDrawingTool)) {\n          this.tool = null;\n        }\n      }\n\n      if (!touches) {\n        evt.preventDefault();\n      }\n\n      this.diagram.currentDrawingObject = undefined;\n      var selector = this.diagram.selectedItems;\n      var disbleRenderSelector = false;\n\n      if (this.commandHandler.isUserHandle(this.currentPosition)) {\n        if (this.isForeignObject(evt.target)) {\n          disbleRenderSelector = true;\n        }\n      }\n\n      if (!this.inAction && selector.wrapper && selector.userHandles.length > 0 && !disbleRenderSelector) {\n        this.diagram.renderSelector(true);\n      }\n\n      if (!this.inAction && !this.diagram.currentSymbol && this.eventArgs) {\n        var arg = {\n          element: cloneBlazorObject(this.eventArgs.source) || cloneBlazorObject(this.diagram),\n          position: cloneBlazorObject(this.eventArgs.position),\n          count: evt.detail,\n          actualObject: cloneBlazorObject(this.eventArgs.actualObject),\n          button: evt.button === 0 ? 'Left' : evt.button === 1 ? 'Middle' : 'Right'\n        };\n\n        if (isBlazor() && this.diagram.click) {\n          arg = this.getBlazorClickEventArgs(arg);\n        }\n\n        if (this.diagram.tool !== DiagramTools.ZoomPan) {\n          this.diagram.triggerEvent(DiagramEvent.click, arg);\n        }\n      }\n\n      this.eventArgs = {};\n    }\n\n    this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.PreventLaneContainerUpdate;\n    this.eventArgs = {};\n    this.diagram.commandHandler.removeStackHighlighter(); // end the corresponding tool\n  };\n  /* tslint:enable */\n\n\n  DiagramEventHandler.prototype.getConnectorPadding = function (eventArgs) {\n    var padding;\n    var targetObject = eventArgs.source;\n\n    if (targetObject && targetObject instanceof Selector && targetObject.connectors.length) {\n      var selectedConnector = targetObject.connectors[0];\n      padding = selectedConnector.constraints & ConnectorConstraints.ConnectToNearByPort ? selectedConnector.connectionPadding : 0;\n    } else if (targetObject && targetObject instanceof Connector && this.action === 'PortDraw' && this.tool instanceof ConnectorDrawingTool) {\n      if (targetObject.constraints & ConnectorConstraints.ConnectToNearByPort) {\n        padding = targetObject.connectionPadding;\n      }\n    }\n\n    return padding || 0;\n  };\n\n  DiagramEventHandler.prototype.getBlazorClickEventArgs = function (arg) {\n    arg = {\n      element: this.eventArgs.source ? {\n        selector: cloneBlazorObject(this.eventArgs.source)\n      } : {\n        diagram: cloneBlazorObject(this.diagram)\n      },\n      position: cloneBlazorObject(this.eventArgs.position),\n      count: arg.count,\n      actualObject: this.eventArgs.actualObject ? {\n        selector: cloneBlazorObject(this.eventArgs.actualObject)\n      } : {\n        diagram: cloneBlazorObject(this.diagram)\n      },\n      button: arg.button\n    };\n\n    if (this.eventArgs.source instanceof Node) {\n      arg.element.selector.nodes = [];\n      arg.element.selector.nodes.push(cloneBlazorObject(this.eventArgs.source));\n    } else if (this.eventArgs.source instanceof Connector) {\n      arg.element.selector.connectors = [];\n      arg.element.selector.connectors.push(cloneBlazorObject(this.eventArgs.source));\n    }\n\n    return arg;\n  };\n\n  DiagramEventHandler.prototype.addSwimLaneObject = function (selectedNode) {\n    var swimlaneNode;\n    var targetNode;\n    var shape;\n    var value;\n    var canInsert;\n    var index = 0;\n    var offset;\n    var actualShape = selectedNode.shape;\n    var objects = this.objectFinder.findObjectsUnderMouse(this.currentPosition, this.diagram, this.eventArgs, null, this.action);\n\n    if (!targetNode) {\n      targetNode = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n    }\n\n    this.diagram.clearSelectorLayer();\n\n    if (targetNode && !(targetNode.isLane || targetNode.isPhase || targetNode.isHeader)) {\n      for (var i = 0; i < objects.length; i++) {\n        var laneNode = this.diagram.nameTable[objects[i].id];\n\n        if (laneNode.isLane || laneNode.isPhase || laneNode.isHeader) {\n          targetNode = laneNode;\n        }\n      }\n    }\n\n    if (targetNode && (actualShape.isPhase || actualShape.isLane && targetNode.isLane)) {\n      var id = targetNode.parentId;\n      swimlaneNode = this.diagram.nameTable[id];\n    }\n\n    if (swimlaneNode) {\n      shape = swimlaneNode.shape;\n      canInsert = actualShape.isLane ? actualShape.orientation === shape.orientation : actualShape.orientation !== shape.orientation;\n    }\n\n    if (canInsert && targetNode) {\n      if (shape && shape.header && shape.hasHeader && shape.orientation === 'Horizontal') {\n        index = 1;\n      }\n\n      if (shape.phases.length > 0) {\n        index += 1;\n      }\n\n      if (actualShape.isPhase) {\n        if (shape.orientation === 'Horizontal') {\n          offset = this.currentPosition.x - swimlaneNode.wrapper.bounds.x;\n        } else {\n          offset = this.currentPosition.y - (swimlaneNode.wrapper.bounds.y + shape.header.height);\n        }\n\n        var phases = {\n          id: randomId(),\n          offset: offset,\n          header: {\n            annotation: {\n              content: 'Phase'\n            }\n          }\n        };\n        this.diagram.addPhases(swimlaneNode, [phases]);\n      } else {\n        //const laneHeight: number = actualShape.lanes[0].header.height;\n        var lane = {\n          id: randomId(),\n          style: actualShape.lanes[0].style,\n          header: {\n            annotation: {\n              content: actualShape.lanes[0].header.annotation.content,\n              style: actualShape.lanes[0].header.annotation.style\n            },\n            style: actualShape.lanes[0].header.style\n          }\n        };\n        var orientation_1 = actualShape.orientation === 'Horizontal' ? true : false; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n        orientation_1 ? lane.height = actualShape.lanes[0].height : lane.width = actualShape.lanes[0].width;\n\n        if (shape.orientation === 'Horizontal') {\n          value = targetNode.rowIndex ? targetNode.rowIndex : this.diagram.nameTable[targetNode.parentId].rowIndex;\n\n          if (targetNode.wrapper.offsetY < this.currentPosition.y) {\n            value += 1;\n          }\n        } else {\n          value = targetNode.columnIndex ? targetNode.columnIndex : this.diagram.nameTable[targetNode.parentId].columnIndex;\n\n          if (this.currentPosition.x < targetNode.wrapper.bounds.center.x) {\n            value -= 1;\n          }\n        }\n\n        if (shape.lanes.length > value - index) {\n          lane.header.width = shape.lanes[value - index].header.width;\n          lane.header.height = shape.lanes[value - index].header.height;\n        } else {\n          lane.header.width = shape.lanes[value - index - 1].header.width;\n          lane.header.height = shape.lanes[value - index - 1].header.height;\n        }\n\n        this.diagram.addLanes(swimlaneNode, [lane], value - index);\n      }\n\n      this.commandHandler.select(swimlaneNode);\n    } else if (actualShape.isLane) {\n      var swimLaneobj = {\n        id: randomId(),\n        width: selectedNode.width,\n        height: selectedNode.height,\n        addInfo: selectedNode.addInfo,\n        shape: {\n          type: 'SwimLane',\n          header: {\n            annotation: {\n              content: 'Header'\n            },\n            height: 50,\n            style: actualShape.lanes[0].header.style\n          },\n          phases: [{\n            id: randomId(),\n            header: {\n              annotation: {\n                content: 'Phase'\n              }\n            }\n          }],\n          lanes: [{\n            id: randomId(),\n            height: selectedNode.height,\n            width: selectedNode.width,\n            style: actualShape.lanes[0].style,\n            header: {\n              annotation: {\n                content: actualShape.lanes[0].header.annotation.content,\n                style: actualShape.lanes[0].header.annotation.style\n              },\n              style: actualShape.lanes[0].header.style\n            }\n          }],\n          orientation: actualShape.orientation\n        }\n      };\n\n      if (actualShape.orientation === 'Vertical') {\n        swimLaneobj.width += 20;\n      }\n\n      swimLaneobj.offsetX = this.currentPosition.x + swimLaneobj.width / 2;\n      swimLaneobj.offsetY = this.currentPosition.y + swimLaneobj.height / 2;\n      this.diagram.add(swimLaneobj);\n    }\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.mouseLeave = function (evt) {\n    //Define what has to happen on mouse leave\n    if (this.tool && this.inAction) {\n      this.tool.mouseLeave(this.eventArgs);\n    }\n\n    if (this.diagram.selectedObject.helperObject) {\n      this.updateContainerProperties();\n      var isGroupAction = this.updateContainerBounds();\n\n      if (isGroupAction) {\n        this.diagram.endGroupAction();\n      }\n    }\n\n    if (this.eventArgs && this.eventArgs.source) {\n      this.diagram.updatePortVisibility(this.eventArgs.source, PortVisibility.Hover, true);\n      this.hoverElement = null;\n    }\n\n    if (this.eventArgs && !this.eventArgs.source && this.hoverElement) {\n      this.hoverElement = null;\n    }\n\n    if (this.tool instanceof ConnectTool && this.eventArgs && this.eventArgs.target && this.eventArgs.target instanceof Node) {\n      this.diagram.updatePortVisibility(this.eventArgs.target, PortVisibility.Hover | PortVisibility.Connect, true);\n      this.hoverElement = null;\n    }\n\n    var selector = this.diagram.selectedItems;\n\n    if (selector && selector.wrapper) {\n      if (!selectionHasConnector(this.diagram, selector)) {\n        this.diagram.renderSelector(true);\n      }\n    }\n\n    if (this.diagram.diagramActions & DiagramAction.Interactions || this.diagram.diagramActions & DiagramAction.ToolAction) {\n      this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.ToolAction;\n    }\n\n    this.isMouseDown = false;\n    this.focus = false;\n    this.touchStartList = null;\n    this.touchMoveList = null;\n    this.elementLeave();\n    this.commandHandler.removeSnap();\n    this.inAction = false;\n    this.eventArgs = {};\n\n    if (this.diagram.selectedObject && this.diagram.selectedObject.helperObject) {\n      this.diagram.remove(this.diagram.selectedObject.helperObject);\n      this.diagram.selectedObject = {\n        helperObject: undefined,\n        actualObject: undefined\n      };\n    }\n\n    this.tool = null;\n    removeRulerMarkers();\n\n    if (this.action === 'Rotate') {\n      this.diagram.diagramCanvas.classList.remove('e-diagram-rotate');\n    }\n\n    evt.preventDefault();\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.mouseWheel = function (evt) {\n    this.diagram.blazorActions |= BlazorAction.interaction; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var up = evt.wheelDelta > 0 || -40 * evt.detail > 0 ? true : false;\n    var mousePosition = this.getMousePosition(evt);\n    this.diagram.tooltipObject.close();\n    var ctrlKey = this.isMetaKey(evt);\n\n    if (ctrlKey) {\n      this.diagram.zoom(up ? 1.2 : 1 / 1.2, mousePosition);\n      evt.preventDefault();\n    } else {\n      var horizontalOffset = this.diagram.scroller.horizontalOffset;\n      var verticalOffset = this.diagram.scroller.verticalOffset;\n      var change = up ? 20 : -20;\n\n      if (this.tool && (this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool)) {\n        this.eventArgs = {};\n        this.getMouseEventArgs(mousePosition, this.eventArgs);\n        this.eventArgs.position = mousePosition;\n        this.tool.mouseWheel(this.eventArgs);\n      }\n\n      this.diagram.scrollActions |= ScrollActions.Interaction;\n\n      if (evt.shiftKey || evt.deltaX && evt.deltaX !== -0) {\n        this.diagram.scroller.zoom(1, change, 0, mousePosition);\n      } else {\n        this.diagram.scroller.zoom(1, 0, change, mousePosition);\n      }\n\n      this.diagram.scrollActions &= ~ScrollActions.Interaction;\n\n      if (horizontalOffset !== this.diagram.scroller.horizontalOffset || verticalOffset !== this.diagram.scroller.verticalOffset) {\n        evt.preventDefault();\n      }\n    }\n\n    if (this.diagram.textEditing) {\n      this.diagram.isTriggerEvent = true;\n\n      if (this.diagram.activeLabel.parentId) {\n        var node = this.diagram.getObject(this.diagram.activeLabel.parentId);\n        this.diagram.startTextEdit(node, this.diagram.activeLabel.id);\n      }\n\n      this.diagram.isTriggerEvent = false;\n    }\n\n    this.diagram.blazorActions = this.diagram.blazorActions & ~BlazorAction.interaction;\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.keyDown = function (evt) {\n    if (!(this.diagram.diagramActions & DiagramAction.TextEdit) && !this.checkEditBoxAsTarget(evt) || evt.key === 'Escape' || evt.keyCode === 27) {\n      var i = void 0;\n      var inAction = 'inAction';\n      var command = void 0;\n      var keycode = evt.keyCode ? evt.keyCode : evt.which;\n      var key = evt.key;\n      var ctrlKey = this.isMetaKey(evt);\n\n      if (this.diagram.commandManager && this.diagram.commands) {\n        var commands = this.diagram.commands;\n\n        for (var _i = 0, _a = Object.keys(commands); _i < _a.length; _i++) {\n          var i_1 = _a[_i];\n          command = this.diagram.commands[i_1];\n\n          if (command && (command.gesture.keyModifiers || command.gesture.key)) {\n            if ((keycode === command.gesture.key || key === Keys[command.gesture.key] || this.isDeleteKey(key, i_1)) && (!command.gesture.keyModifiers && !evt.altKey && !evt.shiftKey && !ctrlKey || command.gesture.keyModifiers && (ctrlKey || evt.altKey || evt.shiftKey) && this.altKeyPressed(command.gesture.keyModifiers) && evt.altKey || this.shiftKeyPressed(command.gesture.keyModifiers) && evt.shiftKey || this.ctrlKeyPressed(command.gesture.keyModifiers) && ctrlKey)) {\n              var canExecute = getFunction(command.canExecute);\n\n              if (isBlazor() || canExecute && canExecute({\n                'keyDownEventArgs': KeyboardEvent,\n                parameter: command.parameter\n              })) {\n                evt.preventDefault();\n\n                if (evt.key === 'Escape') {\n                  if (this.checkEditBoxAsTarget(evt)) {\n                    document.getElementById(this.diagram.diagramCanvas.id).focus();\n                  } else if (this.diagram.currentSymbol) {\n                    var selectedSymbols = 'selectedSymbols';\n                    var source = 'sourceElement';\n                    var intDestroy = 'intDestroy';\n                    this.diagram.removeFromAQuad(this.diagram.currentSymbol);\n                    this.diagram.removeObjectsFromLayer(this.diagram.nameTable[this.diagram.currentSymbol.id]);\n                    this.diagram.removeElements(this.diagram.currentSymbol);\n                    removeChildNodes(this.diagram.currentSymbol, this.diagram);\n                    delete this.diagram.nameTable[this.diagram.currentSymbol.id];\n                    var sourceElement = this.diagram.droppable[source];\n                    sourceElement.draggable[intDestroy]();\n                    var element = this.diagram.droppable[selectedSymbols];\n                    element.parentNode.removeChild(element);\n                    var diagramActions = this.diagram.diagramActions;\n                    this.diagram.diagramActions = this.diagram.addConstraints(diagramActions, DiagramAction.PreventClearSelection);\n                    this.tool.mouseUp(this.eventArgs);\n                    this.diagram.diagramRenderer.rendererActions = this.diagram.removeConstraints(this.diagram.diagramRenderer.rendererActions, RendererAction.DrawSelectorBorder);\n\n                    if (this.diagram.previousSelectedObject) {\n                      this.diagram.select(this.diagram.previousSelectedObject);\n                    }\n\n                    this.action = 'Select';\n                    this.diagram.previousSelectedObject = null;\n                    this.diagram.currentSymbol = null;\n                    this.diagram.diagramActions = this.diagram.removeConstraints(diagramActions, DiagramAction.PreventClearSelection);\n                    this.isMouseDown = false;\n                  } else if (this.inAction && this.diagram.drawingObject && this.tool && this.tool[inAction]) {\n                    this.tool.mouseUp(this.eventArgs);\n                    this.tool = null;\n                    this.isMouseDown = false;\n                  }\n                }\n\n                if (command.execute) {\n                  if (this.diagram.tool !== DiagramTools.ZoomPan) {\n                    // if (i === 'nudgeUp' || i === 'nudgeRight' || i === 'nudgeDown' || i === 'nudgeLeft') {\n                    //     command.execute()\n                    // } else {\n                    var execute = getFunction(command.execute);\n                    execute({\n                      'keyDownEventArgs': KeyboardEvent,\n                      parameter: command.parameter\n                    });\n                  } // }\n\n                }\n\n                if (isBlazor()) {\n                  var arg = {\n                    gesture: command.gesture\n                  };\n                  this.diagram.triggerEvent(DiagramEvent.commandExecute, arg);\n                }\n\n                break;\n              }\n            }\n          }\n        }\n      }\n    } // eslint-disable-next-line\n\n\n    var selectedObject = this.diagram.selectedItems.nodes.length ? this.diagram.selectedItems.nodes : this.diagram.selectedItems.connectors;\n    this.keyArgs = {\n      element: cloneBlazorObject(this.diagram.selectedItems),\n      key: evt.key,\n      keyCode: evt.keyCode ? evt.keyCode : evt.which\n    };\n    this.getKeyModifier(this.keyArgs, evt);\n\n    if (this.diagram.diagramActions & DiagramAction.TextEdit) {\n      this.getlabel(this.keyArgs, evt);\n    }\n\n    this.diagram.triggerEvent(DiagramEvent.keyDown, this.keyArgs);\n  };\n\n  DiagramEventHandler.prototype.getlabel = function (args, evt) {\n    var label = this.diagram.activeLabel;\n    args.target = this.diagram.element.id + '_editBox';\n    var node = this.diagram.nameTable[label.parentId];\n\n    if (document.getElementById(this.diagram.element.id + '_editBox')) {\n      args.text = document.getElementById(this.diagram.element.id + '_editBox').value;\n\n      for (var i = 0; i < node.annotations.length; i++) {\n        if (node.annotations[i].id === label.id) {\n          args.label = node.annotations[i];\n          break;\n        }\n      }\n    }\n  };\n\n  DiagramEventHandler.prototype.getKeyModifier = function (args, evt) {\n    args.keyModifiers = KeyModifiers.None;\n\n    if (evt.ctrlKey) {\n      args.keyModifiers |= KeyModifiers.Control;\n    }\n\n    if (evt.shiftKey) {\n      args.keyModifiers |= KeyModifiers.Shift;\n    }\n\n    if (evt.altKey) {\n      args.keyModifiers |= KeyModifiers.Alt;\n    }\n\n    if (this.isMetaKey(evt)) {\n      args.keyModifiers |= KeyModifiers.Meta;\n    }\n  };\n\n  DiagramEventHandler.prototype.keyUp = function (evt) {\n    this.keyArgs = {\n      element: cloneBlazorObject(this.diagram.selectedItems),\n      key: evt.key,\n      keyCode: evt.keyCode ? evt.keyCode : evt.which\n    };\n    var selectedObject = this.diagram.selectedItems.nodes.length ? this.diagram.selectedItems.nodes : this.diagram.selectedItems.connectors;\n    this.getKeyModifier(this.keyArgs, evt);\n\n    if (this.diagram.diagramActions & DiagramAction.TextEdit) {\n      this.getlabel(this.keyArgs, evt);\n    }\n\n    this.diagram.triggerEvent(DiagramEvent.keyUp, this.keyArgs);\n  };\n\n  DiagramEventHandler.prototype.startAutoScroll = function (e) {\n    var position = this.getMousePosition(e);\n    position.x *= this.diagram.scroller.currentZoom;\n    position.y *= this.diagram.scroller.currentZoom;\n    var rulerSize = getRulerSize(this.diagram);\n    var movingPosition;\n    var autoScrollBorder = this.diagram.scrollSettings.autoScrollBorder;\n\n    if (Browser.info.name === 'mozilla') {\n      if (this.diagram.scroller.viewPortWidth === 0) {\n        var bounds = document.getElementById(this.diagram.element.id).getBoundingClientRect();\n\n        if (bounds.width !== this.diagram.scroller.viewPortWidth) {\n          this.diagram.scroller.setViewPortSize(bounds.width, bounds.height);\n        }\n      }\n    }\n\n    if (this.diagram.scrollSettings.canAutoScroll) {\n      if (position.x + this.diagram.scroller.horizontalOffset + autoScrollBorder.right + rulerSize.width >= this.diagram.scroller.viewPortWidth - 18) {\n        movingPosition = 'right';\n      } else if (position.x + this.diagram.scroller.horizontalOffset < autoScrollBorder.left) {\n        movingPosition = 'left';\n      } else if (position.y + this.diagram.scroller.verticalOffset + autoScrollBorder.bottom + rulerSize.height > this.diagram.scroller.viewPortHeight - 18) {\n        movingPosition = 'bottom';\n      } else if (position.y + this.diagram.scroller.verticalOffset < autoScrollBorder.top) {\n        movingPosition = 'top';\n      }\n    }\n\n    return movingPosition;\n  };\n\n  DiagramEventHandler.prototype.doAutoScroll = function (option, e, delay, autoScroll) {\n    var position = option;\n\n    if ((this.tool instanceof NodeDrawingTool || this.tool instanceof ConnectorDrawingTool || this.tool instanceof MoveTool || this.tool instanceof ResizeTool || this.tool instanceof SelectTool) && this.inAction) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      var diagram = this;\n      var pos = this.getMousePosition(e);\n      var autoScrollBorder = this.diagram.scrollSettings.autoScrollBorder;\n      var newDelay = delay ? delay : 100;\n      var left = 0;\n      var top_1 = 0;\n      var point = {\n        x: pos.x,\n        y: pos.y\n      };\n\n      switch (position) {\n        case 'right':\n          point.x = pos.x + 10;\n          left = 10;\n          break;\n\n        case 'left':\n          point.x = pos.x - 10;\n          left = -10;\n          break;\n\n        case 'bottom':\n          point.y = pos.y + 10;\n          top_1 = 10;\n          break;\n\n        case 'top':\n          point.y = pos.y - 10;\n          top_1 = -10;\n          break;\n      }\n\n      this.eventArgs.position = {\n        x: point.x,\n        y: point.y\n      };\n      this.currentPosition = this.eventArgs.position;\n      var objects = this.objectFinder.findObjectsUnderMouse(this.currentPosition, this.diagram, this.eventArgs, null, this.action);\n      this.eventArgs.target = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n      this.tool.mouseMove(this.eventArgs);\n      this.diagram.scrollActions |= ScrollActions.Interaction;\n      this.diagram.scroller.zoom(1, -left, -top_1, pos);\n      this.diagram.scrollActions &= ~ScrollActions.Interaction;\n    }\n  };\n\n  DiagramEventHandler.prototype.mouseEvents = function () {\n    var target = this.diagram.findObjectsUnderMouse(this.currentPosition);\n\n    for (var i = 0; i < target.length; i++) {\n      if (this.eventArgs.actualObject === target[i]) {\n        target.splice(i, 1);\n      }\n    }\n\n    var arg = {\n      targets: {}\n    };\n\n    if (!isBlazor()) {\n      arg = {\n        targets: cloneBlazorObject(target),\n        element: cloneBlazorObject(this.eventArgs.source === this.eventArgs.actualObject ? undefined : this.eventArgs.source),\n        actualObject: cloneBlazorObject(this.eventArgs.actualObject)\n      };\n    }\n\n    if (isBlazor() && (this.diagram.mouseEnter || this.diagram.mouseOver)) {\n      arg.actualObject = getObjectType(this.eventArgs.actualObject) === Connector ? {\n        connector: cloneBlazorObject(this.eventArgs.actualObject)\n      } : {\n        node: cloneBlazorObject(this.eventArgs.actualObject)\n      };\n      arg.targets.connector = [];\n      arg.targets.node = [];\n      this.getBlazorCollectionObject(target, arg);\n    }\n\n    if (this.lastObjectUnderMouse && this.diagram.mouseLeave && (!this.eventArgs.actualObject || this.lastObjectUnderMouse !== this.eventArgs.actualObject)) {\n      var arg_1 = {\n        targets: undefined,\n        element: cloneBlazorObject(this.lastObjectUnderMouse),\n        actualObject: undefined\n      };\n\n      if (isBlazor()) {\n        arg_1 = {\n          targets: undefined,\n          element: getObjectType(this.lastObjectUnderMouse) === Connector ? {\n            connector: cloneBlazorObject(target)\n          } : {\n            node: cloneBlazorObject(this.lastObjectUnderMouse)\n          },\n          actualObject: undefined\n        };\n      }\n\n      this.diagram.triggerEvent(DiagramEvent.mouseLeave, arg_1);\n      this.lastObjectUnderMouse = null;\n    }\n\n    if (!this.lastObjectUnderMouse && this.eventArgs.source || this.lastObjectUnderMouse !== this.eventArgs.actualObject) {\n      this.lastObjectUnderMouse = this.eventArgs.actualObject;\n\n      if (this.eventArgs.actualObject !== undefined) {\n        this.diagram.triggerEvent(DiagramEvent.mouseEnter, arg);\n      }\n    }\n\n    if (this.eventArgs.actualObject) {\n      this.diagram.triggerEvent(DiagramEvent.mouseOver, arg);\n    }\n  };\n\n  DiagramEventHandler.prototype.getBlazorCollectionObject = function (obj, arg1) {\n    if (obj) {\n      for (var i = 0; i < obj.length; i++) {\n        if (getObjectType(obj[i]) === Connector) {\n          arg1.targets.connector.push(cloneBlazorObject(obj[i]));\n        } else {\n          arg1.targets.node.push(cloneBlazorObject(obj[i]));\n        }\n      }\n    }\n  };\n\n  DiagramEventHandler.prototype.elementEnter = function (mousePosition, elementOver) {\n    if (!elementOver) {\n      var isPrivateTooltip = this.hoverElement instanceof Node && this.hoverElement.constraints & NodeConstraints.Tooltip || this.hoverElement instanceof Connector && this.hoverElement.constraints & ConnectorConstraints.Tooltip;\n      var content = this.getContent();\n\n      if (this.hoverElement.tooltip.openOn === 'Auto' && content !== '') {\n        updateTooltip(this.diagram, isPrivateTooltip ? this.hoverElement : undefined);\n      }\n\n      this.diagram.tooltipObject.offsetX = 0;\n      this.diagram.tooltipObject.offsetY = 0;\n      var objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n      var obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n      var idName = obj.shape && obj.shape instanceof Native ? '_content_native_element' : '_groupElement';\n      var targetEle = document.getElementById(obj.id + idName);\n\n      if (this.hoverElement.tooltip.openOn === 'Auto' && content !== '') {\n        this.diagram.tooltipObject.close();\n        this.diagram.tooltipObject.openOn = this.hoverElement.tooltip.openOn;\n\n        if (isBlazor()) {\n          this.diagram.tooltipObject.open(targetEle, {});\n        } else {\n          this.diagram.tooltipObject.dataBind();\n        }\n      }\n\n      if (canEnableToolTip(this.hoverElement, this.diagram) && this.hoverElement.tooltip.openOn === 'Auto') {\n        this.diagram.tooltipObject.open(targetEle);\n      }\n    }\n  };\n\n  DiagramEventHandler.prototype.elementLeave = function () {\n    if (this.diagram.tooltipObject && this.diagram.tooltipObject.openOn !== 'Custom') {\n      this.diagram.tooltipObject.close();\n    }\n  };\n\n  DiagramEventHandler.prototype.altKeyPressed = function (keyModifier) {\n    if (keyModifier & KeyModifiers.Alt) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DiagramEventHandler.prototype.ctrlKeyPressed = function (keyModifier) {\n    if (keyModifier & KeyModifiers.Control) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DiagramEventHandler.prototype.shiftKeyPressed = function (keyModifier) {\n    if (keyModifier & KeyModifiers.Shift) {\n      return true;\n    }\n\n    return false;\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.scrolled = function (evt) {\n    this.diagram.updateScrollOffset();\n\n    if (isBlazor() && this.diagram.realActions & RealAction.OverViewAction) {\n      this.diagram.setBlazorDiagramProps(false);\n    }\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.doubleClick = function (evt) {\n    if (canUserInteract(this.diagram)) {\n      var annotation = void 0;\n      var objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n      var obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n\n      if (obj !== null && canUserInteract(this.diagram)) {\n        var node = obj;\n        annotation = this.diagram.findElementUnderMouse(obj, this.currentPosition);\n\n        if (this.tool && (this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool)) {\n          var arg_2 = {\n            source: cloneBlazorObject(obj) || cloneBlazorObject(this.diagram),\n            position: this.currentPosition,\n            count: evt.detail\n          };\n          this.tool.mouseUp(this.eventArgs);\n          this.isMouseDown = false;\n          this.eventArgs = {};\n          this.tool = null;\n          evt.preventDefault();\n        } else {\n          var layer = this.diagram.commandHandler.getObjectLayer(obj.id);\n\n          if (layer && !layer.lock && layer.visible) {\n            if (!(this.diagram.diagramActions & DiagramAction.TextEdit)) {\n              var id = '';\n\n              if (obj.shape.shape === 'TextAnnotation') {\n                id = obj.wrapper.children[1].id.split('_')[1];\n              }\n\n              this.diagram.startTextEdit(obj, id || (annotation instanceof TextElement ? annotation.id.split(obj.id + '_')[1] : undefined));\n            }\n          }\n        }\n      }\n\n      var arg = {\n        source: cloneBlazorObject(obj) || cloneBlazorObject(this.diagram),\n        position: this.currentPosition,\n        count: evt.detail\n      };\n\n      if (isBlazor()) {\n        var selector = void 0;\n\n        if (obj instanceof Node) {\n          selector = {\n            nodes: [cloneBlazorObject(obj)]\n          };\n        } else if (obj instanceof Connector) {\n          selector = {\n            connectors: [cloneBlazorObject(obj)]\n          };\n        } else {\n          selector = cloneBlazorObject(obj);\n        }\n\n        arg = {\n          source: obj ? {\n            selector: selector\n          } : {\n            diagram: cloneBlazorObject(this.diagram)\n          },\n          position: this.currentPosition,\n          count: evt.detail\n        };\n      }\n\n      this.diagram.triggerEvent(DiagramEvent.doubleClick, arg);\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  DiagramEventHandler.prototype.itemClick = function (actualTarget, diagram) {\n    var obj = actualTarget;\n\n    if (checkParentAsContainer(this.diagram, obj, true)) {\n      return obj;\n    }\n\n    return null;\n  };\n  /**\n   * @private\n   */\n\n\n  DiagramEventHandler.prototype.inputChange = function (evt) {\n    var minWidth = 90;\n    var maxWidth;\n    var minHeight = 12;\n    var fontsize;\n    var textWrapper;\n    var node;\n    var height;\n    var width;\n    var textBounds;\n    var textBoxWidth;\n    var transforms;\n    var scale;\n    var editTextBox = document.getElementById(this.diagram.element.id + '_editBox');\n    var editTextBoxDiv = document.getElementById(this.diagram.element.id + '_editTextBoxDiv');\n    var text = editTextBox.value;\n    var line = text.split('\\n');\n    node = this.diagram.selectedItems.nodes[0] ? this.diagram.selectedItems.nodes[0] : this.diagram.selectedItems.connectors[0];\n\n    if (!node && this.tool instanceof TextDrawingTool || node && node.shape.type === 'SwimLane') {\n      node = this.diagram.nameTable[this.diagram.activeLabel.parentId];\n    }\n\n    if (node && (node.shape.type !== 'Text' && node.annotations.length > 0 || node.shape.type === 'Text')) {\n      textWrapper = this.diagram.getWrapper(node.wrapper, this.diagram.activeLabel.id);\n      maxWidth = node.wrapper.bounds.width < textWrapper.bounds.width ? node.wrapper.bounds.width : textWrapper.bounds.width;\n      maxWidth = maxWidth > minWidth ? maxWidth : minWidth;\n      textBounds = measureHtmlText(textWrapper.style, text, undefined, undefined, maxWidth);\n      fontsize = Number(editTextBox.style.fontSize.split('px')[0]);\n\n      if (line.length > 1 && line[line.length - 1] === '') {\n        textBounds.height = textBounds.height + fontsize;\n      }\n\n      transforms = this.diagram.scroller.transform;\n      scale = canZoomTextEdit(this.diagram) ? transforms.scale : 1;\n      width = textBounds.width;\n      width = (minWidth > width ? minWidth : width) * scale;\n      height = (minHeight > textBounds.height ? minHeight : textBounds.height) * scale;\n\n      if (!(node instanceof Connector && node.type === 'Bezier')) {\n        editTextBoxDiv.style.left = (textWrapper.bounds.center.x + transforms.tx) * transforms.scale - width / 2 - 2.5 + 'px';\n        editTextBoxDiv.style.top = (textWrapper.bounds.center.y + transforms.ty) * transforms.scale - height / 2 - 3 + 'px';\n      }\n\n      editTextBoxDiv.style.width = width + 'px';\n      editTextBoxDiv.style.height = height + 'px';\n      editTextBox.style.minHeight = minHeight + 'px';\n      editTextBox.style.minWidth = minWidth + 'px';\n      editTextBox.style.width = width + 'px';\n      editTextBox.style.height = height + 'px';\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  DiagramEventHandler.prototype.isAddTextNode = function (node, focusOut) {\n    if (this.tool instanceof TextDrawingTool || focusOut) {\n      this.tool = null;\n\n      if (node && !canContinuousDraw(this.diagram)) {\n        this.diagram.drawingObject = undefined;\n        this.diagram.currentDrawingObject = undefined;\n      }\n\n      if (getObjectFromCollection(this.diagram.nodes, node.id) || getObjectFromCollection(this.diagram.connectors, node.id) || this.diagram.bpmnModule && this.diagram.bpmnModule.textAnnotationConnectors.indexOf(node) > -1) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  DiagramEventHandler.prototype.checkEditBoxAsTarget = function (evt) {\n    if (evt.target && evt.target.id === this.diagram.element.id + '_editBox') {\n      return true;\n    }\n\n    return false;\n  };\n\n  DiagramEventHandler.prototype.getMouseEventArgs = function (position, args, source, padding) {\n    args.position = position;\n    var obj;\n    var objects;\n\n    if (!source) {\n      if (this.action === 'Drag' || this.action === 'ConnectorSourceEnd' || this.action === 'SegmentEnd' || this.action === 'OrthoThumb' || this.action === 'BezierSourceThumb' || this.action === 'BezierTargetThumb' || this.action === 'ConnectorTargetEnd' || this.action.indexOf('Rotate') !== -1 || this.action.indexOf('Resize') !== -1) {\n        obj = this.diagram.selectedItems;\n\n        if (!this.diagram.currentSymbol && this.action === 'Drag' && obj && this.diagram.selectedItems.nodes.length > 0 && this.diagram.selectedItems.nodes[0].shape.type === 'SwimLane') {\n          objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n          obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n        }\n      } else {\n        objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n        obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n      }\n    } else {\n      objects = this.diagram.findObjectsUnderMouse(this.currentPosition, source);\n      obj = this.diagram.findTargetObjectUnderMouse(objects, this.action, this.inAction, args.position, source);\n    }\n\n    if (obj && obj.isHeader) {\n      obj = this.diagram.nameTable[obj.parentId];\n      this.eventArgs.actualObject = obj;\n    }\n\n    var wrapper;\n\n    if (obj) {\n      wrapper = this.diagram.findElementUnderMouse(obj, this.currentPosition, padding);\n      var currentConnector = void 0;\n      var nearNode = void 0;\n      var i = void 0;\n\n      if ((wrapper && obj.ports && obj.ports.length && !checkPort(obj, wrapper) || !wrapper || !obj) && objects && objects.length && source instanceof Selector) {\n        currentConnector = source.connectors[0];\n\n        for (i = objects.length - 1; i >= 0; i--) {\n          nearNode = objects[i];\n\n          if (nearNode instanceof Node && currentConnector && currentConnector.connectionPadding) {\n            obj = nearNode;\n            wrapper = this.diagram.findElementUnderMouse(obj, this.currentPosition, padding);\n\n            if (currentConnector.constraints & ConnectorConstraints.ConnectToNearByPort && obj && obj.ports && obj.ports.length && checkPort(obj, wrapper)) {\n              break;\n            }\n\n            if (nearNode instanceof Node && currentConnector && currentConnector.connectionPadding && nearNode.wrapper.outerBounds.containsPoint(this.currentPosition) && currentConnector.constraints & ConnectorConstraints.ConnectToNearByNode && !(currentConnector.constraints & ConnectorConstraints.ConnectToNearByPort)) {\n              obj = nearNode;\n              wrapper = this.diagram.findElementUnderMouse(obj, this.currentPosition, 0);\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (!source) {\n      args.source = obj;\n      args.sourceWrapper = wrapper;\n    } else {\n      args.target = obj;\n      args.targetWrapper = wrapper;\n    }\n\n    args.actualObject = this.eventArgs.actualObject;\n\n    if (args.source instanceof Selector && args.actualObject === undefined && (args.source.nodes.length > 0 || args.source.connectors.length > 0)) {\n      args.actualObject = args.source.nodes.length > 0 ? this.diagram.nameTable[args.source.nodes[0].id] : this.diagram.nameTable[args.source.connectors[0].id];\n    }\n\n    args.startTouches = this.touchStartList;\n    args.moveTouches = this.touchMoveList;\n    return args;\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.resetTool = function () {\n    this.action = 'Select';\n    this.hoverElement = null;\n    this.hoverNode = null;\n    this.tool = this.diagram.getTool(this.action);\n    this.updateCursor();\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.getTool = function (action) {\n    switch (action) {\n      case 'Select':\n        return new SelectTool(this.commandHandler, true);\n\n      case 'Drag':\n        return new MoveTool(this.commandHandler);\n\n      case 'Rotate':\n        return new RotateTool(this.commandHandler);\n\n      case 'LayoutAnimation':\n        return new ExpandTool(this.commandHandler);\n\n      case 'FixedUserHandle':\n        return new FixedUserHandleTool(this.commandHandler, true);\n\n      case 'Hyperlink':\n        return new LabelTool(this.commandHandler);\n\n      case 'ResizeSouthEast':\n      case 'ResizeSouthWest':\n      case 'ResizeNorthEast':\n      case 'ResizeNorthWest':\n      case 'ResizeSouth':\n      case 'ResizeNorth':\n      case 'ResizeWest':\n      case 'ResizeEast':\n        return new ResizeTool(this.commandHandler, action);\n\n      case 'ConnectorSourceEnd':\n      case 'ConnectorTargetEnd':\n      case 'BezierSourceThumb':\n      case 'BezierTargetThumb':\n        return new ConnectTool(this.commandHandler, action);\n\n      case 'SegmentEnd':\n      case 'OrthoThumb':\n        return new ConnectorEditing(this.commandHandler, action);\n\n      case 'Draw':\n        var shape = 'shape';\n        var basicShape = 'basicShape';\n        var type = findObjectType(this.diagram.drawingObject);\n\n        if (type === 'Node' && this.diagram.drawingObject.shape.type === 'Text') {\n          return new TextDrawingTool(this.commandHandler);\n        } else if (type === 'Node' && (this.diagram.drawingObject.shape[shape] === 'Polygon' || isBlazor() && this.diagram.drawingObject.shape[basicShape] === 'Polygon') && !this.diagram.drawingObject.shape.points) {\n          return new PolygonDrawingTool(this.commandHandler);\n        } else if (type === 'Node' || type === 'Node' && this.diagram.drawingObject.shape[shape] === 'Polygon' && this.diagram.drawingObject.shape.points) {\n          return new NodeDrawingTool(this.commandHandler, this.diagram.drawingObject);\n        } else if (type === 'Connector' && this.diagram.drawingObject.type === 'Polyline') {\n          return new PolyLineDrawingTool(this.commandHandler);\n        } else if (type === 'Connector') {\n          return new ConnectorDrawingTool(this.commandHandler, 'ConnectorSourceEnd', this.diagram.drawingObject);\n        }\n\n        break;\n\n      case 'Pan':\n        return new ZoomPanTool(this.commandHandler, false);\n\n      case 'PinchZoom':\n        return new ZoomPanTool(this.commandHandler, true);\n\n      case 'PortDrag':\n        return new MoveTool(this.commandHandler, 'Port');\n\n      case 'PortDraw':\n        return new ConnectorDrawingTool(this.commandHandler, 'ConnectorSourceEnd', this.diagram.drawingObject);\n\n      case 'LabelSelect':\n        return new SelectTool(this.commandHandler, true, 'LabelSelect');\n\n      case 'LabelDrag':\n        return new LabelDragTool(this.commandHandler);\n\n      case 'LabelResizeSouthEast':\n      case 'LabelResizeSouthWest':\n      case 'LabelResizeNorthEast':\n      case 'LabelResizeNorthWest':\n      case 'LabelResizeSouth':\n      case 'LabelResizeNorth':\n      case 'LabelResizeWest':\n      case 'LabelResizeEast':\n        return new LabelResizeTool(this.commandHandler, action);\n\n      case 'LabelRotate':\n        return new LabelRotateTool(this.commandHandler);\n      //for coverage\n      // case 'Custom':\n      //     return this.diagram.getTool(action);\n    }\n\n    return null;\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.getCursor = function (action) {\n    var object = this.diagram.selectedItems.annotation ? this.diagram.selectedItems.wrapper.children[0] : this.diagram.selectedItems;\n    var rotateAngle = this.diagram.selectedItems.annotation ? object.rotateAngle + object.parentTransform : object.rotateAngle;\n    return getCursor(action, rotateAngle);\n  }; //start region - interface betweend diagram and interaction\n\n  /** @private */\n\n\n  DiagramEventHandler.prototype.findElementUnderMouse = function (obj, position, padding) {\n    return this.objectFinder.findElementUnderSelectedItem(obj, position, padding);\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.findObjectsUnderMouse = function (position, source) {\n    return this.objectFinder.findObjectsUnderMouse(position, this.diagram, this.eventArgs, source);\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.findObjectUnderMouse = function (objects, action, inAction) {\n    return this.objectFinder.findObjectUnderMouse(this.diagram, objects, action, inAction, this.eventArgs, this.currentPosition);\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.findTargetUnderMouse = function (objects, action, inAction, position, source) {\n    return this.objectFinder.findObjectUnderMouse(this.diagram, objects, action, inAction, this.eventArgs, position, source);\n  };\n  /** @private */\n\n\n  DiagramEventHandler.prototype.findActionToBeDone = function (obj, wrapper, position, target) {\n    return findToolToActivate(obj, wrapper, this.currentPosition, this.diagram, this.touchStartList, this.touchMoveList, target);\n  };\n\n  DiagramEventHandler.prototype.updateContainerBounds = function (isAfterMouseUp) {\n    var isGroupAction = false;\n\n    if (this.diagram.selectedObject.helperObject && this.diagram.selectedObject.actualObject instanceof Node) {\n      var boundsUpdate = this.tool instanceof ResizeTool ? true : false;\n      var obj = this.diagram.selectedObject.actualObject;\n      var parentNode = this.diagram.nameTable[obj.parentId];\n\n      if (isAfterMouseUp) {\n        removeChildInContainer(this.diagram, obj, this.currentPosition, boundsUpdate);\n      } else {\n        if (!parentNode || parentNode && parentNode.shape.type !== 'SwimLane') {\n          this.diagram.updateDiagramObject(obj);\n        }\n\n        isGroupAction = updateCanvasBounds(this.diagram, obj, this.currentPosition, boundsUpdate);\n        this.diagram.updateSelector();\n\n        if (obj.isLane || obj.isPhase) {\n          this.diagram.clearSelection();\n          this.commandHandler.selectObjects([obj]);\n        }\n      }\n    }\n\n    return isGroupAction;\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  DiagramEventHandler.prototype.updateContainerProperties = function () {\n    var helperObject;\n    var isChangeProperties = false;\n    var hasStack;\n    var connectors;\n    var hasGroup = false;\n    var obj;\n    var history = {\n      hasStack: false,\n      isPreventHistory: false\n    };\n\n    if (this.diagram.selectedObject.helperObject) {\n      var objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n      var target = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n      helperObject = this.diagram.selectedObject.helperObject;\n      obj = this.diagram.selectedObject.actualObject;\n\n      if (obj instanceof Node) {\n        if (obj.shape.type === 'SwimLane') {\n          connectors = getConnectors(this.diagram, obj.wrapper.children[0], 0, true);\n        }\n\n        if (obj.shape.type !== 'SwimLane' && obj.parentId && this.diagram.getObject(obj.parentId).shape.type === 'SwimLane') {\n          if (target instanceof Node && this.diagram.getObject(target.parentId) && this.diagram.getObject(target.parentId).shape.type !== 'SwimLane') {\n            target = this.diagram.getObject(target.parentId);\n          }\n        }\n\n        if (this.currentAction === 'Drag' && obj.container && obj.container.type === 'Canvas' && obj.parentId && this.diagram.getObject(obj.parentId).shape.type === 'SwimLane' && target && target !== obj && target.container && target.container.type === 'Canvas' && target.isLane && obj.isLane && target.parentId === obj.parentId) {\n          laneInterChanged(this.diagram, obj, target, this.currentPosition);\n          history.isPreventHistory = true;\n        } else {\n          var parentNode = this.diagram.nameTable[obj.parentId];\n\n          if (!parentNode || parentNode && parentNode.shape.type !== 'SwimLane') {\n            if (parentNode && parentNode.isLane && obj.constraints & NodeConstraints.AllowMovingOutsideLane) {\n              var swimlane = this.diagram.getObject(parentNode.parentId);\n              var laneId = swimlane.id + swimlane.shape.lanes[0].id + '0';\n              var firstlane = this.diagram.getObject(laneId);\n              var x = firstlane.wrapper.bounds.x;\n              var y = firstlane.wrapper.bounds.y;\n              var width = swimlane.wrapper.bounds.bottomRight.x - x;\n              var height = swimlane.wrapper.bounds.bottomRight.y - y;\n              var swimlaneBounds = new Rect(x, y, width, height);\n\n              if (swimlaneBounds.containsPoint(this.currentPosition)) {\n                obj.offsetX = helperObject.offsetX;\n                obj.offsetY = helperObject.offsetY;\n                obj.width = helperObject.width;\n                obj.height = helperObject.height;\n                obj.rotateAngle = helperObject.rotateAngle;\n              }\n            } else {\n              obj.offsetX = helperObject.offsetX;\n              obj.offsetY = helperObject.offsetY;\n\n              if (obj && obj.shape && obj.shape.type !== 'UmlClassifier') {\n                if (obj.shape.type !== 'Bpmn' || obj.shape.type === 'Bpmn' && obj.shape.shape !== 'TextAnnotation') {\n                  obj.width = helperObject.width;\n                  obj.height = helperObject.height;\n                }\n              }\n\n              obj.rotateAngle = helperObject.rotateAngle;\n            }\n          }\n\n          var undoElement = void 0;\n\n          if (parentNode && parentNode.container && parentNode.container.type === 'Stack') {\n            this.diagram.startGroupAction();\n            hasGroup = true;\n          }\n\n          if (!target && parentNode && parentNode.container && parentNode.container.type === 'Stack' && this.action === 'Drag') {\n            var index = parentNode.wrapper.children.indexOf(obj.wrapper);\n            undoElement = {\n              targetIndex: undefined,\n              target: undefined,\n              sourceIndex: index,\n              source: clone(obj)\n            };\n\n            if (index > -1) {\n              var children = parentNode.children;\n              children.splice(children.indexOf(obj.id), 1);\n              this.diagram.nameTable[obj.id].parentId = '';\n              hasStack = true;\n              parentNode.wrapper.children.splice(index, 1);\n            }\n          }\n\n          moveChildInStack(obj, target, this.diagram, this.action);\n          parentNode = checkParentAsContainer(this.diagram, obj) ? this.diagram.nameTable[obj.parentId] : this.diagram.nameTable[obj.parentId] || obj;\n\n          if (parentNode && parentNode.container && parentNode.container.type === 'Canvas') {\n            parentNode.wrapper.maxWidth = parentNode.maxWidth = parentNode.wrapper.actualSize.width;\n            parentNode.wrapper.maxHeight = parentNode.maxHeight = parentNode.wrapper.actualSize.height;\n            isChangeProperties = true;\n          }\n\n          if (checkParentAsContainer(this.diagram, obj, true) && parentNode && parentNode.container.type === 'Canvas') {\n            checkChildNodeInContainer(this.diagram, obj);\n          } else {\n            history = this.updateContainerPropertiesExtend(parentNode, obj, connectors, helperObject, history);\n          }\n\n          if (this.diagram.lineRoutingModule && this.diagram.constraints & DiagramConstraints.LineRouting && !checkParentAsContainer(this.diagram, obj, true)) {\n            if (obj.children) {\n              this.diagram.realActions |= RealAction.EnableGroupAction;\n            }\n\n            this.diagram.nodePropertyChange(obj, {}, {\n              width: obj.width,\n              height: obj.height,\n              offsetX: obj.offsetX,\n              offsetY: obj.offsetY\n            });\n\n            if (obj.children) {\n              this.diagram.realActions &= ~RealAction.EnableGroupAction;\n            }\n          }\n\n          if (obj.shape.lanes) {\n            this.updateLaneChildNode(obj);\n          }\n\n          if (isChangeProperties) {\n            parentNode.maxWidth = parentNode.wrapper.maxWidth = undefined;\n            parentNode.maxHeight = parentNode.wrapper.maxHeight = undefined;\n          }\n\n          if (hasStack) {\n            this.diagram.nodePropertyChange(parentNode, {}, {\n              offsetX: parentNode.offsetX,\n              offsetY: parentNode.offsetY,\n              width: parentNode.width,\n              height: parentNode.height,\n              rotateAngle: parentNode.rotateAngle\n            });\n            var entry = {\n              redoObject: {\n                sourceIndex: undefined,\n                source: undoElement.source\n              },\n              type: 'StackChildPositionChanged',\n              undoObject: undoElement,\n              category: 'Internal'\n            };\n\n            if (!(this.diagram.diagramActions & DiagramAction.UndoRedo)) {\n              this.diagram.addHistoryEntry(entry);\n            }\n          }\n\n          if (obj && obj.container && (obj.container.type === 'Stack' || obj.container.type === 'Canvas' && obj.parentId === '')) {\n            if (obj && obj.shape && obj.shape.type === 'UmlClassifier') {\n              obj.wrapper.measureChildren = true;\n            }\n\n            this.diagram.nodePropertyChange(obj, {}, {\n              offsetX: obj.offsetX,\n              offsetY: obj.offsetY,\n              width: obj.width,\n              height: obj.height,\n              rotateAngle: obj.rotateAngle\n            });\n\n            if (obj && obj.shape && obj.shape.type === 'UmlClassifier') {\n              obj.wrapper.measureChildren = false;\n            }\n          }\n        }\n\n        updateConnectorsProperties(connectors, this.diagram);\n        history.hasStack = hasGroup;\n      }\n    }\n\n    if (obj && (obj.isPhase || obj.isLane || obj.shape && obj.shape.type === 'SwimLane')) {\n      this.diagram.updateDiagramElementQuad();\n    }\n\n    return history;\n  };\n\n  DiagramEventHandler.prototype.updateLaneChildNode = function (obj) {\n    for (var i = 0; i < obj.shape.lanes.length; i++) {\n      if (obj.shape.lanes[i].children && obj.shape.lanes[i].children.length > 0) {\n        for (var j = 0; j < obj.shape.lanes[i].children.length; j++) {\n          var id = obj.shape.lanes[i].children[j].id;\n          var childNode = this.diagram.nameTable[id];\n          childNode.offsetX = childNode.wrapper.offsetX;\n          childNode.offsetY = childNode.wrapper.offsetY;\n        }\n      }\n    }\n  };\n\n  DiagramEventHandler.prototype.updateContainerPropertiesExtend = function (parentNode, obj, connectors, helperObject, history) {\n    if (this.currentAction === 'ResizeEast' || this.currentAction === 'ResizeSouth' || obj.shape.type === 'SwimLane') {\n      var undoObj = cloneObject(obj);\n      var isUpdateRow = false;\n\n      if (parentNode && parentNode.container && parentNode.container.type === 'Grid') {\n        var shape = parentNode.shape.type === 'SwimLane' ? true : false;\n        var container = shape ? parentNode.wrapper.children[0] : parentNode.wrapper;\n        var padding = shape ? parentNode.shape.padding : undefined;\n        var x = parentNode.wrapper.bounds.x;\n        var y = parentNode.wrapper.bounds.y;\n\n        if (obj.columnIndex !== undefined && parentNode.container.orientation === 'Horizontal' && (shape && obj.isPhase || !shape && obj.rowIndex === 1) || parentNode.container.orientation === 'Vertical' && (!shape && obj.rowIndex > 0 && obj.columnIndex > 0 || shape && obj.isLane)) {\n          if (parentNode.container.orientation === 'Horizontal' && obj.isPhase && obj.wrapper.width > obj.maxWidth) {\n            obj.maxWidth = obj.wrapper.width;\n            obj.wrapper.maxWidth = obj.wrapper.width;\n          }\n\n          updateSwimLaneObject(this.diagram, obj, parentNode, helperObject);\n          container.updateColumnWidth(obj.columnIndex, helperObject.width, true, padding);\n\n          if (obj.isPhase) {\n            var id = parentNode.shape.phases[obj.columnIndex].header.id;\n            var node = this.diagram.nameTable[id];\n\n            if (node.maxWidth < helperObject.width) {\n              node.maxWidth = helperObject.width;\n              node.wrapper.maxWidth = helperObject.width;\n            }\n          }\n\n          if (parentNode.shape.type === 'SwimLane') {\n            parentNode.width = parentNode.width ? container.width : parentNode.width;\n            updateHeaderMaxWidth(this.diagram, parentNode);\n            parentNode.wrapper.width = parentNode.width;\n            connectors = getConnectors(this.diagram, container, obj.rowIndex, false);\n          }\n        } else if (obj.rowIndex !== undefined) {\n          isUpdateRow = true;\n          updateSwimLaneObject(this.diagram, obj, parentNode, helperObject);\n          container.updateRowHeight(obj.rowIndex, helperObject.height, true, padding);\n\n          if (parentNode.shape.type === 'SwimLane') {\n            parentNode.height = parentNode.height ? container.height : parentNode.height;\n            parentNode.wrapper.height = parentNode.height;\n            connectors = getConnectors(this.diagram, container, obj.rowIndex, true);\n          }\n        }\n\n        if (parentNode.shape.type === 'SwimLane') {\n          history.isPreventHistory = true;\n        }\n\n        this.diagram.nodePropertyChange(parentNode, {}, {\n          offsetX: parentNode.offsetX,\n          offsetY: parentNode.offsetY,\n          rotateAngle: parentNode.rotateAngle\n        });\n        this.diagram.drag(parentNode, x - parentNode.wrapper.bounds.x, y - parentNode.wrapper.bounds.y);\n      } else {\n        if (obj && obj.shape && obj.shape.type === 'UmlClassifier') {\n          obj.wrapper.measureChildren = true;\n        }\n\n        this.diagram.nodePropertyChange(obj, {}, {\n          offsetX: obj.offsetX,\n          offsetY: obj.offsetY,\n          width: obj.width,\n          height: obj.height,\n          rotateAngle: obj.rotateAngle\n        });\n        obj.wrapper.measureChildren = false;\n      }\n\n      obj.wrapper.measure(new Size(obj.wrapper.width, obj.wrapper.height));\n      obj.wrapper.arrange(obj.wrapper.desiredSize);\n\n      if (this.currentAction === 'ResizeEast' || this.currentAction === 'ResizeSouth') {\n        var redoObject = cloneObject(obj);\n        var entry = {\n          category: 'Internal',\n          type: isUpdateRow ? 'RowHeightChanged' : 'ColumnWidthChanged',\n          undoObject: undoObj,\n          redoObject: redoObject\n        };\n        this.diagram.addHistoryEntry(entry);\n      }\n    }\n\n    updateConnectorsProperties(connectors, this.diagram);\n    return history;\n  };\n\n  DiagramEventHandler.prototype.addUmlNode = function () {\n    var node = this.diagram.selectedItems.nodes[0];\n    var objects = this.diagram.findObjectsUnderMouse({\n      x: this.currentPosition.x + 20,\n      y: this.currentPosition.y\n    });\n    var target = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n\n    if (!target) {\n      objects = this.diagram.findObjectsUnderMouse({\n        x: this.currentPosition.x - 20,\n        y: this.currentPosition.y\n      });\n      target = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n    }\n\n    if (node && node.container && node.container.type === 'Stack' && target && target.parentId && target.parentId === node.id) {\n      var innerNode = target;\n      var adornerSvg = getAdornerLayerSvg(this.diagram.element.id);\n      var highlighter = adornerSvg.getElementById(adornerSvg.id + '_stack_highlighter');\n\n      if (highlighter) {\n        var index = node.wrapper.children.indexOf(target.wrapper) + 1;\n        this.diagram.enableServerDataBinding(false);\n        var temp = new Node(this.diagram, 'nodes', {\n          style: {\n            fill: node.style.fill,\n            strokeColor: node.style.strokeColor === 'black' ? '#ffffff00' : node.style.strokeColor\n          },\n          annotations: target.annotations,\n          verticalAlignment: 'Stretch',\n          horizontalAlignment: 'Stretch',\n          constraints: (NodeConstraints.Default | NodeConstraints.HideThumbs) & ~(NodeConstraints.Rotate | NodeConstraints.Drag | NodeConstraints.Resize),\n          minHeight: 25\n        }, true);\n        temp.annotations[0].content = ' + Name : Type';\n        var id = innerNode.id.split('_');\n        temp.id = randomId() + temp.id;\n        temp.parentId = node.id;\n        temp.zIndex = -1;\n        temp.umlIndex = index;\n        this.diagram.startGroupAction();\n        var redoElement = {\n          sourceIndex: node.wrapper.children.indexOf(temp.wrapper),\n          source: temp,\n          target: undefined,\n          targetIndex: undefined\n        };\n        this.diagram.enableServerDataBinding(true);\n        this.diagram.add(temp);\n        this.diagram.updateConnectorEdges(node);\n        this.diagram.clearSelection();\n        this.diagram.select([this.diagram.nameTable[temp.id]]);\n        this.diagram.endGroupAction();\n        this.diagram.startTextEdit();\n      }\n    }\n  };\n\n  return DiagramEventHandler;\n}();\n\nexport { DiagramEventHandler };\n/** @private */\n\nvar ObjectFinder =\n/** @class */\nfunction () {\n  function ObjectFinder() {}\n  /** @private */\n\n\n  ObjectFinder.prototype.findObjectsUnderMouse = function (pt, diagram, eventArgs, source, actions) {\n    // finds the collection of the object that is under the mouse;\n    var actualTarget = [];\n\n    if (source && source instanceof Selector) {\n      if (source.nodes.length + source.connectors.length === 1) {\n        source = source.nodes[0] || source.connectors[0];\n\n        if (source.children && source.children.length === 0) {\n          eventArgs.actualObject = source;\n        }\n      }\n    }\n\n    var container;\n    var bounds;\n    var child;\n    var matrix;\n    var endPadding = source && source instanceof Connector && (source.constraints & ConnectorConstraints.ConnectToNearByNode || source.constraints & ConnectorConstraints.ConnectToNearByPort) && source.connectionPadding || 0;\n    var objArray = diagram.spatialSearch.findObjects(new Rect(pt.x - 50 - endPadding, pt.y - 50 - endPadding, 100 + endPadding, 100 + endPadding));\n    var layerObjTable = {};\n    var layerTarger;\n\n    for (var _i = 0, objArray_1 = objArray; _i < objArray_1.length; _i++) {\n      var obj = objArray_1[_i];\n      var point = pt;\n      bounds = obj.wrapper.outerBounds;\n      var pointInBounds = obj.rotateAngle ? false : bounds.containsPoint(point, endPadding);\n\n      if ((obj !== source || diagram.currentDrawingObject instanceof Connector) && obj instanceof Connector ? obj !== diagram.currentDrawingObject : true && obj.wrapper.visible) {\n        var layer = diagram.commandHandler.getObjectLayer(obj.id);\n\n        if (layer && !layer.lock && layer.visible) {\n          layerTarger = layerObjTable[layer.zIndex] = layerObjTable[layer.zIndex] || [];\n\n          if (obj.rotateAngle) {\n            container = obj.wrapper;\n            bounds = cornersPointsBeforeRotation(container);\n\n            for (var _a = 0, _b = container.children; _a < _b.length; _a++) {\n              child = _b[_a];\n              matrix = identityMatrix();\n              rotateMatrix(matrix, -(child.rotateAngle + child.parentTransform), child.offsetX, child.offsetY);\n              point = transformPointByMatrix(matrix, pt);\n\n              if (cornersPointsBeforeRotation(child).containsPoint(point, endPadding)) {\n                pointInBounds = true;\n              }\n            }\n          }\n\n          if (!source || isSelected(diagram, obj) === false) {\n            if (canEnablePointerEvents(obj, diagram)) {\n              if (obj instanceof Connector ? isPointOverConnector(obj, pt) : pointInBounds) {\n                var padding = obj instanceof Connector ? obj.hitPadding || 0 : 0; //let element: DiagramElement;\n\n                var element = this.findElementUnderMouse(obj, pt, endPadding || padding);\n\n                if (element && obj.id !== 'helper') {\n                  insertObject(obj, 'zIndex', layerTarger);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    for (var _c = 0, _d = diagram.layers; _c < _d.length; _c++) {\n      var layer = _d[_c];\n      actualTarget = actualTarget.concat(layerObjTable[layer.zIndex] || []);\n\n      for (var _e = 0, actualTarget_1 = actualTarget; _e < actualTarget_1.length; _e++) {\n        var obj = actualTarget_1[_e];\n        var eventHandler = 'eventHandler';\n\n        if (obj.shape.type === 'Bpmn' && obj.processId && (!(diagram[eventHandler].tool instanceof MoveTool) || diagram[eventHandler].tool instanceof MoveTool && canAllowDrop(obj))) {\n          var index = actualTarget.indexOf(diagram.nameTable[obj.processId]);\n\n          if (index > -1) {\n            actualTarget.splice(index, 1);\n          }\n        }\n\n        if (obj.shape.type === 'UmlClassifier' && obj.container && obj.container.type === 'Stack') {\n          var index = actualTarget.indexOf(diagram.nameTable[diagram.nameTable[obj.id].wrapper.children[0].id]);\n\n          if (index > -1) {\n            actualTarget.splice(index, 1);\n          }\n        }\n      }\n    }\n\n    for (var i = 0; i < actualTarget.length; i++) {\n      var parentObj = diagram.nameTable[actualTarget[i].parentId];\n\n      if (parentObj) {\n        var portElement = this.findElementUnderMouse(parentObj, pt);\n\n        for (var j = 0; j < parentObj.ports.length; j++) {\n          if (portElement.id.match('_' + parentObj.ports[j].id + '$')) {\n            var port = parentObj.ports[j];\n\n            if (canDrag(port, diagram) || canDraw(port, diagram)) {\n              return actualTarget;\n            }\n          }\n        }\n      }\n\n      while (parentObj) {\n        var index = actualTarget.indexOf(parentObj);\n\n        if (index !== -1) {\n          actualTarget.splice(index, 1);\n        } else {\n          break;\n        }\n\n        parentObj = diagram.nameTable[parentObj.parentId];\n      }\n    }\n\n    this.checkSwimlane(actualTarget, diagram);\n\n    if (eventArgs && !eventArgs.source) {\n      for (var i = 0; i < actualTarget.length; i++) {\n        var parentNode = diagram.nameTable[actualTarget[i].parentId];\n\n        if (parentNode && parentNode.shape.type === 'SwimLane') {\n          for (var j = 0; j < actualTarget.length; j++) {\n            var connector = actualTarget[j];\n\n            if (connector instanceof Connector) {\n              actualTarget.splice(i, 1);\n            }\n          }\n        }\n      }\n    }\n\n    return actualTarget;\n  };\n  /** @private */\n\n\n  ObjectFinder.prototype.checkSwimlane = function (actualTarget, diagram) {\n    var isNode;\n\n    for (var m = 0; m < actualTarget.length; m++) {\n      var obj = actualTarget[m];\n      var parentNode = void 0;\n      var node = void 0;\n\n      if (obj instanceof Node) {\n        parentNode = actualTarget[m].parentId;\n        node = obj;\n      }\n\n      if (parentNode === '') {\n        if (node.shape.type !== 'SwimLane') {\n          isNode = true;\n        } else {\n          isNode = false;\n        }\n      }\n\n      var parent_1 = diagram.nameTable[parentNode];\n\n      if (parent_1 && parent_1.isLane && diagram.nameTable[parent_1.parentId].zIndex > obj.zIndex) {\n        actualTarget[m] = parent_1;\n      }\n\n      if (m > 0 && isNode && node && (node.isLane || node.isPhase || node.isHeader)) {\n        if (actualTarget[m].zIndex < actualTarget[m - 1].zIndex) {\n          var swap = actualTarget[m];\n          actualTarget[m] = actualTarget[m - 1];\n          actualTarget[m - 1] = swap;\n        }\n      }\n    }\n\n    if (actualTarget.length >= 2) {\n      var parent_2 = '';\n\n      for (var i = actualTarget.length - 1; i >= 0; i--) {\n        if (actualTarget[i].parentId) {\n          var parent1 = findParentInSwimlane(actualTarget[i], diagram, parent_2);\n          var parent2 = findParentInSwimlane(actualTarget[i - 1], diagram, parent_2);\n          var parentNode1 = diagram.nameTable[parent1];\n          var parentNode2 = diagram.nameTable[parent2];\n\n          if (parentNode2 && parent1 !== parent2 && parentNode1.zIndex < parentNode2.zIndex) {\n            actualTarget.splice(i, 1);\n          }\n        }\n      }\n    }\n  };\n  /** @private */\n\n\n  ObjectFinder.prototype.isTarget = function (actualTarget, diagram, action) {\n    var connector = diagram.selectedItems.connectors[0];\n    var node;\n    node = action === 'ConnectorSourceEnd' ? diagram.nameTable[connector.targetID] : node = diagram.nameTable[connector.sourceID];\n\n    if (node && (!node.processId && !actualTarget.processId || node.processId !== actualTarget.processId)) {\n      if (node.processId !== actualTarget.processId) {\n        actualTarget = null;\n      }\n\n      if (actualTarget && actualTarget.parentId && diagram.nameTable[actualTarget.parentId].shape.type === 'UmlClassifier') {\n        actualTarget = diagram.nameTable[actualTarget.parentId];\n      }\n    }\n\n    if (action === 'ConnectorSourceEnd' && connector.targetID) {\n      var targetNode = diagram.nameTable[connector.targetID];\n\n      if (targetNode && targetNode.shape && targetNode.shape.shape === 'TextAnnotation') {\n        var id = connector.id.split('_');\n\n        if (targetNode.shape.type === 'Bpmn' && actualTarget.shape.type !== 'Bpmn' || id[0] === actualTarget.id || actualTarget.shape.shape === 'TextAnnotation') {\n          actualTarget = null;\n        }\n\n        if (actualTarget.parentId && diagram.nameTable[actualTarget.parentId].shape.type === 'UmlClassifier') {\n          actualTarget = diagram.nameTable[actualTarget.parentId];\n        }\n      }\n    }\n\n    return actualTarget;\n  };\n  /* tslint:disable */\n\n  /** @private */\n\n\n  ObjectFinder.prototype.findObjectUnderMouse = function (diagram, objects, action, inAction, eventArg, position, source) {\n    //we will get the wrapper object here\n    //we have to choose the object to be interacted with from the given wrapper\n    //Find the object that is under mouse\n    var eventHandler = 'eventHandler';\n    var endPoint = 'endPoint';\n    var inPort;\n    var outPort;\n    var actualTarget = null;\n\n    if (objects.length !== 0) {\n      if (source && source instanceof Selector) {\n        if (source.nodes.length + source.connectors.length === 1) {\n          source = source.nodes[0] || source.connectors[0];\n        }\n      }\n\n      if (action === 'ConnectorSourceEnd' && source || action === 'PortDraw' || (canDrawOnce(diagram) || canContinuousDraw(diagram)) && getObjectType(diagram.drawingObject) === Connector) {\n        var connector = diagram.selectedItems.connectors[0];\n\n        for (var i = objects.length - 1; i >= 0; i--) {\n          outPort = getInOutConnectPorts(objects[i], false);\n          inPort = getInOutConnectPorts(objects[i], true);\n          var tool = diagram[eventHandler].tool;\n          var portElement = this.findTargetElement(objects[i].wrapper, position, undefined);\n\n          if (action === 'Draw' && portElement && objects[i] instanceof Node && !checkPort(objects[i], portElement)) {\n            if (tool && tool[endPoint] === 'ConnectorSourceEnd' && !canOutConnect(objects[i]) || tool && tool[endPoint] === 'ConnectorTargetEnd' && !canInConnect(objects[i])) {\n              return actualTarget;\n            }\n          } // eslint-disable-next-line max-len\n\n\n          if (objects[i] instanceof Node && (canOutConnect(objects[i]) || canPortOutConnect(outPort) || canInConnect(objects[i]) || canPortInConnect(inPort) || action === 'PortDraw' && tool instanceof ConnectTool && tool[endPoint] === 'ConnectorTargetEnd' && (canInConnect(objects[i]) || canPortInConnect(inPort)))) {\n            actualTarget = objects[i];\n\n            if (connector) {\n              actualTarget = this.isTarget(actualTarget, diagram, action);\n            }\n\n            eventArg.actualObject = actualTarget;\n            return actualTarget;\n          }\n        }\n      } else if (action === 'ConnectorTargetEnd' && source) {\n        for (var i = objects.length - 1; i >= 0; i--) {\n          inPort = getInOutConnectPorts(objects[i], true);\n\n          if (objects[i] instanceof Node && (canInConnect(objects[i]) || canPortInConnect(inPort))) {\n            actualTarget = objects[i];\n            actualTarget = this.isTarget(actualTarget, diagram, action);\n            eventArg.actualObject = actualTarget;\n            return actualTarget;\n          }\n        }\n      } else if (source && (action === 'Drag' || diagram[eventHandler].tool instanceof MoveTool)) {\n        var index = 0;\n\n        for (var i = 0; i < objects.length; i++) {\n          var temp = objects[i];\n\n          if (source !== temp && (temp instanceof Connector || !position || temp.wrapper.bounds.containsPoint(position))) {\n            if (canAllowDrop(temp)) {\n              if (!actualTarget) {\n                actualTarget = temp;\n                index = actualTarget.zIndex;\n              } else {\n                actualTarget = index >= temp.zIndex ? actualTarget : temp;\n                index = Math.max(index, temp.zIndex);\n              }\n            }\n          }\n        }\n\n        if (actualTarget && actualTarget.shape.type === 'Bpmn') {\n          if (diagram.selectedItems.nodes.length > 0 && diagram.selectedItems.nodes[0].shape.type === 'Bpmn') {\n            // eslint-disable-next-line no-self-assign\n            actualTarget = actualTarget;\n          } else {\n            actualTarget = null;\n          }\n        }\n\n        if (actualTarget) {\n          eventArg.actualObject = actualTarget;\n        }\n\n        return actualTarget;\n      } else if ((action === 'Select' || action === 'Pan') && diagram[eventHandler].tool) {\n        for (var i = objects.length - 1; i >= 0; i--) {\n          if (objects[i] instanceof Connector) {\n            var objj1 = objects[i - 1];\n\n            if (objects[i - 1] instanceof Node && objj1.ports) {\n              var portElement = this.findTargetElement(objj1.wrapper, position, undefined);\n\n              if (portElement && (portElement.id.match('_icon_content_shape$') || portElement.id.match('_icon_content_rect$'))) {\n                return objj1;\n              }\n\n              for (var j = 0; j < objj1.ports.length; j++) {\n                if (portElement && portElement.id.match('_' + objj1.ports[j].id + '$')) {\n                  if (canDraw(objj1.ports[j], diagram)) {\n                    return objj1;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        actualTarget = objects[objects.length - 1];\n        eventArg.actualObject = actualTarget;\n\n        if (!diagram[eventHandler].itemClick(actualTarget, true)) {\n          if (actualTarget.parentId) {\n            var obj = actualTarget;\n            var selected = isSelected(diagram, obj);\n\n            while (obj) {\n              if (isSelected(diagram, obj) && !selected) {\n                break;\n              }\n\n              actualTarget = obj;\n              obj = diagram.nameTable[obj.parentId];\n            }\n          }\n        }\n      } else if (action === 'Pan' || action === 'LayoutAnimation') {\n        for (var i = objects.length - 1; i >= 0; i--) {\n          if (objects[i] instanceof Node || objects[i] instanceof Connector) {\n            var portElement = this.findTargetElement(objects[i].wrapper, position, undefined);\n\n            if (action === 'Pan' || portElement && (portElement.id.match('_icon_content_shape$') || portElement.id.match('_icon_content_rect$'))) {\n              return objects[i];\n            }\n          }\n        }\n      } else {\n        actualTarget = objects[objects.length - 1];\n\n        if (eventArg && actualTarget) {\n          eventArg.actualObject = actualTarget;\n        }\n      }\n    }\n\n    return actualTarget;\n  };\n  /* tslint:enable */\n\n  /** @private */\n\n\n  ObjectFinder.prototype.findElementUnderSelectedItem = function (obj, position, padding) {\n    //rewrite this for multiple selection\n    if (obj instanceof Selector) {\n      if (obj.nodes.length === 1 && (!obj.connectors || !obj.connectors.length)) {\n        return this.findElementUnderMouse(obj.nodes[0], position);\n      } else if ((!obj.nodes || obj.nodes.length) && obj.connectors.length === 1) {\n        return this.findElementUnderMouse(obj.connectors[0], position);\n      }\n    } else {\n      return this.findElementUnderMouse(obj, position, padding);\n    }\n\n    return null;\n  };\n\n  ObjectFinder.prototype.findElementUnderMouse = function (obj, position, padding) {\n    return this.findTargetElement(obj.wrapper, position, padding);\n  };\n  /** @private */\n\n\n  ObjectFinder.prototype.findTargetElement = function (container, position, padding) {\n    for (var i = container.children.length - 1; i >= 0; i--) {\n      var element = container.children[i];\n\n      if (element && element.outerBounds.containsPoint(position, padding || 0)) {\n        if (element instanceof Container) {\n          var target = this.findTargetElement(element, position);\n\n          if (target) {\n            return target;\n          }\n        }\n\n        if (element.bounds.containsPoint(position, padding || 0)) {\n          return element;\n        }\n      }\n    }\n\n    if (container.bounds.containsPoint(position, padding) && container.style.fill !== 'none') {\n      return container;\n    }\n\n    return null;\n  };\n\n  return ObjectFinder;\n}();","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/interaction/event-handlers.js"],"names":["Browser","Point","Container","Connector","NodeDrawingTool","ConnectorDrawingTool","TextDrawingTool","PolygonDrawingTool","PolyLineDrawingTool","FixedUserHandleTool","Native","Node","SelectTool","MoveTool","ResizeTool","RotateTool","ConnectTool","ExpandTool","LabelTool","ZoomPanTool","LabelDragTool","LabelResizeTool","LabelRotateTool","ConnectorEditing","Selector","findToolToActivate","isSelected","getCursor","contains","DiagramAction","KeyModifiers","Keys","DiagramEvent","DiagramTools","RendererAction","DiagramConstraints","BlazorAction","ScrollActions","isPointOverConnector","findObjectType","insertObject","getObjectFromCollection","findParentInSwimlane","getObjectType","getInOutConnectPorts","removeChildNodes","cloneBlazorObject","checkPort","canZoomPan","canDraw","canDrag","canZoomTextEdit","canVitualize","canPreventClearSelection","selectionHasConnector","canMove","canEnablePointerEvents","canSelect","canEnableToolTip","canOutConnect","canInConnect","canPortInConnect","canPortOutConnect","canAllowDrop","canUserInteract","defaultTool","updateTooltip","PortVisibility","NodeConstraints","ConnectorConstraints","RealAction","addTouchPointer","measureHtmlText","getAdornerLayerSvg","TextElement","Size","cloneObject","clone","Rect","identityMatrix","rotateMatrix","transformPointByMatrix","removeRulerMarkers","drawRulerMarkers","getRulerSize","updateRuler","canContinuousDraw","canDrawOnce","getFunction","cornersPointsBeforeRotation","updateCanvasBounds","checkChildNodeInContainer","checkParentAsContainer","removeChildInContainer","moveChildInStack","renderStackHighlighter","updateSwimLaneObject","getConnectors","updateHeaderMaxWidth","laneInterChanged","updateConnectorsProperties","DiagramHtmlElement","randomId","isBlazor","DiagramEventHandler","diagram","commandHandler","currentAction","previousAction","focus","isBlocked","isMouseDown","inAction","doingAutoScroll","objectFinder","tool","eventArgs","keyArgs","ObjectFinder","Object","defineProperty","prototype","get","set","action","DrawOnce","mouseUp","position","currentPosition","diagramCanvas","classList","add","remove","diagramActions","TextEdit","isUserHandle","ToolAction","setCursor","enumerable","configurable","blocked","getMousePosition","e","touchArg","offsetX","offsetY","type","indexOf","changedTouches","clientX","clientY","boundingRect","element","getBoundingClientRect","scrollLeft","left","width","scrollTop","top","height","scroller","transform","scale","tx","ty","x","y","windowResize","evt","_this","resizeTo","clearTimeout","setTimeout","updateViewPortSize","container","document","getElementById","id","bounds","setViewPortSize","getSizeValue","style","setSize","transformLayers","rulerSettings","showRulers","canHideResizers","updateCursor","selectedItems","nodes","length","connectors","list","concat","source","isForeignObject","target","isTextBox","foreignobject","parentNode","className","isMetaKey","ctrlKey","renderUmlHighLighter","args","removeStackHighlighter","node","shape","bound","wrapper","containsPoint","objects","findObjectsUnderMouse","findObjectUnderMouse","parentId","isVertical","nameTable","orientation","isDeleteKey","key","value","navigator","platform","match","isMouseOnScrollBar","offsetHeight","offsetWidth","topLeft","topRight","bottomLeft","bottomRight","scrollHeight","toBounds","scrollWidth","updateVirtualization","delay","removeObjectInterval","setInterval","removeVirtualObjects","deleteVirtualObject","checkPreviousAction","userHandles","i","checkUserHandleEvent","onUserHandleMouseLeave","eventName","arg","undefined","name","onUserHandleMouseUp","onUserHandleMouseEnter","onUserHandleMouseDown","userHandleObject","triggerEvent","mouseDown","touches","isSymblDragging","getElementsByClassName","isScrolling","preventDefault","checkEditBoxAsTarget","updatePortVisibility","hoverElement","Hover","button","buttons","count","actualObject","getMouseEventArgs","prevPosition","textEditing","endEdit","obj","sourceElement","findElementUnderMouse","findTarget","findActionToBeDone","shiftKey","connectorEditingToolModule","getTool","info","initialEventArgs","sourceWrapper","touchStartList","mouseMoveExtend","mouseMove","scrollSettings","canAutoScroll","checkAutoScroll","isNode","hoverNode","Connect","checkAction","annotation","sourcePoint","hitPadding","targetPoint","isSwimlaneElements","isLane","isPhase","isHeader","force","touchMoveList","equals","content_1","getContent","tooltip","openOn","elementLeave","canResetElement","elementEnter","mouseEvents","content","padding","getConnectorPadding","Interactions","isPrivateTooltip","constraints","Tooltip","autoScrollPosition","startAutoScroll","clearInterval","timeOutValue","diagram_1","delay_1","doAutoScroll","mode","previousSelectedObject","diagramRenderer","rendererActions","removeConstraints","DrawSelectorBorder","detail","which","oldSelectedValue","isMultipleSelect","clearSelection","selectObjects","avoidDropChildren","history_1","updateContainerProperties","isGroupAction","addUmlNode","selectedObject","helperObject","updateContainerBounds","clickCount","getObject","isContainer","lineRoutingModule","PreventLaneContainerUpdate","isPreventHistory","checkMenu","window","userAgent","pageY","TouchEvent","getSelection","removeAllRanges","contextMenuModule","contextMenu","open","pageX","hasStack","endGroupAction","updateSelectedNodeProperties","dropChildToContainer","renderContainerHelper","PublicMethod","LineRouting","portVisibility","currentDrawingObject","selector","disbleRenderSelector","renderSelector","currentSymbol","click","getBlazorClickEventArgs","ZoomPan","targetObject","selectedConnector","ConnectToNearByPort","connectionPadding","push","addSwimLaneObject","selectedNode","swimlaneNode","targetNode","canInsert","index","offset","actualShape","clearSelectorLayer","laneNode","header","hasHeader","phases","addPhases","lane","lanes","orientation_1","rowIndex","columnIndex","center","addLanes","select","swimLaneobj","addInfo","mouseLeave","removeSnap","mouseWheel","blazorActions","interaction","up","wheelDelta","mousePosition","tooltipObject","close","zoom","horizontalOffset","verticalOffset","change","scrollActions","Interaction","deltaX","isTriggerEvent","activeLabel","startTextEdit","keyDown","keyCode","command","keycode","commandManager","commands","_i","_a","keys","i_1","gesture","keyModifiers","altKey","altKeyPressed","shiftKeyPressed","ctrlKeyPressed","canExecute","KeyboardEvent","parameter","selectedSymbols","intDestroy","removeFromAQuad","removeObjectsFromLayer","removeElements","droppable","draggable","removeChild","addConstraints","PreventClearSelection","drawingObject","execute","commandExecute","getKeyModifier","getlabel","label","text","annotations","None","Control","Shift","Alt","Meta","keyUp","currentZoom","rulerSize","movingPosition","autoScrollBorder","viewPortWidth","right","bottom","viewPortHeight","option","autoScroll","pos","newDelay","top_1","point","splice","targets","mouseEnter","mouseOver","connector","getBlazorCollectionObject","lastObjectUnderMouse","arg_1","arg1","elementOver","idName","targetEle","dataBind","keyModifier","scrolled","updateScrollOffset","realActions","OverViewAction","setBlazorDiagramProps","doubleClick","arg_2","layer","getObjectLayer","lock","visible","children","split","itemClick","actualTarget","inputChange","minWidth","maxWidth","minHeight","fontsize","textWrapper","textBounds","textBoxWidth","transforms","editTextBox","editTextBoxDiv","line","getWrapper","Number","fontSize","isAddTextNode","focusOut","bpmnModule","textAnnotationConnectors","findTargetObjectUnderMouse","currentConnector","nearNode","ports","outerBounds","ConnectToNearByNode","targetWrapper","startTouches","moveTouches","resetTool","basicShape","points","object","rotateAngle","parentTransform","findElementUnderSelectedItem","findTargetUnderMouse","isAfterMouseUp","boundsUpdate","updateDiagramObject","updateSelector","isChangeProperties","hasGroup","history","AllowMovingOutsideLane","swimlane","laneId","firstlane","swimlaneBounds","undoElement","startGroupAction","targetIndex","sourceIndex","actualSize","maxHeight","updateContainerPropertiesExtend","EnableGroupAction","nodePropertyChange","updateLaneChildNode","entry","redoObject","undoObject","category","UndoRedo","addHistoryEntry","measureChildren","updateDiagramElementQuad","j","childNode","undoObj","isUpdateRow","updateColumnWidth","updateRowHeight","drag","measure","arrange","desiredSize","innerNode","adornerSvg","highlighter","enableServerDataBinding","temp","fill","strokeColor","verticalAlignment","horizontalAlignment","Default","HideThumbs","Rotate","Drag","Resize","zIndex","umlIndex","redoElement","updateConnectorEdges","pt","actions","child","matrix","endPadding","objArray","spatialSearch","findObjects","layerObjTable","layerTarger","objArray_1","pointInBounds","_b","_c","_d","layers","_e","actualTarget_1","eventHandler","processId","parentObj","portElement","port","checkSwimlane","m","parent_1","swap","parent_2","parent1","parent2","parentNode1","parentNode2","isTarget","targetID","sourceID","eventArg","endPoint","inPort","outPort","findTargetElement","Math","max","objj1","selected"],"mappings":"AAAA;;AACA;;AACA;;AACA;AACA,SAASA,OAAT,QAAwB,sBAAxB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,eAAT,EAA0BC,oBAA1B,EAAgDC,eAAhD,QAAuE,QAAvE;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,mBAAlD,QAA6E,QAA7E;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,iBAA7B;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,UAA/B,EAA2CC,UAA3C,EAAuDC,WAAvD,EAAoEC,UAApE,EAAgFC,SAAhF,EAA2FC,WAA3F,QAA8G,QAA9G;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,eAAzC,QAAgE,QAAhE;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,EAAyCC,SAAzC,EAAoDC,QAApD,QAAoE,WAApE;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,IAAtC,EAA4CC,YAA5C,EAA0DC,YAA1D,EAAwEC,cAAxE,EAAwFC,kBAAxF,QAAkH,cAAlH;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,oBAAT,EAA+BC,cAA/B,EAA+CC,YAA/C,EAA6DC,uBAA7D,EAAsFC,oBAAtF,QAAkH,yBAAlH;AACA,SAASC,aAAT,EAAwBC,oBAAxB,EAA8CC,gBAA9C,EAAgEC,iBAAhE,EAAmFC,SAAnF,QAAoG,yBAApG;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,OAA9B,EAAuCC,eAAvC,EAAwDC,YAAxD,EAAsEC,wBAAtE,QAAsG,+BAAtG;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,OAAT,EAAkBC,sBAAlB,EAA0CC,SAA1C,EAAqDC,gBAArD,QAA6E,+BAA7E;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,gBAAtC,EAAwDC,iBAAxD,EAA2EC,YAA3E,EAAyFC,eAAzF,EAA0GC,WAA1G,QAA6H,+BAA7H;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,oBAA1C,EAAgEC,UAAhE,QAAkF,cAAlF;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,kBAA3C,QAAqE,qBAArE;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,WAAW,IAAIC,KAAxB,EAA+BD,WAA/B,QAAkD,wBAAlD;AACA,SAASE,IAAT,QAAqB,oBAArB;AACA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,sBAAvC,QAAqE,wBAArE;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,EAA+CC,YAA/C,EAA6DC,WAA7D,QAAgF,gBAAhF;AACA,SAASC,iBAAT,EAA4BC,WAA5B,QAA+C,6BAA/C;AACA,SAASC,WAAT,EAAsBC,2BAAtB,QAAyD,sBAAzD;AACA,SAASC,kBAAT,EAA6BC,yBAA7B,EAAwDC,sBAAxD,EAAgFC,sBAAhF,QAA8G,yBAA9G;AACA,SAASC,gBAAT,EAA2BC,sBAA3B,QAAyD,yBAAzD;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,aAAT,EAAwBC,oBAAxB,EAA8CC,gBAA9C,EAAgEC,0BAAhE,QAAkG,2BAAlG;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB;AAAG;AAAe,YAAY;AACjD;AACA,WAASA,mBAAT,CAA6BC,OAA7B,EAAsCC,cAAtC,EAAsD;AAClD,SAAKC,aAAL,GAAqB,MAArB;AACA,SAAKC,cAAL,GAAsB,MAAtB;AACA;;AACA,SAAKC,KAAL,GAAa,KAAb;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKR,OAAL,GAAe,IAAf;AACA,SAAKS,YAAL,GAAoB,IAApB;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKZ,OAAL,GAAeA,OAAf;AACA,SAAKS,YAAL,GAAoB,IAAII,YAAJ,EAApB;AACA,SAAKZ,cAAL,GAAsBA,cAAtB;AACH;;AACDa,EAAAA,MAAM,CAACC,cAAP,CAAsBhB,mBAAmB,CAACiB,SAA1C,EAAqD,QAArD,EAA+D;AAC3DC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKf,aAAZ;AACH,KAH0D;AAI3DgB,IAAAA,GAAG,EAAE,UAAUC,MAAV,EAAkB;AACnB,UAAIA,MAAM,KAAK,KAAKjB,aAApB,EAAmC;AAC/B,YAAI,KAAKA,aAAL,KAAuB,UAA3B,EAAuC;AACnC,eAAKF,OAAL,CAAaU,IAAb,IAAqB,CAAClF,YAAY,CAAC4F,QAAnC;;AACA,cAAI,KAAKV,IAAT,EAAe;AACX,iBAAKA,IAAL,CAAUW,OAAV,CAAkB;AAAEC,cAAAA,QAAQ,EAAE,KAAKC;AAAjB,aAAlB;AACH;;AACD,eAAKb,IAAL,GAAY,IAAZ;AACH;;AACD,YAAIS,MAAM,KAAK,QAAX,IAAuBA,MAAM,KAAK,aAAtC,EAAqD;AACjD,eAAKnB,OAAL,CAAawB,aAAb,CAA2BC,SAA3B,CAAqCC,GAArC,CAAyC,kBAAzC;AACH,SAFD,MAGK,IAAI,KAAKxB,aAAL,KAAuB,QAAvB,IAAmC,KAAKA,aAAL,KAAuB,aAA9D,EAA6E;AAC9E,eAAKF,OAAL,CAAawB,aAAb,CAA2BC,SAA3B,CAAqCE,MAArC,CAA4C,kBAA5C;AACH;;AACD,aAAKzB,aAAL,GAAqBiB,MAArB;;AACA,YAAI,KAAKjB,aAAL,KAAuB,MAAvB,IAAiC,KAAKA,aAAL,KAAuB,QAAxD,IACA,EAAE,KAAKF,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAACyG,QAA9C,CADA,IAC2D,KAAK5B,cAAL,CAAoB6B,YAApB,CAAiC,KAAKP,eAAtC,CAD/D,EACuH;AACnH,eAAKvB,OAAL,CAAa4B,cAAb,GAA8B,KAAK5B,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAAC2G,UAA1E;AACH,SAHD,MAIK;AACD,eAAK/B,OAAL,CAAa4B,cAAb,GAA8B,KAAK5B,OAAL,CAAa4B,cAAb,GAA8B,CAACxG,aAAa,CAAC2G,UAA3E;AACH;;AACD,aAAK/B,OAAL,CAAagC,SAAb,CAAuB,KAAKhC,OAAL,CAAa9E,SAAb,CAAuBiG,MAAvB,EAA+B,KAAKZ,QAApC,CAAvB;AACH;AACJ,KA7B0D;AA8B3D0B,IAAAA,UAAU,EAAE,IA9B+C;AA+B3DC,IAAAA,YAAY,EAAE;AA/B6C,GAA/D;AAiCApB,EAAAA,MAAM,CAACC,cAAP,CAAsBhB,mBAAmB,CAACiB,SAA1C,EAAqD,SAArD,EAAgE;AAC5DC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKZ,SAAZ;AACH,KAH2D;AAI5Da,IAAAA,GAAG,EAAE,UAAUiB,OAAV,EAAmB;AACpB,WAAK9B,SAAL,GAAiB8B,OAAjB;;AACA,UAAI,KAAKA,OAAT,EAAkB;AACd,aAAKnC,OAAL,CAAagC,SAAb,CAAuB,aAAvB;AACH,OAFD,MAGK;AACD,aAAKhC,OAAL,CAAagC,SAAb,CAAuB,KAAKhC,OAAL,CAAa9E,SAAb,CAAuB,KAAKiG,MAA5B,EAAoC,KAAKZ,QAAzC,CAAvB;AACH;AACJ,KAZ2D;AAa5D0B,IAAAA,UAAU,EAAE,IAbgD;AAc5DC,IAAAA,YAAY,EAAE;AAd8C,GAAhE;AAgBA;;AACAnC,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BoB,gBAA9B,GAAiD,UAAUC,CAAV,EAAa;AAC1D,QAAIC,QAAJ;AACA,QAAIC,OAAJ;AACA,QAAIC,OAAJ;;AACA,QAAIH,CAAC,CAACI,IAAF,CAAOC,OAAP,CAAe,OAAf,MAA4B,CAAC,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,GAAGD,CAAX;AACAE,MAAAA,OAAO,GAAGD,QAAQ,CAACK,cAAT,CAAwB,CAAxB,EAA2BC,OAArC;AACAJ,MAAAA,OAAO,GAAGF,QAAQ,CAACK,cAAT,CAAwB,CAAxB,EAA2BE,OAArC;AACH,KAJD,MAKK;AACDN,MAAAA,OAAO,GAAGF,CAAC,CAACO,OAAZ;AACAJ,MAAAA,OAAO,GAAGH,CAAC,CAACQ,OAAZ;AACH;;AACD,QAAIvB,QAAQ,GAAG,IAAIpD,IAAJ,EAAf;AACAoD,IAAAA,QAAQ,GAAG3C,YAAY,CAAC,KAAKqB,OAAN,CAAvB;AACA,QAAI8C,YAAY,GAAG,KAAK9C,OAAL,CAAa+C,OAAb,CAAqBC,qBAArB,EAAnB;AACAT,IAAAA,OAAO,GAAGA,OAAO,GAAG,KAAKvC,OAAL,CAAawB,aAAb,CAA2ByB,UAArC,GAAkDH,YAAY,CAACI,IAA/D,GAAsE5B,QAAQ,CAAC6B,KAAzF;AACAX,IAAAA,OAAO,GAAGA,OAAO,GAAG,KAAKxC,OAAL,CAAawB,aAAb,CAA2B4B,SAArC,GAAiDN,YAAY,CAACO,GAA9D,GAAoE/B,QAAQ,CAACgC,MAAvF;AACAf,IAAAA,OAAO,IAAI,KAAKvC,OAAL,CAAauD,QAAb,CAAsBC,SAAtB,CAAgCC,KAA3C;AACAjB,IAAAA,OAAO,IAAI,KAAKxC,OAAL,CAAauD,QAAb,CAAsBC,SAAtB,CAAgCC,KAA3C;AACAlB,IAAAA,OAAO,IAAI,KAAKvC,OAAL,CAAauD,QAAb,CAAsBC,SAAtB,CAAgCE,EAA3C;AACAlB,IAAAA,OAAO,IAAI,KAAKxC,OAAL,CAAauD,QAAb,CAAsBC,SAAtB,CAAgCG,EAA3C;AACA,WAAO;AAAEC,MAAAA,CAAC,EAAErB,OAAL;AAAcsB,MAAAA,CAAC,EAAErB;AAAjB,KAAP;AACH,GAvBD;AAwBA;AACJ;AACA;;;AACIzC,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B8C,YAA9B,GAA6C,UAAUC,GAAV,EAAe;AACxD,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKC,QAAT,EAAmB;AACfC,MAAAA,YAAY,CAAC,KAAKD,QAAN,CAAZ;AACH;;AACD,SAAKA,QAAL,GAAgBE,UAAU,CAAC,YAAY;AACnCH,MAAAA,KAAK,CAACI,kBAAN,CAAyBJ,KAAK,CAAChE,OAAN,CAAc+C,OAAvC;AACH,KAFyB,EAEvB,GAFuB,CAA1B;AAGA,WAAO,KAAP;AACH,GATD;AAUA;AACJ;AACA;;;AACIhD,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BoD,kBAA9B,GAAmD,UAAUrB,OAAV,EAAmB;AAClE,QAAIsB,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwBxB,OAAO,CAACyB,EAAhC,CAAhB;;AACA,QAAIH,SAAJ,EAAe;AACX,UAAII,MAAM,GAAGJ,SAAS,CAACrB,qBAAV,EAAb;AACA,WAAKhD,OAAL,CAAauD,QAAb,CAAsBmB,eAAtB,CAAsCD,MAAM,CAACtB,KAA7C,EAAoDsB,MAAM,CAACnB,MAA3D;AACA,UAAIhC,QAAQ,GAAG,IAAIpD,IAAJ,EAAf;AACAoD,MAAAA,QAAQ,GAAG3C,YAAY,CAAC,KAAKqB,OAAN,CAAvB;AACA,UAAImD,KAAK,GAAG,KAAKnD,OAAL,CAAa2E,YAAb,CAA0B,KAAK3E,OAAL,CAAamD,KAAvC,EAA8C7B,QAAQ,CAAC6B,KAAvD,CAAZ;AACA,UAAIG,MAAM,GAAG,KAAKtD,OAAL,CAAa2E,YAAb,CAA0B,KAAK3E,OAAL,CAAasD,MAAvC,EAA+ChC,QAAQ,CAACgC,MAAxD,CAAb;AACA,WAAKtD,OAAL,CAAawB,aAAb,CAA2BoD,KAA3B,CAAiCzB,KAAjC,GAAyCA,KAAzC;AACA,WAAKnD,OAAL,CAAawB,aAAb,CAA2BoD,KAA3B,CAAiCtB,MAAjC,GAA0CA,MAA1C;AACA,WAAKtD,OAAL,CAAauD,QAAb,CAAsBsB,OAAtB;AACA,WAAK7E,OAAL,CAAa8E,eAAb;;AACA,UAAI,KAAK9E,OAAL,CAAa+E,aAAb,CAA2BC,UAA/B,EAA2C;AACvCpG,QAAAA,WAAW,CAAC,KAAKoB,OAAN,CAAX;AACH;AACJ;AACJ,GAjBD;AAkBA;;;AACAD,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BiE,eAA9B,GAAgD,YAAY;AACxD,WAAQ,CAAC,KAAKvE,IAAL,YAAqBtG,QAArB,IAAiC,KAAKsG,IAAL,YAAqBpG,UAAvD,KAAsE,KAAKgG,WAAnF;AACH,GAFD;AAGA;;;AACAP,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BkE,YAA9B,GAA6C,YAAY;AACrD,QAAK,KAAKlF,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiCC,MAAjC,KAA4C,CAA5C,IAAiD,KAAKrF,OAAL,CAAamF,aAAb,CAA2BG,UAA3B,CAAsCD,MAAtC,KAAiD,CAAvG,EAA2G;AACvG,UAAIE,IAAI,GAAG,EAAX;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACC,MAAL,CAAY,KAAKxF,OAAL,CAAamF,aAAb,CAA2BC,KAAvC,EAA8C,KAAKpF,OAAL,CAAamF,aAAb,CAA2BG,UAAzE,CAAP,CAFuG,CAGvG;;AACA,WAAKnD,OAAL,GAAgB,KAAKxB,SAAL,IAAkB,KAAKA,SAAL,CAAe8E,MAAjC,IAA2C,CAAC3I,OAAO,CAAC,KAAK6D,SAAL,CAAe8E,MAAhB,CAApD,GAA+E,KAA/E,GACV,KAAKnF,WAAL,IAAoBiF,IAAI,CAACF,MAAL,KAAgB,CAApC,IAAyC,KAAK3E,IAAL,YAAqBvG,UAA9D,IAA4E,CAAC2C,OAAO,CAACyI,IAAI,CAAC,CAAD,CAAL,CADzF;AAEH;AACJ,GARD;;AASAxF,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B0E,eAA9B,GAAgD,UAAUC,MAAV,EAAkBC,SAAlB,EAA6B;AACzE,QAAIC,aAAa,GAAGF,MAApB;;AACA,QAAIE,aAAJ,EAAmB;AACf,aAAOA,aAAa,CAACC,UAAd,KAA6B,IAApC,EAA0C;AACtC,YAAI,OAAOD,aAAa,CAACE,SAArB,KAAmC,QAAnC,KACE,CAACH,SAAD,IAAcC,aAAa,CAACE,SAAd,CAAwBrD,OAAxB,CAAgC,gBAAhC,MAAsD,CAAC,CAAtE,IACIkD,SAAS,IAAIC,aAAa,CAACE,SAAd,CAAwBrD,OAAxB,CAAgC,qBAAhC,MAA2D,CAAC,CAF9E,CAAJ,EAEuF;AACnF,iBAAOmD,aAAP;AACH,SAJD,MAKK;AACDA,UAAAA,aAAa,GAAGA,aAAa,CAACC,UAA9B;AACH;AACJ;AACJ;;AACD,WAAO,IAAP;AACH,GAfD;;AAgBA/F,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BgF,SAA9B,GAA0C,UAAUjC,GAAV,EAAe;AACrD;AACA;AACA,WAAOA,GAAG,CAACkC,OAAX;AACH,GAJD;;AAKAlG,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BkF,oBAA9B,GAAqD,UAAUC,IAAV,EAAgB;AACjE,SAAKnG,OAAL,CAAaC,cAAb,CAA4BmG,sBAA5B;AACA,QAAIC,IAAI,GAAG,KAAKrG,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiC,CAAjC,CAAX;;AACA,QAAIiB,IAAI,IAAIA,IAAI,CAAChC,SAAb,IAA0BgC,IAAI,CAAChC,SAAL,CAAe5B,IAAf,KAAwB,OAAlD,IAA6D4D,IAAI,CAACC,KAAL,CAAW7D,IAAX,KAAoB,eAArF,EAAsG;AAClG,UAAI8D,KAAK,GAAGF,IAAI,CAACG,OAAL,CAAa/B,MAAzB;;AACA,UAAI,CAAC8B,KAAK,CAACE,aAAN,CAAoB,KAAKlF,eAAzB,CAAL,EAAgD;AAC5C;AACA,YAAImF,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC;AAAE/C,UAAAA,CAAC,EAAE,KAAKrC,eAAL,CAAqBqC,CAArB,GAAyB,EAA9B;AAAkCC,UAAAA,CAAC,EAAE,KAAKtC,eAAL,CAAqBsC;AAA1D,SAAnC,CAAd;AACA,YAAI8B,MAAM,GAAG,KAAK3F,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAb;;AACA,YAAIoF,MAAM,IAAIA,MAAM,CAACkB,QAAjB,IAA8BlB,MAAM,CAACkB,QAAP,KAAoBR,IAAI,CAAC7B,EAA3D,EAAgE;AAC5D;AACA,cAAIsC,UAAU,GAAG,KAAK9G,OAAL,CAAa+G,SAAb,CAAuBpB,MAAM,CAACkB,QAA9B,EAAwCxC,SAAxC,CAAkD2C,WAAlD,KAAkE,UAAnF;AACA1H,UAAAA,sBAAsB,CAACqG,MAAM,CAACa,OAAR,EAAiBM,UAAjB,EAA6BX,IAAI,CAAC7E,QAAlC,EAA4C,KAAKtB,OAAjD,EAA0D,IAA1D,CAAtB;AACH;AACJ;AACJ;AACJ,GAhBD;;AAiBAD,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BiG,WAA9B,GAA4C,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AAC9D,WAAQC,SAAS,CAACC,QAAV,CAAmBC,KAAnB,CAAyB,KAAzB,KAAmCJ,GAAG,KAAK,WAA3C,IAA0DC,KAAK,KAAK,QAA5E;AACH,GAFD;;AAGApH,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BuG,kBAA9B,GAAmD,UAAUxD,GAAV,EAAe;AAC9D,QAAIH,CAAC,GAAGG,GAAG,CAACxB,OAAZ;AACA,QAAIsB,CAAC,GAAGE,GAAG,CAACvB,OAAZ;AACA,QAAIhB,aAAa,GAAG,KAAKxB,OAAL,CAAawB,aAAjC;AACA,QAAI8B,MAAM,GAAG9B,aAAa,CAACgG,YAA3B;AACA,QAAIrE,KAAK,GAAG3B,aAAa,CAACiG,WAA1B;AACA,QAAIC,OAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,UAAJ;AACA,QAAIC,WAAJ;AACA,QAAIpD,MAAJ;;AACA,QAAInB,MAAM,GAAG9B,aAAa,CAACsG,YAA3B,EAAyC;AACrC;AACAJ,MAAAA,OAAO,GAAG;AAAE9D,QAAAA,CAAC,EAAGT,KAAK,GAAG,EAAd;AAAmBU,QAAAA,CAAC,EAAE;AAAtB,OAAV;AACA8D,MAAAA,QAAQ,GAAG;AAAE/D,QAAAA,CAAC,EAAET,KAAL;AAAYU,QAAAA,CAAC,EAAE;AAAf,OAAX;AACA+D,MAAAA,UAAU,GAAG;AAAEhE,QAAAA,CAAC,EAAGT,KAAK,GAAG,EAAd;AAAmBU,QAAAA,CAAC,EAAEP;AAAtB,OAAb;AACAuE,MAAAA,WAAW,GAAG;AAAEjE,QAAAA,CAAC,EAAET,KAAL;AAAYU,QAAAA,CAAC,EAAEP;AAAf,OAAd;AACAmB,MAAAA,MAAM,GAAGpG,IAAI,CAAC0J,QAAL,CAAc,CAACL,OAAD,EAAUC,QAAV,EAAoBC,UAApB,EAAgCC,WAAhC,CAAd,CAAT;;AACA,UAAIpD,MAAM,CAACgC,aAAP,CAAqB;AAAE7C,QAAAA,CAAC,EAAEA,CAAL;AAAQC,QAAAA,CAAC,EAAEA;AAAX,OAArB,CAAJ,EAA0C;AACtC,eAAO,IAAP;AACH;AACJ;;AACD,QAAIV,KAAK,GAAG3B,aAAa,CAACwG,WAA1B,EAAuC;AACnCN,MAAAA,OAAO,GAAG;AAAE9D,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAGP,MAAM,GAAG;AAArB,OAAV;AACAqE,MAAAA,QAAQ,GAAG;AAAE/D,QAAAA,CAAC,EAAET,KAAL;AAAYU,QAAAA,CAAC,EAAGP,MAAM,GAAG;AAAzB,OAAX;AACAsE,MAAAA,UAAU,GAAG;AAAEhE,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAEP;AAAX,OAAb;AACAuE,MAAAA,WAAW,GAAG;AAAEjE,QAAAA,CAAC,EAAET,KAAL;AAAYU,QAAAA,CAAC,EAAEP;AAAf,OAAd;AACAmB,MAAAA,MAAM,GAAGpG,IAAI,CAAC0J,QAAL,CAAc,CAACL,OAAD,EAAUC,QAAV,EAAoBC,UAApB,EAAgCC,WAAhC,CAAd,CAAT;;AACA,UAAIpD,MAAM,CAACgC,aAAP,CAAqB;AAAE7C,QAAAA,CAAC,EAAEA,CAAL;AAAQC,QAAAA,CAAC,EAAEA;AAAX,OAArB,CAAJ,EAA0C;AACtC,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAjCD;AAkCA;;;AACA9D,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BiH,oBAA9B,GAAqD,YAAY;AAC7D,QAAIjE,KAAK,GAAG,IAAZ;;AACA,QAAIkE,KAAK,GAAG,EAAZ,CAF6D,CAG7D;;AACA,QAAIC,oBAAoB,GAAGC,WAAW,CAAC,UAAUjC,IAAV,EAAgB;AACnDnC,MAAAA,KAAK,CAAChE,OAAN,CAAcqI,oBAAd,CAAmCF,oBAAnC;AACH,KAFqC,EAEnCD,KAFmC,CAAtC;AAGA/D,IAAAA,UAAU,CAAC,YAAY;AACnBH,MAAAA,KAAK,CAAChE,OAAN,CAAcsI,mBAAd,GAAoC,IAApC;AACH,KAFS,EAEPJ,KAFO,CAAV;AAGH,GAVD;;AAWAnI,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BuH,mBAA9B,GAAoD,YAAY;AAC5D,QAAI,KAAKpH,MAAL,KAAgB,KAAKhB,cAArB,IAAuC,KAAKH,OAAL,CAAamF,aAAb,CAA2BqD,WAA3B,CAAuCnD,MAAlF,EAA0F;AACtF,WAAK,IAAIoD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKzI,OAAL,CAAamF,aAAb,CAA2BqD,WAA3B,CAAuCnD,MAA3D,EAAmEoD,CAAC,EAApE,EAAwE;AACpE,YAAI,KAAKtI,cAAL,IAAuB,KAAKH,OAAL,CAAamF,aAAb,CAA2BqD,WAA3B,CAAuCC,CAAvC,CAA3B,EAAsE;AAClE,eAAKC,oBAAL,CAA0BnN,YAAY,CAACoN,sBAAvC;AACA,eAAKxI,cAAL,GAAsB,MAAtB;AACH;AACJ;AACJ;AACJ,GATD;;AAUAJ,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B0H,oBAA9B,GAAqD,UAAUE,SAAV,EAAqB;AACtE,QAAI,KAAK5I,OAAL,CAAamF,aAAb,IAA8B,KAAKnF,OAAL,CAAamF,aAAb,CAA2BqD,WAA3B,CAAuCnD,MAAvC,GAAgD,CAAlF,EAAqF;AACjF,UAAInF,aAAa,GAAI0I,SAAS,KAAKrN,YAAY,CAACoN,sBAA5B,GAAsD,KAAKxI,cAA3D,GAA4E,KAAKgB,MAArG;AACA,UAAI0H,GAAG,GAAG;AAAE9F,QAAAA,OAAO,EAAE+F;AAAX,OAAV;;AACA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKzI,OAAL,CAAamF,aAAb,CAA2BqD,WAA3B,CAAuCnD,MAA3D,EAAmEoD,CAAC,EAApE,EAAwE;AACpE,YAAKvI,aAAa,KAAK,KAAKF,OAAL,CAAamF,aAAb,CAA2BqD,WAA3B,CAAuCC,CAAvC,EAA0CM,IAA7D,IACCH,SAAS,KAAKrN,YAAY,CAACyN,mBAA3B,IAAkD9I,aAAa,KAAK,QADzE,EACoF;AAChF2I,UAAAA,GAAG,CAAC9F,OAAJ,GAAc,KAAK/C,OAAL,CAAamF,aAAb,CAA2BqD,WAA3B,CAAuCC,CAAvC,CAAd;;AACA,cAAIG,SAAS,KAAKrN,YAAY,CAAC0N,sBAA/B,EAAuD;AACnD,iBAAK9I,cAAL,GAAsB,KAAKgB,MAA3B;AACH;;AACD,cAAIyH,SAAS,KAAKrN,YAAY,CAAC2N,qBAA/B,EAAsD;AAClD,iBAAKC,gBAAL,GAAwB,KAAKnJ,OAAL,CAAamF,aAAb,CAA2BqD,WAA3B,CAAuCC,CAAvC,EAA0CM,IAAlE;AACH;;AACD,cAAIhG,OAAO,GAAGuB,QAAQ,CAACC,cAAT,CAAwB,KAAKvE,OAAL,CAAamF,aAAb,CAA2BqD,WAA3B,CAAuCC,CAAvC,EAA0CM,IAA1C,GAAiD,aAAzE,CAAd;;AACA,cAAIH,SAAS,KAAKrN,YAAY,CAACyN,mBAA/B,EAAoD;AAChD,gBAAI,KAAK/I,cAAL,CAAoB6B,YAApB,CAAiC,KAAKP,eAAtC,KACGwB,OADH,IACcA,OAAO,CAACyB,EAAR,KAAe,KAAK2E,gBAAL,GAAwB,aADzD,EACwE;AACpE,mBAAKnJ,OAAL,CAAaoJ,YAAb,CAA0BR,SAA1B,EAAqCC,GAArC;AACH;AACJ,WALD,MAMK;AACD,iBAAK7I,OAAL,CAAaoJ,YAAb,CAA0BR,SAA1B,EAAqCC,GAArC;AACH;AACJ;AACJ;AACJ;AACJ,GA3BD;;AA4BA9I,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BqI,SAA9B,GAA0C,UAAUtF,GAAV,EAAe;AACrD,QAAI,KAAKxD,QAAL,KAAkB,IAAlB,IAA2B,KAAKG,IAAN,YAAuB/G,eAArD,EAAsE;AAClE;AACH;;AACD,SAAKyG,KAAL,GAAa,IAAb,CAJqD,CAKrD;;AACA,QAAIkJ,OAAO,GAAGvF,GAAG,CAACuF,OAAlB;AACA,QAAIC,eAAe,GAAGjF,QAAQ,CAACkF,sBAAT,CAAgC,aAAhC,EAA+C,CAA/C,IAAoD,IAApD,GAA2D,KAAjF;;AACA,QAAI,KAAKjC,kBAAL,CAAwBxD,GAAxB,KAAgC,CAACwF,eAArC,EAAsD;AAClD,WAAKE,WAAL,GAAmB,IAAnB;AACA1F,MAAAA,GAAG,CAAC2F,cAAJ;AACA;AACH,KAZoD,CAarD;AACA;AACA;AACA;;;AACA,SAAKhB,oBAAL,CAA0BnN,YAAY,CAAC2N,qBAAvC;;AACA,QAAI,CAAC,KAAKS,oBAAL,CAA0B5F,GAA1B,CAAD,IAAoCxG,eAAe,CAAC,KAAKyC,OAAN,CAAnD,IACCzD,UAAU,CAAC,KAAKyD,OAAN,CAAV,IAA4B,CAACxC,WAAW,CAAC,KAAKwC,OAAN,CAD7C,EAC8D;AAC1D,UAAI,KAAKmB,MAAL,KAAgB,QAAhB,IAA4B,KAAKA,MAAL,KAAgB,MAAhD,EAAwD;AACpD,aAAKnB,OAAL,CAAa4J,oBAAb,CAAkC,KAAKC,YAAvC,EAAqDnM,cAAc,CAACoM,KAApE,EAA2E,IAA3E;AACH;;AACD,UAAK,CAAC,KAAKpJ,IAAL,YAAqB5G,kBAArB,IAA2C,KAAK4G,IAAL,YAAqB3G,mBAAjE,MACGgK,GAAG,CAACgG,MAAJ,KAAe,CAAf,IAAoBhG,GAAG,CAACiG,OAAJ,KAAgB,CADvC,CAAL,EACiD;AAC7C;AACA,YAAInB,GAAG,GAAG;AACN9F,UAAAA,OAAO,EAAE1G,iBAAiB,CAAC,KAAK2D,OAAN,CADpB;AACoCsB,UAAAA,QAAQ,EAAEjF,iBAAiB,CAAC,KAAKkF,eAAN,CAD/D;AAEN0I,UAAAA,KAAK,EAAElG,GAAG,CAACiG,OAFL;AAEcE,UAAAA,YAAY,EAAE7N,iBAAiB,CAAC,KAAKsE,SAAL,CAAeuJ,YAAhB,CAF7C;AAGNH,UAAAA,MAAM,EAAGhG,GAAG,CAACgG,MAAJ,KAAe,CAAhB,GAAqB,MAArB,GAA+BhG,GAAG,CAACgG,MAAJ,KAAe,CAAhB,GAAqB,QAArB,GAAgC;AAHhE,SAAV;AAKA,aAAKxJ,QAAL,GAAgB,KAAhB;AACA,aAAKG,IAAL,CAAUW,OAAV,CAAkB,KAAKV,SAAvB;AACH,OAVD,MAWK,IAAM,KAAKJ,QAAL,KAAkB,IAAnB,IAA4B,KAAKD,WAAL,KAAqB,IAAjD,KACL,KAAKI,IAAL,YAAqB5G,kBAArB,IAA2C,KAAK4G,IAAL,YAAqB3G,mBAD3D,CAAL,EACuF;AACxF,aAAKuG,WAAL,GAAmB,IAAnB;AACA,aAAKK,SAAL,GAAiB,EAAjB;AACA,aAAKwJ,iBAAL,CAAuB,KAAK5I,eAA5B,EAA6C,KAAKZ,SAAlD;AACA,aAAKA,SAAL,CAAeW,QAAf,GAA0B,KAAKC,eAA/B;AACA,aAAKb,IAAL,CAAU2I,SAAV,CAAoB,KAAK1I,SAAzB;AACH,OAPI,MAQA;AACD,aAAKL,WAAL,GAAmB,IAAnB;AACA,aAAKiB,eAAL,GAAuB,KAAK6I,YAAL,GAAoB,KAAKhI,gBAAL,CAAsB2B,GAAtB,CAA3C;AACA,aAAKpD,SAAL,GAAiB,EAAjB;;AACA,YAAI,KAAKX,OAAL,CAAaqK,WAAb,IAA4B,CAAC,KAAK9C,kBAAL,CAAwBxD,GAAxB,CAAjC,EAA+D;AAC3D,eAAK/D,OAAL,CAAasK,OAAb;AACA,eAAKtK,OAAL,CAAaqK,WAAb,GAA2B,KAA3B;AACH;;AACD,YAAI1E,MAAM,GAAG,KAAK,CAAlB;AACA,YAAIe,OAAO,GAAG,KAAKjG,YAAL,CAAkBkG,qBAAlB,CAAwC,KAAKpF,eAA7C,EAA8D,KAAKvB,OAAnE,EAA4E,KAAKW,SAAjF,EAA4F,IAA5F,EAAkG,KAAKQ,MAAvG,CAAd;AACA,YAAIoJ,GAAG,GAAG,KAAK9J,YAAL,CAAkBmG,oBAAlB,CAAuC,KAAK5G,OAA5C,EAAqD0G,OAArD,EAA8D,KAAKvF,MAAnE,EAA2E,KAAKZ,QAAhF,EAA0F,KAAKI,SAA/F,EAA0G,KAAKY,eAA/G,CAAV;AACA,YAAIiJ,aAAa,GAAG,IAApB;;AACA,YAAID,GAAG,KAAK,IAAZ,EAAkB;AACdC,UAAAA,aAAa,GAAG,KAAKxK,OAAL,CAAayK,qBAAb,CAAmCF,GAAnC,EAAwC,KAAKhJ,eAA7C,CAAhB;;AACA,cAAIiJ,aAAJ,EAAmB;AACf7E,YAAAA,MAAM,GAAG,KAAK1F,cAAL,CAAoByK,UAApB,CAA+BF,aAA/B,EAA8CD,GAA9C,CAAT;AACH;AACJ;;AACD,aAAKpJ,MAAL,GAAc,KAAKnB,OAAL,CAAa2K,kBAAb,CAAgCJ,GAAhC,EAAqCC,aAArC,EAAoD,KAAKjJ,eAAzD,EAA0EoE,MAA1E,CAAd,CAlBC,CAmBD;;AACA,YAAIM,OAAO,GAAG,KAAKD,SAAL,CAAejC,GAAf,CAAd;;AACA,YAAIkC,OAAO,IAAIlC,GAAG,CAAC6G,QAAf,IAA2B,KAAK5K,OAAL,CAAa6K,0BAA5C,EAAwE;AACpE,eAAK1J,MAAL,GAAc,YAAd;AACH,SAFD,MAGK,IAAI,CAAC8E,OAAO,IAAIlC,GAAG,CAAC6G,QAAhB,KAA8B,CAACrO,UAAU,CAAC,KAAKyD,OAAN,CAA7C,EAA8D;AAC/D,eAAKmB,MAAL,GAAc,QAAd;AACH;;AACD,aAAKT,IAAL,GAAY,KAAKV,OAAL,CAAa8K,OAAb,CAAqB,KAAK3J,MAA1B,CAAZ;;AACA,YAAI,CAAC,KAAKT,IAAV,EAAgB;AACZ,eAAKS,MAAL,GAAc,QAAd;AACA,eAAKT,IAAL,GAAY,KAAKV,OAAL,CAAa8K,OAAb,CAAqB,KAAK3J,MAA1B,CAAZ;AACH;;AACD,aAAKgJ,iBAAL,CAAuB,KAAK5I,eAA5B,EAA6C,KAAKZ,SAAlD;;AACA,YAAIsF,OAAO,IAAIlC,GAAG,CAAC6G,QAAnB,EAA6B;AACzB,cAAIG,IAAI,GAAI9E,OAAO,IAAIlC,GAAG,CAAC6G,QAAhB,GAA4B;AAAE3E,YAAAA,OAAO,EAAEA,OAAX;AAAoB2E,YAAAA,QAAQ,EAAE7G,GAAG,CAAC6G;AAAlC,WAA5B,GAA2E;AAAE3E,YAAAA,OAAO,EAAE;AAAX,WAAtF;AACA,eAAKtF,SAAL,CAAeoK,IAAf,GAAsBA,IAAtB;AACH;;AACD,aAAKpK,SAAL,CAAeW,QAAf,GAA0B,KAAKC,eAA/B;AACA,aAAKb,IAAL,CAAU2I,SAAV,CAAoB,KAAK1I,SAAzB;AACA,aAAKqK,gBAAL,GAAwB;AAAEvF,UAAAA,MAAM,EAAE,KAAK9E,SAAL,CAAe8E,MAAzB;AAAiCwF,UAAAA,aAAa,EAAE,KAAKtK,SAAL,CAAesK;AAA/D,SAAxB;AACA,aAAKD,gBAAL,CAAsB1J,QAAtB,GAAiC,KAAKC,eAAtC;AACA,aAAKyJ,gBAAL,CAAsBD,IAAtB,GAA6B,KAAKpK,SAAL,CAAeoK,IAA5C;AACA,aAAKxK,QAAL,GAAgB,KAAhB;;AACA,YAAIwD,GAAG,CAACtB,IAAJ,KAAa,YAAjB,EAA+B;AAC3B,cAAI6G,OAAO,IAAIA,OAAO,CAACjE,MAAR,IAAkB,CAAjC,EAAoC;AAChC,iBAAK6F,cAAL,GAAsBpN,eAAe,CAAC,KAAKoN,cAAN,EAAsBnH,GAAtB,EAA2BuF,OAA3B,CAArC;AACH;;AACD,cAAI,CAACA,OAAL,EAAc;AACVvF,YAAAA,GAAG,CAAC2F,cAAJ;AACH;AACJ;AACJ;AACJ;;AACD,QAAI,CAAC,KAAKhE,eAAL,CAAqB3B,GAAG,CAAC4B,MAAzB,CAAD,IAAqC,CAAC,KAAKD,eAAL,CAAqB3B,GAAG,CAAC4B,MAAzB,EAAiC,IAAjC,CAAtC,IAAiF,CAAC2D,OAAtF,EAAgG;AAC5FvF,MAAAA,GAAG,CAAC2F,cAAJ;AACH;AACJ,GAlGD;AAmGA;;;AACA3J,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BmK,eAA9B,GAAgD,UAAU9I,CAAV,EAAakI,GAAb,EAAkB;AAC9D,QAAI,KAAK7J,IAAL,YAAqB5G,kBAArB,IAA2C,KAAK4G,IAAL,YAAqB3G,mBAApE,EAAyF;AACrF,WAAK2G,IAAL,CAAU0K,SAAV,CAAoB,KAAKzK,SAAzB;AACH;;AACD,QAAI,KAAKX,OAAL,CAAaqL,cAAb,CAA4BC,aAAhC,EAA+C;AAC3C,WAAKC,eAAL,CAAqBlJ,CAArB;AACH,KAFD,MAGK;AACD,UAAI,CAAC,KAAKF,OAAV,EAAmB;AACd,aAAKzB,IAAL,CAAU0K,SAAV,CAAoB,KAAKzK,SAAzB,CAAD;AACH;AACJ;;AACD,QAAI,KAAKA,SAAL,CAAegF,MAAnB,EAA2B;AACvB,WAAKkE,YAAL,GAAoB,KAAKlJ,SAAL,CAAegF,MAAnC;AACH;;AACD,QAAI6F,MAAM,GAAG,KAAK7K,SAAL,CAAegF,MAAf,YAAiCzL,IAAjC,IAAyCqQ,GAAG,YAAYrQ,IAAxD,GAA+D,KAA/D,GAAuE,IAApF;;AACA,QAAI,KAAKwG,IAAL,YAAqBnG,WAAzB,EAAsC;AAClC,WAAKyF,OAAL,CAAa4J,oBAAb,CAAkC,KAAKC,YAAL,YAA6B3P,IAA7B,GAAoC,KAAK2P,YAAzC,GAAwD,KAAK4B,SAA/F,EAA0G/N,cAAc,CAACgO,OAAf,GAAyBhO,cAAc,CAACoM,KAAlJ,EAAyJ0B,MAAzJ;AACH;;AACD,QAAI,KAAK3B,YAAL,YAA6B3P,IAA7B,IACG,KAAKuR,SAAL,YAA0BvR,IAD7B,IACqC,KAAKuR,SAD1C,IACuD,KAAKA,SAAL,CAAejH,EAAf,KAAsB,KAAKqF,YAAL,CAAkBrF,EADnG,EACuG;AACnG,WAAKxE,OAAL,CAAa4J,oBAAb,CAAkC,KAAK6B,SAAvC,EAAkD/N,cAAc,CAACgO,OAAf,GAAyBhO,cAAc,CAACoM,KAA1F,EAAiG,IAAjG;AACH;;AACD,SAAKD,YAAL,GAAoB2B,MAAM,GAAG,IAAH,GAAUjB,GAApC;AACA,SAAKkB,SAAL,GAAiBD,MAAM,GAAG,IAAH,GAAUjB,GAAjC;AACH,GAzBD;AA0BA;;;AACAxK,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B2K,WAA9B,GAA4C,UAAUpB,GAAV,EAAe;AACvD,QAAI,KAAKpJ,MAAL,KAAgB,aAAhB,IAAiC,KAAKR,SAAL,CAAesK,aAAhD,KACC,KAAKtK,SAAL,CAAesK,aAAf,YAAwChN,WAAxC,IAAuD,KAAK0C,SAAL,CAAesK,aAAf,YAAwCrL,kBADhG,CAAJ,EACyH;AACrH,UAAIgM,UAAU,GAAG,KAAK3L,cAAL,CAAoByK,UAApB,CAA+B,KAAK/J,SAAL,CAAesK,aAA9C,EAA6D,KAAKtK,SAAL,CAAe8E,MAA5E,CAAjB;;AACA,UAAI,CAACxK,UAAU,CAAC,KAAK+E,OAAN,EAAe4L,UAAf,EAA2B,KAA3B,EAAkC,KAAKjL,SAAL,CAAesK,aAAjD,CAAX,IAA8EnO,OAAO,CAAC8O,UAAD,CAAzF,EAAuG;AACnG,aAAKzK,MAAL,GAAc,WAAd;AACA,aAAKT,IAAL,GAAY,KAAKoK,OAAL,CAAa,KAAK3J,MAAlB,CAAZ;AACA,aAAKT,IAAL,CAAU2I,SAAV,CAAoB,KAAK2B,gBAAzB;AACH;AACJ,KARD,MASK,IAAIlO,OAAO,CAACyN,GAAD,CAAP,IAAgBvN,SAAS,CAACuN,GAAD,CAAzB,IAAkC,KAAKS,gBAAvC,IACL,KAAKA,gBAAL,CAAsBvF,MADjB,IAC2B,KAAKtE,MAAL,KAAgB,QAD/C,EACyD;AAC1D,UAAI,CAAClG,UAAU,CAAC,KAAK+E,OAAN,EAAe,KAAKW,SAAL,CAAe8E,MAA9B,EAAsC,KAAtC,CAAX,IACA,KAAK9E,SAAL,CAAe8E,MAAf,YAAiC1K,QADrC,EAC+C;AAC3C,aAAKoP,iBAAL,CAAuB,KAAK5I,eAA5B,EAA6C,KAAKZ,SAAlD;AACH;;AACD,UAAI,EAAE4J,GAAG,YAAY7Q,SAAjB,KAAgC6Q,GAAG,YAAY7Q,SAAf,IAChC,EAAEyB,QAAQ,CAAC,KAAKoG,eAAN,EAAuBgJ,GAAG,CAACsB,WAA3B,EAAwCtB,GAAG,CAACuB,UAA5C,CAAR,IACE3Q,QAAQ,CAAC,KAAKoG,eAAN,EAAuBgJ,GAAG,CAACwB,WAA3B,EAAwCxB,GAAG,CAACuB,UAA5C,CADZ,CADJ,EAE2E;AACvE,aAAK3K,MAAL,GAAc,MAAd;AACH;;AACD,WAAKT,IAAL,GAAY,KAAKoK,OAAL,CAAa,KAAK3J,MAAlB,CAAZ;AACA,WAAKT,IAAL,CAAU2I,SAAV,CAAoB,KAAK2B,gBAAzB;AACH;AACJ,GAxBD;;AAyBAjL,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BgL,kBAA9B,GAAmD,UAAUzB,GAAV,EAAe;AAC9D,QAAIA,GAAG,KAAKA,GAAG,CAAC0B,MAAJ,IAAc1B,GAAG,CAAC2B,OAAlB,IAA6B3B,GAAG,CAAC4B,QAAtC,CAAP,EAAwD;AACpD,aAAO,KAAP;AACH,KAFD,MAGK;AACD,aAAO,IAAP;AACH;AACJ,GAPD;AAQA;;AACA;;;AACApM,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BoK,SAA9B,GAA0C,UAAU/I,CAAV,EAAaiH,OAAb,EAAsB;AAC5D,SAAKlJ,KAAL,GAAa,IAAb;;AACA,QAAI,KAAKqJ,WAAT,EAAsB;AAClBpH,MAAAA,CAAC,CAACqH,cAAF;AACA;AACH;;AACD,QAAInM,eAAe,CAAC,KAAKyC,OAAN,CAAf,IAAkCzD,UAAU,CAAC,KAAKyD,OAAN,CAAV,IAA4B,CAACxC,WAAW,CAAC,KAAKwC,OAAN,CAA9E,EAA+F;AAC3F,WAAKuB,eAAL,GAAuB,KAAKa,gBAAL,CAAsBC,CAAtB,CAAvB;AACA,UAAIqE,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC,KAAKpF,eAAxC,CAAd;AACA,UAAIgJ,GAAG,GAAG,KAAKvK,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAV;AACA7B,MAAAA,gBAAgB,CAAC,KAAKsB,OAAN,EAAe,KAAKuB,eAApB,CAAhB;AACA,UAAI6K,KAAK,GAAG,KAAZ;AACA,UAAIzG,MAAM,GAAG,KAAK,CAAlB;;AACA,UAAItD,CAAC,CAACI,IAAF,KAAW,WAAf,EAA4B;AACxB6G,QAAAA,OAAO,GAAGjH,CAAC,CAACiH,OAAZ;;AACA,YAAIA,OAAO,IAAIA,OAAO,CAACjE,MAAR,GAAiB,CAAhC,EAAmC;AAC/B,eAAKgH,aAAL,GAAqBvO,eAAe,CAAC,KAAKuO,aAAN,EAAqBhK,CAArB,EAAwBiH,OAAxB,CAApC;;AACA,cAAI,KAAKnI,MAAL,KAAgB,WAApB,EAAiC;AAC7BiL,YAAAA,KAAK,GAAG,IAAR;AACH;AACJ;AACJ;;AACD,UAAI5S,KAAK,CAAC8S,MAAN,CAAa,KAAK/K,eAAlB,EAAmC,KAAK6I,YAAxC,MAA0D,KAA1D,IAAmE,KAAK7J,QAA5E,EAAsF;AAClF,YAAI,KAAKD,WAAL,KAAqB,KAArB,IAA8B8L,KAAlC,EAAyC;AACrC,eAAKzL,SAAL,GAAiB,EAAjB;AACA,cAAI6J,aAAa,GAAG,IAApB;;AACA,cAAID,GAAG,KAAK,IAAZ,EAAkB;AACdC,YAAAA,aAAa,GAAG,KAAKxK,OAAL,CAAayK,qBAAb,CAAmCF,GAAnC,EAAwC,KAAKhJ,eAA7C,CAAhB;;AACA,gBAAIgJ,GAAG,KAAK,KAAKV,YAAjB,EAA+B;AAC3B,kBAAI0C,SAAS,GAAG,KAAKC,UAAL,EAAhB;;AACA,kBAAI,KAAK3C,YAAL,IAAqB,KAAKA,YAAL,CAAkB4C,OAAlB,CAA0BC,MAA1B,KAAqC,MAA1D,IAAoEH,SAAS,KAAK,EAAtF,EAA0F;AACtF,qBAAKI,YAAL;AACH;;AACD,mBAAK3M,OAAL,CAAa4J,oBAAb,CAAkC,KAAKC,YAAvC,EAAqDnM,cAAc,CAACoM,KAApE,EAA2E,IAA3E;;AACA,kBAAIS,GAAG,YAAYrQ,IAAnB,EAAyB;AACrB,qBAAKuR,SAAL,GAAiBlB,GAAjB;AACH;;AACD,kBAAIqC,eAAe,GAAG,IAAtB;;AACA,kBAAI,CAAC,KAAKZ,kBAAL,CAAwBzB,GAAxB,CAAD,IACI,KAAKV,YAAL,IAAqB,KAAKmC,kBAAL,CAAwB,KAAKnC,YAA7B,CAD7B,EAC0E;AACtE+C,gBAAAA,eAAe,GAAG,KAAlB;AACH;;AACD,mBAAK/C,YAAL,GAAoB+C,eAAe,GAAGrC,GAAH,GAAS,KAAKV,YAAjD;;AACA,kBAAI+C,eAAJ,EAAqB;AACjB,qBAAKC,YAAL,CAAkB,KAAKtL,eAAvB,EAAwC,KAAxC;AACH,eAFD,MAGK;AACD,qBAAKsI,YAAL,GAAoBU,GAApB;AACH;AACJ,aArBD,MAsBK,IAAI,CAAC,KAAKV,YAAN,IAAsB,KAAKA,YAAL,KAAsBU,GAAhD,EAAqD;AACtD,mBAAKsC,YAAL,CAAkB,KAAKtL,eAAvB,EAAwC,IAAxC;AACH;;AACD,gBAAIiJ,aAAJ,EAAmB;AACf7E,cAAAA,MAAM,GAAG,KAAK1F,cAAL,CAAoByK,UAApB,CAA+BF,aAA/B,EAA8CD,GAA9C,CAAT;AACH;AACJ;;AACD,eAAKpJ,MAAL,GAAc,KAAKnB,OAAL,CAAa2K,kBAAb,CAAgCJ,GAAhC,EAAqCC,aAArC,EAAoD,KAAKjJ,eAAzD,EAA0EoE,MAA1E,CAAd;AACA,eAAK+C,oBAAL,CAA0BnN,YAAY,CAAC0N,sBAAvC;AACA,eAAKV,mBAAL;AACA,eAAK4B,iBAAL,CAAuB,KAAK5I,eAA5B,EAA6C,KAAKZ,SAAlD;AACA,eAAKD,IAAL,GAAY,KAAKoK,OAAL,CAAa,KAAK3J,MAAlB,CAAZ;AACA,eAAK2L,WAAL;;AACA,cAAI,KAAKpM,IAAL,YAAqB9G,oBAArB,IACA,KAAK8G,IAAL,YAAqB3G,mBADrB,IAEA,KAAK2G,IAAL,YAAqB5G,kBAFzB,EAE6C;AACzC,iBAAK4G,IAAL,CAAU0K,SAAV,CAAoB,KAAKzK,SAAzB;AACH,WAJD,MAKK,IAAI2I,OAAO,IAAI,KAAK5I,IAAL,YAAqBhG,WAApC,EAAiD;AAClD,iBAAKgG,IAAL,CAAU2I,SAAV,CAAoB,KAAK1I,SAAzB;AACH;;AACD,eAAKuE,YAAL;AACA,eAAKgB,oBAAL,CAA0B,KAAKvF,SAA/B;AACA,cAAI6K,MAAM,GAAG,KAAb;;AACA,cAAI,EAAE,KAAK3B,YAAL,IAAsB,EAAE,KAAKnJ,IAAL,YAAqBhG,WAAvB,CAAtB,IACE6P,GAAG,YAAYrQ,IAAf,IAAuB,KAAK8R,kBAAL,CAAwBzB,GAAxB,CADzB,KAED,KAAKvK,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiCC,MAAjC,KAA4C,CAA5C,IAAiD,CAACpK,UAAU,CAAC,KAAK+E,OAAN,EAAe,KAAK6J,YAApB,CAF3D,CAAF,CAAJ,EAEsG;AAClG2B,YAAAA,MAAM,GAAG,IAAT;AACH;;AACD,eAAKxL,OAAL,CAAa4J,oBAAb,CAAkC,KAAKC,YAAvC,EAAqDnM,cAAc,CAACoM,KAApE,EAA2E0B,MAA3E;AACA,cAAIuB,OAAO,GAAG,KAAKP,UAAL,EAAd;;AACA,cAAIjC,GAAG,KAAK,IAAR,IAAgB,KAAKV,YAArB,IAAqC,KAAKA,YAAL,CAAkB4C,OAAlB,CAA0BC,MAA1B,KAAqC,MAA1E,IAAoFK,OAAxF,EAAiG;AAC7F,iBAAKlD,YAAL,GAAoB,IAApB;AACA,iBAAK8C,YAAL;AACH;;AACDP,UAAAA,KAAK,GAAG,KAAR;AACH,SA/DD,MAgEK;AACD,eAAKzL,SAAL,CAAeW,QAAf,GAA0B,KAAKC,eAA/B;;AACA,cAAI,KAAKJ,MAAL,KAAgB,MAAhB,IAA0B,CAAClG,UAAU,CAAC,KAAK+E,OAAN,EAAe,KAAKW,SAAL,CAAe8E,MAA9B,EAAsC,KAAtC,CAArC,IACA,KAAK9E,SAAL,CAAe8E,MAAf,YAAiC1K,QADrC,EAC+C;AAC3C,iBAAKoP,iBAAL,CAAuB,KAAK5I,eAA5B,EAA6C,KAAKZ,SAAlD;AACH;;AACD,eAAKmM,WAAL;;AACA,cAAIzK,CAAC,CAAC4D,OAAF,IAAa5D,CAAC,CAACuI,QAAnB,EAA6B;AACzB,gBAAIG,IAAI,GAAI1I,CAAC,CAAC4D,OAAF,IAAa5D,CAAC,CAACuI,QAAhB,GAA4B;AAAE3E,cAAAA,OAAO,EAAE5D,CAAC,CAAC4D,OAAb;AAAsB2E,cAAAA,QAAQ,EAAEvI,CAAC,CAACuI;AAAlC,aAA5B,GAA2E;AAAE3E,cAAAA,OAAO,EAAE;AAAX,aAAtF;AACA,iBAAKtF,SAAL,CAAeoK,IAAf,GAAsBA,IAAtB;AACH;;AACD,eAAKY,WAAL,CAAiBpB,GAAjB;AACA,cAAIyC,OAAO,GAAG,KAAKC,mBAAL,CAAyB,KAAKtM,SAA9B,CAAd;AACA,eAAKwJ,iBAAL,CAAuB,KAAK5I,eAA5B,EAA6C,KAAKZ,SAAlD,EAA6D,KAAKA,SAAL,CAAe8E,MAA5E,EAAoFuH,OAApF;AACA,eAAK9H,YAAL;AACA,eAAK3E,QAAL,GAAgB,IAAhB;AACA,eAAKyK,gBAAL,GAAwB,IAAxB;;AACA,cAAI,KAAK7J,MAAL,KAAgB,MAAhB,IAA0B,KAAKA,MAAL,KAAgB,QAA9C,EAAwD;AACpD,iBAAKnB,OAAL,CAAa4B,cAAb,GAA8B,KAAK5B,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAAC8R,YAA1E;AACH;;AACD,eAAK/B,eAAL,CAAqB9I,CAArB,EAAwBkI,GAAxB;AACH;;AACD,aAAKH,YAAL,GAAoB,KAAK7I,eAAzB;;AACA,YAAI,CAAC,KAAKmE,eAAL,CAAqBrD,CAAC,CAACsD,MAAvB,EAA+B,IAA/B,CAAL,EAA2C;AACvCtD,UAAAA,CAAC,CAACqH,cAAF;AACH;AACJ;AACJ;AACJ,GAnHD;AAoHA;;;AACA3J,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BwL,UAA9B,GAA2C,YAAY;AACnD,QAAIW,gBAAgB,GAAK,KAAKtD,YAAL,YAA6B3P,IAA9B,IACpB,KAAK2P,YAAL,CAAkBuD,WAAlB,GAAgCzP,eAAe,CAAC0P,OAD7B,IAEjB,KAAKxD,YAAL,YAA6BnQ,SAA9B,IACG,KAAKmQ,YAAL,CAAkBuD,WAAlB,GAAgCxP,oBAAoB,CAACyP,OAH7D;AAIA,QAAIN,OAAO,GAAGI,gBAAgB,GAAG,KAAKtD,YAAL,CAAkB4C,OAAlB,CAA0BM,OAA7B,GAC1B,KAAK/M,OAAL,CAAayM,OAAb,CAAqBM,OADzB;AAEA,WAAOA,OAAP;AACH,GARD;;AASAhN,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BuK,eAA9B,GAAgD,UAAUlJ,CAAV,EAAa;AACzD,QAAIiL,kBAAkB,GAAG,KAAKC,eAAL,CAAqBlL,CAArB,CAAzB;;AACA,QAAI,CAACiL,kBAAD,IAAuB,KAAK9M,eAAhC,EAAiD;AAC7C,WAAKA,eAAL,GAAuB,KAAvB;AACAgN,MAAAA,aAAa,CAAC,KAAKC,YAAN,CAAb;AACH,KAHD,MAIK,IAAIH,kBAAJ,EAAwB;AACzB,UAAI,CAAC,KAAK5M,IAAL,YAAqB/G,eAArB,IAAwC,KAAK+G,IAAL,YAAqB9G,oBAA7D,IACE,KAAK8G,IAAL,YAAqBtG,QADvB,IACmC,KAAKsG,IAAL,YAAqBrG,UADxD,IAEE,KAAKqG,IAAL,YAAqBvG,UAFxB,KAEuC,KAAKoG,QAFhD,EAE0D;AACtD;AACA,YAAImN,SAAS,GAAG,IAAhB;AACA,YAAIC,OAAO,GAAG,GAAd;;AACA,YAAI,KAAK3N,OAAL,CAAaqL,cAAb,CAA4BC,aAA5B,IAA6CgC,kBAA7C,IAAmE,CAAC,KAAK9M,eAA7E,EAA8F;AAC1F,eAAKA,eAAL,GAAuB,IAAvB;AACA,eAAKiN,YAAL,GAAoBrF,WAAW,CAAC,UAAUjC,IAAV,EAAgB;AAC5CuH,YAAAA,SAAS,CAACE,YAAV,CAAuBN,kBAAvB,EAA2CjL,CAA3C,EAA8CsL,OAA9C;AACH,WAF8B,EAE5BA,OAF4B,CAA/B;AAGH;AACJ;AACJ,KAdI,MAeA;AACD,WAAKxL,OAAL,GAAe,CAAE,KAAKzB,IAAL,CAAU0K,SAAV,CAAoB,KAAKzK,SAAzB,CAAjB;AACH;AACJ,GAxBD;AAyBA;;AACA;;;AACAZ,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BK,OAA9B,GAAwC,UAAU0C,GAAV,EAAe;AACnD,SAAK2E,oBAAL,CAA0BnN,YAAY,CAACyN,mBAAvC;;AACA,QAAI,KAAKhJ,OAAL,CAAa6N,IAAb,KAAsB,KAAtB,IAA+BlR,YAAY,CAAC,KAAKqD,OAAN,CAA/C,EAA+D;AAC3D,WAAKiI,oBAAL;AACH;;AACD,SAAKjI,OAAL,CAAa8N,sBAAb,GAAsC,IAAtC;AACA,SAAK9N,OAAL,CAAa+N,eAAb,CAA6BC,eAA7B,GACI,KAAKhO,OAAL,CAAaiO,iBAAb,CAA+B,KAAKjO,OAAL,CAAa+N,eAAb,CAA6BC,eAA5D,EAA6EvS,cAAc,CAACyS,kBAA5F,CADJ;AAEA,QAAI5E,OAAO,GAAGvF,GAAG,CAACuF,OAAlB;;AACA,QAAI,KAAKG,WAAT,EAAsB;AAClB,WAAKA,WAAL,GAAmB,KAAnB;AACA1F,MAAAA,GAAG,CAAC2F,cAAJ;AACA;AACH;;AACD,QAAI,CAAC,KAAKC,oBAAL,CAA0B5F,GAA1B,CAAD,IAAoCxG,eAAe,CAAC,KAAKyC,OAAN,CAAnD,IACIzD,UAAU,CAAC,KAAKyD,OAAN,CAAV,IAA4B,CAACxC,WAAW,CAAC,KAAKwC,OAAN,CADhD,EACiE;AAC7D,UAAI,KAAKU,IAAL,KAAc,EAAE,KAAKA,IAAL,YAAqB5G,kBAArB,IAA2C,KAAK4G,IAAL,YAAqB3G,mBAAlE,KACb,CAAC,KAAK2G,IAAL,YAAqB5G,kBAArB,IAA2C,KAAK4G,IAAL,YAAqB3G,mBAAjE,KACMgK,GAAG,CAACoK,MAAJ,KAAe,CAFtB,CAAJ,EAE+B;AAC3B,YAAI,CAAC,KAAKzI,eAAL,CAAqB3B,GAAG,CAAC4B,MAAzB,CAAD,IAAqC,KAAKrF,WAA9C,EAA2D;AACvDgE,UAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAKvE,OAAL,CAAa+C,OAAb,CAAqByB,EAArB,GAA0B,SAAlD,EAA6DpE,KAA7D;AACH;;AACD,YAAI,CAAC,KAAKG,QAAN,IAAkBwD,GAAG,CAACqK,KAAJ,KAAc,CAApC,EAAuC;AACnC,cAAI,KAAKjN,MAAL,KAAgB,MAApB,EAA4B;AACxB,iBAAKA,MAAL,GAAc,QAAd;AACA,gBAAIkN,gBAAgB,GAAI,KAAKrO,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiCI,MAAjC,CAAwC,KAAKxF,OAAL,CAAamF,aAAb,CAA2BG,UAAnE,CAAxB;AACA,gBAAIoB,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC,KAAKpF,eAAxC,CAAd;AACA,gBAAIgJ,GAAG,GAAG,KAAKvK,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAV;AACA,gBAAI+N,gBAAgB,GAAG,IAAvB;;AACA,gBAAK,CAACvK,GAAG,CAACkC,OAAL,IAAgB,KAAK3F,WAArB,IACG,KAAKN,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiCC,MAAjC,GAA0C,KAAKrF,OAAL,CAAamF,aAAb,CAA2BG,UAA3B,CAAsCD,MAAjF,GAA2F,CAD9F,IAEGtB,GAAG,CAACqK,KAAJ,KAAc,CAFjB,IAEsB,CAACxR,wBAAwB,CAAC,KAAKoD,OAAL,CAAa4B,cAAd,CAFnD,EAEkF;AAC9E0M,cAAAA,gBAAgB,GAAG,KAAnB;AACA,mBAAKrO,cAAL,CAAoBsO,cAApB;AACH;;AACD,gBAAI,CAACtT,UAAU,CAAC,KAAK+E,OAAN,EAAeuK,GAAf,CAAX,IAAmC,CAAC+D,gBAAxC,EAA2D;AACvD,mBAAKrO,cAAL,CAAoBuO,aAApB,CAAkC,CAACjE,GAAD,CAAlC,EAAyCzB,SAAzC,EAAoDuF,gBAApD;AACH;AACJ;AACJ;;AACD,YAAII,iBAAiB,GAAG,KAAxB;AACA,YAAIC,SAAS,GAAG,KAAKC,yBAAL,EAAhB;AACA,YAAIC,aAAa,GAAG,KAAK,CAAzB;AACA,aAAKC,UAAL;AACA,aAAKtO,QAAL,GAAgB,KAAhB;AACA,aAAKD,WAAL,GAAmB,KAAnB;AACA,aAAKiB,eAAL,GAAuB,KAAKa,gBAAL,CAAsB2B,GAAtB,CAAvB;;AACA,YAAI,KAAK/D,OAAL,CAAa8O,cAAb,CAA4BC,YAAhC,EAA8C;AAC1CH,UAAAA,aAAa,GAAG,KAAKI,qBAAL,EAAhB;AACH;;AACD,YAAI,KAAKtO,IAAL,KAAc,KAAKA,IAAL,CAAU0J,YAAV,IAA0B,KAAK1J,IAAL,YAAqBjG,SAA7D,CAAJ,EAA6E;AACzE,eAAKkG,SAAL,CAAeW,QAAf,GAA0B,KAAKC,eAA/B;AACA,cAAIyL,OAAO,GAAG,KAAKC,mBAAL,CAAyB,KAAKtM,SAA9B,CAAd;AACA,eAAKwJ,iBAAL,CAAuB,KAAK5I,eAA5B,EAA6C,KAAKZ,SAAlD,EAA6D,KAAKA,SAAL,CAAe8E,MAA5E,EAAoFuH,OAApF;AACA,cAAI/G,OAAO,GAAG,KAAKD,SAAL,CAAejC,GAAf,CAAd;;AACA,cAAIkC,OAAO,IAAIlC,GAAG,CAAC6G,QAAnB,EAA6B;AACzB,gBAAIG,IAAI,GAAI9E,OAAO,IAAIlC,GAAG,CAAC6G,QAAhB,GAA4B;AAAE3E,cAAAA,OAAO,EAAEA,OAAX;AAAoB2E,cAAAA,QAAQ,EAAE7G,GAAG,CAAC6G;AAAlC,aAA5B,GACP;AAAE3E,cAAAA,OAAO,EAAE;AAAX,aADJ;AAEA,iBAAKtF,SAAL,CAAeoK,IAAf,GAAsBA,IAAtB;AACH;;AACD,cAAI,KAAK/K,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAAC8R,YAAhD,EAA8D;AAC1D,iBAAKlN,OAAL,CAAa4B,cAAb,GAA8B,KAAK5B,OAAL,CAAa4B,cAAb,GAA8B,CAACxG,aAAa,CAAC8R,YAA3E;AACH;;AACD,eAAKvM,SAAL,CAAesO,UAAf,GAA4BlL,GAAG,CAACoK,MAAhC;;AACA,cAAI,KAAKnO,OAAL,CAAa8O,cAAb,CAA4BC,YAA5B,KAA6C,KAAKrO,IAAL,YAAqBtG,QAArB,IAAiC,KAAKsG,IAAL,YAAqBrG,UAAnG,CAAJ,EAAoH;AAChH,gBAAI,KAAK2F,OAAL,CAAa8O,cAAb,CAA4B5E,YAA5B,IACA,KAAKlK,OAAL,CAAa8O,cAAb,CAA4B5E,YAA5B,CAAyCrD,QAAzC,KAAsD,EAD1D,EAC8D;AAC1D,kBAAIf,UAAU,GAAG,KAAK9F,OAAL,CAAakP,SAAb,CAAuB,KAAKlP,OAAL,CAAa8O,cAAb,CAA4B5E,YAA5B,CAAyCrD,QAAhE,CAAjB;;AACA,kBAAIf,UAAU,IAAIA,UAAU,CAACmG,MAA7B,EAAqC;AACjC,qBAAKhM,cAAL,CAAoBkP,WAApB,GAAkC,IAAlC;AACH;AACJ;;AACDV,YAAAA,iBAAiB,GAAG,KAAKzO,OAAL,CAAaoP,iBAAb,IACb,KAAKpP,OAAL,CAAa+G,SAAb,CAAuB,QAAvB,CADa,IACuB,KAAKpG,SAAL,CAAegF,MADtC,IACgD,KAAKhF,SAAL,CAAegF,MAAf,CAAsBsG,MADtE,KAEX,KAAKtL,SAAL,CAAe8E,MAAf,YAAiC1K,QAAjC,IAA6C,KAAK4F,SAAL,CAAe8E,MAAf,CAAsBL,KAAtB,CAA4BC,MAA5B,GAAqC,CAAlF,IACE,KAAK1E,SAAL,CAAe8E,MAAf,CAAsBL,KAAtB,CAA4B,CAA5B,EAA+ByB,QAA/B,KAA4C,EAD/C,IACuD,KAAKlG,SAAL,CAAe8E,MAAf,CAAsBoB,QAAtB,KAAmC,EAH9E,CAApB;;AAIA,gBAAI4H,iBAAJ,EAAuB;AACnB,mBAAKzO,OAAL,CAAa4B,cAAb,GAA8B,KAAK5B,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAACiU,0BAA1E;AACH;;AACD,iBAAK3O,IAAL,CAAUW,OAAV,CAAkB,KAAKV,SAAvB,EAAkC+N,SAAS,CAACY,gBAA5C;AACH,WAhBD,MAiBK;AACD,iBAAK5O,IAAL,CAAUW,OAAV,CAAkB,KAAKV,SAAvB;;AACA,gBAAI,KAAKX,OAAL,CAAauP,SAAb,KAA2BC,MAAM,CAACpI,SAAP,CAAiBqI,SAAjB,CAA2B/M,OAA3B,CAAmC,OAAnC,MAAgD,CAAC,CAAjD,IAAsD8M,MAAM,CAACpI,SAAP,CAAiBqI,SAAjB,CAA2B/M,OAA3B,CAAmC,KAAnC,MAA8C,CAAC,CAAhI,CAAJ,EAAwI;AACpI,kBAAI,CAACqB,GAAG,CAAC2L,KAAL,IAAe3L,GAAG,YAAY4L,UAA9B,IAA6C5L,GAAG,CAACpB,cAArD,EAAqE;AACjE6M,gBAAAA,MAAM,CAACI,YAAP,GAAsBC,eAAtB;AACA,qBAAK7P,OAAL,CAAa8P,iBAAb,CAA+BC,WAA/B,CAA2CC,IAA3C,CAAgDjM,GAAG,CAACpB,cAAJ,CAAmB,CAAnB,EAAsB+M,KAAtE,EAA6E3L,GAAG,CAACpB,cAAJ,CAAmB,CAAnB,EAAsBsN,KAAnG,EAA0G,KAAKjQ,OAAL,CAAa+C,OAAvH;AACAgB,gBAAAA,GAAG,CAAC2F,cAAJ;AACH,eAJD,MAKK;AACD,qBAAK1J,OAAL,CAAa8P,iBAAb,CAA+BC,WAA/B,CAA2CC,IAA3C,CAAgDjM,GAAG,CAAC2L,KAApD,EAA2D3L,GAAG,CAACkM,KAA/D,EAAsE,KAAKjQ,OAAL,CAAa+C,OAAnF;AACH;;AACD,mBAAK/C,OAAL,CAAauP,SAAb,GAAyB,KAAzB;AACH;AACJ;;AACD,cAAIb,SAAS,CAACwB,QAAd,EAAwB;AACpB,iBAAKlQ,OAAL,CAAamQ,cAAb;AACH;AACJ;;AACD,YAAIvB,aAAJ,EAAmB;AACf,eAAK5O,OAAL,CAAamQ,cAAb;AACH;;AACD,aAAKnB,qBAAL,CAA2B,IAA3B;;AACA,YAAI,KAAKrO,SAAL,CAAesO,UAAf,KAA8B,CAAlC,EAAqC;AACjC,eAAKhP,cAAL,CAAoBmQ,4BAApB,CAAiD,KAAKzP,SAAL,CAAe8E,MAAhE;;AACA,cAAIgJ,iBAAJ,EAAuB;AACnB,iBAAKzO,OAAL,CAAa4B,cAAb,GAA8B,KAAK5B,OAAL,CAAa4B,cAAb,GAA8B,CAACxG,aAAa,CAACiU,0BAA3E;AACA,gBAAIjK,KAAK,GAAG,KAAKzE,SAAL,CAAe8E,MAAf,YAAiC1K,QAAjC,GACN,KAAK4F,SAAL,CAAe8E,MAAf,CAAsBL,KADhB,GACwB,CAAC,KAAKzE,SAAL,CAAe8E,MAAhB,CADpC;;AAEA,gBAAIL,KAAJ,EAAW;AACP,mBAAK,IAAIqD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrD,KAAK,CAACC,MAA1B,EAAkCoD,CAAC,EAAnC,EAAuC;AACnC,oBAAI,CAACrD,KAAK,CAACqD,CAAD,CAAL,CAASpE,SAAd,EAAyB;AACrB,uBAAKpE,cAAL,CAAoBoQ,oBAApB,CAAyC,KAAK1P,SAAL,CAAegF,MAAxD,EAAgEP,KAAK,CAACqD,CAAD,CAArE;AACA,uBAAKxI,cAAL,CAAoBqQ,qBAApB,CAA0ClL,KAAK,CAACqD,CAAD,CAA/C;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,YAAI,KAAKzI,OAAL,CAAa8O,cAAb,IAA+B,KAAK9O,OAAL,CAAa8O,cAAb,CAA4BC,YAA/D,EAA6E;AACzE,eAAK/O,OAAL,CAAa2B,MAAb,CAAoB,KAAK3B,OAAL,CAAa8O,cAAb,CAA4BC,YAAhD;AACA,eAAK/O,OAAL,CAAa8O,cAAb,GAA8B;AAAEC,YAAAA,YAAY,EAAEjG,SAAhB;AAA2BoB,YAAAA,YAAY,EAAEpB;AAAzC,WAA9B,CAFyE,CAGzE;AACA;AACA;;AACA,cAAK,KAAK9I,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAACmV,YAA7C,IAA+D,KAAKvQ,OAAL,CAAaoN,WAAb,GAA2B1R,kBAAkB,CAAC8U,WAAjH,EAA+H;AAC3H,iBAAKxQ,OAAL,CAAa4B,cAAb,GAA8B,KAAK5B,OAAL,CAAa4B,cAAb,GAA8B,CAACxG,aAAa,CAACmV,YAA3E;AACH;AACJ;;AACD,aAAKpO,OAAL,GAAe,KAAf;;AACA,YAAI,KAAK0H,YAAT,EAAuB;AACnB,cAAI4G,cAAc,GAAG/S,cAAc,CAACgO,OAApC;;AACA,cAAIzQ,UAAU,CAAC,KAAK+E,OAAN,EAAe,KAAK6J,YAApB,CAAd,EAAiD;AAC7C4G,YAAAA,cAAc,IAAI/S,cAAc,CAACoM,KAAjC;AACH;;AACD,eAAK9J,OAAL,CAAa4J,oBAAb,CAAkC,KAAKC,YAAvC,EAAqD4G,cAArD,EAAqE,IAArE;AACA,eAAK5G,YAAL,GAAoB,IAApB;AACH;;AACD,aAAKqB,cAAL,GAAsB,IAAtB;AACA,aAAKmB,aAAL,GAAqB,IAArB;;AACA,YAAI,EAAE,KAAK3L,IAAL,YAAqB7G,eAAvB,CAAJ,EAA6C;AACzC,eAAK6G,IAAL,GAAY,IAAZ;AACH;AACJ;;AACD,UAAI,CAAC4I,OAAL,EAAc;AACVvF,QAAAA,GAAG,CAAC2F,cAAJ;AACH;;AACD,WAAK1J,OAAL,CAAa0Q,oBAAb,GAAoC5H,SAApC;AACA,UAAI6H,QAAQ,GAAG,KAAK3Q,OAAL,CAAamF,aAA5B;AACA,UAAIyL,oBAAoB,GAAG,KAA3B;;AACA,UAAI,KAAK3Q,cAAL,CAAoB6B,YAApB,CAAiC,KAAKP,eAAtC,CAAJ,EAA4D;AACxD,YAAI,KAAKmE,eAAL,CAAqB3B,GAAG,CAAC4B,MAAzB,CAAJ,EAAsC;AAClCiL,UAAAA,oBAAoB,GAAG,IAAvB;AACH;AACJ;;AACD,UAAI,CAAC,KAAKrQ,QAAN,IAAkBoQ,QAAQ,CAACnK,OAA3B,IAAsCmK,QAAQ,CAACnI,WAAT,CAAqBnD,MAArB,GAA8B,CAApE,IAAyE,CAACuL,oBAA9E,EAAoG;AAChG,aAAK5Q,OAAL,CAAa6Q,cAAb,CAA4B,IAA5B;AACH;;AACD,UAAI,CAAC,KAAKtQ,QAAN,IAAkB,CAAC,KAAKP,OAAL,CAAa8Q,aAAhC,IAAiD,KAAKnQ,SAA1D,EAAqE;AACjE,YAAIkI,GAAG,GAAG;AACN9F,UAAAA,OAAO,EAAE1G,iBAAiB,CAAC,KAAKsE,SAAL,CAAe8E,MAAhB,CAAjB,IAA4CpJ,iBAAiB,CAAC,KAAK2D,OAAN,CADhE;AAENsB,UAAAA,QAAQ,EAAEjF,iBAAiB,CAAC,KAAKsE,SAAL,CAAeW,QAAhB,CAFrB;AAEgD2I,UAAAA,KAAK,EAAElG,GAAG,CAACoK,MAF3D;AAGNjE,UAAAA,YAAY,EAAE7N,iBAAiB,CAAC,KAAKsE,SAAL,CAAeuJ,YAAhB,CAHzB;AAINH,UAAAA,MAAM,EAAGhG,GAAG,CAACgG,MAAJ,KAAe,CAAhB,GAAqB,MAArB,GAA+BhG,GAAG,CAACgG,MAAJ,KAAe,CAAhB,GAAqB,QAArB,GAAgC;AAJhE,SAAV;;AAMA,YAAIjK,QAAQ,MAAM,KAAKE,OAAL,CAAa+Q,KAA/B,EAAsC;AAClClI,UAAAA,GAAG,GAAG,KAAKmI,uBAAL,CAA6BnI,GAA7B,CAAN;AACH;;AACD,YAAI,KAAK7I,OAAL,CAAaU,IAAb,KAAsBlF,YAAY,CAACyV,OAAvC,EAAgD;AAC5C,eAAKjR,OAAL,CAAaoJ,YAAb,CAA0B7N,YAAY,CAACwV,KAAvC,EAA8ClI,GAA9C;AACH;AACJ;;AACD,WAAKlI,SAAL,GAAiB,EAAjB;AACH;;AACD,SAAKX,OAAL,CAAa4B,cAAb,GAA8B,KAAK5B,OAAL,CAAa4B,cAAb,GAA8B,CAACxG,aAAa,CAACiU,0BAA3E;AACA,SAAK1O,SAAL,GAAiB,EAAjB;AACA,SAAKX,OAAL,CAAaC,cAAb,CAA4BmG,sBAA5B,GAhLmD,CAgLG;AACzD,GAjLD;AAkLA;;;AACArG,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BiM,mBAA9B,GAAoD,UAAUtM,SAAV,EAAqB;AACrE,QAAIqM,OAAJ;AACA,QAAIkE,YAAY,GAAGvQ,SAAS,CAAC8E,MAA7B;;AACA,QAAIyL,YAAY,IAAKA,YAAY,YAAYnW,QAAzC,IAAsDmW,YAAY,CAAC5L,UAAb,CAAwBD,MAAlF,EAA0F;AACtF,UAAI8L,iBAAiB,GAAGD,YAAY,CAAC5L,UAAb,CAAwB,CAAxB,CAAxB;AACA0H,MAAAA,OAAO,GAAImE,iBAAiB,CAAC/D,WAAlB,GAAgCxP,oBAAoB,CAACwT,mBAAtD,GAA6ED,iBAAiB,CAACE,iBAA/F,GAAmH,CAA7H;AACH,KAHD,MAIK,IAAIH,YAAY,IAAKA,YAAY,YAAYxX,SAAzC,IAAuD,KAAKyH,MAAL,KAAgB,UAAvE,IAAsF,KAAKT,IAAL,YAAqB9G,oBAA/G,EAAsI;AACvI,UAAIsX,YAAY,CAAC9D,WAAb,GAA2BxP,oBAAoB,CAACwT,mBAApD,EAAyE;AACrEpE,QAAAA,OAAO,GAAGkE,YAAY,CAACG,iBAAvB;AACH;AACJ;;AACD,WAAOrE,OAAO,IAAI,CAAlB;AACH,GAbD;;AAcAjN,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BgQ,uBAA9B,GAAwD,UAAUnI,GAAV,EAAe;AACnEA,IAAAA,GAAG,GAAG;AACF9F,MAAAA,OAAO,EAAE,KAAKpC,SAAL,CAAe8E,MAAf,GAAwB;AAAEkL,QAAAA,QAAQ,EAAEtU,iBAAiB,CAAC,KAAKsE,SAAL,CAAe8E,MAAhB;AAA7B,OAAxB,GACL;AAAEzF,QAAAA,OAAO,EAAE3D,iBAAiB,CAAC,KAAK2D,OAAN;AAA5B,OAFF;AAGFsB,MAAAA,QAAQ,EAAEjF,iBAAiB,CAAC,KAAKsE,SAAL,CAAeW,QAAhB,CAHzB;AAGoD2I,MAAAA,KAAK,EAAEpB,GAAG,CAACoB,KAH/D;AAIFC,MAAAA,YAAY,EAAE,KAAKvJ,SAAL,CAAeuJ,YAAf,GAA8B;AAAEyG,QAAAA,QAAQ,EAAEtU,iBAAiB,CAAC,KAAKsE,SAAL,CAAeuJ,YAAhB;AAA7B,OAA9B,GACV;AAAElK,QAAAA,OAAO,EAAE3D,iBAAiB,CAAC,KAAK2D,OAAN;AAA5B,OALF;AAMF+J,MAAAA,MAAM,EAAElB,GAAG,CAACkB;AANV,KAAN;;AAQA,QAAI,KAAKpJ,SAAL,CAAe8E,MAAf,YAAiCvL,IAArC,EAA2C;AACvC2O,MAAAA,GAAG,CAAC9F,OAAJ,CAAY4N,QAAZ,CAAqBvL,KAArB,GAA6B,EAA7B;AACAyD,MAAAA,GAAG,CAAC9F,OAAJ,CAAY4N,QAAZ,CAAqBvL,KAArB,CAA2BkM,IAA3B,CAAgCjV,iBAAiB,CAAC,KAAKsE,SAAL,CAAe8E,MAAhB,CAAjD;AACH,KAHD,MAIK,IAAI,KAAK9E,SAAL,CAAe8E,MAAf,YAAiC/L,SAArC,EAAgD;AACjDmP,MAAAA,GAAG,CAAC9F,OAAJ,CAAY4N,QAAZ,CAAqBrL,UAArB,GAAkC,EAAlC;AACAuD,MAAAA,GAAG,CAAC9F,OAAJ,CAAY4N,QAAZ,CAAqBrL,UAArB,CAAgCgM,IAAhC,CAAqCjV,iBAAiB,CAAC,KAAKsE,SAAL,CAAe8E,MAAhB,CAAtD;AACH;;AACD,WAAOoD,GAAP;AACH,GAlBD;;AAmBA9I,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BuQ,iBAA9B,GAAkD,UAAUC,YAAV,EAAwB;AACtE,QAAIC,YAAJ;AACA,QAAIC,UAAJ;AACA,QAAIpL,KAAJ;AACA,QAAIa,KAAJ;AACA,QAAIwK,SAAJ;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,MAAJ;AACA,QAAIC,WAAW,GAAGN,YAAY,CAAClL,KAA/B;AACA,QAAII,OAAO,GAAG,KAAKjG,YAAL,CAAkBkG,qBAAlB,CAAwC,KAAKpF,eAA7C,EAA8D,KAAKvB,OAAnE,EAA4E,KAAKW,SAAjF,EAA4F,IAA5F,EAAkG,KAAKQ,MAAvG,CAAd;;AACA,QAAI,CAACuQ,UAAL,EAAiB;AACbA,MAAAA,UAAU,GAAG,KAAK1R,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAb;AACH;;AACD,SAAKP,OAAL,CAAa+R,kBAAb;;AACA,QAAIL,UAAU,IAAI,EAAEA,UAAU,CAACzF,MAAX,IAAqByF,UAAU,CAACxF,OAAhC,IAA2CwF,UAAU,CAACvF,QAAxD,CAAlB,EAAqF;AACjF,WAAK,IAAI1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/B,OAAO,CAACrB,MAA5B,EAAoCoD,CAAC,EAArC,EAAyC;AACrC,YAAIuJ,QAAQ,GAAG,KAAKhS,OAAL,CAAa+G,SAAb,CAAuBL,OAAO,CAAC+B,CAAD,CAAP,CAAWjE,EAAlC,CAAf;;AACA,YAAIwN,QAAQ,CAAC/F,MAAT,IAAmB+F,QAAQ,CAAC9F,OAA5B,IAAuC8F,QAAQ,CAAC7F,QAApD,EAA8D;AAC1DuF,UAAAA,UAAU,GAAGM,QAAb;AACH;AACJ;AACJ;;AACD,QAAIN,UAAU,KAAKI,WAAW,CAAC5F,OAAZ,IAAwB4F,WAAW,CAAC7F,MAAZ,IAAsByF,UAAU,CAACzF,MAA9D,CAAd,EAAsF;AAClF,UAAIzH,EAAE,GAAGkN,UAAU,CAAC7K,QAApB;AACA4K,MAAAA,YAAY,GAAG,KAAKzR,OAAL,CAAa+G,SAAb,CAAuBvC,EAAvB,CAAf;AACH;;AACD,QAAIiN,YAAJ,EAAkB;AACdnL,MAAAA,KAAK,GAAGmL,YAAY,CAACnL,KAArB;AACAqL,MAAAA,SAAS,GAAIG,WAAW,CAAC7F,MAAb,GAAuB6F,WAAW,CAAC9K,WAAZ,KAA4BV,KAAK,CAACU,WAAzD,GACR8K,WAAW,CAAC9K,WAAZ,KAA4BV,KAAK,CAACU,WADtC;AAEH;;AACD,QAAI2K,SAAS,IAAID,UAAjB,EAA6B;AACzB,UAAIpL,KAAK,IAAIA,KAAK,CAAC2L,MAAf,IAAyB3L,KAAK,CAAC4L,SAA/B,IAA4C5L,KAAK,CAACU,WAAN,KAAsB,YAAtE,EAAoF;AAChF4K,QAAAA,KAAK,GAAG,CAAR;AACH;;AACD,UAAItL,KAAK,CAAC6L,MAAN,CAAa9M,MAAb,GAAsB,CAA1B,EAA6B;AACzBuM,QAAAA,KAAK,IAAI,CAAT;AACH;;AACD,UAAIE,WAAW,CAAC5F,OAAhB,EAAyB;AACrB,YAAI5F,KAAK,CAACU,WAAN,KAAsB,YAA1B,EAAwC;AACpC6K,UAAAA,MAAM,GAAG,KAAKtQ,eAAL,CAAqBqC,CAArB,GAAyB6N,YAAY,CAACjL,OAAb,CAAqB/B,MAArB,CAA4Bb,CAA9D;AACH,SAFD,MAGK;AACDiO,UAAAA,MAAM,GAAG,KAAKtQ,eAAL,CAAqBsC,CAArB,IAA0B4N,YAAY,CAACjL,OAAb,CAAqB/B,MAArB,CAA4BZ,CAA5B,GAAgCyC,KAAK,CAAC2L,MAAN,CAAa3O,MAAvE,CAAT;AACH;;AACD,YAAI6O,MAAM,GAAG;AAAE3N,UAAAA,EAAE,EAAE3E,QAAQ,EAAd;AAAkBgS,UAAAA,MAAM,EAAEA,MAA1B;AAAkCI,UAAAA,MAAM,EAAE;AAAErG,YAAAA,UAAU,EAAE;AAAEmB,cAAAA,OAAO,EAAE;AAAX;AAAd;AAA1C,SAAb;AACA,aAAK/M,OAAL,CAAaoS,SAAb,CAAuBX,YAAvB,EAAqC,CAACU,MAAD,CAArC;AACH,OATD,MAUK;AACD;AACA,YAAIE,IAAI,GAAG;AACP7N,UAAAA,EAAE,EAAE3E,QAAQ,EADL;AACS+E,UAAAA,KAAK,EAAEkN,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqB1N,KADrC;AAC4CqN,UAAAA,MAAM,EAAE;AACvDrG,YAAAA,UAAU,EAAE;AACRmB,cAAAA,OAAO,EAAE+E,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqBL,MAArB,CAA4BrG,UAA5B,CAAuCmB,OADxC;AAERnI,cAAAA,KAAK,EAAEkN,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqBL,MAArB,CAA4BrG,UAA5B,CAAuChH;AAFtC,aAD2C;AAKvDA,YAAAA,KAAK,EAAEkN,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqBL,MAArB,CAA4BrN;AALoB;AADpD,SAAX;AASA,YAAI2N,aAAa,GAAIT,WAAW,CAAC9K,WAAZ,KAA4B,YAA7B,GAA6C,IAA7C,GAAoD,KAAxE,CAXC,CAYD;;AACAuL,QAAAA,aAAa,GAAGF,IAAI,CAAC/O,MAAL,GAAcwO,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqBhP,MAAtC,GAA+C+O,IAAI,CAAClP,KAAL,GAAa2O,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqBnP,KAA9F;;AACA,YAAImD,KAAK,CAACU,WAAN,KAAsB,YAA1B,EAAwC;AACpCG,UAAAA,KAAK,GAAGuK,UAAU,CAACc,QAAX,GAAsBd,UAAU,CAACc,QAAjC,GACJ,KAAKxS,OAAL,CAAa+G,SAAb,CAAuB2K,UAAU,CAAC7K,QAAlC,EAA4C2L,QADhD;;AAEA,cAAId,UAAU,CAAClL,OAAX,CAAmBhE,OAAnB,GAA6B,KAAKjB,eAAL,CAAqBsC,CAAtD,EAAyD;AACrDsD,YAAAA,KAAK,IAAI,CAAT;AACH;AACJ,SAND,MAOK;AACDA,UAAAA,KAAK,GAAGuK,UAAU,CAACe,WAAX,GAAyBf,UAAU,CAACe,WAApC,GACJ,KAAKzS,OAAL,CAAa+G,SAAb,CAAuB2K,UAAU,CAAC7K,QAAlC,EAA4C4L,WADhD;;AAEA,cAAI,KAAKlR,eAAL,CAAqBqC,CAArB,GAAyB8N,UAAU,CAAClL,OAAX,CAAmB/B,MAAnB,CAA0BiO,MAA1B,CAAiC9O,CAA9D,EAAiE;AAC7DuD,YAAAA,KAAK,IAAI,CAAT;AACH;AACJ;;AACD,YAAIb,KAAK,CAACgM,KAAN,CAAYjN,MAAZ,GAAsB8B,KAAK,GAAGyK,KAAlC,EAA0C;AACtCS,UAAAA,IAAI,CAACJ,MAAL,CAAY9O,KAAZ,GAAoBmD,KAAK,CAACgM,KAAN,CAAYnL,KAAK,GAAGyK,KAApB,EAA2BK,MAA3B,CAAkC9O,KAAtD;AACAkP,UAAAA,IAAI,CAACJ,MAAL,CAAY3O,MAAZ,GAAqBgD,KAAK,CAACgM,KAAN,CAAYnL,KAAK,GAAGyK,KAApB,EAA2BK,MAA3B,CAAkC3O,MAAvD;AACH,SAHD,MAIK;AACD+O,UAAAA,IAAI,CAACJ,MAAL,CAAY9O,KAAZ,GAAoBmD,KAAK,CAACgM,KAAN,CAAYnL,KAAK,GAAGyK,KAAR,GAAgB,CAA5B,EAA+BK,MAA/B,CAAsC9O,KAA1D;AACAkP,UAAAA,IAAI,CAACJ,MAAL,CAAY3O,MAAZ,GAAqBgD,KAAK,CAACgM,KAAN,CAAYnL,KAAK,GAAGyK,KAAR,GAAgB,CAA5B,EAA+BK,MAA/B,CAAsC3O,MAA3D;AACH;;AACD,aAAKtD,OAAL,CAAa2S,QAAb,CAAsBlB,YAAtB,EAAoC,CAACY,IAAD,CAApC,EAA4ClL,KAAK,GAAGyK,KAApD;AACH;;AACD,WAAK3R,cAAL,CAAoB2S,MAApB,CAA2BnB,YAA3B;AACH,KAxDD,MAyDK,IAAIK,WAAW,CAAC7F,MAAhB,EAAwB;AACzB,UAAI4G,WAAW,GAAG;AACdrO,QAAAA,EAAE,EAAE3E,QAAQ,EADE;AACEsD,QAAAA,KAAK,EAAEqO,YAAY,CAACrO,KADtB;AAC6BG,QAAAA,MAAM,EAAEkO,YAAY,CAAClO,MADlD;AAC0DwP,QAAAA,OAAO,EAAEtB,YAAY,CAACsB,OADhF;AAEdxM,QAAAA,KAAK,EAAE;AACH7D,UAAAA,IAAI,EAAE,UADH;AACewP,UAAAA,MAAM,EAAE;AACtBrG,YAAAA,UAAU,EAAE;AAAEmB,cAAAA,OAAO,EAAE;AAAX,aADU;AACazJ,YAAAA,MAAM,EAAE,EADrB;AACyBsB,YAAAA,KAAK,EAAEkN,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqBL,MAArB,CAA4BrN;AAD5D,WADvB;AAIHuN,UAAAA,MAAM,EAAE,CAAC;AAAE3N,YAAAA,EAAE,EAAE3E,QAAQ,EAAd;AAAkBoS,YAAAA,MAAM,EAAE;AAAErG,cAAAA,UAAU,EAAE;AAAEmB,gBAAAA,OAAO,EAAE;AAAX;AAAd;AAA1B,WAAD,CAJL;AAKHuF,UAAAA,KAAK,EAAE,CAAC;AACA9N,YAAAA,EAAE,EAAE3E,QAAQ,EADZ;AACgByD,YAAAA,MAAM,EAAEkO,YAAY,CAAClO,MADrC;AAC6CH,YAAAA,KAAK,EAAEqO,YAAY,CAACrO,KADjE;AACwEyB,YAAAA,KAAK,EAAEkN,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqB1N,KADpG;AAEAqN,YAAAA,MAAM,EAAE;AACJrG,cAAAA,UAAU,EAAE;AACRmB,gBAAAA,OAAO,EAAE+E,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqBL,MAArB,CAA4BrG,UAA5B,CAAuCmB,OADxC;AAERnI,gBAAAA,KAAK,EAAEkN,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqBL,MAArB,CAA4BrG,UAA5B,CAAuChH;AAFtC,eADR;AAKJA,cAAAA,KAAK,EAAEkN,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqBL,MAArB,CAA4BrN;AAL/B;AAFR,WAAD,CALJ;AAcKoC,UAAAA,WAAW,EAAE8K,WAAW,CAAC9K;AAd9B;AAFO,OAAlB;;AAmBA,UAAI8K,WAAW,CAAC9K,WAAZ,KAA4B,UAAhC,EAA4C;AACxC6L,QAAAA,WAAW,CAAC1P,KAAZ,IAAqB,EAArB;AACH;;AACD0P,MAAAA,WAAW,CAACtQ,OAAZ,GAAsB,KAAKhB,eAAL,CAAqBqC,CAArB,GAA0BiP,WAAW,CAAC1P,KAAZ,GAAoB,CAApE;AACA0P,MAAAA,WAAW,CAACrQ,OAAZ,GAAsB,KAAKjB,eAAL,CAAqBsC,CAArB,GAA0BgP,WAAW,CAACvP,MAAZ,GAAqB,CAArE;AACA,WAAKtD,OAAL,CAAa0B,GAAb,CAAiBmR,WAAjB;AACH;AACJ,GAnHD;AAoHA;;;AACA9S,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B+R,UAA9B,GAA2C,UAAUhP,GAAV,EAAe;AACtD;AACA,QAAI,KAAKrD,IAAL,IAAa,KAAKH,QAAtB,EAAgC;AAC5B,WAAKG,IAAL,CAAUqS,UAAV,CAAqB,KAAKpS,SAA1B;AACH;;AACD,QAAI,KAAKX,OAAL,CAAa8O,cAAb,CAA4BC,YAAhC,EAA8C;AAC1C,WAAKJ,yBAAL;AACA,UAAIC,aAAa,GAAG,KAAKI,qBAAL,EAApB;;AACA,UAAIJ,aAAJ,EAAmB;AACf,aAAK5O,OAAL,CAAamQ,cAAb;AACH;AACJ;;AACD,QAAI,KAAKxP,SAAL,IAAkB,KAAKA,SAAL,CAAe8E,MAArC,EAA6C;AACzC,WAAKzF,OAAL,CAAa4J,oBAAb,CAAkC,KAAKjJ,SAAL,CAAe8E,MAAjD,EAAyD/H,cAAc,CAACoM,KAAxE,EAA+E,IAA/E;AACA,WAAKD,YAAL,GAAoB,IAApB;AACH;;AACD,QAAI,KAAKlJ,SAAL,IAAkB,CAAC,KAAKA,SAAL,CAAe8E,MAAlC,IAA4C,KAAKoE,YAArD,EAAmE;AAC/D,WAAKA,YAAL,GAAoB,IAApB;AACH;;AACD,QAAI,KAAKnJ,IAAL,YAAqBnG,WAArB,IAAoC,KAAKoG,SAAzC,IAAsD,KAAKA,SAAL,CAAegF,MAArE,IAA+E,KAAKhF,SAAL,CAAegF,MAAf,YAAiCzL,IAApH,EAA0H;AACtH,WAAK8F,OAAL,CAAa4J,oBAAb,CAAkC,KAAKjJ,SAAL,CAAegF,MAAjD,EAAyDjI,cAAc,CAACoM,KAAf,GAAuBpM,cAAc,CAACgO,OAA/F,EAAwG,IAAxG;AACA,WAAK7B,YAAL,GAAoB,IAApB;AACH;;AACD,QAAI8G,QAAQ,GAAG,KAAK3Q,OAAL,CAAamF,aAA5B;;AACA,QAAIwL,QAAQ,IAAIA,QAAQ,CAACnK,OAAzB,EAAkC;AAC9B,UAAI,CAAE3J,qBAAqB,CAAC,KAAKmD,OAAN,EAAe2Q,QAAf,CAA3B,EAAsD;AAClD,aAAK3Q,OAAL,CAAa6Q,cAAb,CAA4B,IAA5B;AACH;AACJ;;AACD,QAAI,KAAK7Q,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAAC8R,YAA5C,IAA4D,KAAKlN,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAAC2G,UAA5G,EAAwH;AACpH,WAAK/B,OAAL,CAAa4B,cAAb,GAA8B,KAAK5B,OAAL,CAAa4B,cAAb,GAA8B,CAACxG,aAAa,CAAC2G,UAA3E;AACH;;AACD,SAAKzB,WAAL,GAAmB,KAAnB;AACA,SAAKF,KAAL,GAAa,KAAb;AACA,SAAK8K,cAAL,GAAsB,IAAtB;AACA,SAAKmB,aAAL,GAAqB,IAArB;AACA,SAAKM,YAAL;AACA,SAAK1M,cAAL,CAAoB+S,UAApB;AACA,SAAKzS,QAAL,GAAgB,KAAhB;AACA,SAAKI,SAAL,GAAiB,EAAjB;;AACA,QAAI,KAAKX,OAAL,CAAa8O,cAAb,IAA+B,KAAK9O,OAAL,CAAa8O,cAAb,CAA4BC,YAA/D,EAA6E;AACzE,WAAK/O,OAAL,CAAa2B,MAAb,CAAoB,KAAK3B,OAAL,CAAa8O,cAAb,CAA4BC,YAAhD;AACA,WAAK/O,OAAL,CAAa8O,cAAb,GAA8B;AAAEC,QAAAA,YAAY,EAAEjG,SAAhB;AAA2BoB,QAAAA,YAAY,EAAEpB;AAAzC,OAA9B;AACH;;AACD,SAAKpI,IAAL,GAAY,IAAZ;AACAjC,IAAAA,kBAAkB;;AAClB,QAAI,KAAK0C,MAAL,KAAgB,QAApB,EAA8B;AAC1B,WAAKnB,OAAL,CAAawB,aAAb,CAA2BC,SAA3B,CAAqCE,MAArC,CAA4C,kBAA5C;AACH;;AACDoC,IAAAA,GAAG,CAAC2F,cAAJ;AACH,GAlDD;AAmDA;;;AACA3J,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BiS,UAA9B,GAA2C,UAAUlP,GAAV,EAAe;AACtD,SAAK/D,OAAL,CAAakT,aAAb,IAA8BvX,YAAY,CAACwX,WAA3C,CADsD,CAEtD;;AACA,QAAIC,EAAE,GAAIrP,GAAG,CAACsP,UAAJ,GAAiB,CAAjB,IAAsB,CAAC,EAAD,GAAMtP,GAAG,CAACoK,MAAV,GAAmB,CAA1C,GAA+C,IAA/C,GAAsD,KAA/D;AACA,QAAImF,aAAa,GAAG,KAAKlR,gBAAL,CAAsB2B,GAAtB,CAApB;AACA,SAAK/D,OAAL,CAAauT,aAAb,CAA2BC,KAA3B;AACA,QAAIvN,OAAO,GAAG,KAAKD,SAAL,CAAejC,GAAf,CAAd;;AACA,QAAIkC,OAAJ,EAAa;AACT,WAAKjG,OAAL,CAAayT,IAAb,CAAkBL,EAAE,GAAI,GAAJ,GAAW,IAAK,GAApC,EAA0CE,aAA1C;AACAvP,MAAAA,GAAG,CAAC2F,cAAJ;AACH,KAHD,MAIK;AACD,UAAIgK,gBAAgB,GAAG,KAAK1T,OAAL,CAAauD,QAAb,CAAsBmQ,gBAA7C;AACA,UAAIC,cAAc,GAAG,KAAK3T,OAAL,CAAauD,QAAb,CAAsBoQ,cAA3C;AACA,UAAIC,MAAM,GAAGR,EAAE,GAAG,EAAH,GAAQ,CAAC,EAAxB;;AACA,UAAI,KAAK1S,IAAL,KAAc,KAAKA,IAAL,YAAqB5G,kBAArB,IAA2C,KAAK4G,IAAL,YAAqB3G,mBAA9E,CAAJ,EAAwG;AACpG,aAAK4G,SAAL,GAAiB,EAAjB;AACA,aAAKwJ,iBAAL,CAAuBmJ,aAAvB,EAAsC,KAAK3S,SAA3C;AACA,aAAKA,SAAL,CAAeW,QAAf,GAA0BgS,aAA1B;AACA,aAAK5S,IAAL,CAAUuS,UAAV,CAAqB,KAAKtS,SAA1B;AACH;;AACD,WAAKX,OAAL,CAAa6T,aAAb,IAA8BjY,aAAa,CAACkY,WAA5C;;AACA,UAAI/P,GAAG,CAAC6G,QAAJ,IAAiB7G,GAAG,CAACgQ,MAAJ,IAAchQ,GAAG,CAACgQ,MAAJ,KAAe,CAAC,CAAnD,EAAuD;AACnD,aAAK/T,OAAL,CAAauD,QAAb,CAAsBkQ,IAAtB,CAA2B,CAA3B,EAA8BG,MAA9B,EAAsC,CAAtC,EAAyCN,aAAzC;AACH,OAFD,MAGK;AACD,aAAKtT,OAAL,CAAauD,QAAb,CAAsBkQ,IAAtB,CAA2B,CAA3B,EAA8B,CAA9B,EAAiCG,MAAjC,EAAyCN,aAAzC;AACH;;AACD,WAAKtT,OAAL,CAAa6T,aAAb,IAA8B,CAACjY,aAAa,CAACkY,WAA7C;;AACA,UAAIJ,gBAAgB,KAAK,KAAK1T,OAAL,CAAauD,QAAb,CAAsBmQ,gBAA3C,IACGC,cAAc,KAAK,KAAK3T,OAAL,CAAauD,QAAb,CAAsBoQ,cADhD,EACgE;AAC5D5P,QAAAA,GAAG,CAAC2F,cAAJ;AACH;AACJ;;AACD,QAAI,KAAK1J,OAAL,CAAaqK,WAAjB,EAA8B;AAC1B,WAAKrK,OAAL,CAAagU,cAAb,GAA8B,IAA9B;;AACA,UAAI,KAAKhU,OAAL,CAAaiU,WAAb,CAAyBpN,QAA7B,EAAuC;AACnC,YAAIR,IAAI,GAAG,KAAKrG,OAAL,CAAakP,SAAb,CAAuB,KAAKlP,OAAL,CAAaiU,WAAb,CAAyBpN,QAAhD,CAAX;AACA,aAAK7G,OAAL,CAAakU,aAAb,CAA2B7N,IAA3B,EAAiC,KAAKrG,OAAL,CAAaiU,WAAb,CAAyBzP,EAA1D;AACH;;AACD,WAAKxE,OAAL,CAAagU,cAAb,GAA8B,KAA9B;AACH;;AACD,SAAKhU,OAAL,CAAakT,aAAb,GAA6B,KAAKlT,OAAL,CAAakT,aAAb,GAA6B,CAACvX,YAAY,CAACwX,WAAxE;AACH,GA3CD;AA4CA;;;AACApT,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BmT,OAA9B,GAAwC,UAAUpQ,GAAV,EAAe;AACnD,QAAI,EAAE,KAAK/D,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAACyG,QAA9C,KACA,CAAE,KAAK8H,oBAAL,CAA0B5F,GAA1B,CADF,IACsCA,GAAG,CAACmD,GAAJ,KAAY,QAAZ,IAAwBnD,GAAG,CAACqQ,OAAJ,KAAgB,EADlF,EACuF;AACnF,UAAI3L,CAAC,GAAG,KAAK,CAAb;AACA,UAAIlI,QAAQ,GAAG,UAAf;AACA,UAAI8T,OAAO,GAAG,KAAK,CAAnB;AACA,UAAIC,OAAO,GAAGvQ,GAAG,CAACqQ,OAAJ,GAAcrQ,GAAG,CAACqQ,OAAlB,GAA4BrQ,GAAG,CAACqK,KAA9C;AACA,UAAIlH,GAAG,GAAGnD,GAAG,CAACmD,GAAd;AACA,UAAIjB,OAAO,GAAG,KAAKD,SAAL,CAAejC,GAAf,CAAd;;AACA,UAAI,KAAK/D,OAAL,CAAauU,cAAb,IAA+B,KAAKvU,OAAL,CAAawU,QAAhD,EAA0D;AACtD,YAAIA,QAAQ,GAAG,KAAKxU,OAAL,CAAawU,QAA5B;;AACA,aAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG5T,MAAM,CAAC6T,IAAP,CAAYH,QAAZ,CAAtB,EAA6CC,EAAE,GAAGC,EAAE,CAACrP,MAArD,EAA6DoP,EAAE,EAA/D,EAAmE;AAC/D,cAAIG,GAAG,GAAGF,EAAE,CAACD,EAAD,CAAZ;AACAJ,UAAAA,OAAO,GAAG,KAAKrU,OAAL,CAAawU,QAAb,CAAsBI,GAAtB,CAAV;;AACA,cAAIP,OAAO,KAAKA,OAAO,CAACQ,OAAR,CAAgBC,YAAhB,IAAgCT,OAAO,CAACQ,OAAR,CAAgB3N,GAArD,CAAX,EAAsE;AAClE,gBAAI,CAACoN,OAAO,KAAKD,OAAO,CAACQ,OAAR,CAAgB3N,GAA5B,IAAoCA,GAAG,KAAK5L,IAAI,CAAC+Y,OAAO,CAACQ,OAAR,CAAgB3N,GAAjB,CAAhD,IACE,KAAKD,WAAL,CAAiBC,GAAjB,EAAsB0N,GAAtB,CADH,MAEM,CAACP,OAAO,CAACQ,OAAR,CAAgBC,YAAlB,IAAoC,CAAC/Q,GAAG,CAACgR,MAAzC,IAAqD,CAAChR,GAAG,CAAC6G,QAA1D,IAAwE,CAAC3E,OAA1E,IACCoO,OAAO,CAACQ,OAAR,CAAgBC,YAAhB,KAAiC7O,OAAO,IAAIlC,GAAG,CAACgR,MAAf,IAAyBhR,GAAG,CAAC6G,QAA9D,KACI,KAAKoK,aAAL,CAAmBX,OAAO,CAACQ,OAAR,CAAgBC,YAAnC,KAAoD/Q,GAAG,CAACgR,MAD5D,IAEI,KAAKE,eAAL,CAAqBZ,OAAO,CAACQ,OAAR,CAAgBC,YAArC,KAAsD/Q,GAAG,CAAC6G,QAF9D,IAGI,KAAKsK,cAAL,CAAoBb,OAAO,CAACQ,OAAR,CAAgBC,YAApC,KAAqD7O,OAN9D,CAAJ,EAM8E;AAC1E,kBAAIkP,UAAU,GAAGpW,WAAW,CAACsV,OAAO,CAACc,UAAT,CAA5B;;AACA,kBAAIrV,QAAQ,MAAOqV,UAAU,IACzBA,UAAU,CAAC;AACP,oCAAoBC,aADb;AAEPC,gBAAAA,SAAS,EAAEhB,OAAO,CAACgB;AAFZ,eAAD,CADd,EAIS;AACLtR,gBAAAA,GAAG,CAAC2F,cAAJ;;AACA,oBAAI3F,GAAG,CAACmD,GAAJ,KAAY,QAAhB,EAA0B;AACtB,sBAAI,KAAKyC,oBAAL,CAA0B5F,GAA1B,CAAJ,EAAoC;AAChCO,oBAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAKvE,OAAL,CAAawB,aAAb,CAA2BgD,EAAnD,EAAuDpE,KAAvD;AACH,mBAFD,MAGK,IAAI,KAAKJ,OAAL,CAAa8Q,aAAjB,EAAgC;AACjC,wBAAIwE,eAAe,GAAG,iBAAtB;AACA,wBAAI7P,MAAM,GAAG,eAAb;AACA,wBAAI8P,UAAU,GAAG,YAAjB;AACA,yBAAKvV,OAAL,CAAawV,eAAb,CAA6B,KAAKxV,OAAL,CAAa8Q,aAA1C;AACA,yBAAK9Q,OAAL,CAAayV,sBAAb,CAAoC,KAAKzV,OAAL,CAAa+G,SAAb,CAAuB,KAAK/G,OAAL,CAAa8Q,aAAb,CAA2BtM,EAAlD,CAApC;AACA,yBAAKxE,OAAL,CAAa0V,cAAb,CAA4B,KAAK1V,OAAL,CAAa8Q,aAAzC;AACA1U,oBAAAA,gBAAgB,CAAC,KAAK4D,OAAL,CAAa8Q,aAAd,EAA6B,KAAK9Q,OAAlC,CAAhB;AACA,2BAAO,KAAKA,OAAL,CAAa+G,SAAb,CAAuB,KAAK/G,OAAL,CAAa8Q,aAAb,CAA2BtM,EAAlD,CAAP;AACA,wBAAIgG,aAAa,GAAG,KAAKxK,OAAL,CAAa2V,SAAb,CAAuBlQ,MAAvB,CAApB;AACA+E,oBAAAA,aAAa,CAACoL,SAAd,CAAwBL,UAAxB;AACA,wBAAIxS,OAAO,GAAG,KAAK/C,OAAL,CAAa2V,SAAb,CAAuBL,eAAvB,CAAd;AACAvS,oBAAAA,OAAO,CAAC+C,UAAR,CAAmB+P,WAAnB,CAA+B9S,OAA/B;AACA,wBAAInB,cAAc,GAAG,KAAK5B,OAAL,CAAa4B,cAAlC;AACA,yBAAK5B,OAAL,CAAa4B,cAAb,GACI,KAAK5B,OAAL,CAAa8V,cAAb,CAA4BlU,cAA5B,EAA4CxG,aAAa,CAAC2a,qBAA1D,CADJ;AAEA,yBAAKrV,IAAL,CAAUW,OAAV,CAAkB,KAAKV,SAAvB;AACA,yBAAKX,OAAL,CAAa+N,eAAb,CAA6BC,eAA7B,GAA+C,KAAKhO,OAAL,CAAaiO,iBAAb,CAA+B,KAAKjO,OAAL,CAAa+N,eAAb,CAA6BC,eAA5D,EAA6EvS,cAAc,CAACyS,kBAA5F,CAA/C;;AACA,wBAAI,KAAKlO,OAAL,CAAa8N,sBAAjB,EAAyC;AACrC,2BAAK9N,OAAL,CAAa4S,MAAb,CAAoB,KAAK5S,OAAL,CAAa8N,sBAAjC;AACH;;AACD,yBAAK3M,MAAL,GAAc,QAAd;AACA,yBAAKnB,OAAL,CAAa8N,sBAAb,GAAsC,IAAtC;AACA,yBAAK9N,OAAL,CAAa8Q,aAAb,GAA6B,IAA7B;AACA,yBAAK9Q,OAAL,CAAa4B,cAAb,GACI,KAAK5B,OAAL,CAAaiO,iBAAb,CAA+BrM,cAA/B,EAA+CxG,aAAa,CAAC2a,qBAA7D,CADJ;AAEA,yBAAKzV,WAAL,GAAmB,KAAnB;AACH,mBA3BI,MA4BA,IAAI,KAAKC,QAAL,IAAiB,KAAKP,OAAL,CAAagW,aAA9B,IAA+C,KAAKtV,IAApD,IAA4D,KAAKA,IAAL,CAAUH,QAAV,CAAhE,EAAqF;AACtF,yBAAKG,IAAL,CAAUW,OAAV,CAAkB,KAAKV,SAAvB;AACA,yBAAKD,IAAL,GAAY,IAAZ;AACA,yBAAKJ,WAAL,GAAmB,KAAnB;AACH;AACJ;;AACD,oBAAI+T,OAAO,CAAC4B,OAAZ,EAAqB;AACjB,sBAAI,KAAKjW,OAAL,CAAaU,IAAb,KAAsBlF,YAAY,CAACyV,OAAvC,EAAgD;AAC5C;AACA;AACA;AACA,wBAAIgF,OAAO,GAAGlX,WAAW,CAACsV,OAAO,CAAC4B,OAAT,CAAzB;AACAA,oBAAAA,OAAO,CAAC;AAAE,0CAAoBb,aAAtB;AAAqCC,sBAAAA,SAAS,EAAEhB,OAAO,CAACgB;AAAxD,qBAAD,CAAP;AACH,mBAPgB,CAQjB;;AACH;;AACD,oBAAIvV,QAAQ,EAAZ,EAAgB;AACZ,sBAAI+I,GAAG,GAAG;AAAEgM,oBAAAA,OAAO,EAAER,OAAO,CAACQ;AAAnB,mBAAV;AACA,uBAAK7U,OAAL,CAAaoJ,YAAb,CAA0B7N,YAAY,CAAC2a,cAAvC,EAAuDrN,GAAvD;AACH;;AACD;AACH;AACJ;AACJ;AACJ;AACJ;AACJ,KAvFkD,CAwFnD;;;AACA,QAAIiG,cAAc,GAAI,KAAK9O,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiCC,MAAlC,GACjB,KAAKrF,OAAL,CAAamF,aAAb,CAA2BC,KADV,GACkB,KAAKpF,OAAL,CAAamF,aAAb,CAA2BG,UADlE;AAEA,SAAK1E,OAAL,GAAe;AACXmC,MAAAA,OAAO,EAAE1G,iBAAiB,CAAC,KAAK2D,OAAL,CAAamF,aAAd,CADf;AAEX+B,MAAAA,GAAG,EAAEnD,GAAG,CAACmD,GAFE;AAEGkN,MAAAA,OAAO,EAAErQ,GAAG,CAACqQ,OAAJ,GAAcrQ,GAAG,CAACqQ,OAAlB,GAA4BrQ,GAAG,CAACqK;AAF5C,KAAf;AAIA,SAAK+H,cAAL,CAAoB,KAAKvV,OAAzB,EAAkCmD,GAAlC;;AACA,QAAK,KAAK/D,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAACyG,QAAjD,EAA4D;AACxD,WAAKuU,QAAL,CAAc,KAAKxV,OAAnB,EAA4BmD,GAA5B;AACH;;AACD,SAAK/D,OAAL,CAAaoJ,YAAb,CAA0B7N,YAAY,CAAC4Y,OAAvC,EAAgD,KAAKvT,OAArD;AACH,GApGD;;AAqGAb,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BoV,QAA9B,GAAyC,UAAUjQ,IAAV,EAAgBpC,GAAhB,EAAqB;AAC1D,QAAIsS,KAAK,GAAG,KAAKrW,OAAL,CAAaiU,WAAzB;AACA9N,IAAAA,IAAI,CAACR,MAAL,GAAc,KAAK3F,OAAL,CAAa+C,OAAb,CAAqByB,EAArB,GAA0B,UAAxC;AACA,QAAI6B,IAAI,GAAG,KAAKrG,OAAL,CAAa+G,SAAb,CAAuBsP,KAAK,CAACxP,QAA7B,CAAX;;AACA,QAAIvC,QAAQ,CAACC,cAAT,CAAwB,KAAKvE,OAAL,CAAa+C,OAAb,CAAqByB,EAArB,GAA0B,UAAlD,CAAJ,EAAmE;AAC/D2B,MAAAA,IAAI,CAACmQ,IAAL,GAAYhS,QAAQ,CAACC,cAAT,CAAwB,KAAKvE,OAAL,CAAa+C,OAAb,CAAqByB,EAArB,GAA0B,UAAlD,EAA8D2C,KAA1E;;AACA,WAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,IAAI,CAACkQ,WAAL,CAAiBlR,MAArC,EAA6CoD,CAAC,EAA9C,EAAkD;AAC9C,YAAIpC,IAAI,CAACkQ,WAAL,CAAiB9N,CAAjB,EAAoBjE,EAApB,KAA2B6R,KAAK,CAAC7R,EAArC,EAAyC;AACrC2B,UAAAA,IAAI,CAACkQ,KAAL,GAAahQ,IAAI,CAACkQ,WAAL,CAAiB9N,CAAjB,CAAb;AACA;AACH;AACJ;AACJ;AACJ,GAbD;;AAcA1I,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BmV,cAA9B,GAA+C,UAAUhQ,IAAV,EAAgBpC,GAAhB,EAAqB;AAChEoC,IAAAA,IAAI,CAAC2O,YAAL,GAAoBzZ,YAAY,CAACmb,IAAjC;;AACA,QAAIzS,GAAG,CAACkC,OAAR,EAAiB;AACbE,MAAAA,IAAI,CAAC2O,YAAL,IAAqBzZ,YAAY,CAACob,OAAlC;AACH;;AACD,QAAI1S,GAAG,CAAC6G,QAAR,EAAkB;AACdzE,MAAAA,IAAI,CAAC2O,YAAL,IAAqBzZ,YAAY,CAACqb,KAAlC;AACH;;AACD,QAAI3S,GAAG,CAACgR,MAAR,EAAgB;AACZ5O,MAAAA,IAAI,CAAC2O,YAAL,IAAqBzZ,YAAY,CAACsb,GAAlC;AACH;;AACD,QAAI,KAAK3Q,SAAL,CAAejC,GAAf,CAAJ,EAAyB;AACrBoC,MAAAA,IAAI,CAAC2O,YAAL,IAAqBzZ,YAAY,CAACub,IAAlC;AACH;AACJ,GAdD;;AAeA7W,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B6V,KAA9B,GAAsC,UAAU9S,GAAV,EAAe;AACjD,SAAKnD,OAAL,GAAe;AACXmC,MAAAA,OAAO,EAAE1G,iBAAiB,CAAC,KAAK2D,OAAL,CAAamF,aAAd,CADf;AAC6C+B,MAAAA,GAAG,EAAEnD,GAAG,CAACmD,GADtD;AAC2DkN,MAAAA,OAAO,EAAErQ,GAAG,CAACqQ,OAAJ,GAAcrQ,GAAG,CAACqQ,OAAlB,GAA4BrQ,GAAG,CAACqK;AADpG,KAAf;AAGA,QAAIU,cAAc,GAAI,KAAK9O,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiCC,MAAlC,GACjB,KAAKrF,OAAL,CAAamF,aAAb,CAA2BC,KADV,GACkB,KAAKpF,OAAL,CAAamF,aAAb,CAA2BG,UADlE;AAEA,SAAK6Q,cAAL,CAAoB,KAAKvV,OAAzB,EAAkCmD,GAAlC;;AACA,QAAK,KAAK/D,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAACyG,QAAjD,EAA4D;AACxD,WAAKuU,QAAL,CAAc,KAAKxV,OAAnB,EAA4BmD,GAA5B;AACH;;AACD,SAAK/D,OAAL,CAAaoJ,YAAb,CAA0B7N,YAAY,CAACsb,KAAvC,EAA8C,KAAKjW,OAAnD;AACH,GAXD;;AAYAb,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BuM,eAA9B,GAAgD,UAAUlL,CAAV,EAAa;AACzD,QAAIf,QAAQ,GAAG,KAAKc,gBAAL,CAAsBC,CAAtB,CAAf;AACAf,IAAAA,QAAQ,CAACsC,CAAT,IAAc,KAAK5D,OAAL,CAAauD,QAAb,CAAsBuT,WAApC;AACAxV,IAAAA,QAAQ,CAACuC,CAAT,IAAc,KAAK7D,OAAL,CAAauD,QAAb,CAAsBuT,WAApC;AACA,QAAIC,SAAS,GAAGpY,YAAY,CAAC,KAAKqB,OAAN,CAA5B;AACA,QAAIgX,cAAJ;AACA,QAAIC,gBAAgB,GAAG,KAAKjX,OAAL,CAAaqL,cAAb,CAA4B4L,gBAAnD;;AACA,QAAI1d,OAAO,CAACwR,IAAR,CAAahC,IAAb,KAAsB,SAA1B,EAAqC;AACjC,UAAI,KAAK/I,OAAL,CAAauD,QAAb,CAAsB2T,aAAtB,KAAwC,CAA5C,EAA+C;AAC3C,YAAIzS,MAAM,GAAGH,QAAQ,CAACC,cAAT,CAAwB,KAAKvE,OAAL,CAAa+C,OAAb,CAAqByB,EAA7C,EAAiDxB,qBAAjD,EAAb;;AACA,YAAIyB,MAAM,CAACtB,KAAP,KAAiB,KAAKnD,OAAL,CAAauD,QAAb,CAAsB2T,aAA3C,EAA0D;AACtD,eAAKlX,OAAL,CAAauD,QAAb,CAAsBmB,eAAtB,CAAsCD,MAAM,CAACtB,KAA7C,EAAoDsB,MAAM,CAACnB,MAA3D;AACH;AACJ;AACJ;;AACD,QAAI,KAAKtD,OAAL,CAAaqL,cAAb,CAA4BC,aAAhC,EAA+C;AAC3C,UAAIhK,QAAQ,CAACsC,CAAT,GAAa,KAAK5D,OAAL,CAAauD,QAAb,CAAsBmQ,gBAAnC,GAAsDuD,gBAAgB,CAACE,KAAvE,GAA+EJ,SAAS,CAAC5T,KAAzF,IACA,KAAKnD,OAAL,CAAauD,QAAb,CAAsB2T,aAAtB,GAAsC,EAD1C,EAC8C;AAC1CF,QAAAA,cAAc,GAAG,OAAjB;AACH,OAHD,MAIK,IAAI1V,QAAQ,CAACsC,CAAT,GAAa,KAAK5D,OAAL,CAAauD,QAAb,CAAsBmQ,gBAAnC,GAAsDuD,gBAAgB,CAAC/T,IAA3E,EAAiF;AAClF8T,QAAAA,cAAc,GAAG,MAAjB;AACH,OAFI,MAGA,IAAI1V,QAAQ,CAACuC,CAAT,GAAa,KAAK7D,OAAL,CAAauD,QAAb,CAAsBoQ,cAAnC,GAAoDsD,gBAAgB,CAACG,MAArE,GAA8EL,SAAS,CAACzT,MAAxF,GACL,KAAKtD,OAAL,CAAauD,QAAb,CAAsB8T,cAAtB,GAAuC,EADtC,EAC0C;AAC3CL,QAAAA,cAAc,GAAG,QAAjB;AACH,OAHI,MAIA,IAAI1V,QAAQ,CAACuC,CAAT,GAAa,KAAK7D,OAAL,CAAauD,QAAb,CAAsBoQ,cAAnC,GAAoDsD,gBAAgB,CAAC5T,GAAzE,EAA8E;AAC/E2T,QAAAA,cAAc,GAAG,KAAjB;AACH;AACJ;;AACD,WAAOA,cAAP;AACH,GAhCD;;AAiCAjX,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B4M,YAA9B,GAA6C,UAAU0J,MAAV,EAAkBjV,CAAlB,EAAqB6F,KAArB,EAA4BqP,UAA5B,EAAwC;AACjF,QAAIjW,QAAQ,GAAGgW,MAAf;;AACA,QAAI,CAAC,KAAK5W,IAAL,YAAqB/G,eAArB,IAAwC,KAAK+G,IAAL,YAAqB9G,oBAA7D,IACE,KAAK8G,IAAL,YAAqBtG,QADvB,IACmC,KAAKsG,IAAL,YAAqBrG,UADxD,IAEE,KAAKqG,IAAL,YAAqBvG,UAFxB,KAEuC,KAAKoG,QAFhD,EAE0D;AACtD;AACA,UAAIP,OAAO,GAAG,IAAd;AACA,UAAIwX,GAAG,GAAG,KAAKpV,gBAAL,CAAsBC,CAAtB,CAAV;AACA,UAAI4U,gBAAgB,GAAG,KAAKjX,OAAL,CAAaqL,cAAb,CAA4B4L,gBAAnD;AACA,UAAIQ,QAAQ,GAAGvP,KAAK,GAAGA,KAAH,GAAW,GAA/B;AACA,UAAIhF,IAAI,GAAG,CAAX;AACA,UAAIwU,KAAK,GAAG,CAAZ;AACA,UAAIC,KAAK,GAAG;AAAE/T,QAAAA,CAAC,EAAE4T,GAAG,CAAC5T,CAAT;AAAYC,QAAAA,CAAC,EAAE2T,GAAG,CAAC3T;AAAnB,OAAZ;;AACA,cAAQvC,QAAR;AACI,aAAK,OAAL;AACIqW,UAAAA,KAAK,CAAC/T,CAAN,GAAU4T,GAAG,CAAC5T,CAAJ,GAAQ,EAAlB;AACAV,UAAAA,IAAI,GAAG,EAAP;AACA;;AACJ,aAAK,MAAL;AACIyU,UAAAA,KAAK,CAAC/T,CAAN,GAAU4T,GAAG,CAAC5T,CAAJ,GAAQ,EAAlB;AACAV,UAAAA,IAAI,GAAG,CAAC,EAAR;AACA;;AACJ,aAAK,QAAL;AACIyU,UAAAA,KAAK,CAAC9T,CAAN,GAAU2T,GAAG,CAAC3T,CAAJ,GAAQ,EAAlB;AACA6T,UAAAA,KAAK,GAAG,EAAR;AACA;;AACJ,aAAK,KAAL;AACIC,UAAAA,KAAK,CAAC9T,CAAN,GAAU2T,GAAG,CAAC3T,CAAJ,GAAQ,EAAlB;AACA6T,UAAAA,KAAK,GAAG,CAAC,EAAT;AACA;AAhBR;;AAkBA,WAAK/W,SAAL,CAAeW,QAAf,GAA0B;AAAEsC,QAAAA,CAAC,EAAE+T,KAAK,CAAC/T,CAAX;AAAcC,QAAAA,CAAC,EAAE8T,KAAK,CAAC9T;AAAvB,OAA1B;AACA,WAAKtC,eAAL,GAAuB,KAAKZ,SAAL,CAAeW,QAAtC;AACA,UAAIoF,OAAO,GAAG,KAAKjG,YAAL,CAAkBkG,qBAAlB,CAAwC,KAAKpF,eAA7C,EAA8D,KAAKvB,OAAnE,EAA4E,KAAKW,SAAjF,EAA4F,IAA5F,EAAkG,KAAKQ,MAAvG,CAAd;AACA,WAAKR,SAAL,CAAegF,MAAf,GAAwB,KAAK3F,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAxB;AACA,WAAKG,IAAL,CAAU0K,SAAV,CAAoB,KAAKzK,SAAzB;AACA,WAAKX,OAAL,CAAa6T,aAAb,IAA8BjY,aAAa,CAACkY,WAA5C;AACA,WAAK9T,OAAL,CAAauD,QAAb,CAAsBkQ,IAAtB,CAA2B,CAA3B,EAA8B,CAACvQ,IAA/B,EAAqC,CAACwU,KAAtC,EAA6CF,GAA7C;AACA,WAAKxX,OAAL,CAAa6T,aAAb,IAA8B,CAACjY,aAAa,CAACkY,WAA7C;AACH;AACJ,GAxCD;;AAyCA/T,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B8L,WAA9B,GAA4C,YAAY;AACpD,QAAInH,MAAM,GAAG,KAAK3F,OAAL,CAAa2G,qBAAb,CAAmC,KAAKpF,eAAxC,CAAb;;AACA,SAAK,IAAIkH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9C,MAAM,CAACN,MAA3B,EAAmCoD,CAAC,EAApC,EAAwC;AACpC,UAAI,KAAK9H,SAAL,CAAeuJ,YAAf,KAAgCvE,MAAM,CAAC8C,CAAD,CAA1C,EAA+C;AAC3C9C,QAAAA,MAAM,CAACiS,MAAP,CAAcnP,CAAd,EAAiB,CAAjB;AACH;AACJ;;AACD,QAAII,GAAG,GAAG;AACNgP,MAAAA,OAAO,EAAE;AADH,KAAV;;AAGA,QAAI,CAAC/X,QAAQ,EAAb,EAAiB;AACb+I,MAAAA,GAAG,GAAG;AACFgP,QAAAA,OAAO,EAAExb,iBAAiB,CAACsJ,MAAD,CADxB;AAEF5C,QAAAA,OAAO,EAAE1G,iBAAiB,CAAE,KAAKsE,SAAL,CAAe8E,MAAf,KAA0B,KAAK9E,SAAL,CAAeuJ,YAA1C,GAA0DpB,SAA1D,GAAsE,KAAKnI,SAAL,CAAe8E,MAAtF,CAFxB;AAGFyE,QAAAA,YAAY,EAAE7N,iBAAiB,CAAC,KAAKsE,SAAL,CAAeuJ,YAAhB;AAH7B,OAAN;AAKH;;AACD,QAAIpK,QAAQ,OAAO,KAAKE,OAAL,CAAa8X,UAAb,IAA2B,KAAK9X,OAAL,CAAa+X,SAA/C,CAAZ,EAAuE;AACnElP,MAAAA,GAAG,CAACqB,YAAJ,GAAmBhO,aAAa,CAAC,KAAKyE,SAAL,CAAeuJ,YAAhB,CAAb,KAA+CxQ,SAA/C,GAA2D;AAC1Ese,QAAAA,SAAS,EAAE3b,iBAAiB,CAAC,KAAKsE,SAAL,CAAeuJ,YAAhB;AAD8C,OAA3D,GAGb;AACE7D,QAAAA,IAAI,EAAEhK,iBAAiB,CAAC,KAAKsE,SAAL,CAAeuJ,YAAhB;AADzB,OAHN;AAMArB,MAAAA,GAAG,CAACgP,OAAJ,CAAYG,SAAZ,GAAwB,EAAxB;AACAnP,MAAAA,GAAG,CAACgP,OAAJ,CAAYxR,IAAZ,GAAmB,EAAnB;AACA,WAAK4R,yBAAL,CAA+BtS,MAA/B,EAAuCkD,GAAvC;AACH;;AACD,QAAI,KAAKqP,oBAAL,IAA6B,KAAKlY,OAAL,CAAa+S,UAA1C,KACI,CAAC,KAAKpS,SAAL,CAAeuJ,YAAhB,IAAiC,KAAKgO,oBAAL,KAA8B,KAAKvX,SAAL,CAAeuJ,YADlF,CAAJ,EACsG;AAClG,UAAIiO,KAAK,GAAG;AACRN,QAAAA,OAAO,EAAE/O,SADD;AACY/F,QAAAA,OAAO,EAAE1G,iBAAiB,CAAC,KAAK6b,oBAAN,CADtC;AACmEhO,QAAAA,YAAY,EAAEpB;AADjF,OAAZ;;AAGA,UAAIhJ,QAAQ,EAAZ,EAAgB;AACZqY,QAAAA,KAAK,GAAG;AACJN,UAAAA,OAAO,EAAE/O,SADL;AAEJ/F,UAAAA,OAAO,EAAE7G,aAAa,CAAC,KAAKgc,oBAAN,CAAb,KAA6Cxe,SAA7C,GAAyD;AAAEse,YAAAA,SAAS,EAAE3b,iBAAiB,CAACsJ,MAAD;AAA9B,WAAzD,GACH;AACEU,YAAAA,IAAI,EAAEhK,iBAAiB,CAAC,KAAK6b,oBAAN;AADzB,WAHF;AAMJhO,UAAAA,YAAY,EAAEpB;AANV,SAAR;AAQH;;AACD,WAAK9I,OAAL,CAAaoJ,YAAb,CAA0B7N,YAAY,CAACwX,UAAvC,EAAmDoF,KAAnD;AACA,WAAKD,oBAAL,GAA4B,IAA5B;AACH;;AACD,QAAI,CAAC,KAAKA,oBAAN,IAA8B,KAAKvX,SAAL,CAAe8E,MAA7C,IAAwD,KAAKyS,oBAAL,KAA8B,KAAKvX,SAAL,CAAeuJ,YAAzG,EAAwH;AACpH,WAAKgO,oBAAL,GAA4B,KAAKvX,SAAL,CAAeuJ,YAA3C;;AACA,UAAI,KAAKvJ,SAAL,CAAeuJ,YAAf,KAAgCpB,SAApC,EAA+C;AAC3C,aAAK9I,OAAL,CAAaoJ,YAAb,CAA0B7N,YAAY,CAACuc,UAAvC,EAAmDjP,GAAnD;AACH;AACJ;;AACD,QAAI,KAAKlI,SAAL,CAAeuJ,YAAnB,EAAiC;AAC7B,WAAKlK,OAAL,CAAaoJ,YAAb,CAA0B7N,YAAY,CAACwc,SAAvC,EAAkDlP,GAAlD;AACH;AACJ,GAvDD;;AAwDA9I,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BiX,yBAA9B,GAA0D,UAAU1N,GAAV,EAAe6N,IAAf,EAAqB;AAC3E,QAAI7N,GAAJ,EAAS;AACL,WAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8B,GAAG,CAAClF,MAAxB,EAAgCoD,CAAC,EAAjC,EAAqC;AACjC,YAAIvM,aAAa,CAACqO,GAAG,CAAC9B,CAAD,CAAJ,CAAb,KAA0B/O,SAA9B,EAAyC;AACrC0e,UAAAA,IAAI,CAACP,OAAL,CAAaG,SAAb,CAAuB1G,IAAvB,CAA4BjV,iBAAiB,CAACkO,GAAG,CAAC9B,CAAD,CAAJ,CAA7C;AACH,SAFD,MAGK;AACD2P,UAAAA,IAAI,CAACP,OAAL,CAAaxR,IAAb,CAAkBiL,IAAlB,CAAuBjV,iBAAiB,CAACkO,GAAG,CAAC9B,CAAD,CAAJ,CAAxC;AACH;AACJ;AACJ;AACJ,GAXD;;AAYA1I,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B6L,YAA9B,GAA6C,UAAUyG,aAAV,EAAyB+E,WAAzB,EAAsC;AAC/E,QAAI,CAACA,WAAL,EAAkB;AACd,UAAIlL,gBAAgB,GAAK,KAAKtD,YAAL,YAA6B3P,IAA9B,IACpB,KAAK2P,YAAL,CAAkBuD,WAAlB,GAAgCzP,eAAe,CAAC0P,OAD7B,IAEjB,KAAKxD,YAAL,YAA6BnQ,SAA9B,IAA4C,KAAKmQ,YAAL,CAAkBuD,WAAlB,GAAgCxP,oBAAoB,CAACyP,OAFtG;AAGA,UAAIN,OAAO,GAAG,KAAKP,UAAL,EAAd;;AACA,UAAI,KAAK3C,YAAL,CAAkB4C,OAAlB,CAA0BC,MAA1B,KAAqC,MAArC,IAA+CK,OAAO,KAAK,EAA/D,EAAmE;AAC/DtP,QAAAA,aAAa,CAAC,KAAKuC,OAAN,EAAemN,gBAAgB,GAAG,KAAKtD,YAAR,GAAuBf,SAAtD,CAAb;AACH;;AACD,WAAK9I,OAAL,CAAauT,aAAb,CAA2BhR,OAA3B,GAAqC,CAArC;AACA,WAAKvC,OAAL,CAAauT,aAAb,CAA2B/Q,OAA3B,GAAqC,CAArC;AACA,UAAIkE,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC,KAAKpF,eAAxC,CAAd;AACA,UAAIgJ,GAAG,GAAG,KAAKvK,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAV;AACA,UAAI+X,MAAM,GAAI/N,GAAG,CAACjE,KAAJ,IAAeiE,GAAG,CAACjE,KAAL,YAAuBrM,MAAtC,GAAiD,yBAAjD,GAA6E,eAA1F;AACA,UAAIse,SAAS,GAAGjU,QAAQ,CAACC,cAAT,CAAwBgG,GAAG,CAAC/F,EAAJ,GAAS8T,MAAjC,CAAhB;;AACA,UAAI,KAAKzO,YAAL,CAAkB4C,OAAlB,CAA0BC,MAA1B,KAAqC,MAArC,IAA+CK,OAAO,KAAK,EAA/D,EAAmE;AAC/D,aAAK/M,OAAL,CAAauT,aAAb,CAA2BC,KAA3B;AACA,aAAKxT,OAAL,CAAauT,aAAb,CAA2B7G,MAA3B,GAAoC,KAAK7C,YAAL,CAAkB4C,OAAlB,CAA0BC,MAA9D;;AACA,YAAI5M,QAAQ,EAAZ,EAAgB;AACZ,eAAKE,OAAL,CAAauT,aAAb,CAA2BvD,IAA3B,CAAgCuI,SAAhC,EAA2C,EAA3C;AACH,SAFD,MAGK;AACD,eAAKvY,OAAL,CAAauT,aAAb,CAA2BiF,QAA3B;AACH;AACJ;;AACD,UAAIvb,gBAAgB,CAAC,KAAK4M,YAAN,EAAoB,KAAK7J,OAAzB,CAAhB,IAAqD,KAAK6J,YAAL,CAAkB4C,OAAlB,CAA0BC,MAA1B,KAAqC,MAA9F,EAAsG;AAClG,aAAK1M,OAAL,CAAauT,aAAb,CAA2BvD,IAA3B,CAAgCuI,SAAhC;AACH;AACJ;AACJ,GA7BD;;AA8BAxY,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B2L,YAA9B,GAA6C,YAAY;AACrD,QAAI,KAAK3M,OAAL,CAAauT,aAAb,IAA8B,KAAKvT,OAAL,CAAauT,aAAb,CAA2B7G,MAA3B,KAAsC,QAAxE,EAAkF;AAC9E,WAAK1M,OAAL,CAAauT,aAAb,CAA2BC,KAA3B;AACH;AACJ,GAJD;;AAKAzT,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BgU,aAA9B,GAA8C,UAAUyD,WAAV,EAAuB;AACjE,QAAIA,WAAW,GAAGpd,YAAY,CAACsb,GAA/B,EAAoC;AAChC,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GALD;;AAMA5W,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BkU,cAA9B,GAA+C,UAAUuD,WAAV,EAAuB;AAClE,QAAIA,WAAW,GAAGpd,YAAY,CAACob,OAA/B,EAAwC;AACpC,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GALD;;AAMA1W,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BiU,eAA9B,GAAgD,UAAUwD,WAAV,EAAuB;AACnE,QAAIA,WAAW,GAAGpd,YAAY,CAACqb,KAA/B,EAAsC;AAClC,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GALD;AAMA;;;AACA3W,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B0X,QAA9B,GAAyC,UAAU3U,GAAV,EAAe;AACpD,SAAK/D,OAAL,CAAa2Y,kBAAb;;AACA,QAAI7Y,QAAQ,MAAO,KAAKE,OAAL,CAAa4Y,WAAb,GAA2B/a,UAAU,CAACgb,cAAzD,EAA0E;AACtE,WAAK7Y,OAAL,CAAa8Y,qBAAb,CAAmC,KAAnC;AACH;AACJ,GALD;AAMA;;;AACA/Y,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B+X,WAA9B,GAA4C,UAAUhV,GAAV,EAAe;AACvD,QAAIxG,eAAe,CAAC,KAAKyC,OAAN,CAAnB,EAAmC;AAC/B,UAAI4L,UAAU,GAAG,KAAK,CAAtB;AACA,UAAIlF,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC,KAAKpF,eAAxC,CAAd;AACA,UAAIgJ,GAAG,GAAG,KAAKvK,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAV;;AACA,UAAIgK,GAAG,KAAK,IAAR,IAAgBhN,eAAe,CAAC,KAAKyC,OAAN,CAAnC,EAAmD;AAC/C,YAAIqG,IAAI,GAAGkE,GAAX;AACAqB,QAAAA,UAAU,GAAG,KAAK5L,OAAL,CAAayK,qBAAb,CAAmCF,GAAnC,EAAwC,KAAKhJ,eAA7C,CAAb;;AACA,YAAI,KAAKb,IAAL,KAAc,KAAKA,IAAL,YAAqB5G,kBAArB,IAA2C,KAAK4G,IAAL,YAAqB3G,mBAA9E,CAAJ,EAAwG;AACpG,cAAIif,KAAK,GAAG;AACRvT,YAAAA,MAAM,EAAEpJ,iBAAiB,CAACkO,GAAD,CAAjB,IAA0BlO,iBAAiB,CAAC,KAAK2D,OAAN,CAD3C;AAERsB,YAAAA,QAAQ,EAAE,KAAKC,eAFP;AAEwB0I,YAAAA,KAAK,EAAElG,GAAG,CAACoK;AAFnC,WAAZ;AAIA,eAAKzN,IAAL,CAAUW,OAAV,CAAkB,KAAKV,SAAvB;AACA,eAAKL,WAAL,GAAmB,KAAnB;AACA,eAAKK,SAAL,GAAiB,EAAjB;AACA,eAAKD,IAAL,GAAY,IAAZ;AACAqD,UAAAA,GAAG,CAAC2F,cAAJ;AACH,SAVD,MAWK;AACD,cAAIuP,KAAK,GAAG,KAAKjZ,OAAL,CAAaC,cAAb,CAA4BiZ,cAA5B,CAA2C3O,GAAG,CAAC/F,EAA/C,CAAZ;;AACA,cAAIyU,KAAK,IAAI,CAACA,KAAK,CAACE,IAAhB,IAAwBF,KAAK,CAACG,OAAlC,EAA2C;AACvC,gBAAI,EAAE,KAAKpZ,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAACyG,QAA9C,CAAJ,EAA6D;AACzD,kBAAI2C,EAAE,GAAG,EAAT;;AACA,kBAAI+F,GAAG,CAACjE,KAAJ,CAAUA,KAAV,KAAoB,gBAAxB,EAA0C;AACtC9B,gBAAAA,EAAE,GAAG+F,GAAG,CAAC/D,OAAJ,CAAY6S,QAAZ,CAAqB,CAArB,EAAwB7U,EAAxB,CAA2B8U,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,CAAL;AACH;;AACD,mBAAKtZ,OAAL,CAAakU,aAAb,CAA2B3J,GAA3B,EAAgC/F,EAAE,KAAKoH,UAAU,YAAY3N,WAAtB,GAClC2N,UAAU,CAACpH,EAAZ,CAAgB8U,KAAhB,CAAsB/O,GAAG,CAAC/F,EAAJ,GAAS,GAA/B,EAAoC,CAApC,CADmC,GACMsE,SADX,CAAlC;AAEH;AACJ;AACJ;AACJ;;AACD,UAAID,GAAG,GAAG;AACNpD,QAAAA,MAAM,EAAEpJ,iBAAiB,CAACkO,GAAD,CAAjB,IAA0BlO,iBAAiB,CAAC,KAAK2D,OAAN,CAD7C;AAENsB,QAAAA,QAAQ,EAAE,KAAKC,eAFT;AAE0B0I,QAAAA,KAAK,EAAElG,GAAG,CAACoK;AAFrC,OAAV;;AAIA,UAAIrO,QAAQ,EAAZ,EAAgB;AACZ,YAAI6Q,QAAQ,GAAG,KAAK,CAApB;;AACA,YAAIpG,GAAG,YAAYrQ,IAAnB,EAAyB;AACrByW,UAAAA,QAAQ,GAAG;AAAEvL,YAAAA,KAAK,EAAE,CAAC/I,iBAAiB,CAACkO,GAAD,CAAlB;AAAT,WAAX;AACH,SAFD,MAGK,IAAIA,GAAG,YAAY7Q,SAAnB,EAA8B;AAC/BiX,UAAAA,QAAQ,GAAG;AAAErL,YAAAA,UAAU,EAAE,CAACjJ,iBAAiB,CAACkO,GAAD,CAAlB;AAAd,WAAX;AACH,SAFI,MAGA;AACDoG,UAAAA,QAAQ,GAAGtU,iBAAiB,CAACkO,GAAD,CAA5B;AACH;;AACD1B,QAAAA,GAAG,GAAG;AACFpD,UAAAA,MAAM,EAAE8E,GAAG,GAAG;AAAEoG,YAAAA,QAAQ,EAAEA;AAAZ,WAAH,GAA4B;AAAE3Q,YAAAA,OAAO,EAAE3D,iBAAiB,CAAC,KAAK2D,OAAN;AAA5B,WADrC;AAEFsB,UAAAA,QAAQ,EAAE,KAAKC,eAFb;AAE8B0I,UAAAA,KAAK,EAAElG,GAAG,CAACoK;AAFzC,SAAN;AAIH;;AACD,WAAKnO,OAAL,CAAaoJ,YAAb,CAA0B7N,YAAY,CAACwd,WAAvC,EAAoDlQ,GAApD;AACH;AACJ,GAvDD;AAwDA;AACJ;AACA;;;AACI9I,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BuY,SAA9B,GAA0C,UAAUC,YAAV,EAAwBxZ,OAAxB,EAAiC;AACvE,QAAIuK,GAAG,GAAGiP,YAAV;;AACA,QAAIra,sBAAsB,CAAC,KAAKa,OAAN,EAAeuK,GAAf,EAAoB,IAApB,CAA1B,EAAqD;AACjD,aAAOA,GAAP;AACH;;AACD,WAAO,IAAP;AACH,GAND;AAOA;AACJ;AACA;;;AACIxK,EAAAA,mBAAmB,CAACiB,SAApB,CAA8ByY,WAA9B,GAA4C,UAAU1V,GAAV,EAAe;AACvD,QAAI2V,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAJ;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,QAAJ;AACA,QAAIC,WAAJ;AACA,QAAIzT,IAAJ;AACA,QAAI/C,MAAJ;AACA,QAAIH,KAAJ;AACA,QAAI4W,UAAJ;AACA,QAAIC,YAAJ;AACA,QAAIC,UAAJ;AACA,QAAIxW,KAAJ;AACA,QAAIyW,WAAW,GAAG5V,QAAQ,CAACC,cAAT,CAAwB,KAAKvE,OAAL,CAAa+C,OAAb,CAAqByB,EAArB,GAA0B,UAAlD,CAAlB;AACA,QAAI2V,cAAc,GAAG7V,QAAQ,CAACC,cAAT,CAAwB,KAAKvE,OAAL,CAAa+C,OAAb,CAAqByB,EAArB,GAA0B,iBAAlD,CAArB;AACA,QAAI8R,IAAI,GAAI4D,WAAW,CAAC/S,KAAxB;AACA,QAAIiT,IAAI,GAAG9D,IAAI,CAACgD,KAAL,CAAW,IAAX,CAAX;AACAjT,IAAAA,IAAI,GAAI,KAAKrG,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiC,CAAjC,CAAD,GAAwC,KAAKpF,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiC,CAAjC,CAAxC,GAA8E,KAAKpF,OAAL,CAAamF,aAAb,CAA2BG,UAA3B,CAAsC,CAAtC,CAArF;;AACA,QAAK,CAACe,IAAD,IAAS,KAAK3F,IAAL,YAAqB7G,eAA/B,IAAoDwM,IAAI,IAAIA,IAAI,CAACC,KAAL,CAAW7D,IAAX,KAAoB,UAApF,EAAiG;AAC7F4D,MAAAA,IAAI,GAAG,KAAKrG,OAAL,CAAa+G,SAAb,CAAuB,KAAK/G,OAAL,CAAaiU,WAAb,CAAyBpN,QAAhD,CAAP;AACH;;AACD,QAAIR,IAAI,KAAMA,IAAI,CAACC,KAAL,CAAW7D,IAAX,KAAoB,MAApB,IAA8B4D,IAAI,CAACkQ,WAAL,CAAiBlR,MAAjB,GAA0B,CAAzD,IAAgEgB,IAAI,CAACC,KAAL,CAAW7D,IAAX,KAAoB,MAAzF,CAAR,EAA2G;AACvGqX,MAAAA,WAAW,GAAG,KAAK9Z,OAAL,CAAaqa,UAAb,CAAwBhU,IAAI,CAACG,OAA7B,EAAsC,KAAKxG,OAAL,CAAaiU,WAAb,CAAyBzP,EAA/D,CAAd;AACAmV,MAAAA,QAAQ,GAAGtT,IAAI,CAACG,OAAL,CAAa/B,MAAb,CAAoBtB,KAApB,GAA4B2W,WAAW,CAACrV,MAAZ,CAAmBtB,KAA/C,GAAuDkD,IAAI,CAACG,OAAL,CAAa/B,MAAb,CAAoBtB,KAA3E,GAAmF2W,WAAW,CAACrV,MAAZ,CAAmBtB,KAAjH;AACAwW,MAAAA,QAAQ,GAAGA,QAAQ,GAAGD,QAAX,GAAsBC,QAAtB,GAAiCD,QAA5C;AACAK,MAAAA,UAAU,GAAGhc,eAAe,CAAC+b,WAAW,CAAClV,KAAb,EAAoB0R,IAApB,EAA0BxN,SAA1B,EAAqCA,SAArC,EAAgD6Q,QAAhD,CAA5B;AACAE,MAAAA,QAAQ,GAAGS,MAAM,CAAEJ,WAAW,CAACtV,KAAZ,CAAkB2V,QAAnB,CAA6BjB,KAA7B,CAAmC,IAAnC,EAAyC,CAAzC,CAAD,CAAjB;;AACA,UAAIc,IAAI,CAAC/U,MAAL,GAAc,CAAd,IAAmB+U,IAAI,CAACA,IAAI,CAAC/U,MAAL,GAAc,CAAf,CAAJ,KAA0B,EAAjD,EAAqD;AACjD0U,QAAAA,UAAU,CAACzW,MAAX,GAAoByW,UAAU,CAACzW,MAAX,GAAoBuW,QAAxC;AACH;;AACDI,MAAAA,UAAU,GAAG,KAAKja,OAAL,CAAauD,QAAb,CAAsBC,SAAnC;AACAC,MAAAA,KAAK,GAAG/G,eAAe,CAAC,KAAKsD,OAAN,CAAf,GAAgCia,UAAU,CAACxW,KAA3C,GAAmD,CAA3D;AACAN,MAAAA,KAAK,GAAG4W,UAAU,CAAC5W,KAAnB;AACAA,MAAAA,KAAK,GAAG,CAAEuW,QAAQ,GAAGvW,KAAZ,GAAqBuW,QAArB,GAAgCvW,KAAjC,IAA0CM,KAAlD;AACAH,MAAAA,MAAM,GAAG,CAAEsW,SAAS,GAAGG,UAAU,CAACzW,MAAxB,GAAkCsW,SAAlC,GAA8CG,UAAU,CAACzW,MAA1D,IAAoEG,KAA7E;;AACA,UAAI,EAAE4C,IAAI,YAAY3M,SAAhB,IAA6B2M,IAAI,CAAC5D,IAAL,KAAc,QAA7C,CAAJ,EAA4D;AACxD0X,QAAAA,cAAc,CAACvV,KAAf,CAAqB1B,IAArB,GAA+B,CAAC4W,WAAW,CAACrV,MAAZ,CAAmBiO,MAAnB,CAA0B9O,CAA1B,GAA8BqW,UAAU,CAACvW,EAA1C,IAAgDuW,UAAU,CAACxW,KAA5D,GAAqEN,KAAK,GAAG,CAA9E,GAAmF,GAApF,GAA2F,IAAvH;AACAgX,QAAAA,cAAc,CAACvV,KAAf,CAAqBvB,GAArB,GAA8B,CAACyW,WAAW,CAACrV,MAAZ,CAAmBiO,MAAnB,CAA0B7O,CAA1B,GAA8BoW,UAAU,CAACtW,EAA1C,IAAgDsW,UAAU,CAACxW,KAA5D,GAAqEH,MAAM,GAAG,CAA/E,GAAoF,CAArF,GAA0F,IAArH;AACH;;AACD6W,MAAAA,cAAc,CAACvV,KAAf,CAAqBzB,KAArB,GAA6BA,KAAK,GAAG,IAArC;AACAgX,MAAAA,cAAc,CAACvV,KAAf,CAAqBtB,MAArB,GAA8BA,MAAM,GAAG,IAAvC;AACA4W,MAAAA,WAAW,CAACtV,KAAZ,CAAkBgV,SAAlB,GAA8BA,SAAS,GAAG,IAA1C;AACAM,MAAAA,WAAW,CAACtV,KAAZ,CAAkB8U,QAAlB,GAA6BA,QAAQ,GAAG,IAAxC;AACAQ,MAAAA,WAAW,CAACtV,KAAZ,CAAkBzB,KAAlB,GAA0BA,KAAK,GAAG,IAAlC;AACA+W,MAAAA,WAAW,CAACtV,KAAZ,CAAkBtB,MAAlB,GAA2BA,MAAM,GAAG,IAApC;AACH;AACJ,GA9CD;AA+CA;AACJ;AACA;;;AACIvD,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BwZ,aAA9B,GAA8C,UAAUnU,IAAV,EAAgBoU,QAAhB,EAA0B;AACpE,QAAI,KAAK/Z,IAAL,YAAqB7G,eAArB,IAAwC4gB,QAA5C,EAAsD;AAClD,WAAK/Z,IAAL,GAAY,IAAZ;;AACA,UAAI2F,IAAI,IAAK,CAAExH,iBAAiB,CAAC,KAAKmB,OAAN,CAAhC,EAAkD;AAC9C,aAAKA,OAAL,CAAagW,aAAb,GAA6BlN,SAA7B;AACA,aAAK9I,OAAL,CAAa0Q,oBAAb,GAAoC5H,SAApC;AACH;;AACD,UAAI9M,uBAAuB,CAAC,KAAKgE,OAAL,CAAaoF,KAAd,EAAqBiB,IAAI,CAAC7B,EAA1B,CAAvB,IACAxI,uBAAuB,CAAC,KAAKgE,OAAL,CAAasF,UAAd,EAA0Be,IAAI,CAAC7B,EAA/B,CADvB,IAEC,KAAKxE,OAAL,CAAa0a,UAAb,IAA2B,KAAK1a,OAAL,CAAa0a,UAAb,CAAwBC,wBAAxB,CAAiDjY,OAAjD,CAAyD2D,IAAzD,IAAiE,CAAC,CAFlG,EAEsG;AAClG,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAfD;;AAgBAtG,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B2I,oBAA9B,GAAqD,UAAU5F,GAAV,EAAe;AAChE,QAAKA,GAAG,CAAC4B,MAAJ,IAAc5B,GAAG,CAAC4B,MAAJ,CAAWnB,EAAX,KAAkB,KAAKxE,OAAL,CAAa+C,OAAb,CAAqByB,EAArB,GAA0B,UAA/D,EAA4E;AACxE,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GALD;;AAMAzE,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BmJ,iBAA9B,GAAkD,UAAU7I,QAAV,EAAoB6E,IAApB,EAA0BV,MAA1B,EAAkCuH,OAAlC,EAA2C;AACzF7G,IAAAA,IAAI,CAAC7E,QAAL,GAAgBA,QAAhB;AACA,QAAIiJ,GAAJ;AACA,QAAI7D,OAAJ;;AACA,QAAI,CAACjB,MAAL,EAAa;AACT,UAAI,KAAKtE,MAAL,KAAgB,MAAhB,IAA0B,KAAKA,MAAL,KAAgB,oBAA1C,IAAkE,KAAKA,MAAL,KAAgB,YAAlF,IACA,KAAKA,MAAL,KAAgB,YADhB,IACgC,KAAKA,MAAL,KAAgB,mBADhD,IACuE,KAAKA,MAAL,KAAgB,mBADvF,IAEA,KAAKA,MAAL,KAAgB,oBAFhB,IAEwC,KAAKA,MAAL,CAAYuB,OAAZ,CAAoB,QAApB,MAAkC,CAAC,CAF3E,IAEgF,KAAKvB,MAAL,CAAYuB,OAAZ,CAAoB,QAApB,MAAkC,CAAC,CAFvH,EAE0H;AACtH6H,QAAAA,GAAG,GAAG,KAAKvK,OAAL,CAAamF,aAAnB;;AACA,YAAI,CAAC,KAAKnF,OAAL,CAAa8Q,aAAd,IAA+B,KAAK3P,MAAL,KAAgB,MAA/C,IAAyDoJ,GAAzD,IAAgE,KAAKvK,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiCC,MAAjC,GAA0C,CAA1G,IACA,KAAKrF,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiC,CAAjC,EAAoCkB,KAApC,CAA0C7D,IAA1C,KAAmD,UADvD,EACmE;AAC/DiE,UAAAA,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC,KAAKpF,eAAxC,CAAV;AACAgJ,UAAAA,GAAG,GAAG,KAAKvK,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAN;AACH;AACJ,OATD,MAUK;AACDmG,QAAAA,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC,KAAKpF,eAAxC,CAAV;AACAgJ,QAAAA,GAAG,GAAG,KAAKvK,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAN;AACH;AACJ,KAfD,MAgBK;AACDmG,MAAAA,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC,KAAKpF,eAAxC,EAAyDkE,MAAzD,CAAV;AACA8E,MAAAA,GAAG,GAAG,KAAKvK,OAAL,CAAa4a,0BAAb,CAAwClU,OAAxC,EAAiD,KAAKvF,MAAtD,EAA8D,KAAKZ,QAAnE,EAA6E4F,IAAI,CAAC7E,QAAlF,EAA4FmE,MAA5F,CAAN;AACH;;AACD,QAAI8E,GAAG,IAAIA,GAAG,CAAC4B,QAAf,EAAyB;AACrB5B,MAAAA,GAAG,GAAG,KAAKvK,OAAL,CAAa+G,SAAb,CAAuBwD,GAAG,CAAC1D,QAA3B,CAAN;AACA,WAAKlG,SAAL,CAAeuJ,YAAf,GAA8BK,GAA9B;AACH;;AACD,QAAI/D,OAAJ;;AACA,QAAI+D,GAAJ,EAAS;AACL/D,MAAAA,OAAO,GAAG,KAAKxG,OAAL,CAAayK,qBAAb,CAAmCF,GAAnC,EAAwC,KAAKhJ,eAA7C,EAA8DyL,OAA9D,CAAV;AACA,UAAI6N,gBAAgB,GAAG,KAAK,CAA5B;AACA,UAAIC,QAAQ,GAAG,KAAK,CAApB;AACA,UAAIrS,CAAC,GAAG,KAAK,CAAb;;AACA,UAAI,CAACjC,OAAO,IAAI+D,GAAG,CAACwQ,KAAf,IAAwBxQ,GAAG,CAACwQ,KAAJ,CAAU1V,MAAlC,IAA4C,CAAC/I,SAAS,CAACiO,GAAD,EAAM/D,OAAN,CAAtD,IAAwE,CAACA,OAAzE,IACD,CAAC+D,GADD,KACS7D,OADT,IACoBA,OAAO,CAACrB,MAD5B,IACuCI,MAAM,YAAY1K,QAD7D,EACwE;AACpE8f,QAAAA,gBAAgB,GAAGpV,MAAM,CAACH,UAAP,CAAkB,CAAlB,CAAnB;;AACA,aAAKmD,CAAC,GAAG/B,OAAO,CAACrB,MAAR,GAAiB,CAA1B,EAA6BoD,CAAC,IAAI,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACtCqS,UAAAA,QAAQ,GAAGpU,OAAO,CAAC+B,CAAD,CAAlB;;AACA,cAAKqS,QAAQ,YAAY5gB,IAArB,IAA8B2gB,gBAA9B,IAAkDA,gBAAgB,CAACxJ,iBAAvE,EAA0F;AACtF9G,YAAAA,GAAG,GAAGuQ,QAAN;AACAtU,YAAAA,OAAO,GAAG,KAAKxG,OAAL,CAAayK,qBAAb,CAAmCF,GAAnC,EAAwC,KAAKhJ,eAA7C,EAA8DyL,OAA9D,CAAV;;AACA,gBAAM6N,gBAAgB,CAACzN,WAAjB,GAA+BxP,oBAAoB,CAACwT,mBAArD,IAA6E7G,GAA7E,IACDA,GAAG,CAACwQ,KADH,IACYxQ,GAAG,CAACwQ,KAAJ,CAAU1V,MADtB,IACgC/I,SAAS,CAACiO,GAAD,EAAM/D,OAAN,CAD9C,EAC+D;AAC3D;AACH;;AACD,gBAAKsU,QAAQ,YAAY5gB,IAArB,IAA8B2gB,gBAA9B,IAAkDA,gBAAgB,CAACxJ,iBAAnE,IACGyJ,QAAQ,CAACtU,OAAT,CAAiBwU,WAAjB,CAA6BvU,aAA7B,CAA2C,KAAKlF,eAAhD,CADH,IAECsZ,gBAAgB,CAACzN,WAAjB,GAA+BxP,oBAAoB,CAACqd,mBAFrD,IAGA,EAAEJ,gBAAgB,CAACzN,WAAjB,GAA+BxP,oBAAoB,CAACwT,mBAAtD,CAHJ,EAGgF;AAC5E7G,cAAAA,GAAG,GAAGuQ,QAAN;AACAtU,cAAAA,OAAO,GAAG,KAAKxG,OAAL,CAAayK,qBAAb,CAAmCF,GAAnC,EAAwC,KAAKhJ,eAA7C,EAA8D,CAA9D,CAAV;AACA;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,QAAI,CAACkE,MAAL,EAAa;AACTU,MAAAA,IAAI,CAACV,MAAL,GAAc8E,GAAd;AACApE,MAAAA,IAAI,CAAC8E,aAAL,GAAqBzE,OAArB;AACH,KAHD,MAIK;AACDL,MAAAA,IAAI,CAACR,MAAL,GAAc4E,GAAd;AACApE,MAAAA,IAAI,CAAC+U,aAAL,GAAqB1U,OAArB;AACH;;AACDL,IAAAA,IAAI,CAAC+D,YAAL,GAAoB,KAAKvJ,SAAL,CAAeuJ,YAAnC;;AACA,QAAI/D,IAAI,CAACV,MAAL,YAAuB1K,QAAvB,IAAmCoL,IAAI,CAAC+D,YAAL,KAAsBpB,SAAzD,KACC3C,IAAI,CAACV,MAAL,CAAYL,KAAZ,CAAkBC,MAAlB,GAA2B,CAA3B,IAAgCc,IAAI,CAACV,MAAL,CAAYH,UAAZ,CAAuBD,MAAvB,GAAgC,CADjE,CAAJ,EACyE;AACrEc,MAAAA,IAAI,CAAC+D,YAAL,GAAoB/D,IAAI,CAACV,MAAL,CAAYL,KAAZ,CAAkBC,MAAlB,GAA2B,CAA3B,GAA+B,KAAKrF,OAAL,CAAa+G,SAAb,CAAuBZ,IAAI,CAACV,MAAL,CAAYL,KAAZ,CAAkB,CAAlB,EAAqBZ,EAA5C,CAA/B,GACd,KAAKxE,OAAL,CAAa+G,SAAb,CAAuBZ,IAAI,CAACV,MAAL,CAAYH,UAAZ,CAAuB,CAAvB,EAA0Bd,EAAjD,CADN;AAEH;;AACD2B,IAAAA,IAAI,CAACgV,YAAL,GAAoB,KAAKjQ,cAAzB;AACA/E,IAAAA,IAAI,CAACiV,WAAL,GAAmB,KAAK/O,aAAxB;AACA,WAAOlG,IAAP;AACH,GA3ED;AA4EA;;;AACApG,EAAAA,mBAAmB,CAACiB,SAApB,CAA8Bqa,SAA9B,GAA0C,YAAY;AAClD,SAAKla,MAAL,GAAc,QAAd;AACA,SAAK0I,YAAL,GAAoB,IAApB;AACA,SAAK4B,SAAL,GAAiB,IAAjB;AACA,SAAK/K,IAAL,GAAY,KAAKV,OAAL,CAAa8K,OAAb,CAAqB,KAAK3J,MAA1B,CAAZ;AACA,SAAK+D,YAAL;AACH,GAND;AAOA;;;AACAnF,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B8J,OAA9B,GAAwC,UAAU3J,MAAV,EAAkB;AACtD,YAAQA,MAAR;AACI,WAAK,QAAL;AACI,eAAO,IAAIhH,UAAJ,CAAe,KAAK8F,cAApB,EAAoC,IAApC,CAAP;;AACJ,WAAK,MAAL;AACI,eAAO,IAAI7F,QAAJ,CAAa,KAAK6F,cAAlB,CAAP;;AACJ,WAAK,QAAL;AACI,eAAO,IAAI3F,UAAJ,CAAe,KAAK2F,cAApB,CAAP;;AACJ,WAAK,iBAAL;AACI,eAAO,IAAIzF,UAAJ,CAAe,KAAKyF,cAApB,CAAP;;AACJ,WAAK,iBAAL;AACI,eAAO,IAAIjG,mBAAJ,CAAwB,KAAKiG,cAA7B,EAA6C,IAA7C,CAAP;;AACJ,WAAK,WAAL;AACI,eAAO,IAAIxF,SAAJ,CAAc,KAAKwF,cAAnB,CAAP;;AACJ,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,aAAL;AACA,WAAK,aAAL;AACA,WAAK,YAAL;AACA,WAAK,YAAL;AACI,eAAO,IAAI5F,UAAJ,CAAe,KAAK4F,cAApB,EAAoCkB,MAApC,CAAP;;AACJ,WAAK,oBAAL;AACA,WAAK,oBAAL;AACA,WAAK,mBAAL;AACA,WAAK,mBAAL;AACI,eAAO,IAAI5G,WAAJ,CAAgB,KAAK0F,cAArB,EAAqCkB,MAArC,CAAP;;AACJ,WAAK,YAAL;AACA,WAAK,YAAL;AACI,eAAO,IAAIrG,gBAAJ,CAAqB,KAAKmF,cAA1B,EAA0CkB,MAA1C,CAAP;;AACJ,WAAK,MAAL;AACI,YAAImF,KAAK,GAAG,OAAZ;AACA,YAAIgV,UAAU,GAAG,YAAjB;AACA,YAAI7Y,IAAI,GAAG3G,cAAc,CAAC,KAAKkE,OAAL,CAAagW,aAAd,CAAzB;;AACA,YAAIvT,IAAI,KAAK,MAAT,IAAmB,KAAKzC,OAAL,CAAagW,aAAb,CAA2B1P,KAA3B,CAAiC7D,IAAjC,KAA0C,MAAjE,EAAyE;AACrE,iBAAO,IAAI5I,eAAJ,CAAoB,KAAKoG,cAAzB,CAAP;AACH,SAFD,MAGK,IAAIwC,IAAI,KAAK,MAAT,KAAoB,KAAKzC,OAAL,CAAagW,aAAb,CAA2B1P,KAA3B,CAAiCA,KAAjC,MAA4C,SAA5C,IACxBxG,QAAQ,MAAM,KAAKE,OAAL,CAAagW,aAAb,CAA2B1P,KAA3B,CAAiCgV,UAAjC,MAAiD,SAD3D,KAEL,CAAE,KAAKtb,OAAL,CAAagW,aAAb,CAA2B1P,KAA3B,CAAiCiV,MAFlC,EAE2C;AAC5C,iBAAO,IAAIzhB,kBAAJ,CAAuB,KAAKmG,cAA5B,CAAP;AACH,SAJI,MAKA,IAAIwC,IAAI,KAAK,MAAT,IACJA,IAAI,KAAK,MAAT,IAAmB,KAAKzC,OAAL,CAAagW,aAAb,CAA2B1P,KAA3B,CAAiCA,KAAjC,MAA4C,SAA/D,IACI,KAAKtG,OAAL,CAAagW,aAAb,CAA2B1P,KAA3B,CAAiCiV,MAFrC,EAE+C;AAChD,iBAAO,IAAI5hB,eAAJ,CAAoB,KAAKsG,cAAzB,EAAyC,KAAKD,OAAL,CAAagW,aAAtD,CAAP;AACH,SAJI,MAKA,IAAIvT,IAAI,KAAK,WAAT,IAAwB,KAAKzC,OAAL,CAAagW,aAAb,CAA2BvT,IAA3B,KAAoC,UAAhE,EAA4E;AAC7E,iBAAO,IAAI1I,mBAAJ,CAAwB,KAAKkG,cAA7B,CAAP;AACH,SAFI,MAGA,IAAIwC,IAAI,KAAK,WAAb,EAA0B;AAC3B,iBAAO,IAAI7I,oBAAJ,CAAyB,KAAKqG,cAA9B,EAA8C,oBAA9C,EAAoE,KAAKD,OAAL,CAAagW,aAAjF,CAAP;AACH;;AACD;;AACJ,WAAK,KAAL;AACI,eAAO,IAAItb,WAAJ,CAAgB,KAAKuF,cAArB,EAAqC,KAArC,CAAP;;AACJ,WAAK,WAAL;AACI,eAAO,IAAIvF,WAAJ,CAAgB,KAAKuF,cAArB,EAAqC,IAArC,CAAP;;AACJ,WAAK,UAAL;AACI,eAAO,IAAI7F,QAAJ,CAAa,KAAK6F,cAAlB,EAAkC,MAAlC,CAAP;;AACJ,WAAK,UAAL;AACI,eAAO,IAAIrG,oBAAJ,CAAyB,KAAKqG,cAA9B,EAA8C,oBAA9C,EAAoE,KAAKD,OAAL,CAAagW,aAAjF,CAAP;;AACJ,WAAK,aAAL;AACI,eAAO,IAAI7b,UAAJ,CAAe,KAAK8F,cAApB,EAAoC,IAApC,EAA0C,aAA1C,CAAP;;AACJ,WAAK,WAAL;AACI,eAAO,IAAItF,aAAJ,CAAkB,KAAKsF,cAAvB,CAAP;;AACJ,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,sBAAL;AACA,WAAK,kBAAL;AACA,WAAK,kBAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACI,eAAO,IAAIrF,eAAJ,CAAoB,KAAKqF,cAAzB,EAAyCkB,MAAzC,CAAP;;AACJ,WAAK,aAAL;AACI,eAAO,IAAItG,eAAJ,CAAoB,KAAKoF,cAAzB,CAAP;AACJ;AACA;AACA;AA/EJ;;AAiFA,WAAO,IAAP;AACH,GAnFD;AAoFA;;;AACAF,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B9F,SAA9B,GAA0C,UAAUiG,MAAV,EAAkB;AACxD,QAAIqa,MAAM,GAAI,KAAKxb,OAAL,CAAamF,aAAb,CAA2ByG,UAA5B,GACT,KAAK5L,OAAL,CAAamF,aAAb,CAA2BqB,OAA3B,CAAmC6S,QAAnC,CAA4C,CAA5C,CADS,GACwC,KAAKrZ,OAAL,CAAamF,aADlE;AAEA,QAAIsW,WAAW,GAAI,KAAKzb,OAAL,CAAamF,aAAb,CAA2ByG,UAA5B,GACb4P,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACE,eADf,GACkCF,MAAM,CAACC,WAD3D;AAEA,WAAOvgB,SAAS,CAACiG,MAAD,EAASsa,WAAT,CAAhB;AACH,GAND,CAhoDiD,CAuoDjD;;AACA;;;AACA1b,EAAAA,mBAAmB,CAACiB,SAApB,CAA8ByJ,qBAA9B,GAAsD,UAAUF,GAAV,EAAejJ,QAAf,EAAyB0L,OAAzB,EAAkC;AACpF,WAAO,KAAKvM,YAAL,CAAkBkb,4BAAlB,CAA+CpR,GAA/C,EAAoDjJ,QAApD,EAA8D0L,OAA9D,CAAP;AACH,GAFD;AAGA;;;AACAjN,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B2F,qBAA9B,GAAsD,UAAUrF,QAAV,EAAoBmE,MAApB,EAA4B;AAC9E,WAAO,KAAKhF,YAAL,CAAkBkG,qBAAlB,CAAwCrF,QAAxC,EAAkD,KAAKtB,OAAvD,EAAgE,KAAKW,SAArE,EAAgF8E,MAAhF,CAAP;AACH,GAFD;AAGA;;;AACA1F,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B4F,oBAA9B,GAAqD,UAAUF,OAAV,EAAmBvF,MAAnB,EAA2BZ,QAA3B,EAAqC;AACtF,WAAO,KAAKE,YAAL,CAAkBmG,oBAAlB,CAAuC,KAAK5G,OAA5C,EAAqD0G,OAArD,EAA8DvF,MAA9D,EAAsEZ,QAAtE,EAAgF,KAAKI,SAArF,EAAgG,KAAKY,eAArG,CAAP;AACH,GAFD;AAGA;;;AACAxB,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B4a,oBAA9B,GAAqD,UAAUlV,OAAV,EAAmBvF,MAAnB,EAA2BZ,QAA3B,EAAqCe,QAArC,EAA+CmE,MAA/C,EAAuD;AACxG,WAAO,KAAKhF,YAAL,CAAkBmG,oBAAlB,CAAuC,KAAK5G,OAA5C,EAAqD0G,OAArD,EAA8DvF,MAA9D,EAAsEZ,QAAtE,EAAgF,KAAKI,SAArF,EAAgGW,QAAhG,EAA0GmE,MAA1G,CAAP;AACH,GAFD;AAGA;;;AACA1F,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B2J,kBAA9B,GAAmD,UAAUJ,GAAV,EAAe/D,OAAf,EAAwBlF,QAAxB,EAAkCqE,MAAlC,EAA0C;AACzF,WAAO3K,kBAAkB,CAACuP,GAAD,EAAM/D,OAAN,EAAe,KAAKjF,eAApB,EAAqC,KAAKvB,OAA1C,EAAmD,KAAKkL,cAAxD,EAAwE,KAAKmB,aAA7E,EAA4F1G,MAA5F,CAAzB;AACH,GAFD;;AAGA5F,EAAAA,mBAAmB,CAACiB,SAApB,CAA8BgO,qBAA9B,GAAsD,UAAU6M,cAAV,EAA0B;AAC5E,QAAIjN,aAAa,GAAG,KAApB;;AACA,QAAI,KAAK5O,OAAL,CAAa8O,cAAb,CAA4BC,YAA5B,IAA4C,KAAK/O,OAAL,CAAa8O,cAAb,CAA4B5E,YAA5B,YAAoDhQ,IAApG,EAA0G;AACtG,UAAI4hB,YAAY,GAAI,KAAKpb,IAAL,YAAqBrG,UAAtB,GAAoC,IAApC,GAA2C,KAA9D;AACA,UAAIkQ,GAAG,GAAG,KAAKvK,OAAL,CAAa8O,cAAb,CAA4B5E,YAAtC;AACA,UAAIpE,UAAU,GAAG,KAAK9F,OAAL,CAAa+G,SAAb,CAAuBwD,GAAG,CAAC1D,QAA3B,CAAjB;;AACA,UAAIgV,cAAJ,EAAoB;AAChBzc,QAAAA,sBAAsB,CAAC,KAAKY,OAAN,EAAeuK,GAAf,EAAoB,KAAKhJ,eAAzB,EAA0Cua,YAA1C,CAAtB;AACH,OAFD,MAGK;AACD,YAAI,CAAChW,UAAD,IAAgBA,UAAU,IAAIA,UAAU,CAACQ,KAAX,CAAiB7D,IAAjB,KAA0B,UAA5D,EAAyE;AACrE,eAAKzC,OAAL,CAAa+b,mBAAb,CAAiCxR,GAAjC;AACH;;AACDqE,QAAAA,aAAa,GAAG3P,kBAAkB,CAAC,KAAKe,OAAN,EAAeuK,GAAf,EAAoB,KAAKhJ,eAAzB,EAA0Cua,YAA1C,CAAlC;AACA,aAAK9b,OAAL,CAAagc,cAAb;;AACA,YAAIzR,GAAG,CAAC0B,MAAJ,IAAc1B,GAAG,CAAC2B,OAAtB,EAA+B;AAC3B,eAAKlM,OAAL,CAAauO,cAAb;AACA,eAAKtO,cAAL,CAAoBuO,aAApB,CAAkC,CAACjE,GAAD,CAAlC;AACH;AACJ;AACJ;;AACD,WAAOqE,aAAP;AACH,GAtBD,CA5pDiD,CAmrDjD;;;AACA7O,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B2N,yBAA9B,GAA0D,YAAY;AAClE,QAAII,YAAJ;AACA,QAAIkN,kBAAkB,GAAG,KAAzB;AACA,QAAI/L,QAAJ;AACA,QAAI5K,UAAJ;AACA,QAAI4W,QAAQ,GAAG,KAAf;AACA,QAAI3R,GAAJ;AACA,QAAI4R,OAAO,GAAG;AAAEjM,MAAAA,QAAQ,EAAE,KAAZ;AAAmBZ,MAAAA,gBAAgB,EAAE;AAArC,KAAd;;AACA,QAAI,KAAKtP,OAAL,CAAa8O,cAAb,CAA4BC,YAAhC,EAA8C;AAC1C,UAAIrI,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC,KAAKpF,eAAxC,CAAd;AACA,UAAIoE,MAAM,GAAG,KAAK3F,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAb;AACAwO,MAAAA,YAAY,GAAG,KAAK/O,OAAL,CAAa8O,cAAb,CAA4BC,YAA3C;AACAxE,MAAAA,GAAG,GAAG,KAAKvK,OAAL,CAAa8O,cAAb,CAA4B5E,YAAlC;;AACA,UAAIK,GAAG,YAAYrQ,IAAnB,EAAyB;AACrB,YAAIqQ,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,UAAvB,EAAmC;AAC/B6C,UAAAA,UAAU,GAAG9F,aAAa,CAAC,KAAKQ,OAAN,EAAeuK,GAAG,CAAC/D,OAAJ,CAAY6S,QAAZ,CAAqB,CAArB,CAAf,EAAwC,CAAxC,EAA2C,IAA3C,CAA1B;AACH;;AACD,YAAI9O,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,UAAnB,IAAiC8H,GAAG,CAAC1D,QAArC,IACA,KAAK7G,OAAL,CAAakP,SAAb,CAAuB3E,GAAG,CAAC1D,QAA3B,EAAqCP,KAArC,CAA2C7D,IAA3C,KAAoD,UADxD,EACoE;AAChE,cAAIkD,MAAM,YAAYzL,IAAlB,IAA0B,KAAK8F,OAAL,CAAakP,SAAb,CAAuBvJ,MAAM,CAACkB,QAA9B,CAA1B,IACA,KAAK7G,OAAL,CAAakP,SAAb,CAAuBvJ,MAAM,CAACkB,QAA9B,EAAwCP,KAAxC,CAA8C7D,IAA9C,KAAuD,UAD3D,EACuE;AACnEkD,YAAAA,MAAM,GAAG,KAAK3F,OAAL,CAAakP,SAAb,CAAuBvJ,MAAM,CAACkB,QAA9B,CAAT;AACH;AACJ;;AACD,YAAI,KAAK3G,aAAL,KAAuB,MAAvB,IAAiCqK,GAAG,CAAClG,SAArC,IAAkDkG,GAAG,CAAClG,SAAJ,CAAc5B,IAAd,KAAuB,QAAzE,IAAqF8H,GAAG,CAAC1D,QAAzF,IACA,KAAK7G,OAAL,CAAakP,SAAb,CAAuB3E,GAAG,CAAC1D,QAA3B,EAAqCP,KAArC,CAA2C7D,IAA3C,KAAoD,UADpD,IACkEkD,MADlE,IAC4EA,MAAM,KAAK4E,GADvF,IAEA5E,MAAM,CAACtB,SAFP,IAEoBsB,MAAM,CAACtB,SAAP,CAAiB5B,IAAjB,KAA0B,QAF9C,IAE0DkD,MAAM,CAACsG,MAFjE,IAGA1B,GAAG,CAAC0B,MAHJ,IAGctG,MAAM,CAACkB,QAAP,KAAoB0D,GAAG,CAAC1D,QAH1C,EAGoD;AAChDnH,UAAAA,gBAAgB,CAAC,KAAKM,OAAN,EAAeuK,GAAf,EAAoB5E,MAApB,EAA4B,KAAKpE,eAAjC,CAAhB;AACA4a,UAAAA,OAAO,CAAC7M,gBAAR,GAA2B,IAA3B;AACH,SAND,MAOK;AACD,cAAIxJ,UAAU,GAAG,KAAK9F,OAAL,CAAa+G,SAAb,CAAuBwD,GAAG,CAAC1D,QAA3B,CAAjB;;AACA,cAAI,CAACf,UAAD,IAAgBA,UAAU,IAAIA,UAAU,CAACQ,KAAX,CAAiB7D,IAAjB,KAA0B,UAA5D,EAAyE;AACrE,gBAAIqD,UAAU,IAAIA,UAAU,CAACmG,MAAzB,IAAoC1B,GAAG,CAAC6C,WAAJ,GAAkBzP,eAAe,CAACye,sBAA1E,EAAmG;AAC/F,kBAAIC,QAAQ,GAAG,KAAKrc,OAAL,CAAakP,SAAb,CAAuBpJ,UAAU,CAACe,QAAlC,CAAf;AACA,kBAAIyV,MAAM,GAAGD,QAAQ,CAAC7X,EAAT,GAAc6X,QAAQ,CAAC/V,KAAT,CAAegM,KAAf,CAAqB,CAArB,EAAwB9N,EAAtC,GAA2C,GAAxD;AACA,kBAAI+X,SAAS,GAAG,KAAKvc,OAAL,CAAakP,SAAb,CAAuBoN,MAAvB,CAAhB;AACA,kBAAI1Y,CAAC,GAAG2Y,SAAS,CAAC/V,OAAV,CAAkB/B,MAAlB,CAAyBb,CAAjC;AACA,kBAAIC,CAAC,GAAG0Y,SAAS,CAAC/V,OAAV,CAAkB/B,MAAlB,CAAyBZ,CAAjC;AACA,kBAAIV,KAAK,GAAGkZ,QAAQ,CAAC7V,OAAT,CAAiB/B,MAAjB,CAAwBoD,WAAxB,CAAoCjE,CAApC,GAAwCA,CAApD;AACA,kBAAIN,MAAM,GAAG+Y,QAAQ,CAAC7V,OAAT,CAAiB/B,MAAjB,CAAwBoD,WAAxB,CAAoChE,CAApC,GAAwCA,CAArD;AACA,kBAAI2Y,cAAc,GAAG,IAAIne,IAAJ,CAASuF,CAAT,EAAYC,CAAZ,EAAeV,KAAf,EAAsBG,MAAtB,CAArB;;AACA,kBAAIkZ,cAAc,CAAC/V,aAAf,CAA6B,KAAKlF,eAAlC,CAAJ,EAAwD;AACpDgJ,gBAAAA,GAAG,CAAChI,OAAJ,GAAcwM,YAAY,CAACxM,OAA3B;AACAgI,gBAAAA,GAAG,CAAC/H,OAAJ,GAAcuM,YAAY,CAACvM,OAA3B;AACA+H,gBAAAA,GAAG,CAACpH,KAAJ,GAAY4L,YAAY,CAAC5L,KAAzB;AACAoH,gBAAAA,GAAG,CAACjH,MAAJ,GAAayL,YAAY,CAACzL,MAA1B;AACAiH,gBAAAA,GAAG,CAACkR,WAAJ,GAAkB1M,YAAY,CAAC0M,WAA/B;AACH;AACJ,aAhBD,MAiBK;AACDlR,cAAAA,GAAG,CAAChI,OAAJ,GAAcwM,YAAY,CAACxM,OAA3B;AACAgI,cAAAA,GAAG,CAAC/H,OAAJ,GAAcuM,YAAY,CAACvM,OAA3B;;AACA,kBAAI+H,GAAG,IAAIA,GAAG,CAACjE,KAAX,IAAoBiE,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,eAA3C,EAA4D;AACxD,oBAAI8H,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,MAAnB,IACC8H,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,MAAnB,IAA6B8H,GAAG,CAACjE,KAAJ,CAAUA,KAAV,KAAoB,gBADtD,EACyE;AACrEiE,kBAAAA,GAAG,CAACpH,KAAJ,GAAY4L,YAAY,CAAC5L,KAAzB;AACAoH,kBAAAA,GAAG,CAACjH,MAAJ,GAAayL,YAAY,CAACzL,MAA1B;AACH;AACJ;;AACDiH,cAAAA,GAAG,CAACkR,WAAJ,GAAkB1M,YAAY,CAAC0M,WAA/B;AACH;AACJ;;AACD,cAAIgB,WAAW,GAAG,KAAK,CAAvB;;AACA,cAAI3W,UAAU,IAAIA,UAAU,CAACzB,SAAzB,IAAsCyB,UAAU,CAACzB,SAAX,CAAqB5B,IAArB,KAA8B,OAAxE,EAAiF;AAC7E,iBAAKzC,OAAL,CAAa0c,gBAAb;AACAR,YAAAA,QAAQ,GAAG,IAAX;AACH;;AACD,cAAI,CAACvW,MAAD,IAAWG,UAAX,IAAyBA,UAAU,CAACzB,SAApC,IAAiDyB,UAAU,CAACzB,SAAX,CAAqB5B,IAArB,KAA8B,OAA/E,IAA0F,KAAKtB,MAAL,KAAgB,MAA9G,EAAsH;AAClH,gBAAIyQ,KAAK,GAAG9L,UAAU,CAACU,OAAX,CAAmB6S,QAAnB,CAA4B3W,OAA5B,CAAoC6H,GAAG,CAAC/D,OAAxC,CAAZ;AACAiW,YAAAA,WAAW,GAAG;AAAEE,cAAAA,WAAW,EAAE7T,SAAf;AAA0BnD,cAAAA,MAAM,EAAEmD,SAAlC;AAA6C8T,cAAAA,WAAW,EAAEhL,KAA1D;AAAiEnM,cAAAA,MAAM,EAAErH,KAAK,CAACmM,GAAD;AAA9E,aAAd;;AACA,gBAAIqH,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,kBAAIyH,QAAQ,GAAGvT,UAAU,CAACuT,QAA1B;AACAA,cAAAA,QAAQ,CAACzB,MAAT,CAAgByB,QAAQ,CAAC3W,OAAT,CAAiB6H,GAAG,CAAC/F,EAArB,CAAhB,EAA0C,CAA1C;AACA,mBAAKxE,OAAL,CAAa+G,SAAb,CAAuBwD,GAAG,CAAC/F,EAA3B,EAA+BqC,QAA/B,GAA0C,EAA1C;AACAqJ,cAAAA,QAAQ,GAAG,IAAX;AACApK,cAAAA,UAAU,CAACU,OAAX,CAAmB6S,QAAnB,CAA4BzB,MAA5B,CAAmChG,KAAnC,EAA0C,CAA1C;AACH;AACJ;;AACDvS,UAAAA,gBAAgB,CAACkL,GAAD,EAAM5E,MAAN,EAAc,KAAK3F,OAAnB,EAA4B,KAAKmB,MAAjC,CAAhB;AACA2E,UAAAA,UAAU,GAAG3G,sBAAsB,CAAC,KAAKa,OAAN,EAAeuK,GAAf,CAAtB,GAA4C,KAAKvK,OAAL,CAAa+G,SAAb,CAAuBwD,GAAG,CAAC1D,QAA3B,CAA5C,GACR,KAAK7G,OAAL,CAAa+G,SAAb,CAAuBwD,GAAG,CAAC1D,QAA3B,KAAwC0D,GAD7C;;AAEA,cAAIzE,UAAU,IAAIA,UAAU,CAACzB,SAAzB,IAAsCyB,UAAU,CAACzB,SAAX,CAAqB5B,IAArB,KAA8B,QAAxE,EAAkF;AAC9EqD,YAAAA,UAAU,CAACU,OAAX,CAAmBmT,QAAnB,GAA8B7T,UAAU,CAAC6T,QAAX,GAAsB7T,UAAU,CAACU,OAAX,CAAmBqW,UAAnB,CAA8B1Z,KAAlF;AACA2C,YAAAA,UAAU,CAACU,OAAX,CAAmBsW,SAAnB,GAA+BhX,UAAU,CAACgX,SAAX,GAAuBhX,UAAU,CAACU,OAAX,CAAmBqW,UAAnB,CAA8BvZ,MAApF;AACA2Y,YAAAA,kBAAkB,GAAG,IAArB;AACH;;AACD,cAAI9c,sBAAsB,CAAC,KAAKa,OAAN,EAAeuK,GAAf,EAAoB,IAApB,CAAtB,IAAmDzE,UAAnD,IAAiEA,UAAU,CAACzB,SAAX,CAAqB5B,IAArB,KAA8B,QAAnG,EAA6G;AACzGvD,YAAAA,yBAAyB,CAAC,KAAKc,OAAN,EAAeuK,GAAf,CAAzB;AACH,WAFD,MAGK;AACD4R,YAAAA,OAAO,GAAG,KAAKY,+BAAL,CAAqCjX,UAArC,EAAiDyE,GAAjD,EAAsDjF,UAAtD,EAAkEyJ,YAAlE,EAAgFoN,OAAhF,CAAV;AACH;;AACD,cAAK,KAAKnc,OAAL,CAAaoP,iBAAb,IAAmC,KAAKpP,OAAL,CAAaoN,WAAb,GAA2B1R,kBAAkB,CAAC8U,WAAlF,IACI,CAACrR,sBAAsB,CAAC,KAAKa,OAAN,EAAeuK,GAAf,EAAoB,IAApB,CAD/B,EAC2D;AACvD,gBAAIA,GAAG,CAAC8O,QAAR,EAAkB;AACd,mBAAKrZ,OAAL,CAAa4Y,WAAb,IAA4B/a,UAAU,CAACmf,iBAAvC;AACH;;AACD,iBAAKhd,OAAL,CAAaid,kBAAb,CAAgC1S,GAAhC,EAAqC,EAArC,EAAyC;AACrCpH,cAAAA,KAAK,EAAEoH,GAAG,CAACpH,KAD0B;AACnBG,cAAAA,MAAM,EAAEiH,GAAG,CAACjH,MADO;AAErCf,cAAAA,OAAO,EAAEgI,GAAG,CAAChI,OAFwB;AAEfC,cAAAA,OAAO,EAAE+H,GAAG,CAAC/H;AAFE,aAAzC;;AAIA,gBAAI+H,GAAG,CAAC8O,QAAR,EAAkB;AACd,mBAAKrZ,OAAL,CAAa4Y,WAAb,IAA4B,CAAC/a,UAAU,CAACmf,iBAAxC;AACH;AACJ;;AACD,cAAIzS,GAAG,CAACjE,KAAJ,CAAUgM,KAAd,EAAqB;AACjB,iBAAK4K,mBAAL,CAAyB3S,GAAzB;AACH;;AACD,cAAI0R,kBAAJ,EAAwB;AACpBnW,YAAAA,UAAU,CAAC6T,QAAX,GAAsB7T,UAAU,CAACU,OAAX,CAAmBmT,QAAnB,GAA8B7Q,SAApD;AACAhD,YAAAA,UAAU,CAACgX,SAAX,GAAuBhX,UAAU,CAACU,OAAX,CAAmBsW,SAAnB,GAA+BhU,SAAtD;AACH;;AACD,cAAIoH,QAAJ,EAAc;AACV,iBAAKlQ,OAAL,CAAaid,kBAAb,CAAgCnX,UAAhC,EAA4C,EAA5C,EAAgD;AAC5CvD,cAAAA,OAAO,EAAEuD,UAAU,CAACvD,OADwB;AACfC,cAAAA,OAAO,EAAEsD,UAAU,CAACtD,OADL;AACcW,cAAAA,KAAK,EAAE2C,UAAU,CAAC3C,KADhC;AACuCG,cAAAA,MAAM,EAAEwC,UAAU,CAACxC,MAD1D;AAE5CmY,cAAAA,WAAW,EAAE3V,UAAU,CAAC2V;AAFoB,aAAhD;AAIA,gBAAI0B,KAAK,GAAG;AACRC,cAAAA,UAAU,EAAE;AAAER,gBAAAA,WAAW,EAAE9T,SAAf;AAA0BrD,gBAAAA,MAAM,EAAEgX,WAAW,CAAChX;AAA9C,eADJ;AAERhD,cAAAA,IAAI,EAAE,2BAFE;AAE2B4a,cAAAA,UAAU,EAAEZ,WAFvC;AAEoDa,cAAAA,QAAQ,EAAE;AAF9D,aAAZ;;AAIA,gBAAI,EAAE,KAAKtd,OAAL,CAAa4B,cAAb,GAA8BxG,aAAa,CAACmiB,QAA9C,CAAJ,EAA6D;AACzD,mBAAKvd,OAAL,CAAawd,eAAb,CAA6BL,KAA7B;AACH;AACJ;;AACD,cAAI5S,GAAG,IAAIA,GAAG,CAAClG,SAAX,KAAyBkG,GAAG,CAAClG,SAAJ,CAAc5B,IAAd,KAAuB,OAAvB,IACxB8H,GAAG,CAAClG,SAAJ,CAAc5B,IAAd,KAAuB,QAAvB,IAAmC8H,GAAG,CAAC1D,QAAJ,KAAiB,EADrD,CAAJ,EAC+D;AAC3D,gBAAI0D,GAAG,IAAIA,GAAG,CAACjE,KAAX,IAAoBiE,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,eAA3C,EAA4D;AACxD8H,cAAAA,GAAG,CAAC/D,OAAJ,CAAYiX,eAAZ,GAA8B,IAA9B;AACH;;AACD,iBAAKzd,OAAL,CAAaid,kBAAb,CAAgC1S,GAAhC,EAAqC,EAArC,EAAyC;AACrChI,cAAAA,OAAO,EAAEgI,GAAG,CAAChI,OADwB;AACfC,cAAAA,OAAO,EAAE+H,GAAG,CAAC/H,OADE;AACOW,cAAAA,KAAK,EAAEoH,GAAG,CAACpH,KADlB;AACyBG,cAAAA,MAAM,EAAEiH,GAAG,CAACjH,MADrC;AAC6CmY,cAAAA,WAAW,EAAElR,GAAG,CAACkR;AAD9D,aAAzC;;AAGA,gBAAIlR,GAAG,IAAIA,GAAG,CAACjE,KAAX,IAAoBiE,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,eAA3C,EAA4D;AACxD8H,cAAAA,GAAG,CAAC/D,OAAJ,CAAYiX,eAAZ,GAA8B,KAA9B;AACH;AACJ;AACJ;;AACD9d,QAAAA,0BAA0B,CAAC2F,UAAD,EAAa,KAAKtF,OAAlB,CAA1B;AACAmc,QAAAA,OAAO,CAACjM,QAAR,GAAmBgM,QAAnB;AACH;AACJ;;AACD,QAAI3R,GAAG,KAAKA,GAAG,CAAC2B,OAAJ,IAAe3B,GAAG,CAAC0B,MAAnB,IACP1B,GAAG,CAACjE,KAAJ,IAAaiE,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,UAD9B,CAAP,EACmD;AAC/C,WAAKzC,OAAL,CAAa0d,wBAAb;AACH;;AACD,WAAOvB,OAAP;AACH,GArJD;;AAsJApc,EAAAA,mBAAmB,CAACiB,SAApB,CAA8Bkc,mBAA9B,GAAoD,UAAU3S,GAAV,EAAe;AAC/D,SAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAI8B,GAAG,CAACjE,KAAJ,CAAUgM,KAAV,CAAgBjN,MAArC,EAA8CoD,CAAC,EAA/C,EAAmD;AAC/C,UAAI8B,GAAG,CAACjE,KAAJ,CAAUgM,KAAV,CAAgB7J,CAAhB,EAAmB4Q,QAAnB,IAA+B9O,GAAG,CAACjE,KAAJ,CAAUgM,KAAV,CAAgB7J,CAAhB,EAAmB4Q,QAAnB,CAA4BhU,MAA5B,GAAqC,CAAxE,EAA2E;AACvE,aAAK,IAAIsY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpT,GAAG,CAACjE,KAAJ,CAAUgM,KAAV,CAAgB7J,CAAhB,EAAmB4Q,QAAnB,CAA4BhU,MAAhD,EAAwDsY,CAAC,EAAzD,EAA6D;AACzD,cAAInZ,EAAE,GAAG+F,GAAG,CAACjE,KAAJ,CAAUgM,KAAV,CAAgB7J,CAAhB,EAAmB4Q,QAAnB,CAA4BsE,CAA5B,EAA+BnZ,EAAxC;AACA,cAAIoZ,SAAS,GAAG,KAAK5d,OAAL,CAAa+G,SAAb,CAAuBvC,EAAvB,CAAhB;AACAoZ,UAAAA,SAAS,CAACrb,OAAV,GAAoBqb,SAAS,CAACpX,OAAV,CAAkBjE,OAAtC;AACAqb,UAAAA,SAAS,CAACpb,OAAV,GAAoBob,SAAS,CAACpX,OAAV,CAAkBhE,OAAtC;AACH;AACJ;AACJ;AACJ,GAXD;;AAYAzC,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B+b,+BAA9B,GAAgE,UAAUjX,UAAV,EAAsByE,GAAtB,EAA2BjF,UAA3B,EAAuCyJ,YAAvC,EAAqDoN,OAArD,EAA8D;AAC1H,QAAI,KAAKjc,aAAL,KAAuB,YAAvB,IAAuC,KAAKA,aAAL,KAAuB,aAA9D,IAA+EqK,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,UAAtG,EAAkH;AAC9G,UAAIob,OAAO,GAAG1f,WAAW,CAACoM,GAAD,CAAzB;AACA,UAAIuT,WAAW,GAAG,KAAlB;;AACA,UAAIhY,UAAU,IAAIA,UAAU,CAACzB,SAAzB,IAAsCyB,UAAU,CAACzB,SAAX,CAAqB5B,IAArB,KAA8B,MAAxE,EAAgF;AAC5E,YAAI6D,KAAK,GAAGR,UAAU,CAACQ,KAAX,CAAiB7D,IAAjB,KAA0B,UAA1B,GAAuC,IAAvC,GAA8C,KAA1D;AACA,YAAI4B,SAAS,GAAIiC,KAAK,GAAGR,UAAU,CAACU,OAAX,CAAmB6S,QAAnB,CAA4B,CAA5B,CAAH,GAAoCvT,UAAU,CAACU,OAArE;AACA,YAAIwG,OAAO,GAAG1G,KAAK,GAAGR,UAAU,CAACQ,KAAX,CAAiB0G,OAApB,GAA8BlE,SAAjD;AACA,YAAIlF,CAAC,GAAGkC,UAAU,CAACU,OAAX,CAAmB/B,MAAnB,CAA0Bb,CAAlC;AACA,YAAIC,CAAC,GAAGiC,UAAU,CAACU,OAAX,CAAmB/B,MAAnB,CAA0BZ,CAAlC;;AACA,YAAI0G,GAAG,CAACkI,WAAJ,KAAoB3J,SAApB,IAAkChD,UAAU,CAACzB,SAAX,CAAqB2C,WAArB,KAAqC,YAArC,KAChCV,KAAK,IAAIiE,GAAG,CAAC2B,OAAd,IAA2B,CAAC5F,KAAD,IAAUiE,GAAG,CAACiI,QAAJ,KAAiB,CADrB,CAAlC,IAEC1M,UAAU,CAACzB,SAAX,CAAqB2C,WAArB,KAAqC,UAArC,KACK,CAACV,KAAD,IAAUiE,GAAG,CAACiI,QAAJ,GAAe,CAAzB,IAA8BjI,GAAG,CAACkI,WAAJ,GAAkB,CAAjD,IAAwDnM,KAAK,IAAIiE,GAAG,CAAC0B,MADzE,CAFL,EAGyF;AACrF,cAAInG,UAAU,CAACzB,SAAX,CAAqB2C,WAArB,KAAqC,YAArC,IAAqDuD,GAAG,CAAC2B,OAAzD,IAAoE3B,GAAG,CAAC/D,OAAJ,CAAYrD,KAAZ,GAAoBoH,GAAG,CAACoP,QAAhG,EAA0G;AACtGpP,YAAAA,GAAG,CAACoP,QAAJ,GAAepP,GAAG,CAAC/D,OAAJ,CAAYrD,KAA3B;AACAoH,YAAAA,GAAG,CAAC/D,OAAJ,CAAYmT,QAAZ,GAAuBpP,GAAG,CAAC/D,OAAJ,CAAYrD,KAAnC;AACH;;AACD5D,UAAAA,oBAAoB,CAAC,KAAKS,OAAN,EAAeuK,GAAf,EAAoBzE,UAApB,EAAgCiJ,YAAhC,CAApB;AACA1K,UAAAA,SAAS,CAAC0Z,iBAAV,CAA4BxT,GAAG,CAACkI,WAAhC,EAA6C1D,YAAY,CAAC5L,KAA1D,EAAiE,IAAjE,EAAuE6J,OAAvE;;AACA,cAAIzC,GAAG,CAAC2B,OAAR,EAAiB;AACb,gBAAI1H,EAAE,GAAGsB,UAAU,CAACQ,KAAX,CAAiB6L,MAAjB,CAAwB5H,GAAG,CAACkI,WAA5B,EAAyCR,MAAzC,CAAgDzN,EAAzD;AACA,gBAAI6B,IAAI,GAAG,KAAKrG,OAAL,CAAa+G,SAAb,CAAuBvC,EAAvB,CAAX;;AACA,gBAAI6B,IAAI,CAACsT,QAAL,GAAgB5K,YAAY,CAAC5L,KAAjC,EAAwC;AACpCkD,cAAAA,IAAI,CAACsT,QAAL,GAAgB5K,YAAY,CAAC5L,KAA7B;AACAkD,cAAAA,IAAI,CAACG,OAAL,CAAamT,QAAb,GAAwB5K,YAAY,CAAC5L,KAArC;AACH;AACJ;;AACD,cAAI2C,UAAU,CAACQ,KAAX,CAAiB7D,IAAjB,KAA0B,UAA9B,EAA0C;AACtCqD,YAAAA,UAAU,CAAC3C,KAAX,GAAoB2C,UAAU,CAAC3C,KAAZ,GAAqBkB,SAAS,CAAClB,KAA/B,GAAuC2C,UAAU,CAAC3C,KAArE;AACA1D,YAAAA,oBAAoB,CAAC,KAAKO,OAAN,EAAe8F,UAAf,CAApB;AACAA,YAAAA,UAAU,CAACU,OAAX,CAAmBrD,KAAnB,GAA2B2C,UAAU,CAAC3C,KAAtC;AACAmC,YAAAA,UAAU,GAAG9F,aAAa,CAAC,KAAKQ,OAAN,EAAeqE,SAAf,EAA0BkG,GAAG,CAACiI,QAA9B,EAAwC,KAAxC,CAA1B;AACH;AACJ,SAxBD,MAyBK,IAAIjI,GAAG,CAACiI,QAAJ,KAAiB1J,SAArB,EAAgC;AACjCgV,UAAAA,WAAW,GAAG,IAAd;AACAve,UAAAA,oBAAoB,CAAC,KAAKS,OAAN,EAAeuK,GAAf,EAAoBzE,UAApB,EAAgCiJ,YAAhC,CAApB;AACA1K,UAAAA,SAAS,CAAC2Z,eAAV,CAA0BzT,GAAG,CAACiI,QAA9B,EAAwCzD,YAAY,CAACzL,MAArD,EAA6D,IAA7D,EAAmE0J,OAAnE;;AACA,cAAIlH,UAAU,CAACQ,KAAX,CAAiB7D,IAAjB,KAA0B,UAA9B,EAA0C;AACtCqD,YAAAA,UAAU,CAACxC,MAAX,GAAqBwC,UAAU,CAACxC,MAAZ,GAAsBe,SAAS,CAACf,MAAhC,GAAyCwC,UAAU,CAACxC,MAAxE;AACAwC,YAAAA,UAAU,CAACU,OAAX,CAAmBlD,MAAnB,GAA4BwC,UAAU,CAACxC,MAAvC;AACAgC,YAAAA,UAAU,GAAG9F,aAAa,CAAC,KAAKQ,OAAN,EAAeqE,SAAf,EAA0BkG,GAAG,CAACiI,QAA9B,EAAwC,IAAxC,CAA1B;AACH;AACJ;;AACD,YAAI1M,UAAU,CAACQ,KAAX,CAAiB7D,IAAjB,KAA0B,UAA9B,EAA0C;AACtC0Z,UAAAA,OAAO,CAAC7M,gBAAR,GAA2B,IAA3B;AACH;;AACD,aAAKtP,OAAL,CAAaid,kBAAb,CAAgCnX,UAAhC,EAA4C,EAA5C,EAAgD;AAC5CvD,UAAAA,OAAO,EAAEuD,UAAU,CAACvD,OADwB;AACfC,UAAAA,OAAO,EAAEsD,UAAU,CAACtD,OADL;AAE5CiZ,UAAAA,WAAW,EAAE3V,UAAU,CAAC2V;AAFoB,SAAhD;AAIA,aAAKzb,OAAL,CAAaie,IAAb,CAAkBnY,UAAlB,EAA8BlC,CAAC,GAAGkC,UAAU,CAACU,OAAX,CAAmB/B,MAAnB,CAA0Bb,CAA5D,EAA+DC,CAAC,GAAGiC,UAAU,CAACU,OAAX,CAAmB/B,MAAnB,CAA0BZ,CAA7F;AACH,OAjDD,MAkDK;AACD,YAAI0G,GAAG,IAAIA,GAAG,CAACjE,KAAX,IAAoBiE,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,eAA3C,EAA4D;AACxD8H,UAAAA,GAAG,CAAC/D,OAAJ,CAAYiX,eAAZ,GAA8B,IAA9B;AACH;;AACD,aAAKzd,OAAL,CAAaid,kBAAb,CAAgC1S,GAAhC,EAAqC,EAArC,EAAyC;AACrChI,UAAAA,OAAO,EAAEgI,GAAG,CAAChI,OADwB;AACfC,UAAAA,OAAO,EAAE+H,GAAG,CAAC/H,OADE;AACOW,UAAAA,KAAK,EAAEoH,GAAG,CAACpH,KADlB;AACyBG,UAAAA,MAAM,EAAEiH,GAAG,CAACjH,MADrC;AAC6CmY,UAAAA,WAAW,EAAElR,GAAG,CAACkR;AAD9D,SAAzC;AAGAlR,QAAAA,GAAG,CAAC/D,OAAJ,CAAYiX,eAAZ,GAA8B,KAA9B;AACH;;AACDlT,MAAAA,GAAG,CAAC/D,OAAJ,CAAY0X,OAAZ,CAAoB,IAAIhgB,IAAJ,CAASqM,GAAG,CAAC/D,OAAJ,CAAYrD,KAArB,EAA4BoH,GAAG,CAAC/D,OAAJ,CAAYlD,MAAxC,CAApB;AACAiH,MAAAA,GAAG,CAAC/D,OAAJ,CAAY2X,OAAZ,CAAoB5T,GAAG,CAAC/D,OAAJ,CAAY4X,WAAhC;;AACA,UAAI,KAAKle,aAAL,KAAuB,YAAvB,IAAuC,KAAKA,aAAL,KAAuB,aAAlE,EAAiF;AAC7E,YAAIkd,UAAU,GAAGjf,WAAW,CAACoM,GAAD,CAA5B;AACA,YAAI4S,KAAK,GAAG;AACRG,UAAAA,QAAQ,EAAE,UADF;AAER7a,UAAAA,IAAI,EAAGqb,WAAD,GAAgB,kBAAhB,GAAqC,oBAFnC;AAGRT,UAAAA,UAAU,EAAEQ,OAHJ;AAGaT,UAAAA,UAAU,EAAEA;AAHzB,SAAZ;AAKA,aAAKpd,OAAL,CAAawd,eAAb,CAA6BL,KAA7B;AACH;AACJ;;AACDxd,IAAAA,0BAA0B,CAAC2F,UAAD,EAAa,KAAKtF,OAAlB,CAA1B;AACA,WAAOmc,OAAP;AACH,GA7ED;;AA8EApc,EAAAA,mBAAmB,CAACiB,SAApB,CAA8B6N,UAA9B,GAA2C,YAAY;AACnD,QAAIxI,IAAI,GAAG,KAAKrG,OAAL,CAAamF,aAAb,CAA2BC,KAA3B,CAAiC,CAAjC,CAAX;AACA,QAAIsB,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC;AAAE/C,MAAAA,CAAC,EAAE,KAAKrC,eAAL,CAAqBqC,CAArB,GAAyB,EAA9B;AAAkCC,MAAAA,CAAC,EAAE,KAAKtC,eAAL,CAAqBsC;AAA1D,KAAnC,CAAd;AACA,QAAI8B,MAAM,GAAG,KAAK3F,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAb;;AACA,QAAI,CAACoF,MAAL,EAAa;AACTe,MAAAA,OAAO,GAAG,KAAK1G,OAAL,CAAa2G,qBAAb,CAAmC;AAAE/C,QAAAA,CAAC,EAAE,KAAKrC,eAAL,CAAqBqC,CAArB,GAAyB,EAA9B;AAAkCC,QAAAA,CAAC,EAAE,KAAKtC,eAAL,CAAqBsC;AAA1D,OAAnC,CAAV;AACA8B,MAAAA,MAAM,GAAG,KAAK3F,OAAL,CAAa4G,oBAAb,CAAkCF,OAAlC,EAA2C,KAAKvF,MAAhD,EAAwD,KAAKZ,QAA7D,CAAT;AACH;;AACD,QAAI8F,IAAI,IAAIA,IAAI,CAAChC,SAAb,IAA0BgC,IAAI,CAAChC,SAAL,CAAe5B,IAAf,KAAwB,OAAlD,IAA6DkD,MAA7D,IAAuEA,MAAM,CAACkB,QAA9E,IACGlB,MAAM,CAACkB,QAAP,KAAoBR,IAAI,CAAC7B,EADhC,EACoC;AAChC,UAAI6Z,SAAS,GAAG1Y,MAAhB;AACA,UAAI2Y,UAAU,GAAGtgB,kBAAkB,CAAC,KAAKgC,OAAL,CAAa+C,OAAb,CAAqByB,EAAtB,CAAnC;AACA,UAAI+Z,WAAW,GAAGD,UAAU,CAAC/Z,cAAX,CAA0B+Z,UAAU,CAAC9Z,EAAX,GAAgB,oBAA1C,CAAlB;;AACA,UAAI+Z,WAAJ,EAAiB;AACb,YAAI3M,KAAK,GAAGvL,IAAI,CAACG,OAAL,CAAa6S,QAAb,CAAsB3W,OAAtB,CAA8BiD,MAAM,CAACa,OAArC,IAAgD,CAA5D;AACA,aAAKxG,OAAL,CAAawe,uBAAb,CAAqC,KAArC;AACA,YAAIC,IAAI,GAAG,IAAIvkB,IAAJ,CAAS,KAAK8F,OAAd,EAAuB,OAAvB,EAAgC;AACvC4E,UAAAA,KAAK,EAAE;AACH8Z,YAAAA,IAAI,EAAErY,IAAI,CAACzB,KAAL,CAAW8Z,IADd;AAEHC,YAAAA,WAAW,EAAGtY,IAAI,CAACzB,KAAL,CAAW+Z,WAAX,KAA2B,OAA5B,GAAuC,WAAvC,GAAqDtY,IAAI,CAACzB,KAAL,CAAW+Z;AAF1E,WADgC;AAKvCpI,UAAAA,WAAW,EAAE5Q,MAAM,CAAC4Q,WALmB;AAKNqI,UAAAA,iBAAiB,EAAE,SALb;AAKwBC,UAAAA,mBAAmB,EAAE,SAL7C;AAMvCzR,UAAAA,WAAW,EAAE,CAACzP,eAAe,CAACmhB,OAAhB,GAA0BnhB,eAAe,CAACohB,UAA3C,IAAyD,EAAEphB,eAAe,CAACqhB,MAAhB,GAAyBrhB,eAAe,CAACshB,IAAzC,GAAgDthB,eAAe,CAACuhB,MAAlE,CAN/B;AAOvCtF,UAAAA,SAAS,EAAE;AAP4B,SAAhC,EAQR,IARQ,CAAX;AASA6E,QAAAA,IAAI,CAAClI,WAAL,CAAiB,CAAjB,EAAoBxJ,OAApB,GAA8B,gBAA9B;AACA,YAAIvI,EAAE,GAAG6Z,SAAS,CAAC7Z,EAAV,CAAa8U,KAAb,CAAmB,GAAnB,CAAT;AACAmF,QAAAA,IAAI,CAACja,EAAL,GAAU3E,QAAQ,KAAK4e,IAAI,CAACja,EAA5B;AACAia,QAAAA,IAAI,CAAC5X,QAAL,GAAgBR,IAAI,CAAC7B,EAArB;AACAia,QAAAA,IAAI,CAACU,MAAL,GAAc,CAAC,CAAf;AACAV,QAAAA,IAAI,CAACW,QAAL,GAAgBxN,KAAhB;AACA,aAAK5R,OAAL,CAAa0c,gBAAb;AACA,YAAI2C,WAAW,GAAG;AACdzC,UAAAA,WAAW,EAAEvW,IAAI,CAACG,OAAL,CAAa6S,QAAb,CAAsB3W,OAAtB,CAA8B+b,IAAI,CAACjY,OAAnC,CADC;AAC4Cf,UAAAA,MAAM,EAAEgZ,IADpD;AAEd9Y,UAAAA,MAAM,EAAEmD,SAFM;AAEK6T,UAAAA,WAAW,EAAE7T;AAFlB,SAAlB;AAIA,aAAK9I,OAAL,CAAawe,uBAAb,CAAqC,IAArC;AACA,aAAKxe,OAAL,CAAa0B,GAAb,CAAiB+c,IAAjB;AACA,aAAKze,OAAL,CAAasf,oBAAb,CAAkCjZ,IAAlC;AACA,aAAKrG,OAAL,CAAauO,cAAb;AACA,aAAKvO,OAAL,CAAa4S,MAAb,CAAoB,CAAC,KAAK5S,OAAL,CAAa+G,SAAb,CAAuB0X,IAAI,CAACja,EAA5B,CAAD,CAApB;AACA,aAAKxE,OAAL,CAAamQ,cAAb;AACA,aAAKnQ,OAAL,CAAakU,aAAb;AACH;AACJ;AACJ,GA7CD;;AA8CA,SAAOnU,mBAAP;AACH,CAn9DwC,EAAzC;;AAo9DA,SAASA,mBAAT;AACA;;AACA,IAAIc,YAAY;AAAG;AAAe,YAAY;AAC1C,WAASA,YAAT,GAAwB,CACvB;AACD;;;AACAA,EAAAA,YAAY,CAACG,SAAb,CAAuB2F,qBAAvB,GAA+C,UAAU4Y,EAAV,EAAcvf,OAAd,EAAuBW,SAAvB,EAAkC8E,MAAlC,EAA0C+Z,OAA1C,EAAmD;AAC9F;AACA,QAAIhG,YAAY,GAAG,EAAnB;;AACA,QAAI/T,MAAM,IAAIA,MAAM,YAAY1K,QAAhC,EAA0C;AACtC,UAAI0K,MAAM,CAACL,KAAP,CAAaC,MAAb,GAAsBI,MAAM,CAACH,UAAP,CAAkBD,MAAxC,KAAmD,CAAvD,EAA0D;AACtDI,QAAAA,MAAM,GAAIA,MAAM,CAACL,KAAP,CAAa,CAAb,KAAmBK,MAAM,CAACH,UAAP,CAAkB,CAAlB,CAA7B;;AACA,YAAIG,MAAM,CAAC4T,QAAP,IAAmB5T,MAAM,CAAC4T,QAAP,CAAgBhU,MAAhB,KAA2B,CAAlD,EAAqD;AACjD1E,UAAAA,SAAS,CAACuJ,YAAV,GAAyBzE,MAAzB;AACH;AACJ;AACJ;;AACD,QAAIpB,SAAJ;AACA,QAAII,MAAJ;AACA,QAAIgb,KAAJ;AACA,QAAIC,MAAJ;AACA,QAAIC,UAAU,GAAIla,MAAM,IAAKA,MAAM,YAAY/L,SAA7B,KACZ+L,MAAM,CAAC2H,WAAP,GAAqBxP,oBAAoB,CAACqd,mBAA3C,IACIxV,MAAM,CAAC2H,WAAP,GAAqBxP,oBAAoB,CAACwT,mBAFjC,KAE0D3L,MAAM,CAAC4L,iBAFlE,IAEwF,CAFzG;AAGA,QAAIuO,QAAQ,GAAG5f,OAAO,CAAC6f,aAAR,CAAsBC,WAAtB,CAAkC,IAAIzhB,IAAJ,CAASkhB,EAAE,CAAC3b,CAAH,GAAO,EAAP,GAAY+b,UAArB,EAAiCJ,EAAE,CAAC1b,CAAH,GAAO,EAAP,GAAY8b,UAA7C,EAAyD,MAAMA,UAA/D,EAA2E,MAAMA,UAAjF,CAAlC,CAAf;AACA,QAAII,aAAa,GAAG,EAApB;AACA,QAAIC,WAAJ;;AACA,SAAK,IAAIvL,EAAE,GAAG,CAAT,EAAYwL,UAAU,GAAGL,QAA9B,EAAwCnL,EAAE,GAAGwL,UAAU,CAAC5a,MAAxD,EAAgEoP,EAAE,EAAlE,EAAsE;AAClE,UAAIlK,GAAG,GAAG0V,UAAU,CAACxL,EAAD,CAApB;AACA,UAAIkD,KAAK,GAAG4H,EAAZ;AACA9a,MAAAA,MAAM,GAAG8F,GAAG,CAAC/D,OAAJ,CAAYwU,WAArB;AACA,UAAIkF,aAAa,GAAI3V,GAAG,CAACkR,WAAL,GAAoB,KAApB,GAA4BhX,MAAM,CAACgC,aAAP,CAAqBkR,KAArB,EAA4BgI,UAA5B,CAAhD;;AACA,UAAI,CAACpV,GAAG,KAAK9E,MAAR,IAAkBzF,OAAO,CAAC0Q,oBAAR,YAAwChX,SAA3D,KACC6Q,GAAG,YAAY7Q,SADhB,GAC6B6Q,GAAG,KAAKvK,OAAO,CAAC0Q,oBAD7C,GACoE,QAAQnG,GAAG,CAAC/D,OAAJ,CAAY4S,OAD5F,EACqG;AACjG,YAAIH,KAAK,GAAGjZ,OAAO,CAACC,cAAR,CAAuBiZ,cAAvB,CAAsC3O,GAAG,CAAC/F,EAA1C,CAAZ;;AACA,YAAIyU,KAAK,IAAI,CAACA,KAAK,CAACE,IAAhB,IAAwBF,KAAK,CAACG,OAAlC,EAA2C;AACvC4G,UAAAA,WAAW,GAAGD,aAAa,CAAC9G,KAAK,CAACkG,MAAP,CAAb,GAA8BY,aAAa,CAAC9G,KAAK,CAACkG,MAAP,CAAb,IAA+B,EAA3E;;AACA,cAAI5U,GAAG,CAACkR,WAAR,EAAqB;AACjBpX,YAAAA,SAAS,GAAGkG,GAAG,CAAC/D,OAAhB;AACA/B,YAAAA,MAAM,GAAGzF,2BAA2B,CAACqF,SAAD,CAApC;;AACA,iBAAK,IAAIqQ,EAAE,GAAG,CAAT,EAAYyL,EAAE,GAAG9b,SAAS,CAACgV,QAAhC,EAA0C3E,EAAE,GAAGyL,EAAE,CAAC9a,MAAlD,EAA0DqP,EAAE,EAA5D,EAAgE;AAC5D+K,cAAAA,KAAK,GAAGU,EAAE,CAACzL,EAAD,CAAV;AACAgL,cAAAA,MAAM,GAAGphB,cAAc,EAAvB;AACAC,cAAAA,YAAY,CAACmhB,MAAD,EAAS,EAAED,KAAK,CAAChE,WAAN,GAAoBgE,KAAK,CAAC/D,eAA5B,CAAT,EAAuD+D,KAAK,CAACld,OAA7D,EAAsEkd,KAAK,CAACjd,OAA5E,CAAZ;AACAmV,cAAAA,KAAK,GAAGnZ,sBAAsB,CAACkhB,MAAD,EAASH,EAAT,CAA9B;;AACA,kBAAIvgB,2BAA2B,CAACygB,KAAD,CAA3B,CAAmChZ,aAAnC,CAAiDkR,KAAjD,EAAwDgI,UAAxD,CAAJ,EAAyE;AACrEO,gBAAAA,aAAa,GAAG,IAAhB;AACH;AACJ;AACJ;;AACD,cAAI,CAACza,MAAD,IAAYxK,UAAU,CAAC+E,OAAD,EAAUuK,GAAV,CAAV,KAA6B,KAA7C,EAAqD;AACjD,gBAAIxN,sBAAsB,CAACwN,GAAD,EAAMvK,OAAN,CAA1B,EAA0C;AACtC,kBAAKuK,GAAG,YAAY7Q,SAAhB,GAA6BmC,oBAAoB,CAAC0O,GAAD,EAAMgV,EAAN,CAAjD,GAA6DW,aAAjE,EAAgF;AAC5E,oBAAIlT,OAAO,GAAIzC,GAAG,YAAY7Q,SAAhB,GAA6B6Q,GAAG,CAACuB,UAAJ,IAAkB,CAA/C,GAAmD,CAAjE,CAD4E,CACR;;AACpE,oBAAI/I,OAAO,GAAG,KAAK0H,qBAAL,CAA2BF,GAA3B,EAAgCgV,EAAhC,EAAoCI,UAAU,IAAI3S,OAAlD,CAAd;;AACA,oBAAIjK,OAAO,IAAIwH,GAAG,CAAC/F,EAAJ,KAAW,QAA1B,EAAoC;AAChCzI,kBAAAA,YAAY,CAACwO,GAAD,EAAM,QAAN,EAAgByV,WAAhB,CAAZ;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;;AACD,SAAK,IAAII,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGrgB,OAAO,CAACsgB,MAA9B,EAAsCF,EAAE,GAAGC,EAAE,CAAChb,MAA9C,EAAsD+a,EAAE,EAAxD,EAA4D;AACxD,UAAInH,KAAK,GAAGoH,EAAE,CAACD,EAAD,CAAd;AACA5G,MAAAA,YAAY,GAAGA,YAAY,CAAChU,MAAb,CAAoBua,aAAa,CAAC9G,KAAK,CAACkG,MAAP,CAAb,IAA+B,EAAnD,CAAf;;AACA,WAAK,IAAIoB,EAAE,GAAG,CAAT,EAAYC,cAAc,GAAGhH,YAAlC,EAAgD+G,EAAE,GAAGC,cAAc,CAACnb,MAApE,EAA4Ekb,EAAE,EAA9E,EAAkF;AAC9E,YAAIhW,GAAG,GAAGiW,cAAc,CAACD,EAAD,CAAxB;AACA,YAAIE,YAAY,GAAG,cAAnB;;AACA,YAAIlW,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,MAAnB,IAA6B8H,GAAG,CAACmW,SAAjC,KAA+C,EAAE1gB,OAAO,CAACygB,YAAD,CAAP,CAAsB/f,IAAtB,YAAsCtG,QAAxC,KAC9C4F,OAAO,CAACygB,YAAD,CAAP,CAAsB/f,IAAtB,YAAsCtG,QAAvC,IAAoDkD,YAAY,CAACiN,GAAD,CADhE,CAAJ,EAC4E;AACxE,cAAIqH,KAAK,GAAG4H,YAAY,CAAC9W,OAAb,CAAqB1C,OAAO,CAAC+G,SAAR,CAAkBwD,GAAG,CAACmW,SAAtB,CAArB,CAAZ;;AACA,cAAI9O,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ4H,YAAAA,YAAY,CAAC5B,MAAb,CAAoBhG,KAApB,EAA2B,CAA3B;AACH;AACJ;;AACD,YAAIrH,GAAG,CAACjE,KAAJ,CAAU7D,IAAV,KAAmB,eAAnB,IAAsC8H,GAAG,CAAClG,SAA1C,IAAuDkG,GAAG,CAAClG,SAAJ,CAAc5B,IAAd,KAAuB,OAAlF,EAA2F;AACvF,cAAImP,KAAK,GAAG4H,YAAY,CAAC9W,OAAb,CAAqB1C,OAAO,CAAC+G,SAAR,CAAkB/G,OAAO,CAAC+G,SAAR,CAAkBwD,GAAG,CAAC/F,EAAtB,EAA0BgC,OAA1B,CAAkC6S,QAAlC,CAA2C,CAA3C,EAA8C7U,EAAhE,CAArB,CAAZ;;AACA,cAAIoN,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ4H,YAAAA,YAAY,CAAC5B,MAAb,CAAoBhG,KAApB,EAA2B,CAA3B;AACH;AACJ;AACJ;AACJ;;AACD,SAAK,IAAInJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+Q,YAAY,CAACnU,MAAjC,EAAyCoD,CAAC,EAA1C,EAA8C;AAC1C,UAAIkY,SAAS,GAAG3gB,OAAO,CAAC+G,SAAR,CAAkByS,YAAY,CAAC/Q,CAAD,CAAZ,CAAgB5B,QAAlC,CAAhB;;AACA,UAAI8Z,SAAJ,EAAe;AACX,YAAIC,WAAW,GAAG,KAAKnW,qBAAL,CAA2BkW,SAA3B,EAAsCpB,EAAtC,CAAlB;;AACA,aAAK,IAAI5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgD,SAAS,CAAC5F,KAAV,CAAgB1V,MAApC,EAA4CsY,CAAC,EAA7C,EAAiD;AAC7C,cAAIiD,WAAW,CAACpc,EAAZ,CAAe8C,KAAf,CAAqB,MAAMqZ,SAAS,CAAC5F,KAAV,CAAgB4C,CAAhB,EAAmBnZ,EAAzB,GAA8B,GAAnD,CAAJ,EAA6D;AACzD,gBAAIqc,IAAI,GAAGF,SAAS,CAAC5F,KAAV,CAAgB4C,CAAhB,CAAX;;AACA,gBAAIlhB,OAAO,CAACokB,IAAD,EAAO7gB,OAAP,CAAP,IAA0BxD,OAAO,CAACqkB,IAAD,EAAO7gB,OAAP,CAArC,EAAsD;AAClD,qBAAOwZ,YAAP;AACH;AACJ;AACJ;AACJ;;AACD,aAAOmH,SAAP,EAAkB;AACd,YAAI/O,KAAK,GAAG4H,YAAY,CAAC9W,OAAb,CAAqBie,SAArB,CAAZ;;AACA,YAAI/O,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd4H,UAAAA,YAAY,CAAC5B,MAAb,CAAoBhG,KAApB,EAA2B,CAA3B;AACH,SAFD,MAGK;AACD;AACH;;AACD+O,QAAAA,SAAS,GAAG3gB,OAAO,CAAC+G,SAAR,CAAkB4Z,SAAS,CAAC9Z,QAA5B,CAAZ;AACH;AACJ;;AACD,SAAKia,aAAL,CAAmBtH,YAAnB,EAAiCxZ,OAAjC;;AACA,QAAIW,SAAS,IAAI,CAACA,SAAS,CAAC8E,MAA5B,EAAoC;AAChC,WAAK,IAAIgD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+Q,YAAY,CAACnU,MAAjC,EAAyCoD,CAAC,EAA1C,EAA8C;AAC1C,YAAI3C,UAAU,GAAG9F,OAAO,CAAC+G,SAAR,CAAkByS,YAAY,CAAC/Q,CAAD,CAAZ,CAAgB5B,QAAlC,CAAjB;;AACA,YAAIf,UAAU,IAAIA,UAAU,CAACQ,KAAX,CAAiB7D,IAAjB,KAA0B,UAA5C,EAAwD;AACpD,eAAK,IAAIkb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnE,YAAY,CAACnU,MAAjC,EAAyCsY,CAAC,EAA1C,EAA8C;AAC1C,gBAAI3F,SAAS,GAAGwB,YAAY,CAACmE,CAAD,CAA5B;;AACA,gBAAI3F,SAAS,YAAYte,SAAzB,EAAoC;AAChC8f,cAAAA,YAAY,CAAC5B,MAAb,CAAoBnP,CAApB,EAAuB,CAAvB;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,WAAO+Q,YAAP;AACH,GAtHD;AAuHA;;;AACA3Y,EAAAA,YAAY,CAACG,SAAb,CAAuB8f,aAAvB,GAAuC,UAAUtH,YAAV,EAAwBxZ,OAAxB,EAAiC;AACpE,QAAIwL,MAAJ;;AACA,SAAK,IAAIuV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvH,YAAY,CAACnU,MAAjC,EAAyC0b,CAAC,EAA1C,EAA8C;AAC1C,UAAIxW,GAAG,GAAGiP,YAAY,CAACuH,CAAD,CAAtB;AACA,UAAIjb,UAAU,GAAG,KAAK,CAAtB;AACA,UAAIO,IAAI,GAAG,KAAK,CAAhB;;AACA,UAAIkE,GAAG,YAAYrQ,IAAnB,EAAyB;AACrB4L,QAAAA,UAAU,GAAG0T,YAAY,CAACuH,CAAD,CAAZ,CAAgBla,QAA7B;AACAR,QAAAA,IAAI,GAAGkE,GAAP;AACH;;AACD,UAAIzE,UAAU,KAAK,EAAnB,EAAuB;AACnB,YAAIO,IAAI,CAACC,KAAL,CAAW7D,IAAX,KAAoB,UAAxB,EAAoC;AAChC+I,UAAAA,MAAM,GAAG,IAAT;AACH,SAFD,MAGK;AACDA,UAAAA,MAAM,GAAG,KAAT;AACH;AACJ;;AACD,UAAIwV,QAAQ,GAAGhhB,OAAO,CAAC+G,SAAR,CAAkBjB,UAAlB,CAAf;;AACA,UAAIkb,QAAQ,IAAIA,QAAQ,CAAC/U,MAArB,IAA+BjM,OAAO,CAAC+G,SAAR,CAAkBia,QAAQ,CAACna,QAA3B,EAAqCsY,MAArC,GAA8C5U,GAAG,CAAC4U,MAArF,EAA6F;AACzF3F,QAAAA,YAAY,CAACuH,CAAD,CAAZ,GAAkBC,QAAlB;AACH;;AACD,UAAID,CAAC,GAAG,CAAJ,IAASvV,MAAT,IAAmBnF,IAAnB,KAA4BA,IAAI,CAAC4F,MAAL,IAAe5F,IAAI,CAAC6F,OAApB,IAA+B7F,IAAI,CAAC8F,QAAhE,CAAJ,EAA+E;AAC3E,YAAIqN,YAAY,CAACuH,CAAD,CAAZ,CAAgB5B,MAAhB,GAAyB3F,YAAY,CAACuH,CAAC,GAAG,CAAL,CAAZ,CAAoB5B,MAAjD,EAAyD;AACrD,cAAI8B,IAAI,GAAGzH,YAAY,CAACuH,CAAD,CAAvB;AACAvH,UAAAA,YAAY,CAACuH,CAAD,CAAZ,GAAkBvH,YAAY,CAACuH,CAAC,GAAG,CAAL,CAA9B;AACAvH,UAAAA,YAAY,CAACuH,CAAC,GAAG,CAAL,CAAZ,GAAsBE,IAAtB;AACH;AACJ;AACJ;;AACD,QAAIzH,YAAY,CAACnU,MAAb,IAAuB,CAA3B,EAA8B;AAC1B,UAAI6b,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAIzY,CAAC,GAAG+Q,YAAY,CAACnU,MAAb,GAAsB,CAAnC,EAAsCoD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AAC/C,YAAI+Q,YAAY,CAAC/Q,CAAD,CAAZ,CAAgB5B,QAApB,EAA8B;AAC1B,cAAIsa,OAAO,GAAGllB,oBAAoB,CAACud,YAAY,CAAC/Q,CAAD,CAAb,EAAkBzI,OAAlB,EAA2BkhB,QAA3B,CAAlC;AACA,cAAIE,OAAO,GAAGnlB,oBAAoB,CAACud,YAAY,CAAC/Q,CAAC,GAAG,CAAL,CAAb,EAAsBzI,OAAtB,EAA+BkhB,QAA/B,CAAlC;AACA,cAAIG,WAAW,GAAGrhB,OAAO,CAAC+G,SAAR,CAAkBoa,OAAlB,CAAlB;AACA,cAAIG,WAAW,GAAGthB,OAAO,CAAC+G,SAAR,CAAkBqa,OAAlB,CAAlB;;AACA,cAAIE,WAAW,IAAIH,OAAO,KAAKC,OAA3B,IAAsCC,WAAW,CAAClC,MAAZ,GAAqBmC,WAAW,CAACnC,MAA3E,EAAmF;AAC/E3F,YAAAA,YAAY,CAAC5B,MAAb,CAAoBnP,CAApB,EAAuB,CAAvB;AACH;AACJ;AACJ;AACJ;AACJ,GA5CD;AA6CA;;;AACA5H,EAAAA,YAAY,CAACG,SAAb,CAAuBugB,QAAvB,GAAkC,UAAU/H,YAAV,EAAwBxZ,OAAxB,EAAiCmB,MAAjC,EAAyC;AACvE,QAAI6W,SAAS,GAAGhY,OAAO,CAACmF,aAAR,CAAsBG,UAAtB,CAAiC,CAAjC,CAAhB;AACA,QAAIe,IAAJ;AACAA,IAAAA,IAAI,GAAGlF,MAAM,KAAK,oBAAX,GAAkCnB,OAAO,CAAC+G,SAAR,CAAkBiR,SAAS,CAACwJ,QAA5B,CAAlC,GACHnb,IAAI,GAAGrG,OAAO,CAAC+G,SAAR,CAAkBiR,SAAS,CAACyJ,QAA5B,CADX;;AAEA,QAAIpb,IAAI,KAAK,CAACA,IAAI,CAACqa,SAAN,IAAmB,CAAClH,YAAY,CAACkH,SAAjC,IAA8Cra,IAAI,CAACqa,SAAL,KAAmBlH,YAAY,CAACkH,SAAnF,CAAR,EAAuG;AACnG,UAAIra,IAAI,CAACqa,SAAL,KAAmBlH,YAAY,CAACkH,SAApC,EAA+C;AAC3ClH,QAAAA,YAAY,GAAG,IAAf;AACH;;AACD,UAAIA,YAAY,IAAIA,YAAY,CAAC3S,QAA7B,IACA7G,OAAO,CAAC+G,SAAR,CAAkByS,YAAY,CAAC3S,QAA/B,EAAyCP,KAAzC,CAA+C7D,IAA/C,KAAwD,eAD5D,EAC6E;AACzE+W,QAAAA,YAAY,GAAGxZ,OAAO,CAAC+G,SAAR,CAAkByS,YAAY,CAAC3S,QAA/B,CAAf;AACH;AACJ;;AACD,QAAI1F,MAAM,KAAK,oBAAX,IAAmC6W,SAAS,CAACwJ,QAAjD,EAA2D;AACvD,UAAI9P,UAAU,GAAG1R,OAAO,CAAC+G,SAAR,CAAkBiR,SAAS,CAACwJ,QAA5B,CAAjB;;AACA,UAAI9P,UAAU,IAAIA,UAAU,CAACpL,KAAzB,IAAmCoL,UAAU,CAACpL,KAAX,CAAiBA,KAAjB,KAA2B,gBAAlE,EAAqF;AACjF,YAAI9B,EAAE,GAAGwT,SAAS,CAACxT,EAAV,CAAa8U,KAAb,CAAmB,GAAnB,CAAT;;AACA,YAAM5H,UAAU,CAACpL,KAAX,CAAiB7D,IAAjB,KAA0B,MAA3B,IAAsC+W,YAAY,CAAClT,KAAb,CAAmB7D,IAAnB,KAA4B,MAAnE,IAA+E+B,EAAE,CAAC,CAAD,CAAF,KAAUgV,YAAY,CAAChV,EAAtG,IACAgV,YAAY,CAAClT,KAAb,CAAmBA,KAAnB,KAA6B,gBADjC,EACmD;AAC/CkT,UAAAA,YAAY,GAAG,IAAf;AACH;;AACD,YAAIA,YAAY,CAAC3S,QAAb,IACA7G,OAAO,CAAC+G,SAAR,CAAkByS,YAAY,CAAC3S,QAA/B,EAAyCP,KAAzC,CAA+C7D,IAA/C,KAAwD,eAD5D,EAC6E;AACzE+W,UAAAA,YAAY,GAAGxZ,OAAO,CAAC+G,SAAR,CAAkByS,YAAY,CAAC3S,QAA/B,CAAf;AACH;AACJ;AACJ;;AACD,WAAO2S,YAAP;AACH,GA7BD;AA8BA;;AACA;;;AACA3Y,EAAAA,YAAY,CAACG,SAAb,CAAuB4F,oBAAvB,GAA8C,UAAU5G,OAAV,EAAmB0G,OAAnB,EAA4BvF,MAA5B,EAAoCZ,QAApC,EAA8CmhB,QAA9C,EAAwDpgB,QAAxD,EAAkEmE,MAAlE,EAA0E;AACpH;AACA;AACA;AACA,QAAIgb,YAAY,GAAG,cAAnB;AACA,QAAIkB,QAAQ,GAAG,UAAf;AACA,QAAIC,MAAJ;AACA,QAAIC,OAAJ;AACA,QAAIrI,YAAY,GAAG,IAAnB;;AACA,QAAI9S,OAAO,CAACrB,MAAR,KAAmB,CAAvB,EAA0B;AACtB,UAAII,MAAM,IAAIA,MAAM,YAAY1K,QAAhC,EAA0C;AACtC,YAAI0K,MAAM,CAACL,KAAP,CAAaC,MAAb,GAAsBI,MAAM,CAACH,UAAP,CAAkBD,MAAxC,KAAmD,CAAvD,EAA0D;AACtDI,UAAAA,MAAM,GAAIA,MAAM,CAACL,KAAP,CAAa,CAAb,KAAmBK,MAAM,CAACH,UAAP,CAAkB,CAAlB,CAA7B;AACH;AACJ;;AACD,UAAKnE,MAAM,KAAK,oBAAX,IAAmCsE,MAAnC,IAA6CtE,MAAM,KAAK,UAAzD,IACC,CAACrC,WAAW,CAACkB,OAAD,CAAX,IAAwBnB,iBAAiB,CAACmB,OAAD,CAA1C,KAAwD9D,aAAa,CAAC8D,OAAO,CAACgW,aAAT,CAAb,KAAyCtc,SADtG,EACkH;AAC9G,YAAIse,SAAS,GAAGhY,OAAO,CAACmF,aAAR,CAAsBG,UAAtB,CAAiC,CAAjC,CAAhB;;AACA,aAAK,IAAImD,CAAC,GAAG/B,OAAO,CAACrB,MAAR,GAAiB,CAA9B,EAAiCoD,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC1CoZ,UAAAA,OAAO,GAAG1lB,oBAAoB,CAACuK,OAAO,CAAC+B,CAAD,CAAR,EAAa,KAAb,CAA9B;AACAmZ,UAAAA,MAAM,GAAGzlB,oBAAoB,CAACuK,OAAO,CAAC+B,CAAD,CAAR,EAAa,IAAb,CAA7B;AACA,cAAI/H,IAAI,GAAGV,OAAO,CAACygB,YAAD,CAAP,CAAsB/f,IAAjC;AACA,cAAIkgB,WAAW,GAAG,KAAKkB,iBAAL,CAAuBpb,OAAO,CAAC+B,CAAD,CAAP,CAAWjC,OAAlC,EAA2ClF,QAA3C,EAAqDwH,SAArD,CAAlB;;AACA,cAAI3H,MAAM,KAAK,MAAX,IAAqByf,WAArB,IAAqCla,OAAO,CAAC+B,CAAD,CAAP,YAAsBvO,IAA3D,IAAoE,CAACoC,SAAS,CAACoK,OAAO,CAAC+B,CAAD,CAAR,EAAamY,WAAb,CAAlF,EAA6G;AACzG,gBAAMlgB,IAAI,IAAIA,IAAI,CAACihB,QAAD,CAAJ,KAAmB,oBAA5B,IAAqD,CAACzkB,aAAa,CAACwJ,OAAO,CAAC+B,CAAD,CAAR,CAApE,IACE/H,IAAI,IAAIA,IAAI,CAACihB,QAAD,CAAJ,KAAmB,oBAA5B,IAAqD,CAACxkB,YAAY,CAACuJ,OAAO,CAAC+B,CAAD,CAAR,CADvE,EACsF;AAClF,qBAAO+Q,YAAP;AACH;AACJ,WAVyC,CAW1C;;;AACA,cAAI9S,OAAO,CAAC+B,CAAD,CAAP,YAAsBvO,IAAtB,KAAgCgD,aAAa,CAACwJ,OAAO,CAAC+B,CAAD,CAAR,CAAb,IAA8BpL,iBAAiB,CAACwkB,OAAD,CAA/C,IAA6D1kB,YAAY,CAACuJ,OAAO,CAAC+B,CAAD,CAAR,CAAzE,IAA0FrL,gBAAgB,CAACwkB,MAAD,CAA3G,IAC9BzgB,MAAM,KAAK,UAAX,IAA0BT,IAAI,YAAYnG,WAA1C,IAA0DmG,IAAI,CAACihB,QAAD,CAAJ,KAAmB,oBAA7E,KACIxkB,YAAY,CAACuJ,OAAO,CAAC+B,CAAD,CAAR,CAAZ,IAA6BrL,gBAAgB,CAACwkB,MAAD,CADjD,CADD,CAAJ,EAEoE;AAChEpI,YAAAA,YAAY,GAAG9S,OAAO,CAAC+B,CAAD,CAAtB;;AACA,gBAAIuP,SAAJ,EAAe;AACXwB,cAAAA,YAAY,GAAG,KAAK+H,QAAL,CAAc/H,YAAd,EAA4BxZ,OAA5B,EAAqCmB,MAArC,CAAf;AACH;;AACDugB,YAAAA,QAAQ,CAACxX,YAAT,GAAwBsP,YAAxB;AACA,mBAAOA,YAAP;AACH;AACJ;AACJ,OA1BD,MA2BK,IAAIrY,MAAM,KAAK,oBAAX,IAAmCsE,MAAvC,EAA+C;AAChD,aAAK,IAAIgD,CAAC,GAAG/B,OAAO,CAACrB,MAAR,GAAiB,CAA9B,EAAiCoD,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC1CmZ,UAAAA,MAAM,GAAGzlB,oBAAoB,CAACuK,OAAO,CAAC+B,CAAD,CAAR,EAAa,IAAb,CAA7B;;AACA,cAAI/B,OAAO,CAAC+B,CAAD,CAAP,YAAsBvO,IAAtB,KAA+BiD,YAAY,CAACuJ,OAAO,CAAC+B,CAAD,CAAR,CAAZ,IAA6BrL,gBAAgB,CAACwkB,MAAD,CAA5E,CAAJ,EAA4F;AACxFpI,YAAAA,YAAY,GAAG9S,OAAO,CAAC+B,CAAD,CAAtB;AACA+Q,YAAAA,YAAY,GAAG,KAAK+H,QAAL,CAAc/H,YAAd,EAA4BxZ,OAA5B,EAAqCmB,MAArC,CAAf;AACAugB,YAAAA,QAAQ,CAACxX,YAAT,GAAwBsP,YAAxB;AACA,mBAAOA,YAAP;AACH;AACJ;AACJ,OAVI,MAWA,IAAI/T,MAAM,KAAKtE,MAAM,KAAK,MAAX,IAAsBnB,OAAO,CAACygB,YAAD,CAAP,CAAsB/f,IAAtB,YAAsCtG,QAAjE,CAAV,EAAuF;AACxF,YAAIwX,KAAK,GAAG,CAAZ;;AACA,aAAK,IAAInJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/B,OAAO,CAACrB,MAA5B,EAAoCoD,CAAC,EAArC,EAAyC;AACrC,cAAIgW,IAAI,GAAG/X,OAAO,CAAC+B,CAAD,CAAlB;;AACA,cAAIhD,MAAM,KAAKgZ,IAAX,KAAoBA,IAAI,YAAY/kB,SAAhB,IACpB,CAAC4H,QADmB,IACPmd,IAAI,CAACjY,OAAL,CAAa/B,MAAb,CAAoBgC,aAApB,CAAkCnF,QAAlC,CADb,CAAJ,EAC+D;AAC3D,gBAAIhE,YAAY,CAACmhB,IAAD,CAAhB,EAAwB;AACpB,kBAAI,CAACjF,YAAL,EAAmB;AACfA,gBAAAA,YAAY,GAAGiF,IAAf;AACA7M,gBAAAA,KAAK,GAAG4H,YAAY,CAAC2F,MAArB;AACH,eAHD,MAIK;AACD3F,gBAAAA,YAAY,GAAG5H,KAAK,IAAI6M,IAAI,CAACU,MAAd,GAAuB3F,YAAvB,GAAsCiF,IAArD;AACA7M,gBAAAA,KAAK,GAAGmQ,IAAI,CAACC,GAAL,CAASpQ,KAAT,EAAgB6M,IAAI,CAACU,MAArB,CAAR;AACH;AACJ;AACJ;AACJ;;AACD,YAAI3F,YAAY,IAAIA,YAAY,CAAClT,KAAb,CAAmB7D,IAAnB,KAA4B,MAAhD,EAAwD;AACpD,cAAIzC,OAAO,CAACmF,aAAR,CAAsBC,KAAtB,CAA4BC,MAA5B,GAAqC,CAArC,IAA0CrF,OAAO,CAACmF,aAAR,CAAsBC,KAAtB,CAA4B,CAA5B,EAA+BkB,KAA/B,CAAqC7D,IAArC,KAA8C,MAA5F,EAAoG;AAChG;AACA+W,YAAAA,YAAY,GAAGA,YAAf;AACH,WAHD,MAIK;AACDA,YAAAA,YAAY,GAAG,IAAf;AACH;AACJ;;AACD,YAAIA,YAAJ,EAAkB;AACdkI,UAAAA,QAAQ,CAACxX,YAAT,GAAwBsP,YAAxB;AACH;;AACD,eAAOA,YAAP;AACH,OA/BI,MAgCA,IAAI,CAACrY,MAAM,KAAK,QAAX,IAAuBA,MAAM,KAAK,KAAnC,KAA6CnB,OAAO,CAACygB,YAAD,CAAP,CAAsB/f,IAAvE,EAA6E;AAC9E,aAAK,IAAI+H,CAAC,GAAG/B,OAAO,CAACrB,MAAR,GAAiB,CAA9B,EAAiCoD,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC1C,cAAI/B,OAAO,CAAC+B,CAAD,CAAP,YAAsB/O,SAA1B,EAAqC;AACjC,gBAAIuoB,KAAK,GAAGvb,OAAO,CAAC+B,CAAC,GAAG,CAAL,CAAnB;;AACA,gBAAI/B,OAAO,CAAC+B,CAAC,GAAG,CAAL,CAAP,YAA0BvO,IAA1B,IAAkC+nB,KAAK,CAAClH,KAA5C,EAAmD;AAC/C,kBAAI6F,WAAW,GAAG,KAAKkB,iBAAL,CAAuBG,KAAK,CAACzb,OAA7B,EAAsClF,QAAtC,EAAgDwH,SAAhD,CAAlB;;AACA,kBAAK8X,WAAW,KAAKA,WAAW,CAACpc,EAAZ,CAAe8C,KAAf,CAAqB,sBAArB,KAAgDsZ,WAAW,CAACpc,EAAZ,CAAe8C,KAAf,CAAqB,qBAArB,CAArD,CAAhB,EAAoH;AAChH,uBAAO2a,KAAP;AACH;;AACD,mBAAK,IAAItE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsE,KAAK,CAAClH,KAAN,CAAY1V,MAAhC,EAAwCsY,CAAC,EAAzC,EAA6C;AACzC,oBAAIiD,WAAW,IAAIA,WAAW,CAACpc,EAAZ,CAAe8C,KAAf,CAAqB,MAAM2a,KAAK,CAAClH,KAAN,CAAY4C,CAAZ,EAAenZ,EAArB,GAA0B,GAA/C,CAAnB,EAAwE;AACpE,sBAAIhI,OAAO,CAACylB,KAAK,CAAClH,KAAN,CAAY4C,CAAZ,CAAD,EAAiB3d,OAAjB,CAAX,EAAsC;AAClC,2BAAOiiB,KAAP;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AACDzI,QAAAA,YAAY,GAAG9S,OAAO,CAACA,OAAO,CAACrB,MAAR,GAAiB,CAAlB,CAAtB;AACAqc,QAAAA,QAAQ,CAACxX,YAAT,GAAwBsP,YAAxB;;AACA,YAAI,CAACxZ,OAAO,CAACygB,YAAD,CAAP,CAAsBlH,SAAtB,CAAgCC,YAAhC,EAA8C,IAA9C,CAAL,EAA0D;AACtD,cAAIA,YAAY,CAAC3S,QAAjB,EAA2B;AACvB,gBAAI0D,GAAG,GAAGiP,YAAV;AACA,gBAAI0I,QAAQ,GAAGjnB,UAAU,CAAC+E,OAAD,EAAUuK,GAAV,CAAzB;;AACA,mBAAOA,GAAP,EAAY;AACR,kBAAItP,UAAU,CAAC+E,OAAD,EAAUuK,GAAV,CAAV,IAA4B,CAAC2X,QAAjC,EAA2C;AACvC;AACH;;AACD1I,cAAAA,YAAY,GAAGjP,GAAf;AACAA,cAAAA,GAAG,GAAGvK,OAAO,CAAC+G,SAAR,CAAkBwD,GAAG,CAAC1D,QAAtB,CAAN;AACH;AACJ;AACJ;AACJ,OAlCI,MAmCA,IAAI1F,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,iBAAnC,EAAsD;AACvD,aAAK,IAAIsH,CAAC,GAAG/B,OAAO,CAACrB,MAAR,GAAiB,CAA9B,EAAiCoD,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC1C,cAAI/B,OAAO,CAAC+B,CAAD,CAAP,YAAsBvO,IAAtB,IAA8BwM,OAAO,CAAC+B,CAAD,CAAP,YAAsB/O,SAAxD,EAAmE;AAC/D,gBAAIknB,WAAW,GAAG,KAAKkB,iBAAL,CAAuBpb,OAAO,CAAC+B,CAAD,CAAP,CAAWjC,OAAlC,EAA2ClF,QAA3C,EAAqDwH,SAArD,CAAlB;;AACA,gBAAK3H,MAAM,KAAK,KAAZ,IAAwByf,WAAW,KAAKA,WAAW,CAACpc,EAAZ,CAAe8C,KAAf,CAAqB,sBAArB,KAAgDsZ,WAAW,CAACpc,EAAZ,CAAe8C,KAAf,CAAqB,qBAArB,CAArD,CAAvC,EAA4I;AACxI,qBAAOZ,OAAO,CAAC+B,CAAD,CAAd;AACH;AACJ;AACJ;AACJ,OATI,MAUA;AACD+Q,QAAAA,YAAY,GAAG9S,OAAO,CAACA,OAAO,CAACrB,MAAR,GAAiB,CAAlB,CAAtB;;AACA,YAAIqc,QAAQ,IAAIlI,YAAhB,EAA8B;AAC1BkI,UAAAA,QAAQ,CAACxX,YAAT,GAAwBsP,YAAxB;AACH;AACJ;AACJ;;AACD,WAAOA,YAAP;AACH,GA1ID;AA2IA;;AACA;;;AACA3Y,EAAAA,YAAY,CAACG,SAAb,CAAuB2a,4BAAvB,GAAsD,UAAUpR,GAAV,EAAejJ,QAAf,EAAyB0L,OAAzB,EAAkC;AACpF;AACA,QAAIzC,GAAG,YAAYxP,QAAnB,EAA6B;AACzB,UAAIwP,GAAG,CAACnF,KAAJ,CAAUC,MAAV,KAAqB,CAArB,KAA2B,CAACkF,GAAG,CAACjF,UAAL,IAAmB,CAACiF,GAAG,CAACjF,UAAJ,CAAeD,MAA9D,CAAJ,EAA2E;AACvE,eAAO,KAAKoF,qBAAL,CAA2BF,GAAG,CAACnF,KAAJ,CAAU,CAAV,CAA3B,EAAyC9D,QAAzC,CAAP;AACH,OAFD,MAGK,IAAI,CAAC,CAACiJ,GAAG,CAACnF,KAAL,IAAcmF,GAAG,CAACnF,KAAJ,CAAUC,MAAzB,KAAoCkF,GAAG,CAACjF,UAAJ,CAAeD,MAAf,KAA0B,CAAlE,EAAqE;AACtE,eAAO,KAAKoF,qBAAL,CAA2BF,GAAG,CAACjF,UAAJ,CAAe,CAAf,CAA3B,EAA8ChE,QAA9C,CAAP;AACH;AACJ,KAPD,MAQK;AACD,aAAO,KAAKmJ,qBAAL,CAA2BF,GAA3B,EAAgCjJ,QAAhC,EAA0C0L,OAA1C,CAAP;AACH;;AACD,WAAO,IAAP;AACH,GAdD;;AAeAnM,EAAAA,YAAY,CAACG,SAAb,CAAuByJ,qBAAvB,GAA+C,UAAUF,GAAV,EAAejJ,QAAf,EAAyB0L,OAAzB,EAAkC;AAC7E,WAAO,KAAK8U,iBAAL,CAAuBvX,GAAG,CAAC/D,OAA3B,EAAoClF,QAApC,EAA8C0L,OAA9C,CAAP;AACH,GAFD;AAGA;;;AACAnM,EAAAA,YAAY,CAACG,SAAb,CAAuB8gB,iBAAvB,GAA2C,UAAUzd,SAAV,EAAqB/C,QAArB,EAA+B0L,OAA/B,EAAwC;AAC/E,SAAK,IAAIvE,CAAC,GAAGpE,SAAS,CAACgV,QAAV,CAAmBhU,MAAnB,GAA4B,CAAzC,EAA4CoD,CAAC,IAAI,CAAjD,EAAoDA,CAAC,EAArD,EAAyD;AACrD,UAAI1F,OAAO,GAAGsB,SAAS,CAACgV,QAAV,CAAmB5Q,CAAnB,CAAd;;AACA,UAAI1F,OAAO,IAAIA,OAAO,CAACiY,WAAR,CAAoBvU,aAApB,CAAkCnF,QAAlC,EAA4C0L,OAAO,IAAI,CAAvD,CAAf,EAA0E;AACtE,YAAIjK,OAAO,YAAYtJ,SAAvB,EAAkC;AAC9B,cAAIkM,MAAM,GAAG,KAAKmc,iBAAL,CAAuB/e,OAAvB,EAAgCzB,QAAhC,CAAb;;AACA,cAAIqE,MAAJ,EAAY;AACR,mBAAOA,MAAP;AACH;AACJ;;AACD,YAAI5C,OAAO,CAAC0B,MAAR,CAAegC,aAAf,CAA6BnF,QAA7B,EAAuC0L,OAAO,IAAI,CAAlD,CAAJ,EAA0D;AACtD,iBAAOjK,OAAP;AACH;AACJ;AACJ;;AACD,QAAIsB,SAAS,CAACI,MAAV,CAAiBgC,aAAjB,CAA+BnF,QAA/B,EAAyC0L,OAAzC,KAAqD3I,SAAS,CAACO,KAAV,CAAgB8Z,IAAhB,KAAyB,MAAlF,EAA0F;AACtF,aAAOra,SAAP;AACH;;AACD,WAAO,IAAP;AACH,GAnBD;;AAoBA,SAAOxD,YAAP;AACH,CA/XiC,EAAlC","sourcesContent":["/* eslint-disable jsdoc/require-returns */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable no-case-declarations */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { Point } from '../primitives/point';\nimport { Container } from '../core/containers/container';\nimport { Connector } from '../objects/connector';\nimport { NodeDrawingTool, ConnectorDrawingTool, TextDrawingTool } from './tool';\nimport { PolygonDrawingTool, PolyLineDrawingTool, FixedUserHandleTool } from './tool';\nimport { Native, Node } from '../objects/node';\nimport { SelectTool, MoveTool, ResizeTool, RotateTool, ConnectTool, ExpandTool, LabelTool, ZoomPanTool } from './tool';\nimport { LabelDragTool, LabelResizeTool, LabelRotateTool } from './tool';\nimport { ConnectorEditing } from './connector-editing';\nimport { Selector } from '../objects/node';\nimport { findToolToActivate, isSelected, getCursor, contains } from './actions';\nimport { DiagramAction, KeyModifiers, Keys, DiagramEvent, DiagramTools, RendererAction, DiagramConstraints } from '../enum/enum';\nimport { BlazorAction, ScrollActions } from '../enum/enum';\nimport { isPointOverConnector, findObjectType, insertObject, getObjectFromCollection, findParentInSwimlane } from '../utility/diagram-util';\nimport { getObjectType, getInOutConnectPorts, removeChildNodes, cloneBlazorObject, checkPort } from '../utility/diagram-util';\nimport { canZoomPan, canDraw, canDrag, canZoomTextEdit, canVitualize, canPreventClearSelection } from './../utility/constraints-util';\nimport { selectionHasConnector } from '../utility/diagram-util';\nimport { canMove, canEnablePointerEvents, canSelect, canEnableToolTip } from './../utility/constraints-util';\nimport { canOutConnect, canInConnect, canPortInConnect, canPortOutConnect, canAllowDrop, canUserInteract, defaultTool } from './../utility/constraints-util';\nimport { updateTooltip } from '../objects/tooltip';\nimport { PortVisibility, NodeConstraints, ConnectorConstraints, RealAction } from '../enum/enum';\nimport { addTouchPointer, measureHtmlText, getAdornerLayerSvg } from '../utility/dom-util';\nimport { TextElement } from '../core/elements/text-element';\nimport { Size } from '../primitives/size';\nimport { cloneObject as clone, cloneObject } from './../utility/base-util';\nimport { Rect } from '../primitives/rect';\nimport { identityMatrix, rotateMatrix, transformPointByMatrix } from './../primitives/matrix';\nimport { removeRulerMarkers, drawRulerMarkers, getRulerSize, updateRuler } from '../ruler/ruler';\nimport { canContinuousDraw, canDrawOnce } from '../utility/constraints-util';\nimport { getFunction, cornersPointsBeforeRotation } from '../utility/base-util';\nimport { updateCanvasBounds, checkChildNodeInContainer, checkParentAsContainer, removeChildInContainer } from './container-interaction';\nimport { moveChildInStack, renderStackHighlighter } from './container-interaction';\nimport { updateSwimLaneObject } from '../utility/swim-lane-util';\nimport { getConnectors, updateHeaderMaxWidth, laneInterChanged, updateConnectorsProperties } from '../utility/swim-lane-util';\nimport { DiagramHtmlElement } from '../core/elements/html-element';\nimport { randomId } from '../index';\nimport { isBlazor } from '@syncfusion/ej2-base';\n/**\n * This module handles the mouse and touch events\n */\nvar DiagramEventHandler = /** @class */ (function () {\n    /** @private */\n    function DiagramEventHandler(diagram, commandHandler) {\n        this.currentAction = 'None';\n        this.previousAction = 'None';\n        /**   @private  */\n        this.focus = false;\n        this.isBlocked = false;\n        this.isMouseDown = false;\n        this.inAction = false;\n        this.doingAutoScroll = false;\n        this.diagram = null;\n        this.objectFinder = null;\n        this.tool = null;\n        this.eventArgs = null;\n        this.keyArgs = {};\n        this.diagram = diagram;\n        this.objectFinder = new ObjectFinder();\n        this.commandHandler = commandHandler;\n    }\n    Object.defineProperty(DiagramEventHandler.prototype, \"action\", {\n        get: function () {\n            return this.currentAction;\n        },\n        set: function (action) {\n            if (action !== this.currentAction) {\n                if (this.currentAction === 'PortDraw') {\n                    this.diagram.tool &= ~DiagramTools.DrawOnce;\n                    if (this.tool) {\n                        this.tool.mouseUp({ position: this.currentPosition });\n                    }\n                    this.tool = null;\n                }\n                if (action === 'Rotate' || action === 'LabelRotate') {\n                    this.diagram.diagramCanvas.classList.add('e-diagram-rotate');\n                }\n                else if (this.currentAction === 'Rotate' || this.currentAction === 'LabelRotate') {\n                    this.diagram.diagramCanvas.classList.remove('e-diagram-rotate');\n                }\n                this.currentAction = action;\n                if (this.currentAction !== 'None' && this.currentAction !== 'Select' &&\n                    !(this.diagram.diagramActions & DiagramAction.TextEdit) || this.commandHandler.isUserHandle(this.currentPosition)) {\n                    this.diagram.diagramActions = this.diagram.diagramActions | DiagramAction.ToolAction;\n                }\n                else {\n                    this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.ToolAction;\n                }\n                this.diagram.setCursor(this.diagram.getCursor(action, this.inAction));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DiagramEventHandler.prototype, \"blocked\", {\n        get: function () {\n            return this.isBlocked;\n        },\n        set: function (blocked) {\n            this.isBlocked = blocked;\n            if (this.blocked) {\n                this.diagram.setCursor('not-allowed');\n            }\n            else {\n                this.diagram.setCursor(this.diagram.getCursor(this.action, this.inAction));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @private */\n    DiagramEventHandler.prototype.getMousePosition = function (e) {\n        var touchArg;\n        var offsetX;\n        var offsetY;\n        if (e.type.indexOf('touch') !== -1) {\n            touchArg = e;\n            offsetX = touchArg.changedTouches[0].clientX;\n            offsetY = touchArg.changedTouches[0].clientY;\n        }\n        else {\n            offsetX = e.clientX;\n            offsetY = e.clientY;\n        }\n        var position = new Size();\n        position = getRulerSize(this.diagram);\n        var boundingRect = this.diagram.element.getBoundingClientRect();\n        offsetX = offsetX + this.diagram.diagramCanvas.scrollLeft - boundingRect.left - position.width;\n        offsetY = offsetY + this.diagram.diagramCanvas.scrollTop - boundingRect.top - position.height;\n        offsetX /= this.diagram.scroller.transform.scale;\n        offsetY /= this.diagram.scroller.transform.scale;\n        offsetX -= this.diagram.scroller.transform.tx;\n        offsetY -= this.diagram.scroller.transform.ty;\n        return { x: offsetX, y: offsetY };\n    };\n    /**\n     * @private\n     */\n    DiagramEventHandler.prototype.windowResize = function (evt) {\n        var _this = this;\n        if (this.resizeTo) {\n            clearTimeout(this.resizeTo);\n        }\n        this.resizeTo = setTimeout(function () {\n            _this.updateViewPortSize(_this.diagram.element);\n        }, 300);\n        return false;\n    };\n    /**\n     * @private\n     */\n    DiagramEventHandler.prototype.updateViewPortSize = function (element) {\n        var container = document.getElementById(element.id);\n        if (container) {\n            var bounds = container.getBoundingClientRect();\n            this.diagram.scroller.setViewPortSize(bounds.width, bounds.height);\n            var position = new Size();\n            position = getRulerSize(this.diagram);\n            var width = this.diagram.getSizeValue(this.diagram.width, position.width);\n            var height = this.diagram.getSizeValue(this.diagram.height, position.height);\n            this.diagram.diagramCanvas.style.width = width;\n            this.diagram.diagramCanvas.style.height = height;\n            this.diagram.scroller.setSize();\n            this.diagram.transformLayers();\n            if (this.diagram.rulerSettings.showRulers) {\n                updateRuler(this.diagram);\n            }\n        }\n    };\n    /** @private */\n    DiagramEventHandler.prototype.canHideResizers = function () {\n        return ((this.tool instanceof MoveTool || this.tool instanceof RotateTool) && this.isMouseDown);\n    };\n    /** @private */\n    DiagramEventHandler.prototype.updateCursor = function () {\n        if ((this.diagram.selectedItems.nodes.length === 1 || this.diagram.selectedItems.connectors.length === 1)) {\n            var list = [];\n            list = list.concat(this.diagram.selectedItems.nodes, this.diagram.selectedItems.connectors);\n            // Bug fix - EJ2-44495 -Node does not gets selected on slight movement of mouse when drag constraints disabled for node\n            this.blocked = (this.eventArgs && this.eventArgs.source && !canMove(this.eventArgs.source)) ? false :\n                (this.isMouseDown && list.length === 1 && this.tool instanceof SelectTool && !canMove(list[0]));\n        }\n    };\n    DiagramEventHandler.prototype.isForeignObject = function (target, isTextBox) {\n        var foreignobject = target;\n        if (foreignobject) {\n            while (foreignobject.parentNode !== null) {\n                if (typeof foreignobject.className === 'string' &&\n                    ((!isTextBox && foreignobject.className.indexOf('foreign-object') !== -1) ||\n                        (isTextBox && foreignobject.className.indexOf('e-diagram-text-edit') !== -1))) {\n                    return foreignobject;\n                }\n                else {\n                    foreignobject = foreignobject.parentNode;\n                }\n            }\n        }\n        return null;\n    };\n    DiagramEventHandler.prototype.isMetaKey = function (evt) {\n        //EJ2-55887 - added the beow code to perform pinch zoom in mac os and windows while pinch zoom all browser return ctrl key as true.\n        //return navigator.platform.match('Mac') ? evt.metaKey : evt.ctrlKey;\n        return evt.ctrlKey;\n    };\n    DiagramEventHandler.prototype.renderUmlHighLighter = function (args) {\n        this.diagram.commandHandler.removeStackHighlighter();\n        var node = this.diagram.selectedItems.nodes[0];\n        if (node && node.container && node.container.type === 'Stack' && node.shape.type === 'UmlClassifier') {\n            var bound = node.wrapper.bounds;\n            if (!bound.containsPoint(this.currentPosition)) {\n                // eslint-disable-next-line max-len\n                var objects = this.diagram.findObjectsUnderMouse({ x: this.currentPosition.x - 20, y: this.currentPosition.y });\n                var target = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n                if (target && target.parentId && (target.parentId === node.id)) {\n                    // eslint-disable-next-line max-len\n                    var isVertical = this.diagram.nameTable[target.parentId].container.orientation === 'Vertical';\n                    renderStackHighlighter(target.wrapper, isVertical, args.position, this.diagram, true);\n                }\n            }\n        }\n    };\n    DiagramEventHandler.prototype.isDeleteKey = function (key, value) {\n        return (navigator.platform.match('Mac') && key === 'Backspace' && value === 'delete');\n    };\n    DiagramEventHandler.prototype.isMouseOnScrollBar = function (evt) {\n        var x = evt.offsetX;\n        var y = evt.offsetY;\n        var diagramCanvas = this.diagram.diagramCanvas;\n        var height = diagramCanvas.offsetHeight;\n        var width = diagramCanvas.offsetWidth;\n        var topLeft;\n        var topRight;\n        var bottomLeft;\n        var bottomRight;\n        var bounds;\n        if (height < diagramCanvas.scrollHeight) {\n            //default scrollbar width in browser is '17pixels'.\n            topLeft = { x: (width - 17), y: 0 };\n            topRight = { x: width, y: 0 };\n            bottomLeft = { x: (width - 17), y: height };\n            bottomRight = { x: width, y: height };\n            bounds = Rect.toBounds([topLeft, topRight, bottomLeft, bottomRight]);\n            if (bounds.containsPoint({ x: x, y: y })) {\n                return true;\n            }\n        }\n        if (width < diagramCanvas.scrollWidth) {\n            topLeft = { x: 0, y: (height - 17) };\n            topRight = { x: width, y: (height - 17) };\n            bottomLeft = { x: 0, y: height };\n            bottomRight = { x: width, y: height };\n            bounds = Rect.toBounds([topLeft, topRight, bottomLeft, bottomRight]);\n            if (bounds.containsPoint({ x: x, y: y })) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**   @private  */\n    DiagramEventHandler.prototype.updateVirtualization = function () {\n        var _this = this;\n        var delay = 50;\n        //let removeObjectInterval: Object;\n        var removeObjectInterval = setInterval(function (args) {\n            _this.diagram.removeVirtualObjects(removeObjectInterval);\n        }, delay);\n        setTimeout(function () {\n            _this.diagram.deleteVirtualObject = true;\n        }, delay);\n    };\n    DiagramEventHandler.prototype.checkPreviousAction = function () {\n        if (this.action !== this.previousAction && this.diagram.selectedItems.userHandles.length) {\n            for (var i = 0; i < this.diagram.selectedItems.userHandles.length; i++) {\n                if (this.previousAction && this.diagram.selectedItems.userHandles[i]) {\n                    this.checkUserHandleEvent(DiagramEvent.onUserHandleMouseLeave);\n                    this.previousAction = 'None';\n                }\n            }\n        }\n    };\n    DiagramEventHandler.prototype.checkUserHandleEvent = function (eventName) {\n        if (this.diagram.selectedItems && this.diagram.selectedItems.userHandles.length > 0) {\n            var currentAction = (eventName === DiagramEvent.onUserHandleMouseLeave) ? this.previousAction : this.action;\n            var arg = { element: undefined };\n            for (var i = 0; i < this.diagram.selectedItems.userHandles.length; i++) {\n                if ((currentAction === this.diagram.selectedItems.userHandles[i].name) ||\n                    (eventName === DiagramEvent.onUserHandleMouseUp && currentAction === 'Select')) {\n                    arg.element = this.diagram.selectedItems.userHandles[i];\n                    if (eventName === DiagramEvent.onUserHandleMouseEnter) {\n                        this.previousAction = this.action;\n                    }\n                    if (eventName === DiagramEvent.onUserHandleMouseDown) {\n                        this.userHandleObject = this.diagram.selectedItems.userHandles[i].name;\n                    }\n                    var element = document.getElementById(this.diagram.selectedItems.userHandles[i].name + '_userhandle');\n                    if (eventName === DiagramEvent.onUserHandleMouseUp) {\n                        if (this.commandHandler.isUserHandle(this.currentPosition)\n                            && element && element.id === this.userHandleObject + '_userhandle') {\n                            this.diagram.triggerEvent(eventName, arg);\n                        }\n                    }\n                    else {\n                        this.diagram.triggerEvent(eventName, arg);\n                    }\n                }\n            }\n        }\n    };\n    DiagramEventHandler.prototype.mouseDown = function (evt) {\n        if (this.inAction === true && (this.tool) instanceof NodeDrawingTool) {\n            return;\n        }\n        this.focus = true;\n        //let touches: TouchList;\n        var touches = evt.touches;\n        var isSymblDragging = document.getElementsByClassName('e-dragclone')[0] ? true : false;\n        if (this.isMouseOnScrollBar(evt) && !isSymblDragging) {\n            this.isScrolling = true;\n            evt.preventDefault();\n            return;\n        }\n        // commanded by gowtham- unwanted cloning of selectedItems\n        // if (isBlazor()) {\n        //     this.commandHandler.oldSelectedObjects = cloneObject(this.diagram.selectedItems);\n        // }\n        this.checkUserHandleEvent(DiagramEvent.onUserHandleMouseDown);\n        if (!this.checkEditBoxAsTarget(evt) && (canUserInteract(this.diagram)) ||\n            (canZoomPan(this.diagram) && !defaultTool(this.diagram))) {\n            if (this.action === 'Select' || this.action === 'Drag') {\n                this.diagram.updatePortVisibility(this.hoverElement, PortVisibility.Hover, true);\n            }\n            if (((this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool)\n                && (evt.button === 2 || evt.buttons === 2))) {\n                // eslint-disable-next-line\n                var arg = {\n                    element: cloneBlazorObject(this.diagram), position: cloneBlazorObject(this.currentPosition),\n                    count: evt.buttons, actualObject: cloneBlazorObject(this.eventArgs.actualObject),\n                    button: (evt.button === 0) ? 'Left' : (evt.button === 1) ? 'Middle' : 'Right'\n                };\n                this.inAction = false;\n                this.tool.mouseUp(this.eventArgs);\n            }\n            else if (((this.inAction === true) && this.isMouseDown === true &&\n                (this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool))) {\n                this.isMouseDown = true;\n                this.eventArgs = {};\n                this.getMouseEventArgs(this.currentPosition, this.eventArgs);\n                this.eventArgs.position = this.currentPosition;\n                this.tool.mouseDown(this.eventArgs);\n            }\n            else {\n                this.isMouseDown = true;\n                this.currentPosition = this.prevPosition = this.getMousePosition(evt);\n                this.eventArgs = {};\n                if (this.diagram.textEditing && !this.isMouseOnScrollBar(evt)) {\n                    this.diagram.endEdit();\n                    this.diagram.textEditing = false;\n                }\n                var target = void 0;\n                var objects = this.objectFinder.findObjectsUnderMouse(this.currentPosition, this.diagram, this.eventArgs, null, this.action);\n                var obj = this.objectFinder.findObjectUnderMouse(this.diagram, objects, this.action, this.inAction, this.eventArgs, this.currentPosition);\n                var sourceElement = null;\n                if (obj !== null) {\n                    sourceElement = this.diagram.findElementUnderMouse(obj, this.currentPosition);\n                    if (sourceElement) {\n                        target = this.commandHandler.findTarget(sourceElement, obj);\n                    }\n                }\n                this.action = this.diagram.findActionToBeDone(obj, sourceElement, this.currentPosition, target);\n                //work around - correct it\n                var ctrlKey = this.isMetaKey(evt);\n                if (ctrlKey && evt.shiftKey && this.diagram.connectorEditingToolModule) {\n                    this.action = 'SegmentEnd';\n                }\n                else if ((ctrlKey || evt.shiftKey) && (!canZoomPan(this.diagram))) {\n                    this.action = 'Select';\n                }\n                this.tool = this.diagram.getTool(this.action);\n                if (!this.tool) {\n                    this.action = 'Select';\n                    this.tool = this.diagram.getTool(this.action);\n                }\n                this.getMouseEventArgs(this.currentPosition, this.eventArgs);\n                if (ctrlKey || evt.shiftKey) {\n                    var info = (ctrlKey && evt.shiftKey) ? { ctrlKey: ctrlKey, shiftKey: evt.shiftKey } : { ctrlKey: true };\n                    this.eventArgs.info = info;\n                }\n                this.eventArgs.position = this.currentPosition;\n                this.tool.mouseDown(this.eventArgs);\n                this.initialEventArgs = { source: this.eventArgs.source, sourceWrapper: this.eventArgs.sourceWrapper };\n                this.initialEventArgs.position = this.currentPosition;\n                this.initialEventArgs.info = this.eventArgs.info;\n                this.inAction = false;\n                if (evt.type === 'touchstart') {\n                    if (touches && touches.length >= 2) {\n                        this.touchStartList = addTouchPointer(this.touchStartList, evt, touches);\n                    }\n                    if (!touches) {\n                        evt.preventDefault();\n                    }\n                }\n            }\n        }\n        if (!this.isForeignObject(evt.target) && !this.isForeignObject(evt.target, true) && (!touches)) {\n            evt.preventDefault();\n        }\n    };\n    /**   @private  */\n    DiagramEventHandler.prototype.mouseMoveExtend = function (e, obj) {\n        if (this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool) {\n            this.tool.mouseMove(this.eventArgs);\n        }\n        if (this.diagram.scrollSettings.canAutoScroll) {\n            this.checkAutoScroll(e);\n        }\n        else {\n            if (!this.blocked) {\n                (this.tool.mouseMove(this.eventArgs));\n            }\n        }\n        if (this.eventArgs.target) {\n            this.hoverElement = this.eventArgs.target;\n        }\n        var isNode = this.eventArgs.target instanceof Node && obj instanceof Node ? false : true;\n        if (this.tool instanceof ConnectTool) {\n            this.diagram.updatePortVisibility(this.hoverElement instanceof Node ? this.hoverElement : this.hoverNode, PortVisibility.Connect | PortVisibility.Hover, isNode);\n        }\n        if (this.hoverElement instanceof Node\n            && this.hoverNode instanceof Node && this.hoverNode && this.hoverNode.id !== this.hoverElement.id) {\n            this.diagram.updatePortVisibility(this.hoverNode, PortVisibility.Connect | PortVisibility.Hover, true);\n        }\n        this.hoverElement = isNode ? null : obj;\n        this.hoverNode = isNode ? null : obj;\n    };\n    /** @private */\n    DiagramEventHandler.prototype.checkAction = function (obj) {\n        if (this.action === 'LabelSelect' && this.eventArgs.sourceWrapper &&\n            (this.eventArgs.sourceWrapper instanceof TextElement || this.eventArgs.sourceWrapper instanceof DiagramHtmlElement)) {\n            var annotation = this.commandHandler.findTarget(this.eventArgs.sourceWrapper, this.eventArgs.source);\n            if (!isSelected(this.diagram, annotation, false, this.eventArgs.sourceWrapper) && canMove(annotation)) {\n                this.action = 'LabelDrag';\n                this.tool = this.getTool(this.action);\n                this.tool.mouseDown(this.initialEventArgs);\n            }\n        }\n        else if (canMove(obj) && canSelect(obj) && this.initialEventArgs &&\n            this.initialEventArgs.source && this.action === 'Select') {\n            if (!isSelected(this.diagram, this.eventArgs.source, false) &&\n                this.eventArgs.source instanceof Selector) {\n                this.getMouseEventArgs(this.currentPosition, this.eventArgs);\n            }\n            if (!(obj instanceof Connector) || (obj instanceof Connector &&\n                !(contains(this.currentPosition, obj.sourcePoint, obj.hitPadding) ||\n                    contains(this.currentPosition, obj.targetPoint, obj.hitPadding)))) {\n                this.action = 'Drag';\n            }\n            this.tool = this.getTool(this.action);\n            this.tool.mouseDown(this.initialEventArgs);\n        }\n    };\n    DiagramEventHandler.prototype.isSwimlaneElements = function (obj) {\n        if (obj && (obj.isLane || obj.isPhase || obj.isHeader)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    /* tslint:disable */\n    /** @private */\n    DiagramEventHandler.prototype.mouseMove = function (e, touches) {\n        this.focus = true;\n        if (this.isScrolling) {\n            e.preventDefault();\n            return;\n        }\n        if (canUserInteract(this.diagram) || (canZoomPan(this.diagram) && !defaultTool(this.diagram))) {\n            this.currentPosition = this.getMousePosition(e);\n            var objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n            var obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n            drawRulerMarkers(this.diagram, this.currentPosition);\n            var force = false;\n            var target = void 0;\n            if (e.type === 'touchmove') {\n                touches = e.touches;\n                if (touches && touches.length > 1) {\n                    this.touchMoveList = addTouchPointer(this.touchMoveList, e, touches);\n                    if (this.action !== 'PinchZoom') {\n                        force = true;\n                    }\n                }\n            }\n            if (Point.equals(this.currentPosition, this.prevPosition) === false || this.inAction) {\n                if (this.isMouseDown === false || force) {\n                    this.eventArgs = {};\n                    var sourceElement = null;\n                    if (obj !== null) {\n                        sourceElement = this.diagram.findElementUnderMouse(obj, this.currentPosition);\n                        if (obj !== this.hoverElement) {\n                            var content_1 = this.getContent();\n                            if (this.hoverElement && this.hoverElement.tooltip.openOn === 'Auto' && content_1 !== '') {\n                                this.elementLeave();\n                            }\n                            this.diagram.updatePortVisibility(this.hoverElement, PortVisibility.Hover, true);\n                            if (obj instanceof Node) {\n                                this.hoverNode = obj;\n                            }\n                            var canResetElement = true;\n                            if (!this.isSwimlaneElements(obj)\n                                && (this.hoverElement && this.isSwimlaneElements(this.hoverElement))) {\n                                canResetElement = false;\n                            }\n                            this.hoverElement = canResetElement ? obj : this.hoverElement;\n                            if (canResetElement) {\n                                this.elementEnter(this.currentPosition, false);\n                            }\n                            else {\n                                this.hoverElement = obj;\n                            }\n                        }\n                        else if (!this.hoverElement && this.hoverElement === obj) {\n                            this.elementEnter(this.currentPosition, true);\n                        }\n                        if (sourceElement) {\n                            target = this.commandHandler.findTarget(sourceElement, obj);\n                        }\n                    }\n                    this.action = this.diagram.findActionToBeDone(obj, sourceElement, this.currentPosition, target);\n                    this.checkUserHandleEvent(DiagramEvent.onUserHandleMouseEnter);\n                    this.checkPreviousAction();\n                    this.getMouseEventArgs(this.currentPosition, this.eventArgs);\n                    this.tool = this.getTool(this.action);\n                    this.mouseEvents();\n                    if (this.tool instanceof ConnectorDrawingTool ||\n                        this.tool instanceof PolyLineDrawingTool ||\n                        this.tool instanceof PolygonDrawingTool) {\n                        this.tool.mouseMove(this.eventArgs);\n                    }\n                    else if (touches && this.tool instanceof ZoomPanTool) {\n                        this.tool.mouseDown(this.eventArgs);\n                    }\n                    this.updateCursor();\n                    this.renderUmlHighLighter(this.eventArgs);\n                    var isNode = false;\n                    if (!(this.hoverElement && (!(this.tool instanceof ZoomPanTool))\n                        && (obj instanceof Node && this.isSwimlaneElements(obj)) &&\n                        (this.diagram.selectedItems.nodes.length === 0 || !isSelected(this.diagram, this.hoverElement)))) {\n                        isNode = true;\n                    }\n                    this.diagram.updatePortVisibility(this.hoverElement, PortVisibility.Hover, isNode);\n                    var content = this.getContent();\n                    if (obj === null && this.hoverElement && this.hoverElement.tooltip.openOn === 'Auto' && content) {\n                        this.hoverElement = null;\n                        this.elementLeave();\n                    }\n                    force = false;\n                }\n                else {\n                    this.eventArgs.position = this.currentPosition;\n                    if (this.action === 'Drag' && !isSelected(this.diagram, this.eventArgs.source, false) &&\n                        this.eventArgs.source instanceof Selector) {\n                        this.getMouseEventArgs(this.currentPosition, this.eventArgs);\n                    }\n                    this.mouseEvents();\n                    if (e.ctrlKey || e.shiftKey) {\n                        var info = (e.ctrlKey && e.shiftKey) ? { ctrlKey: e.ctrlKey, shiftKey: e.shiftKey } : { ctrlKey: true };\n                        this.eventArgs.info = info;\n                    }\n                    this.checkAction(obj);\n                    var padding = this.getConnectorPadding(this.eventArgs);\n                    this.getMouseEventArgs(this.currentPosition, this.eventArgs, this.eventArgs.source, padding);\n                    this.updateCursor();\n                    this.inAction = true;\n                    this.initialEventArgs = null;\n                    if (this.action === 'Drag' || this.action === 'Rotate') {\n                        this.diagram.diagramActions = this.diagram.diagramActions | DiagramAction.Interactions;\n                    }\n                    this.mouseMoveExtend(e, obj);\n                }\n                this.prevPosition = this.currentPosition;\n                if (!this.isForeignObject(e.target, true)) {\n                    e.preventDefault();\n                }\n            }\n        }\n    };\n    /* tslint:enable */\n    DiagramEventHandler.prototype.getContent = function () {\n        var isPrivateTooltip = ((this.hoverElement instanceof Node) &&\n            this.hoverElement.constraints & NodeConstraints.Tooltip) ||\n            ((this.hoverElement instanceof Connector) &&\n                this.hoverElement.constraints & ConnectorConstraints.Tooltip);\n        var content = isPrivateTooltip ? this.hoverElement.tooltip.content :\n            this.diagram.tooltip.content;\n        return content;\n    };\n    DiagramEventHandler.prototype.checkAutoScroll = function (e) {\n        var autoScrollPosition = this.startAutoScroll(e);\n        if (!autoScrollPosition && this.doingAutoScroll) {\n            this.doingAutoScroll = false;\n            clearInterval(this.timeOutValue);\n        }\n        else if (autoScrollPosition) {\n            if ((this.tool instanceof NodeDrawingTool || this.tool instanceof ConnectorDrawingTool\n                || this.tool instanceof MoveTool || this.tool instanceof ResizeTool\n                || this.tool instanceof SelectTool) && this.inAction) {\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                var diagram_1 = this;\n                var delay_1 = 100;\n                if (this.diagram.scrollSettings.canAutoScroll && autoScrollPosition && !this.doingAutoScroll) {\n                    this.doingAutoScroll = true;\n                    this.timeOutValue = setInterval(function (args) {\n                        diagram_1.doAutoScroll(autoScrollPosition, e, delay_1);\n                    }, delay_1);\n                }\n            }\n        }\n        else {\n            this.blocked = !(this.tool.mouseMove(this.eventArgs));\n        }\n    };\n    /* tslint:disable */\n    /** @private */\n    DiagramEventHandler.prototype.mouseUp = function (evt) {\n        this.checkUserHandleEvent(DiagramEvent.onUserHandleMouseUp);\n        if (this.diagram.mode === 'SVG' && canVitualize(this.diagram)) {\n            this.updateVirtualization();\n        }\n        this.diagram.previousSelectedObject = null;\n        this.diagram.diagramRenderer.rendererActions =\n            this.diagram.removeConstraints(this.diagram.diagramRenderer.rendererActions, RendererAction.DrawSelectorBorder);\n        var touches = evt.touches;\n        if (this.isScrolling) {\n            this.isScrolling = false;\n            evt.preventDefault();\n            return;\n        }\n        if (!this.checkEditBoxAsTarget(evt) && (canUserInteract(this.diagram))\n            || (canZoomPan(this.diagram) && !defaultTool(this.diagram))) {\n            if (this.tool && (!(this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool) ||\n                ((this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool)\n                    && evt.detail === 2))) {\n                if (!this.isForeignObject(evt.target) && this.isMouseDown) {\n                    document.getElementById(this.diagram.element.id + 'content').focus();\n                }\n                if (!this.inAction && evt.which !== 3) {\n                    if (this.action === 'Drag') {\n                        this.action = 'Select';\n                        var oldSelectedValue = (this.diagram.selectedItems.nodes.concat(this.diagram.selectedItems.connectors));\n                        var objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n                        var obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n                        var isMultipleSelect = true;\n                        if ((!evt.ctrlKey && this.isMouseDown\n                            && (this.diagram.selectedItems.nodes.length + this.diagram.selectedItems.connectors.length) > 1)\n                            && evt.which === 1 && !canPreventClearSelection(this.diagram.diagramActions)) {\n                            isMultipleSelect = false;\n                            this.commandHandler.clearSelection();\n                        }\n                        if (!isSelected(this.diagram, obj) || (!isMultipleSelect)) {\n                            this.commandHandler.selectObjects([obj], undefined, oldSelectedValue);\n                        }\n                    }\n                }\n                var avoidDropChildren = false;\n                var history_1 = this.updateContainerProperties();\n                var isGroupAction = void 0;\n                this.addUmlNode();\n                this.inAction = false;\n                this.isMouseDown = false;\n                this.currentPosition = this.getMousePosition(evt);\n                if (this.diagram.selectedObject.helperObject) {\n                    isGroupAction = this.updateContainerBounds();\n                }\n                if (this.tool && (this.tool.prevPosition || this.tool instanceof LabelTool)) {\n                    this.eventArgs.position = this.currentPosition;\n                    var padding = this.getConnectorPadding(this.eventArgs);\n                    this.getMouseEventArgs(this.currentPosition, this.eventArgs, this.eventArgs.source, padding);\n                    var ctrlKey = this.isMetaKey(evt);\n                    if (ctrlKey || evt.shiftKey) {\n                        var info = (ctrlKey && evt.shiftKey) ? { ctrlKey: ctrlKey, shiftKey: evt.shiftKey } :\n                            { ctrlKey: true };\n                        this.eventArgs.info = info;\n                    }\n                    if (this.diagram.diagramActions & DiagramAction.Interactions) {\n                        this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.Interactions;\n                    }\n                    this.eventArgs.clickCount = evt.detail;\n                    if (this.diagram.selectedObject.helperObject && (this.tool instanceof MoveTool || this.tool instanceof ResizeTool)) {\n                        if (this.diagram.selectedObject.actualObject &&\n                            this.diagram.selectedObject.actualObject.parentId !== '') {\n                            var parentNode = this.diagram.getObject(this.diagram.selectedObject.actualObject.parentId);\n                            if (parentNode && parentNode.isLane) {\n                                this.commandHandler.isContainer = true;\n                            }\n                        }\n                        avoidDropChildren = this.diagram.lineRoutingModule\n                            && this.diagram.nameTable[\"helper\"] && this.eventArgs.target && this.eventArgs.target.isLane\n                            && ((this.eventArgs.source instanceof Selector && this.eventArgs.source.nodes.length > 0\n                                && this.eventArgs.source.nodes[0].parentId === \"\") || (this.eventArgs.source.parentId === \"\"));\n                        if (avoidDropChildren) {\n                            this.diagram.diagramActions = this.diagram.diagramActions | DiagramAction.PreventLaneContainerUpdate;\n                        }\n                        this.tool.mouseUp(this.eventArgs, history_1.isPreventHistory);\n                    }\n                    else {\n                        this.tool.mouseUp(this.eventArgs);\n                        if (this.diagram.checkMenu && (window.navigator.userAgent.indexOf('Linux') !== -1 || window.navigator.userAgent.indexOf('X11') !== -1)) {\n                            if (!evt.pageY && (evt instanceof TouchEvent) && evt.changedTouches) {\n                                window.getSelection().removeAllRanges();\n                                this.diagram.contextMenuModule.contextMenu.open(evt.changedTouches[0].pageY, evt.changedTouches[0].pageX, this.diagram.element);\n                                evt.preventDefault();\n                            }\n                            else {\n                                this.diagram.contextMenuModule.contextMenu.open(evt.pageY, evt.pageX, this.diagram.element);\n                            }\n                            this.diagram.checkMenu = false;\n                        }\n                    }\n                    if (history_1.hasStack) {\n                        this.diagram.endGroupAction();\n                    }\n                }\n                if (isGroupAction) {\n                    this.diagram.endGroupAction();\n                }\n                this.updateContainerBounds(true);\n                if (this.eventArgs.clickCount !== 2) {\n                    this.commandHandler.updateSelectedNodeProperties(this.eventArgs.source);\n                    if (avoidDropChildren) {\n                        this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.PreventLaneContainerUpdate;\n                        var nodes = this.eventArgs.source instanceof Selector\n                            ? this.eventArgs.source.nodes : [this.eventArgs.source];\n                        if (nodes) {\n                            for (var i = 0; i < nodes.length; i++) {\n                                if (!nodes[i].container) {\n                                    this.commandHandler.dropChildToContainer(this.eventArgs.target, nodes[i]);\n                                    this.commandHandler.renderContainerHelper(nodes[i]);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (this.diagram.selectedObject && this.diagram.selectedObject.helperObject) {\n                    this.diagram.remove(this.diagram.selectedObject.helperObject);\n                    this.diagram.selectedObject = { helperObject: undefined, actualObject: undefined };\n                    // EJ2-42605 - Annotation undo redo not working properly if the line routing is enabled committed by sivakumar sekar\n                    // committed to remove the diagram actions public method when line routing is enabled\n                    // eslint-disable-next-line\n                    if ((this.diagram.diagramActions & DiagramAction.PublicMethod) && (this.diagram.constraints & DiagramConstraints.LineRouting)) {\n                        this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.PublicMethod;\n                    }\n                }\n                this.blocked = false;\n                if (this.hoverElement) {\n                    var portVisibility = PortVisibility.Connect;\n                    if (isSelected(this.diagram, this.hoverElement)) {\n                        portVisibility |= PortVisibility.Hover;\n                    }\n                    this.diagram.updatePortVisibility(this.hoverElement, portVisibility, true);\n                    this.hoverElement = null;\n                }\n                this.touchStartList = null;\n                this.touchMoveList = null;\n                if (!(this.tool instanceof TextDrawingTool)) {\n                    this.tool = null;\n                }\n            }\n            if (!touches) {\n                evt.preventDefault();\n            }\n            this.diagram.currentDrawingObject = undefined;\n            var selector = this.diagram.selectedItems;\n            var disbleRenderSelector = false;\n            if (this.commandHandler.isUserHandle(this.currentPosition)) {\n                if (this.isForeignObject(evt.target)) {\n                    disbleRenderSelector = true;\n                }\n            }\n            if (!this.inAction && selector.wrapper && selector.userHandles.length > 0 && !disbleRenderSelector) {\n                this.diagram.renderSelector(true);\n            }\n            if (!this.inAction && !this.diagram.currentSymbol && this.eventArgs) {\n                var arg = {\n                    element: cloneBlazorObject(this.eventArgs.source) || cloneBlazorObject(this.diagram),\n                    position: cloneBlazorObject(this.eventArgs.position), count: evt.detail,\n                    actualObject: cloneBlazorObject(this.eventArgs.actualObject),\n                    button: (evt.button === 0) ? 'Left' : (evt.button === 1) ? 'Middle' : 'Right'\n                };\n                if (isBlazor() && this.diagram.click) {\n                    arg = this.getBlazorClickEventArgs(arg);\n                }\n                if (this.diagram.tool !== DiagramTools.ZoomPan) {\n                    this.diagram.triggerEvent(DiagramEvent.click, arg);\n                }\n            }\n            this.eventArgs = {};\n        }\n        this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.PreventLaneContainerUpdate;\n        this.eventArgs = {};\n        this.diagram.commandHandler.removeStackHighlighter(); // end the corresponding tool\n    };\n    /* tslint:enable */\n    DiagramEventHandler.prototype.getConnectorPadding = function (eventArgs) {\n        var padding;\n        var targetObject = eventArgs.source;\n        if (targetObject && (targetObject instanceof Selector) && targetObject.connectors.length) {\n            var selectedConnector = targetObject.connectors[0];\n            padding = (selectedConnector.constraints & ConnectorConstraints.ConnectToNearByPort) ? selectedConnector.connectionPadding : 0;\n        }\n        else if (targetObject && (targetObject instanceof Connector) && this.action === 'PortDraw' && (this.tool instanceof ConnectorDrawingTool)) {\n            if (targetObject.constraints & ConnectorConstraints.ConnectToNearByPort) {\n                padding = targetObject.connectionPadding;\n            }\n        }\n        return padding || 0;\n    };\n    DiagramEventHandler.prototype.getBlazorClickEventArgs = function (arg) {\n        arg = {\n            element: this.eventArgs.source ? { selector: cloneBlazorObject(this.eventArgs.source) } :\n                { diagram: cloneBlazorObject(this.diagram) },\n            position: cloneBlazorObject(this.eventArgs.position), count: arg.count,\n            actualObject: this.eventArgs.actualObject ? { selector: cloneBlazorObject(this.eventArgs.actualObject) } :\n                { diagram: cloneBlazorObject(this.diagram) },\n            button: arg.button\n        };\n        if (this.eventArgs.source instanceof Node) {\n            arg.element.selector.nodes = [];\n            arg.element.selector.nodes.push(cloneBlazorObject(this.eventArgs.source));\n        }\n        else if (this.eventArgs.source instanceof Connector) {\n            arg.element.selector.connectors = [];\n            arg.element.selector.connectors.push(cloneBlazorObject(this.eventArgs.source));\n        }\n        return arg;\n    };\n    DiagramEventHandler.prototype.addSwimLaneObject = function (selectedNode) {\n        var swimlaneNode;\n        var targetNode;\n        var shape;\n        var value;\n        var canInsert;\n        var index = 0;\n        var offset;\n        var actualShape = selectedNode.shape;\n        var objects = this.objectFinder.findObjectsUnderMouse(this.currentPosition, this.diagram, this.eventArgs, null, this.action);\n        if (!targetNode) {\n            targetNode = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n        }\n        this.diagram.clearSelectorLayer();\n        if (targetNode && !(targetNode.isLane || targetNode.isPhase || targetNode.isHeader)) {\n            for (var i = 0; i < objects.length; i++) {\n                var laneNode = this.diagram.nameTable[objects[i].id];\n                if (laneNode.isLane || laneNode.isPhase || laneNode.isHeader) {\n                    targetNode = laneNode;\n                }\n            }\n        }\n        if (targetNode && (actualShape.isPhase || (actualShape.isLane && targetNode.isLane))) {\n            var id = targetNode.parentId;\n            swimlaneNode = this.diagram.nameTable[id];\n        }\n        if (swimlaneNode) {\n            shape = swimlaneNode.shape;\n            canInsert = (actualShape.isLane) ? actualShape.orientation === shape.orientation :\n                actualShape.orientation !== shape.orientation;\n        }\n        if (canInsert && targetNode) {\n            if (shape && shape.header && shape.hasHeader && shape.orientation === 'Horizontal') {\n                index = 1;\n            }\n            if (shape.phases.length > 0) {\n                index += 1;\n            }\n            if (actualShape.isPhase) {\n                if (shape.orientation === 'Horizontal') {\n                    offset = this.currentPosition.x - swimlaneNode.wrapper.bounds.x;\n                }\n                else {\n                    offset = this.currentPosition.y - (swimlaneNode.wrapper.bounds.y + shape.header.height);\n                }\n                var phases = { id: randomId(), offset: offset, header: { annotation: { content: 'Phase' } } };\n                this.diagram.addPhases(swimlaneNode, [phases]);\n            }\n            else {\n                //const laneHeight: number = actualShape.lanes[0].header.height;\n                var lane = {\n                    id: randomId(), style: actualShape.lanes[0].style, header: {\n                        annotation: {\n                            content: actualShape.lanes[0].header.annotation.content,\n                            style: actualShape.lanes[0].header.annotation.style\n                        },\n                        style: actualShape.lanes[0].header.style\n                    }\n                };\n                var orientation_1 = (actualShape.orientation === 'Horizontal') ? true : false;\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                orientation_1 ? lane.height = actualShape.lanes[0].height : lane.width = actualShape.lanes[0].width;\n                if (shape.orientation === 'Horizontal') {\n                    value = targetNode.rowIndex ? targetNode.rowIndex :\n                        this.diagram.nameTable[targetNode.parentId].rowIndex;\n                    if (targetNode.wrapper.offsetY < this.currentPosition.y) {\n                        value += 1;\n                    }\n                }\n                else {\n                    value = targetNode.columnIndex ? targetNode.columnIndex :\n                        this.diagram.nameTable[targetNode.parentId].columnIndex;\n                    if (this.currentPosition.x < targetNode.wrapper.bounds.center.x) {\n                        value -= 1;\n                    }\n                }\n                if (shape.lanes.length > (value - index)) {\n                    lane.header.width = shape.lanes[value - index].header.width;\n                    lane.header.height = shape.lanes[value - index].header.height;\n                }\n                else {\n                    lane.header.width = shape.lanes[value - index - 1].header.width;\n                    lane.header.height = shape.lanes[value - index - 1].header.height;\n                }\n                this.diagram.addLanes(swimlaneNode, [lane], value - index);\n            }\n            this.commandHandler.select(swimlaneNode);\n        }\n        else if (actualShape.isLane) {\n            var swimLaneobj = {\n                id: randomId(), width: selectedNode.width, height: selectedNode.height, addInfo: selectedNode.addInfo,\n                shape: {\n                    type: 'SwimLane', header: {\n                        annotation: { content: 'Header' }, height: 50, style: actualShape.lanes[0].header.style\n                    },\n                    phases: [{ id: randomId(), header: { annotation: { content: 'Phase' } } }],\n                    lanes: [{\n                            id: randomId(), height: selectedNode.height, width: selectedNode.width, style: actualShape.lanes[0].style,\n                            header: {\n                                annotation: {\n                                    content: actualShape.lanes[0].header.annotation.content,\n                                    style: actualShape.lanes[0].header.annotation.style\n                                },\n                                style: actualShape.lanes[0].header.style\n                            }\n                        }], orientation: actualShape.orientation\n                }\n            };\n            if (actualShape.orientation === 'Vertical') {\n                swimLaneobj.width += 20;\n            }\n            swimLaneobj.offsetX = this.currentPosition.x + (swimLaneobj.width / 2);\n            swimLaneobj.offsetY = this.currentPosition.y + (swimLaneobj.height / 2);\n            this.diagram.add(swimLaneobj);\n        }\n    };\n    /** @private */\n    DiagramEventHandler.prototype.mouseLeave = function (evt) {\n        //Define what has to happen on mouse leave\n        if (this.tool && this.inAction) {\n            this.tool.mouseLeave(this.eventArgs);\n        }\n        if (this.diagram.selectedObject.helperObject) {\n            this.updateContainerProperties();\n            var isGroupAction = this.updateContainerBounds();\n            if (isGroupAction) {\n                this.diagram.endGroupAction();\n            }\n        }\n        if (this.eventArgs && this.eventArgs.source) {\n            this.diagram.updatePortVisibility(this.eventArgs.source, PortVisibility.Hover, true);\n            this.hoverElement = null;\n        }\n        if (this.eventArgs && !this.eventArgs.source && this.hoverElement) {\n            this.hoverElement = null;\n        }\n        if (this.tool instanceof ConnectTool && this.eventArgs && this.eventArgs.target && this.eventArgs.target instanceof Node) {\n            this.diagram.updatePortVisibility(this.eventArgs.target, PortVisibility.Hover | PortVisibility.Connect, true);\n            this.hoverElement = null;\n        }\n        var selector = this.diagram.selectedItems;\n        if (selector && selector.wrapper) {\n            if (!(selectionHasConnector(this.diagram, selector))) {\n                this.diagram.renderSelector(true);\n            }\n        }\n        if (this.diagram.diagramActions & DiagramAction.Interactions || this.diagram.diagramActions & DiagramAction.ToolAction) {\n            this.diagram.diagramActions = this.diagram.diagramActions & ~DiagramAction.ToolAction;\n        }\n        this.isMouseDown = false;\n        this.focus = false;\n        this.touchStartList = null;\n        this.touchMoveList = null;\n        this.elementLeave();\n        this.commandHandler.removeSnap();\n        this.inAction = false;\n        this.eventArgs = {};\n        if (this.diagram.selectedObject && this.diagram.selectedObject.helperObject) {\n            this.diagram.remove(this.diagram.selectedObject.helperObject);\n            this.diagram.selectedObject = { helperObject: undefined, actualObject: undefined };\n        }\n        this.tool = null;\n        removeRulerMarkers();\n        if (this.action === 'Rotate') {\n            this.diagram.diagramCanvas.classList.remove('e-diagram-rotate');\n        }\n        evt.preventDefault();\n    };\n    /** @private */\n    DiagramEventHandler.prototype.mouseWheel = function (evt) {\n        this.diagram.blazorActions |= BlazorAction.interaction;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var up = (evt.wheelDelta > 0 || -40 * evt.detail > 0) ? true : false;\n        var mousePosition = this.getMousePosition(evt);\n        this.diagram.tooltipObject.close();\n        var ctrlKey = this.isMetaKey(evt);\n        if (ctrlKey) {\n            this.diagram.zoom(up ? (1.2) : 1 / (1.2), mousePosition);\n            evt.preventDefault();\n        }\n        else {\n            var horizontalOffset = this.diagram.scroller.horizontalOffset;\n            var verticalOffset = this.diagram.scroller.verticalOffset;\n            var change = up ? 20 : -20;\n            if (this.tool && (this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool)) {\n                this.eventArgs = {};\n                this.getMouseEventArgs(mousePosition, this.eventArgs);\n                this.eventArgs.position = mousePosition;\n                this.tool.mouseWheel(this.eventArgs);\n            }\n            this.diagram.scrollActions |= ScrollActions.Interaction;\n            if (evt.shiftKey || (evt.deltaX && evt.deltaX !== -0)) {\n                this.diagram.scroller.zoom(1, change, 0, mousePosition);\n            }\n            else {\n                this.diagram.scroller.zoom(1, 0, change, mousePosition);\n            }\n            this.diagram.scrollActions &= ~ScrollActions.Interaction;\n            if (horizontalOffset !== this.diagram.scroller.horizontalOffset\n                || verticalOffset !== this.diagram.scroller.verticalOffset) {\n                evt.preventDefault();\n            }\n        }\n        if (this.diagram.textEditing) {\n            this.diagram.isTriggerEvent = true;\n            if (this.diagram.activeLabel.parentId) {\n                var node = this.diagram.getObject(this.diagram.activeLabel.parentId);\n                this.diagram.startTextEdit(node, this.diagram.activeLabel.id);\n            }\n            this.diagram.isTriggerEvent = false;\n        }\n        this.diagram.blazorActions = this.diagram.blazorActions & ~BlazorAction.interaction;\n    };\n    /** @private */\n    DiagramEventHandler.prototype.keyDown = function (evt) {\n        if (!(this.diagram.diagramActions & DiagramAction.TextEdit) &&\n            !(this.checkEditBoxAsTarget(evt)) || (evt.key === 'Escape' || evt.keyCode === 27)) {\n            var i = void 0;\n            var inAction = 'inAction';\n            var command = void 0;\n            var keycode = evt.keyCode ? evt.keyCode : evt.which;\n            var key = evt.key;\n            var ctrlKey = this.isMetaKey(evt);\n            if (this.diagram.commandManager && this.diagram.commands) {\n                var commands = this.diagram.commands;\n                for (var _i = 0, _a = Object.keys(commands); _i < _a.length; _i++) {\n                    var i_1 = _a[_i];\n                    command = this.diagram.commands[i_1];\n                    if (command && (command.gesture.keyModifiers || command.gesture.key)) {\n                        if ((keycode === command.gesture.key || (key === Keys[command.gesture.key])\n                            || this.isDeleteKey(key, i_1))\n                            && (((!command.gesture.keyModifiers) && (!evt.altKey) && (!evt.shiftKey) && (!ctrlKey)) ||\n                                (command.gesture.keyModifiers && (ctrlKey || evt.altKey || evt.shiftKey) &&\n                                    (this.altKeyPressed(command.gesture.keyModifiers) && evt.altKey) ||\n                                    (this.shiftKeyPressed(command.gesture.keyModifiers) && evt.shiftKey) ||\n                                    (this.ctrlKeyPressed(command.gesture.keyModifiers) && ctrlKey)))) {\n                            var canExecute = getFunction(command.canExecute);\n                            if (isBlazor() || (canExecute &&\n                                canExecute({\n                                    'keyDownEventArgs': KeyboardEvent,\n                                    parameter: command.parameter\n                                }))) {\n                                evt.preventDefault();\n                                if (evt.key === 'Escape') {\n                                    if (this.checkEditBoxAsTarget(evt)) {\n                                        document.getElementById(this.diagram.diagramCanvas.id).focus();\n                                    }\n                                    else if (this.diagram.currentSymbol) {\n                                        var selectedSymbols = 'selectedSymbols';\n                                        var source = 'sourceElement';\n                                        var intDestroy = 'intDestroy';\n                                        this.diagram.removeFromAQuad(this.diagram.currentSymbol);\n                                        this.diagram.removeObjectsFromLayer(this.diagram.nameTable[this.diagram.currentSymbol.id]);\n                                        this.diagram.removeElements(this.diagram.currentSymbol);\n                                        removeChildNodes(this.diagram.currentSymbol, this.diagram);\n                                        delete this.diagram.nameTable[this.diagram.currentSymbol.id];\n                                        var sourceElement = this.diagram.droppable[source];\n                                        sourceElement.draggable[intDestroy]();\n                                        var element = this.diagram.droppable[selectedSymbols];\n                                        element.parentNode.removeChild(element);\n                                        var diagramActions = this.diagram.diagramActions;\n                                        this.diagram.diagramActions =\n                                            this.diagram.addConstraints(diagramActions, DiagramAction.PreventClearSelection);\n                                        this.tool.mouseUp(this.eventArgs);\n                                        this.diagram.diagramRenderer.rendererActions = this.diagram.removeConstraints(this.diagram.diagramRenderer.rendererActions, RendererAction.DrawSelectorBorder);\n                                        if (this.diagram.previousSelectedObject) {\n                                            this.diagram.select(this.diagram.previousSelectedObject);\n                                        }\n                                        this.action = 'Select';\n                                        this.diagram.previousSelectedObject = null;\n                                        this.diagram.currentSymbol = null;\n                                        this.diagram.diagramActions =\n                                            this.diagram.removeConstraints(diagramActions, DiagramAction.PreventClearSelection);\n                                        this.isMouseDown = false;\n                                    }\n                                    else if (this.inAction && this.diagram.drawingObject && this.tool && this.tool[inAction]) {\n                                        this.tool.mouseUp(this.eventArgs);\n                                        this.tool = null;\n                                        this.isMouseDown = false;\n                                    }\n                                }\n                                if (command.execute) {\n                                    if (this.diagram.tool !== DiagramTools.ZoomPan) {\n                                        // if (i === 'nudgeUp' || i === 'nudgeRight' || i === 'nudgeDown' || i === 'nudgeLeft') {\n                                        //     command.execute()\n                                        // } else {\n                                        var execute = getFunction(command.execute);\n                                        execute({ 'keyDownEventArgs': KeyboardEvent, parameter: command.parameter });\n                                    }\n                                    // }\n                                }\n                                if (isBlazor()) {\n                                    var arg = { gesture: command.gesture };\n                                    this.diagram.triggerEvent(DiagramEvent.commandExecute, arg);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // eslint-disable-next-line\n        var selectedObject = (this.diagram.selectedItems.nodes.length) ?\n            this.diagram.selectedItems.nodes : this.diagram.selectedItems.connectors;\n        this.keyArgs = {\n            element: cloneBlazorObject(this.diagram.selectedItems),\n            key: evt.key, keyCode: evt.keyCode ? evt.keyCode : evt.which\n        };\n        this.getKeyModifier(this.keyArgs, evt);\n        if ((this.diagram.diagramActions & DiagramAction.TextEdit)) {\n            this.getlabel(this.keyArgs, evt);\n        }\n        this.diagram.triggerEvent(DiagramEvent.keyDown, this.keyArgs);\n    };\n    DiagramEventHandler.prototype.getlabel = function (args, evt) {\n        var label = this.diagram.activeLabel;\n        args.target = this.diagram.element.id + '_editBox';\n        var node = this.diagram.nameTable[label.parentId];\n        if (document.getElementById(this.diagram.element.id + '_editBox')) {\n            args.text = document.getElementById(this.diagram.element.id + '_editBox').value;\n            for (var i = 0; i < node.annotations.length; i++) {\n                if (node.annotations[i].id === label.id) {\n                    args.label = node.annotations[i];\n                    break;\n                }\n            }\n        }\n    };\n    DiagramEventHandler.prototype.getKeyModifier = function (args, evt) {\n        args.keyModifiers = KeyModifiers.None;\n        if (evt.ctrlKey) {\n            args.keyModifiers |= KeyModifiers.Control;\n        }\n        if (evt.shiftKey) {\n            args.keyModifiers |= KeyModifiers.Shift;\n        }\n        if (evt.altKey) {\n            args.keyModifiers |= KeyModifiers.Alt;\n        }\n        if (this.isMetaKey(evt)) {\n            args.keyModifiers |= KeyModifiers.Meta;\n        }\n    };\n    DiagramEventHandler.prototype.keyUp = function (evt) {\n        this.keyArgs = {\n            element: cloneBlazorObject(this.diagram.selectedItems), key: evt.key, keyCode: evt.keyCode ? evt.keyCode : evt.which\n        };\n        var selectedObject = (this.diagram.selectedItems.nodes.length) ?\n            this.diagram.selectedItems.nodes : this.diagram.selectedItems.connectors;\n        this.getKeyModifier(this.keyArgs, evt);\n        if ((this.diagram.diagramActions & DiagramAction.TextEdit)) {\n            this.getlabel(this.keyArgs, evt);\n        }\n        this.diagram.triggerEvent(DiagramEvent.keyUp, this.keyArgs);\n    };\n    DiagramEventHandler.prototype.startAutoScroll = function (e) {\n        var position = this.getMousePosition(e);\n        position.x *= this.diagram.scroller.currentZoom;\n        position.y *= this.diagram.scroller.currentZoom;\n        var rulerSize = getRulerSize(this.diagram);\n        var movingPosition;\n        var autoScrollBorder = this.diagram.scrollSettings.autoScrollBorder;\n        if (Browser.info.name === 'mozilla') {\n            if (this.diagram.scroller.viewPortWidth === 0) {\n                var bounds = document.getElementById(this.diagram.element.id).getBoundingClientRect();\n                if (bounds.width !== this.diagram.scroller.viewPortWidth) {\n                    this.diagram.scroller.setViewPortSize(bounds.width, bounds.height);\n                }\n            }\n        }\n        if (this.diagram.scrollSettings.canAutoScroll) {\n            if (position.x + this.diagram.scroller.horizontalOffset + autoScrollBorder.right + rulerSize.width >=\n                this.diagram.scroller.viewPortWidth - 18) {\n                movingPosition = 'right';\n            }\n            else if (position.x + this.diagram.scroller.horizontalOffset < autoScrollBorder.left) {\n                movingPosition = 'left';\n            }\n            else if (position.y + this.diagram.scroller.verticalOffset + autoScrollBorder.bottom + rulerSize.height >\n                this.diagram.scroller.viewPortHeight - 18) {\n                movingPosition = 'bottom';\n            }\n            else if (position.y + this.diagram.scroller.verticalOffset < autoScrollBorder.top) {\n                movingPosition = 'top';\n            }\n        }\n        return movingPosition;\n    };\n    DiagramEventHandler.prototype.doAutoScroll = function (option, e, delay, autoScroll) {\n        var position = option;\n        if ((this.tool instanceof NodeDrawingTool || this.tool instanceof ConnectorDrawingTool\n            || this.tool instanceof MoveTool || this.tool instanceof ResizeTool\n            || this.tool instanceof SelectTool) && this.inAction) {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var diagram = this;\n            var pos = this.getMousePosition(e);\n            var autoScrollBorder = this.diagram.scrollSettings.autoScrollBorder;\n            var newDelay = delay ? delay : 100;\n            var left = 0;\n            var top_1 = 0;\n            var point = { x: pos.x, y: pos.y };\n            switch (position) {\n                case 'right':\n                    point.x = pos.x + 10;\n                    left = 10;\n                    break;\n                case 'left':\n                    point.x = pos.x - 10;\n                    left = -10;\n                    break;\n                case 'bottom':\n                    point.y = pos.y + 10;\n                    top_1 = 10;\n                    break;\n                case 'top':\n                    point.y = pos.y - 10;\n                    top_1 = -10;\n                    break;\n            }\n            this.eventArgs.position = { x: point.x, y: point.y };\n            this.currentPosition = this.eventArgs.position;\n            var objects = this.objectFinder.findObjectsUnderMouse(this.currentPosition, this.diagram, this.eventArgs, null, this.action);\n            this.eventArgs.target = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n            this.tool.mouseMove(this.eventArgs);\n            this.diagram.scrollActions |= ScrollActions.Interaction;\n            this.diagram.scroller.zoom(1, -left, -top_1, pos);\n            this.diagram.scrollActions &= ~ScrollActions.Interaction;\n        }\n    };\n    DiagramEventHandler.prototype.mouseEvents = function () {\n        var target = this.diagram.findObjectsUnderMouse(this.currentPosition);\n        for (var i = 0; i < target.length; i++) {\n            if (this.eventArgs.actualObject === target[i]) {\n                target.splice(i, 1);\n            }\n        }\n        var arg = {\n            targets: {}\n        };\n        if (!isBlazor()) {\n            arg = {\n                targets: cloneBlazorObject(target),\n                element: cloneBlazorObject((this.eventArgs.source === this.eventArgs.actualObject) ? undefined : this.eventArgs.source),\n                actualObject: cloneBlazorObject(this.eventArgs.actualObject)\n            };\n        }\n        if (isBlazor() && (this.diagram.mouseEnter || this.diagram.mouseOver)) {\n            arg.actualObject = getObjectType(this.eventArgs.actualObject) === Connector ? {\n                connector: cloneBlazorObject(this.eventArgs.actualObject)\n            }\n                : {\n                    node: cloneBlazorObject(this.eventArgs.actualObject)\n                };\n            arg.targets.connector = [];\n            arg.targets.node = [];\n            this.getBlazorCollectionObject(target, arg);\n        }\n        if (this.lastObjectUnderMouse && this.diagram.mouseLeave\n            && (!this.eventArgs.actualObject || (this.lastObjectUnderMouse !== this.eventArgs.actualObject))) {\n            var arg_1 = {\n                targets: undefined, element: cloneBlazorObject(this.lastObjectUnderMouse), actualObject: undefined\n            };\n            if (isBlazor()) {\n                arg_1 = {\n                    targets: undefined,\n                    element: getObjectType(this.lastObjectUnderMouse) === Connector ? { connector: cloneBlazorObject(target) }\n                        : {\n                            node: cloneBlazorObject(this.lastObjectUnderMouse)\n                        },\n                    actualObject: undefined\n                };\n            }\n            this.diagram.triggerEvent(DiagramEvent.mouseLeave, arg_1);\n            this.lastObjectUnderMouse = null;\n        }\n        if (!this.lastObjectUnderMouse && this.eventArgs.source || (this.lastObjectUnderMouse !== this.eventArgs.actualObject)) {\n            this.lastObjectUnderMouse = this.eventArgs.actualObject;\n            if (this.eventArgs.actualObject !== undefined) {\n                this.diagram.triggerEvent(DiagramEvent.mouseEnter, arg);\n            }\n        }\n        if (this.eventArgs.actualObject) {\n            this.diagram.triggerEvent(DiagramEvent.mouseOver, arg);\n        }\n    };\n    DiagramEventHandler.prototype.getBlazorCollectionObject = function (obj, arg1) {\n        if (obj) {\n            for (var i = 0; i < obj.length; i++) {\n                if (getObjectType(obj[i]) === Connector) {\n                    arg1.targets.connector.push(cloneBlazorObject(obj[i]));\n                }\n                else {\n                    arg1.targets.node.push(cloneBlazorObject(obj[i]));\n                }\n            }\n        }\n    };\n    DiagramEventHandler.prototype.elementEnter = function (mousePosition, elementOver) {\n        if (!elementOver) {\n            var isPrivateTooltip = ((this.hoverElement instanceof Node) &&\n                this.hoverElement.constraints & NodeConstraints.Tooltip) ||\n                ((this.hoverElement instanceof Connector) && this.hoverElement.constraints & ConnectorConstraints.Tooltip);\n            var content = this.getContent();\n            if (this.hoverElement.tooltip.openOn === 'Auto' && content !== '') {\n                updateTooltip(this.diagram, isPrivateTooltip ? this.hoverElement : undefined);\n            }\n            this.diagram.tooltipObject.offsetX = 0;\n            this.diagram.tooltipObject.offsetY = 0;\n            var objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n            var obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n            var idName = (obj.shape && ((obj.shape) instanceof Native)) ? '_content_native_element' : '_groupElement';\n            var targetEle = document.getElementById(obj.id + idName);\n            if (this.hoverElement.tooltip.openOn === 'Auto' && content !== '') {\n                this.diagram.tooltipObject.close();\n                this.diagram.tooltipObject.openOn = this.hoverElement.tooltip.openOn;\n                if (isBlazor()) {\n                    this.diagram.tooltipObject.open(targetEle, {});\n                }\n                else {\n                    this.diagram.tooltipObject.dataBind();\n                }\n            }\n            if (canEnableToolTip(this.hoverElement, this.diagram) && this.hoverElement.tooltip.openOn === 'Auto') {\n                this.diagram.tooltipObject.open(targetEle);\n            }\n        }\n    };\n    DiagramEventHandler.prototype.elementLeave = function () {\n        if (this.diagram.tooltipObject && this.diagram.tooltipObject.openOn !== 'Custom') {\n            this.diagram.tooltipObject.close();\n        }\n    };\n    DiagramEventHandler.prototype.altKeyPressed = function (keyModifier) {\n        if (keyModifier & KeyModifiers.Alt) {\n            return true;\n        }\n        return false;\n    };\n    DiagramEventHandler.prototype.ctrlKeyPressed = function (keyModifier) {\n        if (keyModifier & KeyModifiers.Control) {\n            return true;\n        }\n        return false;\n    };\n    DiagramEventHandler.prototype.shiftKeyPressed = function (keyModifier) {\n        if (keyModifier & KeyModifiers.Shift) {\n            return true;\n        }\n        return false;\n    };\n    /** @private */\n    DiagramEventHandler.prototype.scrolled = function (evt) {\n        this.diagram.updateScrollOffset();\n        if (isBlazor() && (this.diagram.realActions & RealAction.OverViewAction)) {\n            this.diagram.setBlazorDiagramProps(false);\n        }\n    };\n    /** @private */\n    DiagramEventHandler.prototype.doubleClick = function (evt) {\n        if (canUserInteract(this.diagram)) {\n            var annotation = void 0;\n            var objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n            var obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n            if (obj !== null && canUserInteract(this.diagram)) {\n                var node = obj;\n                annotation = this.diagram.findElementUnderMouse(obj, this.currentPosition);\n                if (this.tool && (this.tool instanceof PolygonDrawingTool || this.tool instanceof PolyLineDrawingTool)) {\n                    var arg_2 = {\n                        source: cloneBlazorObject(obj) || cloneBlazorObject(this.diagram),\n                        position: this.currentPosition, count: evt.detail\n                    };\n                    this.tool.mouseUp(this.eventArgs);\n                    this.isMouseDown = false;\n                    this.eventArgs = {};\n                    this.tool = null;\n                    evt.preventDefault();\n                }\n                else {\n                    var layer = this.diagram.commandHandler.getObjectLayer(obj.id);\n                    if (layer && !layer.lock && layer.visible) {\n                        if (!(this.diagram.diagramActions & DiagramAction.TextEdit)) {\n                            var id = '';\n                            if (obj.shape.shape === 'TextAnnotation') {\n                                id = obj.wrapper.children[1].id.split('_')[1];\n                            }\n                            this.diagram.startTextEdit(obj, id || (annotation instanceof TextElement ?\n                                (annotation.id).split(obj.id + '_')[1] : undefined));\n                        }\n                    }\n                }\n            }\n            var arg = {\n                source: cloneBlazorObject(obj) || cloneBlazorObject(this.diagram),\n                position: this.currentPosition, count: evt.detail\n            };\n            if (isBlazor()) {\n                var selector = void 0;\n                if (obj instanceof Node) {\n                    selector = { nodes: [cloneBlazorObject(obj)] };\n                }\n                else if (obj instanceof Connector) {\n                    selector = { connectors: [cloneBlazorObject(obj)] };\n                }\n                else {\n                    selector = cloneBlazorObject(obj);\n                }\n                arg = {\n                    source: obj ? { selector: selector } : { diagram: cloneBlazorObject(this.diagram) },\n                    position: this.currentPosition, count: evt.detail\n                };\n            }\n            this.diagram.triggerEvent(DiagramEvent.doubleClick, arg);\n        }\n    };\n    /**\n     * @private\n     */\n    DiagramEventHandler.prototype.itemClick = function (actualTarget, diagram) {\n        var obj = actualTarget;\n        if (checkParentAsContainer(this.diagram, obj, true)) {\n            return obj;\n        }\n        return null;\n    };\n    /**\n     * @private\n     */\n    DiagramEventHandler.prototype.inputChange = function (evt) {\n        var minWidth = 90;\n        var maxWidth;\n        var minHeight = 12;\n        var fontsize;\n        var textWrapper;\n        var node;\n        var height;\n        var width;\n        var textBounds;\n        var textBoxWidth;\n        var transforms;\n        var scale;\n        var editTextBox = document.getElementById(this.diagram.element.id + '_editBox');\n        var editTextBoxDiv = document.getElementById(this.diagram.element.id + '_editTextBoxDiv');\n        var text = (editTextBox.value);\n        var line = text.split('\\n');\n        node = (this.diagram.selectedItems.nodes[0]) ? this.diagram.selectedItems.nodes[0] : this.diagram.selectedItems.connectors[0];\n        if ((!node && this.tool instanceof TextDrawingTool) || (node && node.shape.type === 'SwimLane')) {\n            node = this.diagram.nameTable[this.diagram.activeLabel.parentId];\n        }\n        if (node && ((node.shape.type !== 'Text' && node.annotations.length > 0) || (node.shape.type === 'Text'))) {\n            textWrapper = this.diagram.getWrapper(node.wrapper, this.diagram.activeLabel.id);\n            maxWidth = node.wrapper.bounds.width < textWrapper.bounds.width ? node.wrapper.bounds.width : textWrapper.bounds.width;\n            maxWidth = maxWidth > minWidth ? maxWidth : minWidth;\n            textBounds = measureHtmlText(textWrapper.style, text, undefined, undefined, maxWidth);\n            fontsize = Number((editTextBox.style.fontSize).split('px')[0]);\n            if (line.length > 1 && line[line.length - 1] === '') {\n                textBounds.height = textBounds.height + fontsize;\n            }\n            transforms = this.diagram.scroller.transform;\n            scale = canZoomTextEdit(this.diagram) ? transforms.scale : 1;\n            width = textBounds.width;\n            width = ((minWidth > width) ? minWidth : width) * scale;\n            height = ((minHeight > textBounds.height) ? minHeight : textBounds.height) * scale;\n            if (!(node instanceof Connector && node.type === 'Bezier')) {\n                editTextBoxDiv.style.left = ((((textWrapper.bounds.center.x + transforms.tx) * transforms.scale) - width / 2) - 2.5) + 'px';\n                editTextBoxDiv.style.top = ((((textWrapper.bounds.center.y + transforms.ty) * transforms.scale) - height / 2) - 3) + 'px';\n            }\n            editTextBoxDiv.style.width = width + 'px';\n            editTextBoxDiv.style.height = height + 'px';\n            editTextBox.style.minHeight = minHeight + 'px';\n            editTextBox.style.minWidth = minWidth + 'px';\n            editTextBox.style.width = width + 'px';\n            editTextBox.style.height = height + 'px';\n        }\n    };\n    /**\n     * @private\n     */\n    DiagramEventHandler.prototype.isAddTextNode = function (node, focusOut) {\n        if (this.tool instanceof TextDrawingTool || focusOut) {\n            this.tool = null;\n            if (node && (!(canContinuousDraw(this.diagram)))) {\n                this.diagram.drawingObject = undefined;\n                this.diagram.currentDrawingObject = undefined;\n            }\n            if (getObjectFromCollection(this.diagram.nodes, node.id) ||\n                getObjectFromCollection(this.diagram.connectors, node.id) ||\n                (this.diagram.bpmnModule && this.diagram.bpmnModule.textAnnotationConnectors.indexOf(node) > -1)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    };\n    DiagramEventHandler.prototype.checkEditBoxAsTarget = function (evt) {\n        if ((evt.target && evt.target.id === this.diagram.element.id + '_editBox')) {\n            return true;\n        }\n        return false;\n    };\n    DiagramEventHandler.prototype.getMouseEventArgs = function (position, args, source, padding) {\n        args.position = position;\n        var obj;\n        var objects;\n        if (!source) {\n            if (this.action === 'Drag' || this.action === 'ConnectorSourceEnd' || this.action === 'SegmentEnd' ||\n                this.action === 'OrthoThumb' || this.action === 'BezierSourceThumb' || this.action === 'BezierTargetThumb' ||\n                this.action === 'ConnectorTargetEnd' || this.action.indexOf('Rotate') !== -1 || this.action.indexOf('Resize') !== -1) {\n                obj = this.diagram.selectedItems;\n                if (!this.diagram.currentSymbol && this.action === 'Drag' && obj && this.diagram.selectedItems.nodes.length > 0 &&\n                    this.diagram.selectedItems.nodes[0].shape.type === 'SwimLane') {\n                    objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n                    obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n                }\n            }\n            else {\n                objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n                obj = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n            }\n        }\n        else {\n            objects = this.diagram.findObjectsUnderMouse(this.currentPosition, source);\n            obj = this.diagram.findTargetObjectUnderMouse(objects, this.action, this.inAction, args.position, source);\n        }\n        if (obj && obj.isHeader) {\n            obj = this.diagram.nameTable[obj.parentId];\n            this.eventArgs.actualObject = obj;\n        }\n        var wrapper;\n        if (obj) {\n            wrapper = this.diagram.findElementUnderMouse(obj, this.currentPosition, padding);\n            var currentConnector = void 0;\n            var nearNode = void 0;\n            var i = void 0;\n            if ((wrapper && obj.ports && obj.ports.length && !checkPort(obj, wrapper) || !wrapper ||\n                !obj) && objects && objects.length && (source instanceof Selector)) {\n                currentConnector = source.connectors[0];\n                for (i = objects.length - 1; i >= 0; i--) {\n                    nearNode = objects[i];\n                    if ((nearNode instanceof Node) && currentConnector && currentConnector.connectionPadding) {\n                        obj = nearNode;\n                        wrapper = this.diagram.findElementUnderMouse(obj, this.currentPosition, padding);\n                        if (((currentConnector.constraints & ConnectorConstraints.ConnectToNearByPort) && obj &&\n                            obj.ports && obj.ports.length && checkPort(obj, wrapper))) {\n                            break;\n                        }\n                        if ((nearNode instanceof Node) && currentConnector && currentConnector.connectionPadding\n                            && nearNode.wrapper.outerBounds.containsPoint(this.currentPosition) &&\n                            (currentConnector.constraints & ConnectorConstraints.ConnectToNearByNode) &&\n                            !(currentConnector.constraints & ConnectorConstraints.ConnectToNearByPort)) {\n                            obj = nearNode;\n                            wrapper = this.diagram.findElementUnderMouse(obj, this.currentPosition, 0);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (!source) {\n            args.source = obj;\n            args.sourceWrapper = wrapper;\n        }\n        else {\n            args.target = obj;\n            args.targetWrapper = wrapper;\n        }\n        args.actualObject = this.eventArgs.actualObject;\n        if (args.source instanceof Selector && args.actualObject === undefined &&\n            (args.source.nodes.length > 0 || args.source.connectors.length > 0)) {\n            args.actualObject = args.source.nodes.length > 0 ? this.diagram.nameTable[args.source.nodes[0].id]\n                : this.diagram.nameTable[args.source.connectors[0].id];\n        }\n        args.startTouches = this.touchStartList;\n        args.moveTouches = this.touchMoveList;\n        return args;\n    };\n    /** @private */\n    DiagramEventHandler.prototype.resetTool = function () {\n        this.action = 'Select';\n        this.hoverElement = null;\n        this.hoverNode = null;\n        this.tool = this.diagram.getTool(this.action);\n        this.updateCursor();\n    };\n    /** @private */\n    DiagramEventHandler.prototype.getTool = function (action) {\n        switch (action) {\n            case 'Select':\n                return new SelectTool(this.commandHandler, true);\n            case 'Drag':\n                return new MoveTool(this.commandHandler);\n            case 'Rotate':\n                return new RotateTool(this.commandHandler);\n            case 'LayoutAnimation':\n                return new ExpandTool(this.commandHandler);\n            case 'FixedUserHandle':\n                return new FixedUserHandleTool(this.commandHandler, true);\n            case 'Hyperlink':\n                return new LabelTool(this.commandHandler);\n            case 'ResizeSouthEast':\n            case 'ResizeSouthWest':\n            case 'ResizeNorthEast':\n            case 'ResizeNorthWest':\n            case 'ResizeSouth':\n            case 'ResizeNorth':\n            case 'ResizeWest':\n            case 'ResizeEast':\n                return new ResizeTool(this.commandHandler, action);\n            case 'ConnectorSourceEnd':\n            case 'ConnectorTargetEnd':\n            case 'BezierSourceThumb':\n            case 'BezierTargetThumb':\n                return new ConnectTool(this.commandHandler, action);\n            case 'SegmentEnd':\n            case 'OrthoThumb':\n                return new ConnectorEditing(this.commandHandler, action);\n            case 'Draw':\n                var shape = 'shape';\n                var basicShape = 'basicShape';\n                var type = findObjectType(this.diagram.drawingObject);\n                if (type === 'Node' && this.diagram.drawingObject.shape.type === 'Text') {\n                    return new TextDrawingTool(this.commandHandler);\n                }\n                else if (type === 'Node' && (this.diagram.drawingObject.shape[shape] === 'Polygon' ||\n                    (isBlazor() && this.diagram.drawingObject.shape[basicShape] === 'Polygon')) &&\n                    !(this.diagram.drawingObject.shape.points)) {\n                    return new PolygonDrawingTool(this.commandHandler);\n                }\n                else if (type === 'Node' ||\n                    (type === 'Node' && this.diagram.drawingObject.shape[shape] === 'Polygon' &&\n                        (this.diagram.drawingObject.shape.points))) {\n                    return new NodeDrawingTool(this.commandHandler, this.diagram.drawingObject);\n                }\n                else if (type === 'Connector' && this.diagram.drawingObject.type === 'Polyline') {\n                    return new PolyLineDrawingTool(this.commandHandler);\n                }\n                else if (type === 'Connector') {\n                    return new ConnectorDrawingTool(this.commandHandler, 'ConnectorSourceEnd', this.diagram.drawingObject);\n                }\n                break;\n            case 'Pan':\n                return new ZoomPanTool(this.commandHandler, false);\n            case 'PinchZoom':\n                return new ZoomPanTool(this.commandHandler, true);\n            case 'PortDrag':\n                return new MoveTool(this.commandHandler, 'Port');\n            case 'PortDraw':\n                return new ConnectorDrawingTool(this.commandHandler, 'ConnectorSourceEnd', this.diagram.drawingObject);\n            case 'LabelSelect':\n                return new SelectTool(this.commandHandler, true, 'LabelSelect');\n            case 'LabelDrag':\n                return new LabelDragTool(this.commandHandler);\n            case 'LabelResizeSouthEast':\n            case 'LabelResizeSouthWest':\n            case 'LabelResizeNorthEast':\n            case 'LabelResizeNorthWest':\n            case 'LabelResizeSouth':\n            case 'LabelResizeNorth':\n            case 'LabelResizeWest':\n            case 'LabelResizeEast':\n                return new LabelResizeTool(this.commandHandler, action);\n            case 'LabelRotate':\n                return new LabelRotateTool(this.commandHandler);\n            //for coverage\n            // case 'Custom':\n            //     return this.diagram.getTool(action);\n        }\n        return null;\n    };\n    /** @private */\n    DiagramEventHandler.prototype.getCursor = function (action) {\n        var object = (this.diagram.selectedItems.annotation) ?\n            this.diagram.selectedItems.wrapper.children[0] : this.diagram.selectedItems;\n        var rotateAngle = (this.diagram.selectedItems.annotation) ?\n            (object.rotateAngle + object.parentTransform) : object.rotateAngle;\n        return getCursor(action, rotateAngle);\n    };\n    //start region - interface betweend diagram and interaction\n    /** @private */\n    DiagramEventHandler.prototype.findElementUnderMouse = function (obj, position, padding) {\n        return this.objectFinder.findElementUnderSelectedItem(obj, position, padding);\n    };\n    /** @private */\n    DiagramEventHandler.prototype.findObjectsUnderMouse = function (position, source) {\n        return this.objectFinder.findObjectsUnderMouse(position, this.diagram, this.eventArgs, source);\n    };\n    /** @private */\n    DiagramEventHandler.prototype.findObjectUnderMouse = function (objects, action, inAction) {\n        return this.objectFinder.findObjectUnderMouse(this.diagram, objects, action, inAction, this.eventArgs, this.currentPosition);\n    };\n    /** @private */\n    DiagramEventHandler.prototype.findTargetUnderMouse = function (objects, action, inAction, position, source) {\n        return this.objectFinder.findObjectUnderMouse(this.diagram, objects, action, inAction, this.eventArgs, position, source);\n    };\n    /** @private */\n    DiagramEventHandler.prototype.findActionToBeDone = function (obj, wrapper, position, target) {\n        return findToolToActivate(obj, wrapper, this.currentPosition, this.diagram, this.touchStartList, this.touchMoveList, target);\n    };\n    DiagramEventHandler.prototype.updateContainerBounds = function (isAfterMouseUp) {\n        var isGroupAction = false;\n        if (this.diagram.selectedObject.helperObject && this.diagram.selectedObject.actualObject instanceof Node) {\n            var boundsUpdate = (this.tool instanceof ResizeTool) ? true : false;\n            var obj = this.diagram.selectedObject.actualObject;\n            var parentNode = this.diagram.nameTable[obj.parentId];\n            if (isAfterMouseUp) {\n                removeChildInContainer(this.diagram, obj, this.currentPosition, boundsUpdate);\n            }\n            else {\n                if (!parentNode || (parentNode && parentNode.shape.type !== 'SwimLane')) {\n                    this.diagram.updateDiagramObject(obj);\n                }\n                isGroupAction = updateCanvasBounds(this.diagram, obj, this.currentPosition, boundsUpdate);\n                this.diagram.updateSelector();\n                if (obj.isLane || obj.isPhase) {\n                    this.diagram.clearSelection();\n                    this.commandHandler.selectObjects([obj]);\n                }\n            }\n        }\n        return isGroupAction;\n    };\n    // tslint:disable-next-line:max-func-body-length\n    DiagramEventHandler.prototype.updateContainerProperties = function () {\n        var helperObject;\n        var isChangeProperties = false;\n        var hasStack;\n        var connectors;\n        var hasGroup = false;\n        var obj;\n        var history = { hasStack: false, isPreventHistory: false };\n        if (this.diagram.selectedObject.helperObject) {\n            var objects = this.diagram.findObjectsUnderMouse(this.currentPosition);\n            var target = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n            helperObject = this.diagram.selectedObject.helperObject;\n            obj = this.diagram.selectedObject.actualObject;\n            if (obj instanceof Node) {\n                if (obj.shape.type === 'SwimLane') {\n                    connectors = getConnectors(this.diagram, obj.wrapper.children[0], 0, true);\n                }\n                if (obj.shape.type !== 'SwimLane' && obj.parentId &&\n                    this.diagram.getObject(obj.parentId).shape.type === 'SwimLane') {\n                    if (target instanceof Node && this.diagram.getObject(target.parentId) &&\n                        this.diagram.getObject(target.parentId).shape.type !== 'SwimLane') {\n                        target = this.diagram.getObject(target.parentId);\n                    }\n                }\n                if (this.currentAction === 'Drag' && obj.container && obj.container.type === 'Canvas' && obj.parentId &&\n                    this.diagram.getObject(obj.parentId).shape.type === 'SwimLane' && target && target !== obj &&\n                    target.container && target.container.type === 'Canvas' && target.isLane &&\n                    obj.isLane && target.parentId === obj.parentId) {\n                    laneInterChanged(this.diagram, obj, target, this.currentPosition);\n                    history.isPreventHistory = true;\n                }\n                else {\n                    var parentNode = this.diagram.nameTable[obj.parentId];\n                    if (!parentNode || (parentNode && parentNode.shape.type !== 'SwimLane')) {\n                        if (parentNode && parentNode.isLane && (obj.constraints & NodeConstraints.AllowMovingOutsideLane)) {\n                            var swimlane = this.diagram.getObject(parentNode.parentId);\n                            var laneId = swimlane.id + swimlane.shape.lanes[0].id + '0';\n                            var firstlane = this.diagram.getObject(laneId);\n                            var x = firstlane.wrapper.bounds.x;\n                            var y = firstlane.wrapper.bounds.y;\n                            var width = swimlane.wrapper.bounds.bottomRight.x - x;\n                            var height = swimlane.wrapper.bounds.bottomRight.y - y;\n                            var swimlaneBounds = new Rect(x, y, width, height);\n                            if (swimlaneBounds.containsPoint(this.currentPosition)) {\n                                obj.offsetX = helperObject.offsetX;\n                                obj.offsetY = helperObject.offsetY;\n                                obj.width = helperObject.width;\n                                obj.height = helperObject.height;\n                                obj.rotateAngle = helperObject.rotateAngle;\n                            }\n                        }\n                        else {\n                            obj.offsetX = helperObject.offsetX;\n                            obj.offsetY = helperObject.offsetY;\n                            if (obj && obj.shape && obj.shape.type !== 'UmlClassifier') {\n                                if (obj.shape.type !== 'Bpmn' ||\n                                    (obj.shape.type === 'Bpmn' && obj.shape.shape !== 'TextAnnotation')) {\n                                    obj.width = helperObject.width;\n                                    obj.height = helperObject.height;\n                                }\n                            }\n                            obj.rotateAngle = helperObject.rotateAngle;\n                        }\n                    }\n                    var undoElement = void 0;\n                    if (parentNode && parentNode.container && parentNode.container.type === 'Stack') {\n                        this.diagram.startGroupAction();\n                        hasGroup = true;\n                    }\n                    if (!target && parentNode && parentNode.container && parentNode.container.type === 'Stack' && this.action === 'Drag') {\n                        var index = parentNode.wrapper.children.indexOf(obj.wrapper);\n                        undoElement = { targetIndex: undefined, target: undefined, sourceIndex: index, source: clone(obj) };\n                        if (index > -1) {\n                            var children = parentNode.children;\n                            children.splice(children.indexOf(obj.id), 1);\n                            this.diagram.nameTable[obj.id].parentId = '';\n                            hasStack = true;\n                            parentNode.wrapper.children.splice(index, 1);\n                        }\n                    }\n                    moveChildInStack(obj, target, this.diagram, this.action);\n                    parentNode = checkParentAsContainer(this.diagram, obj) ? this.diagram.nameTable[obj.parentId] :\n                        (this.diagram.nameTable[obj.parentId] || obj);\n                    if (parentNode && parentNode.container && parentNode.container.type === 'Canvas') {\n                        parentNode.wrapper.maxWidth = parentNode.maxWidth = parentNode.wrapper.actualSize.width;\n                        parentNode.wrapper.maxHeight = parentNode.maxHeight = parentNode.wrapper.actualSize.height;\n                        isChangeProperties = true;\n                    }\n                    if (checkParentAsContainer(this.diagram, obj, true) && parentNode && parentNode.container.type === 'Canvas') {\n                        checkChildNodeInContainer(this.diagram, obj);\n                    }\n                    else {\n                        history = this.updateContainerPropertiesExtend(parentNode, obj, connectors, helperObject, history);\n                    }\n                    if ((this.diagram.lineRoutingModule && (this.diagram.constraints & DiagramConstraints.LineRouting))\n                        && (!checkParentAsContainer(this.diagram, obj, true))) {\n                        if (obj.children) {\n                            this.diagram.realActions |= RealAction.EnableGroupAction;\n                        }\n                        this.diagram.nodePropertyChange(obj, {}, {\n                            width: obj.width, height: obj.height,\n                            offsetX: obj.offsetX, offsetY: obj.offsetY\n                        });\n                        if (obj.children) {\n                            this.diagram.realActions &= ~RealAction.EnableGroupAction;\n                        }\n                    }\n                    if (obj.shape.lanes) {\n                        this.updateLaneChildNode(obj);\n                    }\n                    if (isChangeProperties) {\n                        parentNode.maxWidth = parentNode.wrapper.maxWidth = undefined;\n                        parentNode.maxHeight = parentNode.wrapper.maxHeight = undefined;\n                    }\n                    if (hasStack) {\n                        this.diagram.nodePropertyChange(parentNode, {}, {\n                            offsetX: parentNode.offsetX, offsetY: parentNode.offsetY, width: parentNode.width, height: parentNode.height,\n                            rotateAngle: parentNode.rotateAngle\n                        });\n                        var entry = {\n                            redoObject: { sourceIndex: undefined, source: undoElement.source },\n                            type: 'StackChildPositionChanged', undoObject: undoElement, category: 'Internal'\n                        };\n                        if (!(this.diagram.diagramActions & DiagramAction.UndoRedo)) {\n                            this.diagram.addHistoryEntry(entry);\n                        }\n                    }\n                    if (obj && obj.container && (obj.container.type === 'Stack' ||\n                        (obj.container.type === 'Canvas' && obj.parentId === ''))) {\n                        if (obj && obj.shape && obj.shape.type === 'UmlClassifier') {\n                            obj.wrapper.measureChildren = true;\n                        }\n                        this.diagram.nodePropertyChange(obj, {}, {\n                            offsetX: obj.offsetX, offsetY: obj.offsetY, width: obj.width, height: obj.height, rotateAngle: obj.rotateAngle\n                        });\n                        if (obj && obj.shape && obj.shape.type === 'UmlClassifier') {\n                            obj.wrapper.measureChildren = false;\n                        }\n                    }\n                }\n                updateConnectorsProperties(connectors, this.diagram);\n                history.hasStack = hasGroup;\n            }\n        }\n        if (obj && (obj.isPhase || obj.isLane ||\n            (obj.shape && obj.shape.type === 'SwimLane'))) {\n            this.diagram.updateDiagramElementQuad();\n        }\n        return history;\n    };\n    DiagramEventHandler.prototype.updateLaneChildNode = function (obj) {\n        for (var i = 0; i < (obj.shape.lanes.length); i++) {\n            if (obj.shape.lanes[i].children && obj.shape.lanes[i].children.length > 0) {\n                for (var j = 0; j < obj.shape.lanes[i].children.length; j++) {\n                    var id = obj.shape.lanes[i].children[j].id;\n                    var childNode = this.diagram.nameTable[id];\n                    childNode.offsetX = childNode.wrapper.offsetX;\n                    childNode.offsetY = childNode.wrapper.offsetY;\n                }\n            }\n        }\n    };\n    DiagramEventHandler.prototype.updateContainerPropertiesExtend = function (parentNode, obj, connectors, helperObject, history) {\n        if (this.currentAction === 'ResizeEast' || this.currentAction === 'ResizeSouth' || obj.shape.type === 'SwimLane') {\n            var undoObj = cloneObject(obj);\n            var isUpdateRow = false;\n            if (parentNode && parentNode.container && parentNode.container.type === 'Grid') {\n                var shape = parentNode.shape.type === 'SwimLane' ? true : false;\n                var container = (shape ? parentNode.wrapper.children[0] : parentNode.wrapper);\n                var padding = shape ? parentNode.shape.padding : undefined;\n                var x = parentNode.wrapper.bounds.x;\n                var y = parentNode.wrapper.bounds.y;\n                if (obj.columnIndex !== undefined && (parentNode.container.orientation === 'Horizontal' &&\n                    ((shape && obj.isPhase) || (!shape && obj.rowIndex === 1))) ||\n                    (parentNode.container.orientation === 'Vertical' &&\n                        ((!shape && obj.rowIndex > 0 && obj.columnIndex > 0) || (shape && obj.isLane)))) {\n                    if (parentNode.container.orientation === 'Horizontal' && obj.isPhase && obj.wrapper.width > obj.maxWidth) {\n                        obj.maxWidth = obj.wrapper.width;\n                        obj.wrapper.maxWidth = obj.wrapper.width;\n                    }\n                    updateSwimLaneObject(this.diagram, obj, parentNode, helperObject);\n                    container.updateColumnWidth(obj.columnIndex, helperObject.width, true, padding);\n                    if (obj.isPhase) {\n                        var id = parentNode.shape.phases[obj.columnIndex].header.id;\n                        var node = this.diagram.nameTable[id];\n                        if (node.maxWidth < helperObject.width) {\n                            node.maxWidth = helperObject.width;\n                            node.wrapper.maxWidth = helperObject.width;\n                        }\n                    }\n                    if (parentNode.shape.type === 'SwimLane') {\n                        parentNode.width = (parentNode.width) ? container.width : parentNode.width;\n                        updateHeaderMaxWidth(this.diagram, parentNode);\n                        parentNode.wrapper.width = parentNode.width;\n                        connectors = getConnectors(this.diagram, container, obj.rowIndex, false);\n                    }\n                }\n                else if (obj.rowIndex !== undefined) {\n                    isUpdateRow = true;\n                    updateSwimLaneObject(this.diagram, obj, parentNode, helperObject);\n                    container.updateRowHeight(obj.rowIndex, helperObject.height, true, padding);\n                    if (parentNode.shape.type === 'SwimLane') {\n                        parentNode.height = (parentNode.height) ? container.height : parentNode.height;\n                        parentNode.wrapper.height = parentNode.height;\n                        connectors = getConnectors(this.diagram, container, obj.rowIndex, true);\n                    }\n                }\n                if (parentNode.shape.type === 'SwimLane') {\n                    history.isPreventHistory = true;\n                }\n                this.diagram.nodePropertyChange(parentNode, {}, {\n                    offsetX: parentNode.offsetX, offsetY: parentNode.offsetY,\n                    rotateAngle: parentNode.rotateAngle\n                });\n                this.diagram.drag(parentNode, x - parentNode.wrapper.bounds.x, y - parentNode.wrapper.bounds.y);\n            }\n            else {\n                if (obj && obj.shape && obj.shape.type === 'UmlClassifier') {\n                    obj.wrapper.measureChildren = true;\n                }\n                this.diagram.nodePropertyChange(obj, {}, {\n                    offsetX: obj.offsetX, offsetY: obj.offsetY, width: obj.width, height: obj.height, rotateAngle: obj.rotateAngle\n                });\n                obj.wrapper.measureChildren = false;\n            }\n            obj.wrapper.measure(new Size(obj.wrapper.width, obj.wrapper.height));\n            obj.wrapper.arrange(obj.wrapper.desiredSize);\n            if (this.currentAction === 'ResizeEast' || this.currentAction === 'ResizeSouth') {\n                var redoObject = cloneObject(obj);\n                var entry = {\n                    category: 'Internal',\n                    type: (isUpdateRow) ? 'RowHeightChanged' : 'ColumnWidthChanged',\n                    undoObject: undoObj, redoObject: redoObject\n                };\n                this.diagram.addHistoryEntry(entry);\n            }\n        }\n        updateConnectorsProperties(connectors, this.diagram);\n        return history;\n    };\n    DiagramEventHandler.prototype.addUmlNode = function () {\n        var node = this.diagram.selectedItems.nodes[0];\n        var objects = this.diagram.findObjectsUnderMouse({ x: this.currentPosition.x + 20, y: this.currentPosition.y });\n        var target = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n        if (!target) {\n            objects = this.diagram.findObjectsUnderMouse({ x: this.currentPosition.x - 20, y: this.currentPosition.y });\n            target = this.diagram.findObjectUnderMouse(objects, this.action, this.inAction);\n        }\n        if (node && node.container && node.container.type === 'Stack' && target && target.parentId\n            && target.parentId === node.id) {\n            var innerNode = target;\n            var adornerSvg = getAdornerLayerSvg(this.diagram.element.id);\n            var highlighter = adornerSvg.getElementById(adornerSvg.id + '_stack_highlighter');\n            if (highlighter) {\n                var index = node.wrapper.children.indexOf(target.wrapper) + 1;\n                this.diagram.enableServerDataBinding(false);\n                var temp = new Node(this.diagram, 'nodes', {\n                    style: {\n                        fill: node.style.fill,\n                        strokeColor: (node.style.strokeColor === 'black') ? '#ffffff00' : node.style.strokeColor\n                    },\n                    annotations: target.annotations, verticalAlignment: 'Stretch', horizontalAlignment: 'Stretch',\n                    constraints: (NodeConstraints.Default | NodeConstraints.HideThumbs) & ~(NodeConstraints.Rotate | NodeConstraints.Drag | NodeConstraints.Resize),\n                    minHeight: 25\n                }, true);\n                temp.annotations[0].content = ' + Name : Type';\n                var id = innerNode.id.split('_');\n                temp.id = randomId() + temp.id;\n                temp.parentId = node.id;\n                temp.zIndex = -1;\n                temp.umlIndex = index;\n                this.diagram.startGroupAction();\n                var redoElement = {\n                    sourceIndex: node.wrapper.children.indexOf(temp.wrapper), source: temp,\n                    target: undefined, targetIndex: undefined\n                };\n                this.diagram.enableServerDataBinding(true);\n                this.diagram.add(temp);\n                this.diagram.updateConnectorEdges(node);\n                this.diagram.clearSelection();\n                this.diagram.select([this.diagram.nameTable[temp.id]]);\n                this.diagram.endGroupAction();\n                this.diagram.startTextEdit();\n            }\n        }\n    };\n    return DiagramEventHandler;\n}());\nexport { DiagramEventHandler };\n/** @private */\nvar ObjectFinder = /** @class */ (function () {\n    function ObjectFinder() {\n    }\n    /** @private */\n    ObjectFinder.prototype.findObjectsUnderMouse = function (pt, diagram, eventArgs, source, actions) {\n        // finds the collection of the object that is under the mouse;\n        var actualTarget = [];\n        if (source && source instanceof Selector) {\n            if (source.nodes.length + source.connectors.length === 1) {\n                source = (source.nodes[0] || source.connectors[0]);\n                if (source.children && source.children.length === 0) {\n                    eventArgs.actualObject = source;\n                }\n            }\n        }\n        var container;\n        var bounds;\n        var child;\n        var matrix;\n        var endPadding = (source && (source instanceof Connector) &&\n            ((source.constraints & ConnectorConstraints.ConnectToNearByNode) ||\n                (source.constraints & ConnectorConstraints.ConnectToNearByPort)) && source.connectionPadding) || 0;\n        var objArray = diagram.spatialSearch.findObjects(new Rect(pt.x - 50 - endPadding, pt.y - 50 - endPadding, 100 + endPadding, 100 + endPadding));\n        var layerObjTable = {};\n        var layerTarger;\n        for (var _i = 0, objArray_1 = objArray; _i < objArray_1.length; _i++) {\n            var obj = objArray_1[_i];\n            var point = pt;\n            bounds = obj.wrapper.outerBounds;\n            var pointInBounds = (obj.rotateAngle) ? false : bounds.containsPoint(point, endPadding);\n            if ((obj !== source || diagram.currentDrawingObject instanceof Connector) &&\n                (obj instanceof Connector) ? obj !== diagram.currentDrawingObject : true && obj.wrapper.visible) {\n                var layer = diagram.commandHandler.getObjectLayer(obj.id);\n                if (layer && !layer.lock && layer.visible) {\n                    layerTarger = layerObjTable[layer.zIndex] = layerObjTable[layer.zIndex] || [];\n                    if (obj.rotateAngle) {\n                        container = obj.wrapper;\n                        bounds = cornersPointsBeforeRotation(container);\n                        for (var _a = 0, _b = container.children; _a < _b.length; _a++) {\n                            child = _b[_a];\n                            matrix = identityMatrix();\n                            rotateMatrix(matrix, -(child.rotateAngle + child.parentTransform), child.offsetX, child.offsetY);\n                            point = transformPointByMatrix(matrix, pt);\n                            if (cornersPointsBeforeRotation(child).containsPoint(point, endPadding)) {\n                                pointInBounds = true;\n                            }\n                        }\n                    }\n                    if (!source || (isSelected(diagram, obj) === false)) {\n                        if (canEnablePointerEvents(obj, diagram)) {\n                            if ((obj instanceof Connector) ? isPointOverConnector(obj, pt) : pointInBounds) {\n                                var padding = (obj instanceof Connector) ? obj.hitPadding || 0 : 0; //let element: DiagramElement;\n                                var element = this.findElementUnderMouse(obj, pt, endPadding || padding);\n                                if (element && obj.id !== 'helper') {\n                                    insertObject(obj, 'zIndex', layerTarger);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        for (var _c = 0, _d = diagram.layers; _c < _d.length; _c++) {\n            var layer = _d[_c];\n            actualTarget = actualTarget.concat(layerObjTable[layer.zIndex] || []);\n            for (var _e = 0, actualTarget_1 = actualTarget; _e < actualTarget_1.length; _e++) {\n                var obj = actualTarget_1[_e];\n                var eventHandler = 'eventHandler';\n                if (obj.shape.type === 'Bpmn' && obj.processId && (!(diagram[eventHandler].tool instanceof MoveTool) ||\n                    (diagram[eventHandler].tool instanceof MoveTool) && canAllowDrop(obj))) {\n                    var index = actualTarget.indexOf(diagram.nameTable[obj.processId]);\n                    if (index > -1) {\n                        actualTarget.splice(index, 1);\n                    }\n                }\n                if (obj.shape.type === 'UmlClassifier' && obj.container && obj.container.type === 'Stack') {\n                    var index = actualTarget.indexOf(diagram.nameTable[diagram.nameTable[obj.id].wrapper.children[0].id]);\n                    if (index > -1) {\n                        actualTarget.splice(index, 1);\n                    }\n                }\n            }\n        }\n        for (var i = 0; i < actualTarget.length; i++) {\n            var parentObj = diagram.nameTable[actualTarget[i].parentId];\n            if (parentObj) {\n                var portElement = this.findElementUnderMouse(parentObj, pt);\n                for (var j = 0; j < parentObj.ports.length; j++) {\n                    if (portElement.id.match('_' + parentObj.ports[j].id + '$')) {\n                        var port = parentObj.ports[j];\n                        if (canDrag(port, diagram) || canDraw(port, diagram)) {\n                            return actualTarget;\n                        }\n                    }\n                }\n            }\n            while (parentObj) {\n                var index = actualTarget.indexOf(parentObj);\n                if (index !== -1) {\n                    actualTarget.splice(index, 1);\n                }\n                else {\n                    break;\n                }\n                parentObj = diagram.nameTable[parentObj.parentId];\n            }\n        }\n        this.checkSwimlane(actualTarget, diagram);\n        if (eventArgs && !eventArgs.source) {\n            for (var i = 0; i < actualTarget.length; i++) {\n                var parentNode = diagram.nameTable[actualTarget[i].parentId];\n                if (parentNode && parentNode.shape.type === 'SwimLane') {\n                    for (var j = 0; j < actualTarget.length; j++) {\n                        var connector = actualTarget[j];\n                        if (connector instanceof Connector) {\n                            actualTarget.splice(i, 1);\n                        }\n                    }\n                }\n            }\n        }\n        return actualTarget;\n    };\n    /** @private */\n    ObjectFinder.prototype.checkSwimlane = function (actualTarget, diagram) {\n        var isNode;\n        for (var m = 0; m < actualTarget.length; m++) {\n            var obj = actualTarget[m];\n            var parentNode = void 0;\n            var node = void 0;\n            if (obj instanceof Node) {\n                parentNode = actualTarget[m].parentId;\n                node = obj;\n            }\n            if (parentNode === '') {\n                if (node.shape.type !== 'SwimLane') {\n                    isNode = true;\n                }\n                else {\n                    isNode = false;\n                }\n            }\n            var parent_1 = diagram.nameTable[parentNode];\n            if (parent_1 && parent_1.isLane && diagram.nameTable[parent_1.parentId].zIndex > obj.zIndex) {\n                actualTarget[m] = parent_1;\n            }\n            if (m > 0 && isNode && node && (node.isLane || node.isPhase || node.isHeader)) {\n                if (actualTarget[m].zIndex < actualTarget[m - 1].zIndex) {\n                    var swap = actualTarget[m];\n                    actualTarget[m] = actualTarget[m - 1];\n                    actualTarget[m - 1] = swap;\n                }\n            }\n        }\n        if (actualTarget.length >= 2) {\n            var parent_2 = '';\n            for (var i = actualTarget.length - 1; i >= 0; i--) {\n                if (actualTarget[i].parentId) {\n                    var parent1 = findParentInSwimlane(actualTarget[i], diagram, parent_2);\n                    var parent2 = findParentInSwimlane(actualTarget[i - 1], diagram, parent_2);\n                    var parentNode1 = diagram.nameTable[parent1];\n                    var parentNode2 = diagram.nameTable[parent2];\n                    if (parentNode2 && parent1 !== parent2 && parentNode1.zIndex < parentNode2.zIndex) {\n                        actualTarget.splice(i, 1);\n                    }\n                }\n            }\n        }\n    };\n    /** @private */\n    ObjectFinder.prototype.isTarget = function (actualTarget, diagram, action) {\n        var connector = diagram.selectedItems.connectors[0];\n        var node;\n        node = action === 'ConnectorSourceEnd' ? diagram.nameTable[connector.targetID] :\n            node = diagram.nameTable[connector.sourceID];\n        if (node && (!node.processId && !actualTarget.processId || node.processId !== actualTarget.processId)) {\n            if (node.processId !== actualTarget.processId) {\n                actualTarget = null;\n            }\n            if (actualTarget && actualTarget.parentId &&\n                diagram.nameTable[actualTarget.parentId].shape.type === 'UmlClassifier') {\n                actualTarget = diagram.nameTable[actualTarget.parentId];\n            }\n        }\n        if (action === 'ConnectorSourceEnd' && connector.targetID) {\n            var targetNode = diagram.nameTable[connector.targetID];\n            if (targetNode && targetNode.shape && (targetNode.shape.shape === 'TextAnnotation')) {\n                var id = connector.id.split('_');\n                if (((targetNode.shape.type === 'Bpmn') && actualTarget.shape.type !== 'Bpmn') || (id[0] === actualTarget.id) ||\n                    actualTarget.shape.shape === 'TextAnnotation') {\n                    actualTarget = null;\n                }\n                if (actualTarget.parentId &&\n                    diagram.nameTable[actualTarget.parentId].shape.type === 'UmlClassifier') {\n                    actualTarget = diagram.nameTable[actualTarget.parentId];\n                }\n            }\n        }\n        return actualTarget;\n    };\n    /* tslint:disable */\n    /** @private */\n    ObjectFinder.prototype.findObjectUnderMouse = function (diagram, objects, action, inAction, eventArg, position, source) {\n        //we will get the wrapper object here\n        //we have to choose the object to be interacted with from the given wrapper\n        //Find the object that is under mouse\n        var eventHandler = 'eventHandler';\n        var endPoint = 'endPoint';\n        var inPort;\n        var outPort;\n        var actualTarget = null;\n        if (objects.length !== 0) {\n            if (source && source instanceof Selector) {\n                if (source.nodes.length + source.connectors.length === 1) {\n                    source = (source.nodes[0] || source.connectors[0]);\n                }\n            }\n            if ((action === 'ConnectorSourceEnd' && source || action === 'PortDraw') ||\n                ((canDrawOnce(diagram) || canContinuousDraw(diagram)) && getObjectType(diagram.drawingObject) === Connector)) {\n                var connector = diagram.selectedItems.connectors[0];\n                for (var i = objects.length - 1; i >= 0; i--) {\n                    outPort = getInOutConnectPorts(objects[i], false);\n                    inPort = getInOutConnectPorts(objects[i], true);\n                    var tool = diagram[eventHandler].tool;\n                    var portElement = this.findTargetElement(objects[i].wrapper, position, undefined);\n                    if (action === 'Draw' && portElement && (objects[i] instanceof Node) && !checkPort(objects[i], portElement)) {\n                        if (((tool && tool[endPoint] === 'ConnectorSourceEnd') && !canOutConnect(objects[i])) ||\n                            ((tool && tool[endPoint] === 'ConnectorTargetEnd') && !canInConnect(objects[i]))) {\n                            return actualTarget;\n                        }\n                    }\n                    // eslint-disable-next-line max-len\n                    if (objects[i] instanceof Node && ((canOutConnect(objects[i]) || (canPortOutConnect(outPort)) || canInConnect(objects[i]) || (canPortInConnect(inPort))) ||\n                        (action === 'PortDraw' && (tool instanceof ConnectTool) && tool[endPoint] === 'ConnectorTargetEnd' &&\n                            (canInConnect(objects[i]) || (canPortInConnect(inPort)))))) {\n                        actualTarget = objects[i];\n                        if (connector) {\n                            actualTarget = this.isTarget(actualTarget, diagram, action);\n                        }\n                        eventArg.actualObject = actualTarget;\n                        return actualTarget;\n                    }\n                }\n            }\n            else if (action === 'ConnectorTargetEnd' && source) {\n                for (var i = objects.length - 1; i >= 0; i--) {\n                    inPort = getInOutConnectPorts(objects[i], true);\n                    if (objects[i] instanceof Node && (canInConnect(objects[i]) || (canPortInConnect(inPort)))) {\n                        actualTarget = objects[i];\n                        actualTarget = this.isTarget(actualTarget, diagram, action);\n                        eventArg.actualObject = actualTarget;\n                        return actualTarget;\n                    }\n                }\n            }\n            else if (source && (action === 'Drag' || (diagram[eventHandler].tool instanceof MoveTool))) {\n                var index = 0;\n                for (var i = 0; i < objects.length; i++) {\n                    var temp = objects[i];\n                    if (source !== temp && (temp instanceof Connector ||\n                        !position || temp.wrapper.bounds.containsPoint(position))) {\n                        if (canAllowDrop(temp)) {\n                            if (!actualTarget) {\n                                actualTarget = temp;\n                                index = actualTarget.zIndex;\n                            }\n                            else {\n                                actualTarget = index >= temp.zIndex ? actualTarget : temp;\n                                index = Math.max(index, temp.zIndex);\n                            }\n                        }\n                    }\n                }\n                if (actualTarget && actualTarget.shape.type === 'Bpmn') {\n                    if (diagram.selectedItems.nodes.length > 0 && diagram.selectedItems.nodes[0].shape.type === 'Bpmn') {\n                        // eslint-disable-next-line no-self-assign\n                        actualTarget = actualTarget;\n                    }\n                    else {\n                        actualTarget = null;\n                    }\n                }\n                if (actualTarget) {\n                    eventArg.actualObject = actualTarget;\n                }\n                return actualTarget;\n            }\n            else if ((action === 'Select' || action === 'Pan') && diagram[eventHandler].tool) {\n                for (var i = objects.length - 1; i >= 0; i--) {\n                    if (objects[i] instanceof Connector) {\n                        var objj1 = objects[i - 1];\n                        if (objects[i - 1] instanceof Node && objj1.ports) {\n                            var portElement = this.findTargetElement(objj1.wrapper, position, undefined);\n                            if ((portElement && (portElement.id.match('_icon_content_shape$') || portElement.id.match('_icon_content_rect$')))) {\n                                return objj1;\n                            }\n                            for (var j = 0; j < objj1.ports.length; j++) {\n                                if (portElement && portElement.id.match('_' + objj1.ports[j].id + '$')) {\n                                    if (canDraw(objj1.ports[j], diagram)) {\n                                        return objj1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                actualTarget = objects[objects.length - 1];\n                eventArg.actualObject = actualTarget;\n                if (!diagram[eventHandler].itemClick(actualTarget, true)) {\n                    if (actualTarget.parentId) {\n                        var obj = actualTarget;\n                        var selected = isSelected(diagram, obj);\n                        while (obj) {\n                            if (isSelected(diagram, obj) && !selected) {\n                                break;\n                            }\n                            actualTarget = obj;\n                            obj = diagram.nameTable[obj.parentId];\n                        }\n                    }\n                }\n            }\n            else if (action === 'Pan' || action === 'LayoutAnimation') {\n                for (var i = objects.length - 1; i >= 0; i--) {\n                    if (objects[i] instanceof Node || objects[i] instanceof Connector) {\n                        var portElement = this.findTargetElement(objects[i].wrapper, position, undefined);\n                        if ((action === 'Pan') || ((portElement && (portElement.id.match('_icon_content_shape$') || portElement.id.match('_icon_content_rect$'))))) {\n                            return objects[i];\n                        }\n                    }\n                }\n            }\n            else {\n                actualTarget = objects[objects.length - 1];\n                if (eventArg && actualTarget) {\n                    eventArg.actualObject = actualTarget;\n                }\n            }\n        }\n        return actualTarget;\n    };\n    /* tslint:enable */\n    /** @private */\n    ObjectFinder.prototype.findElementUnderSelectedItem = function (obj, position, padding) {\n        //rewrite this for multiple selection\n        if (obj instanceof Selector) {\n            if (obj.nodes.length === 1 && (!obj.connectors || !obj.connectors.length)) {\n                return this.findElementUnderMouse(obj.nodes[0], position);\n            }\n            else if ((!obj.nodes || obj.nodes.length) && obj.connectors.length === 1) {\n                return this.findElementUnderMouse(obj.connectors[0], position);\n            }\n        }\n        else {\n            return this.findElementUnderMouse(obj, position, padding);\n        }\n        return null;\n    };\n    ObjectFinder.prototype.findElementUnderMouse = function (obj, position, padding) {\n        return this.findTargetElement(obj.wrapper, position, padding);\n    };\n    /** @private */\n    ObjectFinder.prototype.findTargetElement = function (container, position, padding) {\n        for (var i = container.children.length - 1; i >= 0; i--) {\n            var element = container.children[i];\n            if (element && element.outerBounds.containsPoint(position, padding || 0)) {\n                if (element instanceof Container) {\n                    var target = this.findTargetElement(element, position);\n                    if (target) {\n                        return target;\n                    }\n                }\n                if (element.bounds.containsPoint(position, padding || 0)) {\n                    return element;\n                }\n            }\n        }\n        if (container.bounds.containsPoint(position, padding) && container.style.fill !== 'none') {\n            return container;\n        }\n        return null;\n    };\n    return ObjectFinder;\n}());\n"]},"metadata":{},"sourceType":"module"}