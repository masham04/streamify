{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable jsdoc/require-returns */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\nimport { DiagramElement } from '../elements/diagram-element';\nimport { ElementAction } from '../../enum/enum';\nimport { Thickness } from '../appearance';\nimport { Size } from '../../primitives/size';\nimport { Rect } from '../../primitives/rect';\nimport { rotatePoint, getOffset } from '../../utility/base-util';\n/**\n * Container module is used to group related objects\n */\n\nvar Container =\n/** @class */\nfunction (_super) {\n  __extends(Container, _super);\n\n  function Container() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Gets/Sets the space between the container and its immediate children\n     */\n\n\n    _this.padding = new Thickness(0, 0, 0, 0); //private members\n\n    _this.desiredBounds = undefined;\n    /** @private */\n\n    _this.measureChildren = true;\n    /**   @private  */\n\n    _this.prevRotateAngle = 0;\n    return _this;\n  }\n  /**\n   * returns whether the container has child elements or not\n   */\n\n\n  Container.prototype.hasChildren = function () {\n    if (this.children !== undefined && this.children.length > 0) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Measures the minimum space that the container requires\n   *\n   * @param {Size} availableSize\n   * @param {string} id\n   * @param {Function} callback\n   */\n\n\n  Container.prototype.measure = function (availableSize, id, callback) {\n    // measure the element and find the desired size\n    this.desiredBounds = undefined;\n    var desired = undefined;\n    var child;\n    var center = {\n      x: 0,\n      y: 0\n    };\n    var y;\n    var x;\n    var childBounds;\n\n    if (this.hasChildren()) {\n      //Measuring the children\n      for (var i = 0; i < this.children.length; i++) {\n        child = this.children[i];\n\n        if (child.horizontalAlignment === 'Stretch' && !availableSize.width) {\n          availableSize.width = child.bounds.width;\n        }\n\n        if (child.verticalAlignment === 'Stretch' && !availableSize.height) {\n          availableSize.height = child.bounds.height;\n        }\n\n        var force = child.horizontalAlignment === 'Stretch' || child.verticalAlignment === 'Stretch';\n\n        if (this.measureChildren || force || child instanceof Container && child.measureChildren !== undefined) {\n          child.measure(availableSize, id, callback);\n        }\n\n        childBounds = this.GetChildrenBounds(child);\n\n        if (child.horizontalAlignment !== 'Stretch' && child.verticalAlignment !== 'Stretch') {\n          if (this.desiredBounds === undefined) {\n            this.desiredBounds = childBounds;\n          } else {\n            this.desiredBounds.uniteRect(childBounds);\n          }\n        } else if (this.actualSize && !this.actualSize.width && !this.actualSize.height && !child.preventContainer && child.horizontalAlignment === 'Stretch' && child.verticalAlignment === 'Stretch') {\n          if (this.desiredBounds === undefined) {\n            this.desiredBounds = child.bounds;\n          } else {\n            this.desiredBounds.uniteRect(child.bounds);\n          }\n        }\n      }\n\n      if (this.desiredBounds !== undefined && this.rotateAngle !== 0) {\n        var offsetPt = {\n          x: this.desiredBounds.x + this.desiredBounds.width * this.pivot.x,\n          y: this.desiredBounds.y + this.desiredBounds.height * this.pivot.y\n        };\n        var newPoint = rotatePoint(this.rotateAngle, undefined, undefined, offsetPt);\n        this.desiredBounds.x = newPoint.x - this.desiredBounds.width * this.pivot.x;\n        this.desiredBounds.y = newPoint.y - this.desiredBounds.height * this.pivot.y;\n      }\n\n      if (this.desiredBounds) {\n        desired = new Size(this.desiredBounds.width, this.desiredBounds.height);\n      }\n    }\n\n    desired = this.validateDesiredSize(desired, availableSize);\n    this.stretchChildren(desired);\n    this.desiredSize = desired;\n    return desired;\n  };\n  /**\n   * Arranges the container and its children\n   *\n   * @param {Size} desiredSize  - provide the desiredSize value\n   */\n\n\n  Container.prototype.arrange = function (desiredSize) {\n    var child;\n    var bounds;\n    var childBounds = this.desiredBounds;\n\n    if (childBounds) {\n      var x = this.offsetX;\n      var y = this.offsetY;\n      this.offsetX = childBounds.x + childBounds.width * this.pivot.x;\n      this.offsetY = childBounds.y + childBounds.height * this.pivot.y; // container has rotateAngle\n\n      if (this.hasChildren()) {\n        //Measuring the children\n        for (var i = 0; i < this.children.length; i++) {\n          child = this.children[i];\n          var arrange = false;\n\n          if (child.horizontalAlignment === 'Stretch') {\n            child.offsetX = this.offsetX;\n            child.parentTransform = this.parentTransform + this.rotateAngle;\n\n            if (this.flip && this.elementActions & ElementAction.ElementIsGroup) {\n              child.parentTransform = this.flip === 'Horizontal' || this.flip === 'Vertical' ? -child.parentTransform : child.parentTransform;\n            }\n\n            arrange = true;\n          }\n\n          if (child.verticalAlignment === 'Stretch') {\n            child.offsetY = this.offsetY;\n            child.parentTransform = this.parentTransform + this.rotateAngle;\n            arrange = true;\n          }\n\n          if (arrange || this.measureChildren || child instanceof Container && child.measureChildren !== undefined) {\n            child.arrange(child.desiredSize);\n          }\n        }\n      }\n    }\n\n    this.actualSize = desiredSize;\n    this.updateBounds();\n    this.prevRotateAngle = this.rotateAngle;\n    return desiredSize;\n  }; //protected methods\n\n  /**\n   * Stretches the child elements based on the size of the container\n   *\n   * @param {Size} size  - provide the size value\n   */\n\n\n  Container.prototype.stretchChildren = function (size) {\n    if (this.hasChildren()) {\n      for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        if (child.horizontalAlignment === 'Stretch' || child.desiredSize.width === undefined) {\n          child.desiredSize.width = size.width - child.margin.left - child.margin.right;\n        }\n\n        if (child.verticalAlignment === 'Stretch' || child.desiredSize.height === undefined) {\n          child.desiredSize.height = size.height - child.margin.top - child.margin.bottom;\n        }\n\n        if (child instanceof Container) {\n          child.stretchChildren(child.desiredSize);\n        }\n      }\n    }\n  };\n  /**\n   * Considers the padding of the element when measuring its desired size\n   * @param {Size} size- provide the size value\n   */\n\n\n  Container.prototype.applyPadding = function (size) {\n    size.width += this.padding.left + this.padding.right;\n    size.height += this.padding.top + this.padding.bottom;\n  };\n  /**\n   * Finds the offset of the child element with respect to the container\n   *\n   * @param {DiagramElement} child - provide the child value\n   * @param {PointModel} center- provide the center value\n   */\n\n\n  Container.prototype.findChildOffsetFromCenter = function (child, center) {\n    var topLeft = {\n      x: center.x - child.desiredSize.width / 2,\n      y: center.y - child.desiredSize.height / 2\n    };\n    var offset = getOffset(topLeft, child); //Rotate based on child rotate angle\n\n    offset = rotatePoint(child.rotateAngle, center.x, center.y, offset); //Rotate based on parent pivot\n\n    offset = rotatePoint(this.rotateAngle + this.parentTransform, this.offsetX, this.offsetY, offset);\n    child.offsetX = offset.x;\n    child.offsetY = offset.y;\n  }; //private methods - check its need\n\n\n  Container.prototype.GetChildrenBounds = function (child) {\n    var childBounds;\n    var childSize = child.desiredSize.clone();\n    var diffAngle = child.rotateAngle - this.rotateAngle;\n    var refPoint = {\n      x: child.offsetX,\n      y: child.offsetY\n    };\n    var left = refPoint.x - childSize.width * child.pivot.x;\n    var top = refPoint.y - childSize.height * child.pivot.y;\n    var right = left + childSize.width;\n    var bottom = top + childSize.height;\n    var topLeft = {\n      x: left,\n      y: top\n    };\n    var topRight = {\n      x: right,\n      y: top\n    };\n    var bottomLeft = {\n      x: left,\n      y: bottom\n    };\n    var bottomRight = {\n      x: right,\n      y: bottom\n    };\n    topLeft = rotatePoint(child.rotateAngle, child.offsetX, child.offsetY, topLeft);\n    topRight = rotatePoint(child.rotateAngle, child.offsetX, child.offsetY, topRight);\n    bottomLeft = rotatePoint(child.rotateAngle, child.offsetX, child.offsetY, bottomLeft);\n    bottomRight = rotatePoint(child.rotateAngle, child.offsetX, child.offsetY, bottomRight);\n\n    if (this.rotateAngle !== 0) {\n      topLeft = rotatePoint(-this.rotateAngle, undefined, undefined, topLeft);\n      topRight = rotatePoint(-this.rotateAngle, undefined, undefined, topRight);\n      bottomLeft = rotatePoint(-this.rotateAngle, undefined, undefined, bottomLeft);\n      bottomRight = rotatePoint(-this.rotateAngle, undefined, undefined, bottomRight);\n    }\n\n    return Rect.toBounds([topLeft, topRight, bottomLeft, bottomRight]);\n  };\n\n  return Container;\n}(DiagramElement);\n\nexport { Container };","map":{"version":3,"sources":["/home/ubuntu*/Desktop/streamify/node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/container.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","DiagramElement","ElementAction","Thickness","Size","Rect","rotatePoint","getOffset","Container","_super","_this","apply","arguments","padding","desiredBounds","undefined","measureChildren","prevRotateAngle","hasChildren","children","length","measure","availableSize","id","callback","desired","child","center","x","y","childBounds","i","horizontalAlignment","width","bounds","verticalAlignment","height","force","GetChildrenBounds","uniteRect","actualSize","preventContainer","rotateAngle","offsetPt","pivot","newPoint","validateDesiredSize","stretchChildren","desiredSize","arrange","offsetX","offsetY","parentTransform","flip","elementActions","ElementIsGroup","updateBounds","size","_i","_a","margin","left","right","top","bottom","applyPadding","findChildOffsetFromCenter","topLeft","offset","childSize","clone","diffAngle","refPoint","topRight","bottomLeft","bottomRight","toBounds"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { DiagramElement } from '../elements/diagram-element';\nimport { ElementAction } from '../../enum/enum';\nimport { Thickness } from '../appearance';\nimport { Size } from '../../primitives/size';\nimport { Rect } from '../../primitives/rect';\nimport { rotatePoint, getOffset } from '../../utility/base-util';\n/**\n * Container module is used to group related objects\n */\nvar Container = /** @class */ (function (_super) {\n    __extends(Container, _super);\n    function Container() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Gets/Sets the space between the container and its immediate children\n         */\n        _this.padding = new Thickness(0, 0, 0, 0);\n        //private members\n        _this.desiredBounds = undefined;\n        /** @private */\n        _this.measureChildren = true;\n        /**   @private  */\n        _this.prevRotateAngle = 0;\n        return _this;\n    }\n    /**\n     * returns whether the container has child elements or not\n     */\n    Container.prototype.hasChildren = function () {\n        if (this.children !== undefined && this.children.length > 0) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Measures the minimum space that the container requires\n     *\n     * @param {Size} availableSize\n     * @param {string} id\n     * @param {Function} callback\n     */\n    Container.prototype.measure = function (availableSize, id, callback) {\n        // measure the element and find the desired size\n        this.desiredBounds = undefined;\n        var desired = undefined;\n        var child;\n        var center = { x: 0, y: 0 };\n        var y;\n        var x;\n        var childBounds;\n        if (this.hasChildren()) {\n            //Measuring the children\n            for (var i = 0; i < this.children.length; i++) {\n                child = this.children[i];\n                if (child.horizontalAlignment === 'Stretch' && !availableSize.width) {\n                    availableSize.width = child.bounds.width;\n                }\n                if (child.verticalAlignment === 'Stretch' && !availableSize.height) {\n                    availableSize.height = child.bounds.height;\n                }\n                var force = child.horizontalAlignment === 'Stretch' || child.verticalAlignment === 'Stretch';\n                if (this.measureChildren || force || (child instanceof Container && child.measureChildren !== undefined)) {\n                    child.measure(availableSize, id, callback);\n                }\n                childBounds = this.GetChildrenBounds(child);\n                if (child.horizontalAlignment !== 'Stretch' && child.verticalAlignment !== 'Stretch') {\n                    if (this.desiredBounds === undefined) {\n                        this.desiredBounds = childBounds;\n                    }\n                    else {\n                        this.desiredBounds.uniteRect(childBounds);\n                    }\n                }\n                else if (this.actualSize && !this.actualSize.width && !this.actualSize.height &&\n                    !child.preventContainer && child.horizontalAlignment === 'Stretch' && child.verticalAlignment === 'Stretch') {\n                    if (this.desiredBounds === undefined) {\n                        this.desiredBounds = child.bounds;\n                    }\n                    else {\n                        this.desiredBounds.uniteRect(child.bounds);\n                    }\n                }\n            }\n            if (this.desiredBounds !== undefined && this.rotateAngle !== 0) {\n                var offsetPt = {\n                    x: this.desiredBounds.x + this.desiredBounds.width * this.pivot.x,\n                    y: this.desiredBounds.y + this.desiredBounds.height * this.pivot.y\n                };\n                var newPoint = rotatePoint(this.rotateAngle, undefined, undefined, offsetPt);\n                this.desiredBounds.x = newPoint.x - this.desiredBounds.width * this.pivot.x;\n                this.desiredBounds.y = newPoint.y - this.desiredBounds.height * this.pivot.y;\n            }\n            if (this.desiredBounds) {\n                desired = new Size(this.desiredBounds.width, this.desiredBounds.height);\n            }\n        }\n        desired = this.validateDesiredSize(desired, availableSize);\n        this.stretchChildren(desired);\n        this.desiredSize = desired;\n        return desired;\n    };\n    /**\n     * Arranges the container and its children\n     *\n     * @param {Size} desiredSize  - provide the desiredSize value\n     */\n    Container.prototype.arrange = function (desiredSize) {\n        var child;\n        var bounds;\n        var childBounds = this.desiredBounds;\n        if (childBounds) {\n            var x = this.offsetX;\n            var y = this.offsetY;\n            this.offsetX = childBounds.x + childBounds.width * this.pivot.x;\n            this.offsetY = childBounds.y + childBounds.height * this.pivot.y;\n            // container has rotateAngle\n            if (this.hasChildren()) {\n                //Measuring the children\n                for (var i = 0; i < this.children.length; i++) {\n                    child = this.children[i];\n                    var arrange = false;\n                    if (child.horizontalAlignment === 'Stretch') {\n                        child.offsetX = this.offsetX;\n                        child.parentTransform = this.parentTransform + this.rotateAngle;\n                        if (this.flip && (this.elementActions & ElementAction.ElementIsGroup)) {\n                            child.parentTransform = (this.flip === 'Horizontal' || this.flip === 'Vertical') ?\n                                -child.parentTransform : child.parentTransform;\n                        }\n                        arrange = true;\n                    }\n                    if (child.verticalAlignment === 'Stretch') {\n                        child.offsetY = this.offsetY;\n                        child.parentTransform = this.parentTransform + this.rotateAngle;\n                        arrange = true;\n                    }\n                    if (arrange || this.measureChildren || (child instanceof Container && child.measureChildren !== undefined)) {\n                        child.arrange(child.desiredSize);\n                    }\n                }\n            }\n        }\n        this.actualSize = desiredSize;\n        this.updateBounds();\n        this.prevRotateAngle = this.rotateAngle;\n        return desiredSize;\n    };\n    //protected methods\n    /**\n     * Stretches the child elements based on the size of the container\n     *\n     * @param {Size} size  - provide the size value\n     */\n    Container.prototype.stretchChildren = function (size) {\n        if (this.hasChildren()) {\n            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (child.horizontalAlignment === 'Stretch' || child.desiredSize.width === undefined) {\n                    child.desiredSize.width = size.width - child.margin.left - child.margin.right;\n                }\n                if (child.verticalAlignment === 'Stretch' || child.desiredSize.height === undefined) {\n                    child.desiredSize.height = size.height - child.margin.top - child.margin.bottom;\n                }\n                if (child instanceof Container) {\n                    child.stretchChildren(child.desiredSize);\n                }\n            }\n        }\n    };\n    /**\n     * Considers the padding of the element when measuring its desired size\n     * @param {Size} size- provide the size value\n     */\n    Container.prototype.applyPadding = function (size) {\n        size.width += this.padding.left + this.padding.right;\n        size.height += this.padding.top + this.padding.bottom;\n    };\n    /**\n     * Finds the offset of the child element with respect to the container\n     *\n     * @param {DiagramElement} child - provide the child value\n     * @param {PointModel} center- provide the center value\n     */\n    Container.prototype.findChildOffsetFromCenter = function (child, center) {\n        var topLeft = { x: center.x - child.desiredSize.width / 2, y: center.y - child.desiredSize.height / 2 };\n        var offset = getOffset(topLeft, child);\n        //Rotate based on child rotate angle\n        offset = rotatePoint(child.rotateAngle, center.x, center.y, offset);\n        //Rotate based on parent pivot\n        offset = rotatePoint(this.rotateAngle + this.parentTransform, this.offsetX, this.offsetY, offset);\n        child.offsetX = offset.x;\n        child.offsetY = offset.y;\n    };\n    //private methods - check its need\n    Container.prototype.GetChildrenBounds = function (child) {\n        var childBounds;\n        var childSize = child.desiredSize.clone();\n        var diffAngle = child.rotateAngle - this.rotateAngle;\n        var refPoint = { x: child.offsetX, y: child.offsetY };\n        var left = refPoint.x - childSize.width * child.pivot.x;\n        var top = refPoint.y - childSize.height * child.pivot.y;\n        var right = left + childSize.width;\n        var bottom = top + childSize.height;\n        var topLeft = { x: left, y: top };\n        var topRight = { x: right, y: top };\n        var bottomLeft = { x: left, y: bottom };\n        var bottomRight = { x: right, y: bottom };\n        topLeft = rotatePoint(child.rotateAngle, child.offsetX, child.offsetY, topLeft);\n        topRight = rotatePoint(child.rotateAngle, child.offsetX, child.offsetY, topRight);\n        bottomLeft = rotatePoint(child.rotateAngle, child.offsetX, child.offsetY, bottomLeft);\n        bottomRight = rotatePoint(child.rotateAngle, child.offsetX, child.offsetY, bottomRight);\n        if (this.rotateAngle !== 0) {\n            topLeft = rotatePoint(-this.rotateAngle, undefined, undefined, topLeft);\n            topRight = rotatePoint(-this.rotateAngle, undefined, undefined, topRight);\n            bottomLeft = rotatePoint(-this.rotateAngle, undefined, undefined, bottomLeft);\n            bottomRight = rotatePoint(-this.rotateAngle, undefined, undefined, bottomRight);\n        }\n        return Rect.toBounds([topLeft, topRight, bottomLeft, bottomRight]);\n    };\n    return Container;\n}(DiagramElement));\nexport { Container };\n"]},"metadata":{},"sourceType":"module"}